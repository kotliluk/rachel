{"version":3,"sources":["serviceWorker.ts","components/tooltipButton.tsx","error/errorWithTextRange.ts","error/raSyntaxError.ts","error/raSemanticError.ts","utils/fontUtils.ts","utils/whisperUtils.ts","components/xTextArea.tsx","utils/math.ts","error/errorFactory.ts","relation/relation.ts","error/codeError.ts","expression/exprTokens.ts","utils/stringUtils.ts","ratree/raTreeNode.ts","ratree/relationNode.ts","types/indexedString.ts","utils/indexedStringUtils.ts","ratree/unaryNode.ts","relation/row.ts","utils/keywords.ts","vetree/comparingOperator.ts","ratree/projectionNode.ts","types/isToISMap.ts","ratree/renameNode.ts","vetree/veTreeNode.ts","vetree/logicalOperator.ts","vetree/computingOperator.ts","vetree/literalValue.ts","vetree/referenceValue.ts","expression/valueTokens.ts","expression/valueParser.ts","ratree/binaryNode.ts","ratree/raTreeTools.ts","ratree/antijoinNode.ts","ratree/selectionNode.ts","ratree/outerJoinNode.ts","ratree/cartesianProductNode.ts","ratree/divisionNode.ts","ratree/naturalJoinNode.ts","ratree/setOperationNode.ts","ratree/thetaJoinNode.ts","expression/exprParser.ts","ratree/raTreeFactory.ts","components/textInput.tsx","components/messageBox.ts","components/expressionSection.tsx","components/resultRelationTable.tsx","components/evaluationTree.tsx","utils/fileDialog.ts","types/nnToSMap.ts","relation/storedRelation.ts","relation/columnType.ts","relation/relationStoreManager.ts","types/csvSupport.ts","components/resultSection.tsx","expression/expressionStoreManager.ts","project/samples.ts","components/managementSection.tsx","project/project.ts","expression/expression.ts","project/projectStoreManager.ts","utils/localStorage.ts","types/supportedLanguage.ts","batch/batchProcessor.ts","utils/dateUtils.ts","components/editRelationTable.tsx","components/relationsSection.tsx","utils/mail.ts","components/mainScreen.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TooltipButton","className","this","props","onClick","style","text","tooltipClassName","tooltipStyle","event","stopPropagation","preventDefault","tooltip","React","Component","ErrorWithTextRange","msg","range","Error","insertRangeIfUndefined","err","undefined","RASyntaxError","captureStackTrace","name","RASemanticError","computeFontSizeInPx","fontFamily","fontSize","div","document","createElement","setAttribute","innerText","documentElement","appendChild","divWidth","clientWidth","divHeight","clientHeight","remove","fontWidth","length","fontHeight","getStartOfWordBeforeIndex","str","index","prefixText","slice","i","charAt","cssConstants","getComputedStyle","querySelector","getPropertyValue","lineHeight","Number","numsBackgroundLight","numsBackgroundDark","numsColorLight","numsColorDark","XTextArea","textarea","start","selectionStart","end","selectionEnd","setSelectionRange","activeElement","id","focus","getElementById","table","classList","add","tr","td1","td2","ta","mouseIsDown","placeholder","value","canvas","width","canvasWidth","canvasLines","whisperDiv","isShown","selectedIndex","changeSelected","indexDiff","setSelected","newIndex","n","m","childElementCount","children","getSelectedWhisper","paintLineNumbers","darkTheme","height","ctx","getContext","fillStyle","fillRect","scrollHeight","font","linesCount","fillText","e","update","lines","createWhisper","whispers","hideWhisper","innerHTML","forEach","whisper","onclick","ondblclick","insertCurrentSelectedWhisper","onChange","notAutoShowWhisper","moveWhisper","cursorLineAndColumn","getPositionLineAndColumn","cursorDistanceFromTATotalTop","line","cursorDistanceFromTATotalLeft","column","yPos","scrollTop","xPos","scrollLeft","getBoundingClientRect","y","innerHeight","currWhisper","beforeAdd","afterAdd","newCursorPos","errorDivs","moveErrors","highlight","startLine","rangeLength","startColumn","x","innerWidth","messageSpan","updateErrors","ranges","pushHighlight","parentElement","push","createHighlightDiv","getLineLength","addEventListener","onscroll","onmousedown","onmouseup","onmousemove","oninput","ev","target","onkeydown","key","ctrlKey","cursor","onCtrlInput","errors","prevProps","position","textBeforeCursor","lastNewLine","lastIndexOf","newLinesFound","lineStart","lineEnd","newEvent","MouseEvent","type","dispatchEvent","span","CodeErrorCodes","SemanticErrorCodes","SyntaxErrorCodes","Relation","columns","Map","columnNames","rows","finishedSchema","hasColumn","hasFinishedSchema","set","some","cn","f","row","isEqual","getTypes","finishSchema","finish","r","equals","map","s","join","get","getOrderedPrintValues","other","Set","CodeError","codeErrMsgEng","resultSection_getCurrentRelation_nodeIndexNotFound","resultSection_getCurrentRelation_evalError","resultSection_saveResultRelation_nullRelationToSave","resultSection_handleAddRelation_nullRelationToAdd","row_getOrderedValues_absentColumn","valueParser_rpnToVETreeRecursive_unexpectedToken","exprParser_isValidSequence_unexpectedToken","exprParser_rpnToVETreeRecursive_unexpectedToken","exprParser_parseTokensForWhisper_thetaJoinBranchError","exprParser_parseTokensForWhisper_projectionBranchError","semanticErrMsgEng","exprParser_parse_relationNotDefined","binaryNode_eval_commonColumnsInSources","setOperationNode_eval_notEqualColumnsInSources","divisionNode_eval_rightColumnsNotSubsetOfLeft","divisionNode_eval_rightColumnsNotProperSubsetOfLeft","renameNode_eval_absentOriginalColumn","renameNode_eval_changeToDuplicitName","projectionNode_eval_absentColumn","referenceValue_eval_absentColumn","syntaxErrMsgEng","exprParser_parse_emptyStringGiven","exprParser_parseTokens_outerJoinWhenNullNotSupported","exprParser_parseTokens_unexpectedPart","exprParser_parseTokens_bothBranchesError","exprParser_rpnToVETree_invalidExpression","exprParser_assertValidInfixTokens_invalidParentheses","exprParser_assertValidInfixTokens_invalidStart","exprParser_assertValidInfixTokens_invalidEnd","exprParser_assertValidInfixTokens_relationAfterRelation","exprParser_assertValidInfixTokens_relationAfterUnary","exprParser_assertValidInfixTokens_relationAfterClosing","exprParser_assertValidInfixTokens_unaryAfterBinary","exprParser_assertValidInfixTokens_unaryAfterOpening","exprParser_assertValidInfixTokens_binaryAfterBinary","exprParser_assertValidInfixTokens_binaryAfterOpening","exprParser_assertValidInfixTokens_openingAfterRelation","exprParser_assertValidInfixTokens_openingAfterUnary","exprParser_assertValidInfixTokens_openingAfterClosing","exprParser_assertValidInfixTokens_closingAfterBinary","exprParser_assertValidInfixTokens_closingAfterOpening","valueParser_parseTokens_emptyInput","valueParser_parseTokens_unsupportedNull","valueParser_parseTokens_unexpectedPart","valueParser_toRPN_missingOpeningParenthesis","valueParser_toRPN_missingClosingParenthesis","valueParser_rpnToVETree_invalidExpression","valueParser_rpnToVETree_invalidStart","valueParser_rpnToVETree_invalidEnd","valueParser_rpnToVETree_literalAfterLiteral","valueParser_rpnToVETree_literalAfterReference","valueParser_rpnToVETree_literalAfterClosing","valueParser_rpnToVETree_referenceAfterLiteral","valueParser_rpnToVETree_referenceAfterReference","valueParser_rpnToVETree_referenceAfterClosing","valueParser_rpnToVETree_notAfterLiteral","valueParser_rpnToVETree_notAfterReference","valueParser_rpnToVETree_notAfterClosing","valueParser_rpnToVETree_binaryAfterOperator","valueParser_rpnToVETree_binaryAfterOpening","valueParser_rpnToVETree_openingAfterLiteral","valueParser_rpnToVETree_openingAfterReference","valueParser_rpnToVETree_openingAfterClosing","valueParser_rpnToVETree_closingAfterOperator","valueParser_rpnToVETree_closingAfterOpening","parser_nextBorderedPart_missingClosingChar","parser_skipWhitespacesAndChar_charNotFound","projectionNode_constructor_invalidProjectionString","projectionNode_parseProjection_invalidProjectedColumnName","renameNode_parseChanges_invalidRenameString","renameNode_parseChanges_missingArrow","renameNode_parseChanges_invalidNewName","renameNode_parseChanges_keywordNewName","renameNode_parseChanges_multipleRenameOfTheColumn","selectionNode_constructor_invalidString","selectionNode_constructor_emptyString","selectionNode_eval_resultNotBoolean","thetaJoinNode_constructor_invalidString","thetaJoinNode_constructor_emptyString","thetaJoinNode_eval_resultNotBoolean","thetaSemiJoinNode_constructor_invalidString","thetaSemiJoinNode_constructor_emptyString","thetaSemiJoinNode_eval_resultNotBoolean","comparingOperator_eval_differentInputTypes","computingOperator_eval_inputTypesNotNumbers","logicalOperator_eval_leftInputNotBoolean","logicalOperator_eval_rightInputNotBoolean","ErrorFactory","code","params","assertParamsCount","joinStringArrays","expectedCount","a","b","aLen","toConcat","Array","concat","ExprToken","getRange","ParenthesisToken","OpeningParenthesis","ClosingParenthesis","RelationToken","UnaryOperatorToken","selection","projection","rename","BinaryOperatorToken","precedence","precedenceLevelF","precedenceLevelD","precedenceLevelE","precedenceLevelA","precedenceLevelB","precedenceLevelC","StringUtils","split","every","c","isLetter","isNameChar","res","exec","toLowerCase","toUpperCase","isDigit","test","first","second","substring","char","digitFound","dotFound","backslashes","curChar","syntaxError","escape","depth","inQuotes","nesting","escapeCount","indexOf","charFound","insideQuotes","RATreeNode","resultRelation","eval","RelationNode","relation","cursorIndex","result","getName","IndexedString","chars","startIndex","arr","ic","separator","separatorIndexes","empty","new","isEmpty","isNaN","NaN","getFirstNonNaNIndex","getLastNonNaNIndex","RangeError","sepLen","strSplit","prefixSum","strSplitLenMinusOne","ps","indexAt","_start","_end","newFromArray","trimStr","trim","strings","is","searchString","startsWith","endsWith","searchValue","replaceValue","replace","fromIndex","regexp","filter","lastIndex","getLastIndex","IndexedStringUtils","isWord","toString","isName","isWhitespacesOnly","isNumber","strParts","nextWord","nextName","nextNonWhitespacePart","nextNumber","nextQuotedString","nextBorderedPart","skippedStr","skipWhitespacesAndChar","getNonNaNRange","splitToLines","toJoin","UnaryNode","subtree","Row","types","values","finished","keys","has","orderedColumns","ret","codeError","String","forbiddenColumnNames","forbiddenRelationNames","isForbiddenColumnName","ComparingOperatorType","ProjectionNode","stringRange","doThrow","parts","part","isEvaluated","source","getResult","projectedIndexed","parseProjection","semanticError","projected","p","forEachColumn","addColumn","getRows","newRow","getColumns","getValues","addValue","addRow","fakeEval","getColumnNames","absent","strName","printInLine","getOperationSymbol","ISToISMap","keyValue","delete","clear","size","RenameNode","handleError","words","w","beforeError","afterError","changes","parseChanges","toChange","returned","regexMatch","duplicit","after","before","beforeStr","afterStr","VETreeNode","LogicalOperatorType","ComparingOperator","operator","left","right","equal","nonEqual","less","more","lessOrEqual","moreOrEqual","leftResult","rightResult","ComputingOperatorType","LogicalOperator","and","or","not","LiteralValue","ReferenceValue","columnName","getValue","getType","ComputingOperator","plus","minus","multiplication","division","ValueToken","OperatorToken","LogicalNotToken","LogicalAndToken","LogicalOrToken","ComputingMultiplicationToken","ComputingDivisionToken","ComputingPlusToken","ComputingMinusToken","ComparingToken","OpeningParentheses","ClosingParentheses","LiteralToken","ReferenceToken","ValueParser","nullValuesSupport","tokens","parseTokens","assertValidInfixTokens","simplify","rpn","toRPN","rpnToVETree","token","rest","i2","token1","token2","notIndexes","indexesToRemove","t","rpnQueue","operatorsStack","pop","curToken","rpnToVETreeRecursive","deduct","multiply","divide","JSON","stringify","BinaryNode","leftSubtree","rightSubtree","depthSearch","root","findIndexInTree","node","getSubtree","leftSearch","getLeftSubtree","getRightSubtree","getTreeDepth","Math","max","isInRangeAndNotInQuotes","len","cursorIndexInStr","warn","AntijoinType","SelectionNode","boolExpr","parse","bool","newResult","fakeParse","OuterJoinType","AntijoinNode","rowsToKeep","rowsToHelp","leftSource","rightSource","commonColumns","lc","keptRow","helpRow","fakeEvalBinary","CartesianProductNode","leftRow","rightRow","leftColumn","DivisionNode","leftColumns","rightColumns","getSchemaString","resultColumns","getNamesSchemaString","leftRows","rightRows","testRow","lr","entries","NaturalJoinType","OuterJoinNode","full","SetOperationType","NaturalJoinNode","leftSemi","natural","rightSemi","ThetaJoinType","SetOperationNode","union","intersection","typeStr","getTypeStr","rr","AssertType","ThetaJoinNode","condition","getOperationName","bothSourceColumns","booleanResult","sourceColumns","RATreeFactory","unaryClass","expr","binaryClass","difference","ExprParser","relations","indexedExpr","deleteCommentLines","THROW_STRICT","rpnToRATree","fakeParseTokens","NOT_THROW","innerResult","selectionExpected","alternativeTokens","errorAlternative","thetaJoin","message","rightThetaSemijoin","errorRange","fullOuterJoin","leftOuterJoin","rightOuterJoin","leftSemijoin","rightSemijoin","naturalJoin","cartesianProduct","leftAntijoin","rightAntijoin","leftThetaSemijoin","THROW_NOT_STRICT","ignored","restStartIndex","getNextIndexOrNaN","recursiveReturn","operatorEndIndex","containsAny","relationStartIndex","relationEndIndex","missing","splice","rpnToRATreeRecursive","createUnary","createBinary","TextInput","inputRef","handleChange","disable","forbidden","setState","buttonDisable","handleKeyDown","handleSubmit","current","blur","onSubmit","createRef","htmlFor","label","ref","spellCheck","autoComplete","onKeyDown","disabled","buttonText","boxMargin","MessageBox","box","visibility","onmouseenter","clearHideTimeout","onmouseleave","setHideTimeout","paragraph","button","hideBox","moveBox","body","firstElementChild","toggle","display","hideTimeout","init","hideIntervalId","setTimeout","clearTimeout","ExpressionSection","unaryButtons","shift","setOperatorsButtons","innerJoinsButtons","outerJoinsButtons","divisionButton","specialButtons","textAreaRef","lastChange","lastWhisperAndErrorsUpdate","whispersAndErrorsUpdateRate","getCurExpr","evalExpr","tree","expressions","currentExpressionIndex","onEval","errorRanges","er","showError","newExpression","onNewExpression","deleteExpression","onDeleteExpression","saveExpressions","onExportExpressions","loadExpressions","onImportExpressions","addSpecialString","getSelection","firstPart","secondPart","newPosition","newStr","handleExprChange","setSelection","onDone","Date","now","handleCtrlInput","updateWhispersAndErrors","textArea","isFocused","fakeParseResult","wordBeforeCursor","helpArray","likelihood","wordStart","wordEnd","sort","help","sortWhispers","handleExprNameChange","onUnexpectedError","sectionClicked","setInterval","onSelectDifferentExpression","createButton","createOpButtons","buttonProps","prop","marginRight","handleSelectDifferentExpression","minWidth","marginLeft","padding","ResultRelationTable","getOrderByText","orderDir","orderBy","prevState","snapshot","updateOrderBy","getRowsCount","colSpan","sortCol","aValue","bValue","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","localeCompare","headerRow","createHeaderRow","createRows","EvaluationTree","TreeComponent","raTree","selected","nodeHeight","backgroundColorLight","backgroundColorDark","textColorLight","textColorDark","selectedNodeColorLight","unselectedNodeColorLight","selectedNodeColorDark","unselectedNodeColorDark","TreeNodeComponent","useTooltip","tooltipOpen","showTooltip","hideTooltip","nodeWidth","data","title","symbol","Group","top","rx","fill","onMouseOver","tooltipLeft","tooltipTop","onMouseOut","dy","textAnchor","pointerEvents","treeDepth","margin","bottom","yMax","xMax","indexes","parseTreeForDisplayHelper","maxNodeTextLength","parseTreeForDisplay","hierarchy","Tree","links","link","LinkVertical","stroke","strokeWidth","strokeOpacity","descendants","FileDialog","accept","Promise","resolve","element","fileInput","firstChild","file","files","reader","FileReader","onload","readAsText","click","openFilesHelper","fileInfo","readFile","NNToSMap","entry","parseKey","StoredRelation","columnTypes","columnCount","rowCount","actual","revertState","toDataObject","recomputeErrors","isStoredRelationData","d","checkColumnNames","checkRowInput","columnIndex","reduce","agg","rowIndex","input","lower","_","rowInput","addNewColumn","columnType","checkColumnTypes","obj","isArray","o","isSupportedColumnType","RelationStoreManager","openFiles","skipped","csvToRelation","createValidName","filename","valueSeparator","zip","JSZip","relationToCsv","generateAsync","content","saveAs","blob","Blob","findValueSeparator","nextRowInput","inString","names","getColumnTypes","ResultSection","sectionRef","getCurrentRelation","currentNode","evaluationTreeRoot","handleSelectedNodeChange","exportEvalTreeAsPng","svg","rect","options","expressionName","downloadSVG","exportRelation","save","fromRelation","csvValueSeparator","addRelation","onAddResult","relationType","selectedNode","tableTitle","ExpressionStoreManager","skippedExpressions","loadedFiles","skippedFiles","splitExpressionNameAndText","firstNewLineIndex","firstRow","textContent","samples","project","getSamples","ManagementSection","onBatch","onLoadProject","onSaveProject","settingsMenu","sample","onLoadSample","createSamplesButton","checked","onNullValuesSupportChange","onCsvValueSeparatorChange","onDarkModeChange","createSettingsButton","href","rel","isProjectObject","isExpression","copyProject","proj","exp","ProjectStoreManager","reject","openFile","defaultLanguage","defaultDarkMode","LocalStorage","storageSupported","storedSeparator","localStorage","getItem","setItem","language","isInit","Storage","BatchProcessor","time","reports","processed","downloadReports","report","timeEnd","processNext","processFile","storedData","storedRelation","fromData","isValid","createRelation","zeroOperations","addOperations","counts","antijoin","count","cartesian","outerJoin","semijoin","setOperation","thetaSemijoin","binaryOperations","unaryOperations","operationsOfTree","operationOfUnaryNode","operationOfBinaryNode","status","parseRelations","exprParser","exprCount","processExpression","ops","reportHeader","formatRelations","parser","evaluationTree","contentString","operations","date","total","binary","unary","getDate","padStart","getMonth","getFullYear","getHours","getMinutes","cellPaddingSides","inputMarginSides","EditRelationTable","containerRef","tableHeadRowRef","columnWidths","handleInputResize","inputElement","scrollWidth","getErrors","setSelectedInput","selectedColumn","selectedRow","moveSelectedInputRight","getColumnCount","moveSelectedInputLeft","moveSelectedInputUp","moveSelectedInputDown","getRowCount","onColumnNameChange","onColumnTypeChange","onRowInputChange","handleNewColumn","onNewColumn","scrollTo","handleNewRow","onNewRow","handleDeleteColumn","onDeleteColumn","handleDeleteRow","onDeleteRow","createInput","autoFocus","createDeleteButton","callback","componentDidUpdate","headRow","cells","cell","rowData","createTooltip","rowSpan","border","createNamesRow","createTypesRow","createAddRow","RelationsSection","getCurRel","storedRelations","storedRelationIndex","handleRelationNameChange","onRelationNameChange","loadRelation","onLoadRelation","loadAllRelations","onLoadAllRelations","exportRelations","onExportRelations","importRelations","onImportRelations","deleteRelation","onDeleteStoredRelation","revertRelation","onRevertRelation","newRelation","onNewRelation","deleteAllLoadedRelations","onDeleteLoadedRelations","createRelationMenuButtons","actuality","isActual","handleSelectDifferentRelation","onSelectDifferentRelation","sr","canRevert","getRevertName","Mail","accessToken","subject","data_js","access_token","request","XMLHttpRequest","onreadystatechange","readyState","response","toParams","open","setRequestHeader","send","encodeURIComponent","MainScreen","expressionSectionRef","reportUnexpectedError","postMail","stack","loadedRelations","selectedRelation","selectedExpression","loadProject","evaluatedExpressionName","updateExpressionsErrors","ensureUniqueRelationName","handleBatch","process","handleLoadProject","load","handleSaveProject","handleLoadSampleProject","handleNullValuesSupportChange","setNullValuesSupport","handleCsvValueSeparatorChange","setCsvValueSeparator","handleLanguageChange","setLanguage","handleDarkModeChange","setDarkMode","setName","handleRelationColumnNameChange","setColumnName","handleRelationColumnTypeChange","setColumnType","handleRelationRowInputChange","setRowInput","handleRelationNewRow","addNewRow","handleRelationNewColumn","handleRelationDeleteRow","deleteRow","handleRelationDeleteColumn","deleteColumn","handleCreateNewRelation","handleDeleteRelation","handleRevertRelation","revert","handleDeleteLoadedRelations","setActual","handleExportRelations","handleImportRelations","info","countBefore","handleLoadRelation","currRelation","handleLoadAllRelations","loaded","msgPart2","expressionSection","handleExprEval","handleExprTextChange","handleCreateNewExpression","handleDeleteExpression","handleExportExpressions","handleImportExpressions","addResultRelation","getDarkMode","getCsvValueSeparator","getLanguage","resultSection","onLanguageChange","ReactDOM","render","StrictMode","URL","origin","fetch","headers","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.915c13e7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\ninterface TooltipButtonProps {\r\n    // text on the button\r\n    text: string,\r\n    // handler of the button click\r\n    onClick: () => void,\r\n    // css class of the button\r\n    className: string,\r\n    // inline styling for button\r\n    style?: React.CSSProperties,\r\n\r\n    // text of the tooltip\r\n    tooltip: string,\r\n    // css class of the tooltip\r\n    tooltipClassName: string,\r\n    // inline styling for tooltip\r\n    tooltipStyle?: React.CSSProperties,\r\n}\r\n\r\ninterface TooltipButtonState {\r\n}\r\n\r\n/**\r\n * Button with a tooltip text.\r\n */\r\nexport class TooltipButton extends React.Component<TooltipButtonProps, TooltipButtonState> {\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                className={this.props.className}\r\n                onClick={this.props.onClick}\r\n                style={this.props.style}\r\n                >{this.props.text}\r\n                <span\r\n                    className={this.props.tooltipClassName}\r\n                    style={this.props.tooltipStyle}\r\n                    onClick={event => {\r\n                        event.stopPropagation();\r\n                        event.preventDefault();\r\n                    }}\r\n                >{this.props.tooltip}</span>\r\n            </button>\r\n        );\r\n    }\r\n}","/**\r\n * Error with optional text range of the error.\r\n */\r\nexport default class ErrorWithTextRange extends Error {\r\n    constructor(msg: string, public range?: {start: number, end: number} | undefined) {\r\n        super(msg);\r\n    }\r\n}\r\n\r\n/**\r\n * If the given error is ErrorWithTextRange instance and has undefined range, sets its range to given value.\r\n * Returns (possibly modified) input error.\r\n *\r\n * @param err\r\n * @param range\r\n */\r\nexport function insertRangeIfUndefined<T>(err: T, range: {start: number, end: number} | undefined): T {\r\n    if (err instanceof ErrorWithTextRange && err.range === undefined) {\r\n        err.range = range;\r\n    }\r\n    return err;\r\n}","import ErrorWithTextRange from \"./errorWithTextRange\";\r\n\r\n/**\r\n * Syntax error in an expression structure.\r\n */\r\nexport default class RASyntaxError extends ErrorWithTextRange {\r\n    /**\r\n     * @param msg Adds \"Syntax error: \" before given message\r\n     * @param range optional text range of the error\r\n     */\r\n    constructor(msg: string, range: {start: number, end: number} | undefined) {\r\n        super(\"Syntax error: \" + msg, range);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, RASyntaxError);\r\n        }\r\n        this.name = 'RASyntaxError';\r\n    }\r\n}","import ErrorWithTextRange from \"./errorWithTextRange\";\r\n\r\n/**\r\n * Semantic error in an expression structure.\r\n */\r\nexport default class RASemanticError extends ErrorWithTextRange {\r\n    /**\r\n     * @param msg Adds \"Semantic error: \" before given message\r\n     * @param range optional text range of the error\r\n     */\r\n    constructor(msg: string, range: {start: number, end: number} | undefined) {\r\n        super(\"Semantic error: \" + msg, range);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, RASemanticError);\r\n        }\r\n        this.name = 'RASemanticError';\r\n    }\r\n}","/**\r\n * Computes width (average on sample of characters) and its height of the given font with given size in pixels.\r\n *\r\n * @param fontFamily\r\n * @param fontSize\r\n */\r\nexport function computeFontSizeInPx(fontFamily: string, fontSize: string): {fontWidth: number, fontHeight: number} {\r\n    const text: string = \"0123456789qwertyuiopasdfghjkllzxcvbnmQWERTYUIOOPASDFGHJKLLZXCVBNM!@#$%^&*()_+[];',./\";\r\n    const div = document.createElement(\"div\");\r\n    div.setAttribute('style', `font-family: ${fontFamily}; font-size: ${fontSize}; position: absolute; white-space: nowrap;`);\r\n    div.innerText = text;\r\n    document.documentElement.appendChild(div);\r\n    const divWidth: number = div.clientWidth;\r\n    const divHeight: number = div.clientHeight;\r\n    div.remove();\r\n    return { fontWidth: divWidth / text.length, fontHeight: divHeight };\r\n}","/**\r\n * Returns start index of the word before given index in the given string.\r\n *\r\n * @param str\r\n * @param index\r\n */\r\nexport function getStartOfWordBeforeIndex(str: string, index: number): number {\r\n    const prefixText: string = str.slice(0, index);\r\n    let i: number = prefixText.length - 1;\r\n    while (true) {\r\n        // if non-name-character is reached\r\n        if (!prefixText.charAt(i).match(/\\w/)) {\r\n            ++i;\r\n            break;\r\n        }\r\n        if (i === 0) {\r\n            break;\r\n        }\r\n        --i;\r\n    }\r\n    return i;\r\n}\r\n\r\n/**\r\n * Returns sorted given array of whispers with respect to given last word before cursor.\r\n * Matched word parts in the whispers are highlighted by CSS span. Not-matched words are made grey.\r\n */\r\nexport function sortWhispers(whispers: string[], wordBeforeCursor: string): string[] {\r\n    // values for sorting whispers\r\n    const startsWithWord: number = 2;\r\n    const containsWord: number = 1;\r\n    // creates help array with whisper likelihoods and highlighted matched parts\r\n    const helpArray: {whisper: string, likelihood: number}[] = whispers.map(whisper => {\r\n        let likelihood = 0;\r\n        const wordStart = whisper.toLowerCase().indexOf(wordBeforeCursor.toLowerCase());\r\n        if (wordStart > -1) {\r\n            likelihood += wordStart === 0 ? startsWithWord : containsWord;\r\n            const wordEnd = wordStart + wordBeforeCursor.length;\r\n            whisper = whisper.slice(0, wordStart) + \"<span class='whisper-matched-word'>\" +\r\n                whisper.slice(wordStart, wordEnd) + \"</span>\" + whisper.slice(wordEnd);\r\n        }\r\n        if (likelihood === 0) {\r\n            whisper = \"<span class='whisper-rejected-word'>\" + whisper + \"</span>\"\r\n        }\r\n        return {whisper, likelihood};\r\n    });\r\n    if (wordBeforeCursor !== \"\") {\r\n        helpArray.sort((x, y) => y.likelihood - x.likelihood);\r\n    }\r\n    return helpArray.map(help => help.whisper);\r\n}","import React from \"react\";\r\nimport './css/xTextArea.css';\r\nimport {mod} from \"../utils/math\";\r\nimport {computeFontSizeInPx} from \"../utils/fontUtils\";\r\nimport {getStartOfWordBeforeIndex} from \"../utils/whisperUtils\";\r\n\r\ninterface XTextAreaProps {\r\n    // id of the component\r\n    id: string;\r\n    // current text content of the textarea\r\n    text: string;\r\n    // text to be shown as textarea placeholder\r\n    placeholder: string;\r\n    // error messages and ranges to be highlighted in text area\r\n    errors: {start: number, end: number, msg: string}[];\r\n    // strings whispered to the user to be added at the current position\r\n    whispers: string[];\r\n    // handler of text change\r\n    onChange: (text: string, cursorIndex: number) => void;\r\n    // handler of input with Ctrl key\r\n    onCtrlInput: (ev: KeyboardEvent) => void;\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean;\r\n}\r\n\r\ninterface XTextAreaState {}\r\n\r\n/**\r\n * HTMLTextAreaElement extended for painting number lines, inserting strings given from parent and whispering.\r\n */\r\ntype ExtendedHTMLTextArea = HTMLTextAreaElement & {\r\n    /**\r\n     * (Re)paints line numbers next to textarea.\r\n     *\r\n     * @param darkTheme style to be applied to numbers\r\n     */\r\n    paintLineNumbers: (darkTheme: boolean) => void,\r\n    // reference to canvas element used to paint line numbers\r\n    canvasLines: HTMLCanvasElement,\r\n    // true when the mouse button is clicked down\r\n    mouseIsDown: boolean,\r\n\r\n    /**\r\n     * Updates textarea content to the given value. Updates number of lines.\r\n     */\r\n    update: (value: string, darkTheme: boolean) => void,\r\n    // number of lines in the textarea\r\n    linesCount: number,\r\n\r\n    /**\r\n     * Whispers given array of strings to the user at the current cursor position.\r\n     *\r\n     * @param toWhisper\r\n     */\r\n    createWhisper: (whispers: string[]) => void,\r\n    /**\r\n     * Moves the WhisperDiv to be located next to the current cursor position.\r\n     * The WhisperDiv is moved only if the whisperDiv.isShown is true.\r\n     */\r\n    moveWhisper: () => void,\r\n    /**\r\n     * Hides the WhisperDiv (whisperDiv.isShown is set to false).\r\n     */\r\n    hideWhisper: () => void,\r\n    /**\r\n     * Inserts current selected whisper.\r\n     *\r\n     * @param onChange callback to the parent after text change\r\n     */\r\n    insertCurrentSelectedWhisper: (onChange: (text: string, cursorIndex: number) => void) => void,\r\n    // true when the whisper should not be shown automatically (e.g., after pressing Enter)\r\n    notAutoShowWhisper: boolean,\r\n    // reference to whisper div\r\n    whisperDiv: WhisperDiv,\r\n\r\n    /**\r\n     * Creates error div elements for given ranges.\r\n     */\r\n    updateErrors: (ranges: {start: number, end: number, msg: string}[]) => void,\r\n    /**\r\n     * Moves error div elements to current position.\r\n     */\r\n    moveErrors: () => void,\r\n    // div elements for highlighting errors\r\n    errorDivs: ErrorDiv[]\r\n};\r\n\r\n/**\r\n * HTMLDivElement extended by functions for easy whispering.\r\n */\r\ntype WhisperDiv = HTMLDivElement & {\r\n    // true when the whisper should be shown\r\n    isShown: boolean,\r\n    // index of the selected whisper\r\n    selectedIndex: number,\r\n    /**\r\n     * Updates selected whisper by given difference. Removes highlights from previous highlighted whisper and\r\n     * highlights the new selected. The new index is modulo actual whisper count. The function does nothing, when\r\n     * there no whispers at the moment.\r\n     *\r\n     * @param indexDiff\r\n     */\r\n    changeSelected: (indexDiff: number) => void,\r\n    /**\r\n     * Updates selected whisper to given index. Removes highlights from previous highlighted whisper and\r\n     * highlights the new selected. The new index is modulo actual whisper count. The function does nothing, when\r\n     * there no whispers at the moment.\r\n     *\r\n     * @param newIndex\r\n     */\r\n    setSelected: (newIndex: number) => void,\r\n    /**\r\n     * Returns current selected whisper or undefined, when no whisper is selected.\r\n     */\r\n    getSelectedWhisper: () => string | undefined\r\n};\r\n\r\ntype ErrorDiv = HTMLDivElement & {\r\n    startLine: number,\r\n    startColumn: number,\r\n    rangeLength: number,\r\n    messageSpan: HTMLSpanElement\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\n\r\nconst fontSize: string = cssConstants.getPropertyValue('--x-textarea-font-size');\r\nconst fontFamily: string = cssConstants.getPropertyValue('--x-textarea-font-family');\r\nconst {fontWidth} = computeFontSizeInPx(fontFamily, fontSize);\r\nconst lineHeight: number = Number(cssConstants.getPropertyValue('--x-textarea-line-height'));\r\nconst numsBackgroundLight: string = cssConstants.getPropertyValue('--light-color-b');\r\nconst numsBackgroundDark: string = cssConstants.getPropertyValue('--dark-color-b');\r\nconst numsColorLight: string = cssConstants.getPropertyValue('--text-color-light');\r\nconst numsColorDark: string = cssConstants.getPropertyValue('--text-color-dark');\r\nconst canvasWidth: number = 24;\r\n\r\n/**\r\n * TextArea extended by line numbers and text highlighting. The component is maintained by JavaScript HTML functions,\r\n * not by React.\r\n */\r\nexport class XTextArea extends React.Component<XTextAreaProps, XTextAreaState> {\r\n    // @ts-ignore - always set before usage in componentDidMount\r\n    private textarea: ExtendedHTMLTextArea;\r\n\r\n    /**\r\n     * Returns current text area selection start and end.\r\n     */\r\n    public getSelection(): {start: number, end: number} {\r\n        return {start: this.textarea.selectionStart, end: this.textarea.selectionEnd};\r\n    }\r\n\r\n    /**\r\n     * Sets text area selection start and end. If end is not given, start value is used as end value as well.\r\n     *\r\n     * @param start\r\n     * @param end\r\n     */\r\n    public setSelection(start: number, end?: number): void {\r\n        this.textarea.setSelectionRange(start, end ? end : start);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the textarea has focus.\r\n     */\r\n    public isFocused(): boolean {\r\n        return document.activeElement !== null && document.activeElement.id === this.props.id + '-ta';\r\n    }\r\n\r\n    /**\r\n     * The text area gains focus in the window.\r\n     */\r\n    public focus(): void {\r\n        this.textarea.focus();\r\n    }\r\n\r\n    /**\r\n     * The component is build by JavaScript HTML functions after mount of the empty div in render function.\r\n     */\r\n    componentDidMount() {\r\n        const props: Readonly<XTextAreaProps> = this.props;\r\n        // @ts-ignore - gets parent div\r\n        const div: HTMLDivElement = document.getElementById(props.id);\r\n\r\n        // LAYOUT (table with 1 row and 2 columns)\r\n        const table = document.createElement('table');\r\n        table.setAttribute('cellspacing','0');\r\n        table.setAttribute('cellpadding','0');\r\n        table.classList.add('x-textarea-table');\r\n        const tr = document.createElement('tr');\r\n        const td1 = document.createElement('td');\r\n        td1.setAttribute('id', props.id + '-td1');\r\n        td1.classList.add('x-textarea-table-td1');\r\n        const td2 = document.createElement('td');\r\n        td2.classList.add('x-textarea-table-td2');\r\n        tr.appendChild(td1);\r\n        tr.appendChild(td2);\r\n        table.appendChild(tr);\r\n\r\n        // TEXTAREA\r\n        // @ts-ignore - extended later in componentDidMount\r\n        const ta: ExtendedHTMLTextArea = document.createElement('textarea');\r\n        ta.setAttribute('id', props.id + '-ta');\r\n        ta.setAttribute('spellcheck', 'false');\r\n        ta.mouseIsDown = false;\r\n        ta.setAttribute('placeholder', this.props.placeholder);\r\n        ta.classList.add('x-textarea', 'scrollbar-container');\r\n        ta.value = props.text;\r\n\r\n        // TEXTAREA NUMBERS (Canvas)\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = canvasWidth + 4;    // must not set width & height in css !!!\r\n        canvas.classList.add('x-textarea-canvas');\r\n        ta.canvasLines = canvas;\r\n        td1.appendChild(canvas);\r\n        td2.appendChild(ta);\r\n        div.appendChild(table);\r\n\r\n        // TEXTAREA WHISPER DIV\r\n        // @ts-ignore - extended later in componentDidMount\r\n        const whisperDiv: WhisperDiv = document.createElement('div');\r\n        whisperDiv.classList.add('whisper-div');\r\n        whisperDiv.isShown = false;\r\n        whisperDiv.selectedIndex = -1;\r\n        whisperDiv.changeSelected = function (indexDiff: number) {\r\n            this.setSelected(this.selectedIndex + indexDiff);\r\n        }\r\n        whisperDiv.setSelected = function (newIndex: number) {\r\n            if (this.childElementCount > 0) {\r\n                // removes selected highlight from previous selected whisper (if it is valid)\r\n                if (this.selectedIndex > -1 && this.selectedIndex < this.childElementCount) {\r\n                    this.children[this.selectedIndex].classList.remove(\"selected-whisper\");\r\n                }\r\n                // updates the index modulo child count\r\n                this.selectedIndex = mod(newIndex, this.childElementCount);\r\n                // adds selected highlight\r\n                this.children[this.selectedIndex].classList.add(\"selected-whisper\");\r\n            }\r\n        }\r\n        whisperDiv.getSelectedWhisper = function (): string | undefined {\r\n            if (this.selectedIndex > -1 && this.childElementCount > 0) {\r\n                // @ts-ignore\r\n                return this.children[this.selectedIndex].innerText;\r\n            }\r\n            return undefined;\r\n        }\r\n        ta.whisperDiv = whisperDiv;\r\n        td2.appendChild(whisperDiv);\r\n\r\n        // Line numbers rendering inspired by: https://www.w3schools.com/code/tryit.asp?filename=G68VMFWS12UH,\r\n        // Nikola Bozovic, nigerija@gmail.com\r\n        ta.paintLineNumbers = function(darkTheme: boolean): void {\r\n            try {\r\n                const canvas = this.canvasLines;\r\n                if (canvas.height !== this.clientHeight) {\r\n                    canvas.height = this.clientHeight; // on resize\r\n                }\r\n                // @ts-ignore\r\n                const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\r\n                ctx.fillStyle = darkTheme ? numsBackgroundDark : numsBackgroundLight;\r\n                ctx.fillRect(0, 0, canvasWidth + 2, this.scrollHeight + 1);\r\n                ctx.fillStyle = darkTheme ? numsColorDark : numsColorLight;\r\n                ctx.font = fontSize + \" \" + fontFamily;\r\n                for (let i = 0; i < this.linesCount; i++) {\r\n                    const text = \"\" + (i + 1);  // line number\r\n                    ctx.fillText(text,canvasWidth - (text.length * 8), 19 + (i * lineHeight));\r\n                }\r\n            }\r\n            catch(e) {\r\n                console.log('XTextArea paintLineNumbers error: ' + e);\r\n            }\r\n        };\r\n\r\n        ta.update = function (value: string, darkTheme: boolean) {\r\n            this.value = value;\r\n            // computes lines count\r\n            let lines: number = 1;\r\n            for (let i = 0; i < value.length; ++i) {\r\n                if (value.charAt(i) === \"\\n\") {\r\n                    ++lines;\r\n                }\r\n            }\r\n            this.linesCount = lines;\r\n            // set height to fit all lines\r\n            this.style.height = (lines * lineHeight + 8) + \"px\";\r\n            // if the horizontal scrollbar is visible, fits it into the height\r\n            if (this.scrollHeight > this.clientHeight) {\r\n                this.style.height = (this.scrollHeight + lineHeight + 10) + \"px\";\r\n            }\r\n            this.paintLineNumbers(darkTheme);\r\n        }\r\n\r\n        ta.createWhisper = function (whispers: string[]): void {\r\n            if (whispers.length === 0) {\r\n                this.hideWhisper();\r\n            }\r\n            else {\r\n                this.whisperDiv.innerHTML = \"\";\r\n                whispers.forEach((whisper, i) => {\r\n                    const div = document.createElement(\"div\");\r\n                    div.innerHTML = whisper;\r\n                    div.onclick = event => {\r\n                        this.focus();\r\n                        this.whisperDiv.setSelected(i);\r\n                        event.stopPropagation();\r\n                    };\r\n                    div.ondblclick = event => {\r\n                        this.focus();\r\n                        this.insertCurrentSelectedWhisper(props.onChange);\r\n                        this.notAutoShowWhisper = true;\r\n                        event.stopPropagation();\r\n                    };\r\n                    this.whisperDiv.appendChild(div);\r\n                });\r\n                // selects the first whisper after change\r\n                this.whisperDiv.setSelected(0);\r\n                // needs to be set to true before moveWhisper call\r\n                this.whisperDiv.isShown = true;\r\n                // sets the div position\r\n                this.moveWhisper();\r\n            }\r\n        }\r\n\r\n        ta.moveWhisper = function () {\r\n            // updates only if the whisper is shown\r\n            if (this.whisperDiv.isShown) {\r\n                // finds cursor position in the whole string\r\n                const cursorLineAndColumn = getPositionLineAndColumn(this.value, this.selectionEnd);\r\n                // computes position of the bottom end of the cursor relative to the text\r\n                const cursorDistanceFromTATotalTop: number = (cursorLineAndColumn.line + 1) * lineHeight;\r\n                const cursorDistanceFromTATotalLeft: number = cursorLineAndColumn.column * fontWidth;\r\n                const yPos: number = cursorDistanceFromTATotalTop - this.scrollTop;\r\n                const xPos: number = cursorDistanceFromTATotalLeft - this.scrollLeft + 4;\r\n                // shows the div at computed position if the cursor is visible\r\n                if (0 <= yPos && yPos < this.clientHeight && 0 <= xPos && xPos < this.clientWidth) {\r\n                    // if the div is in the upper part of the screen, shows it under the cursor\r\n                    if (this.getBoundingClientRect().y + yPos <= window.innerHeight / 2) {\r\n                        this.whisperDiv.setAttribute('style', `display: block; top: ${yPos + 4}px; left: ${xPos}px;`);\r\n                    }\r\n                    // if the div is in the lower part of the screen, shows it above the cursor\r\n                    else {\r\n                        this.whisperDiv.setAttribute('style',\r\n                            `display: block; bottom: ${this.getBoundingClientRect().height - yPos + lineHeight}px; left: ${xPos}px;`);\r\n                    }\r\n                }\r\n                // hides the div if the cursor is not visible (but DOES NOT SET whisperDiv.isShown to false to re-appear it again)\r\n                else {\r\n                    this.whisperDiv.setAttribute('style', `display: none;`);\r\n                }\r\n            }\r\n        }\r\n\r\n        ta.hideWhisper = function () {\r\n            //whisperDiv.innerHTML = '';\r\n            this.whisperDiv.setAttribute('style', 'display: none;');\r\n            this.whisperDiv.isShown = false;\r\n        }\r\n\r\n        ta.insertCurrentSelectedWhisper = function (onChange: (text: string, cursorIndex: number) => void) {\r\n            const currWhisper: string | undefined = this.whisperDiv.getSelectedWhisper();\r\n            if (currWhisper !== undefined) {\r\n                const i: number = getStartOfWordBeforeIndex(this.value, this.selectionEnd);\r\n                const beforeAdd: string = this.value.slice(0, i);\r\n                const afterAdd: string = this.value.slice(this.selectionEnd);\r\n                const newCursorPos: number = i + currWhisper.length;\r\n                onChange(beforeAdd + currWhisper + afterAdd, newCursorPos);\r\n                this.setSelectionRange(newCursorPos, newCursorPos);\r\n                this.hideWhisper();\r\n            }\r\n        }\r\n\r\n        ta.notAutoShowWhisper = false;\r\n\r\n        // TEXTAREA ERROR RANGE HIGHLIGHTS\r\n        ta.errorDivs = [];\r\n\r\n        ta.moveErrors = function () {\r\n            this.errorDivs.forEach(highlight => {\r\n                // computes position of the highlight relative to the text\r\n                const yPos: number = (highlight.startLine + 1) * lineHeight + 1 - this.scrollTop;\r\n                // shows the div at computed position if the line is visible\r\n                if (1 < yPos && yPos < this.clientHeight) {\r\n                    let width: number = highlight.rangeLength * fontWidth;\r\n                    let xPos: number = highlight.startColumn * fontWidth + 7 - this.scrollLeft;\r\n                    // if the whole highlight is out of the width, does not display it\r\n                    if (xPos > this.clientWidth || xPos + width < 3) {\r\n                        highlight.setAttribute('style', `display: none;`);\r\n                    }\r\n                    else {\r\n                        // updates position of highlights starting before first visible column\r\n                        if (xPos < 3) {\r\n                            width += xPos - 3;\r\n                            xPos = 3;\r\n                        }\r\n                        // updates width of highlights ending after last visible column\r\n                        if (xPos + width > this.clientWidth) {\r\n                            width = this.clientWidth - xPos;\r\n                        }\r\n                        // updates the position of message span when the highlight is on the right side of the screen\r\n                        if (this.getBoundingClientRect().x + xPos >= window.innerWidth / 2) {\r\n                            highlight.messageSpan.setAttribute('style', `right: 50%; left: unset;`);\r\n                        }\r\n                        highlight.setAttribute('style', `display: block; top: ${yPos}px; left: ${xPos}px; width: ${width}px`);\r\n                    }\r\n                }\r\n                // hides the div if the line is not visible\r\n                else {\r\n                    highlight.setAttribute('style', `display: none;`);\r\n                }\r\n            });\r\n        }\r\n\r\n        ta.updateErrors = function (ranges: {start: number, end: number, msg: string}[]) {\r\n            // removes old highlight divs\r\n            this.errorDivs.forEach(highlight => {\r\n                highlight.remove();\r\n            });\r\n            this.errorDivs = [];\r\n\r\n            // appends the highlight div as textarea child and adds it to highlights array\r\n            const pushHighlight = (highlight: ErrorDiv) => {\r\n                // @ts-ignore - adds it to the parent element\r\n                this.parentElement.appendChild(highlight);\r\n                this.errorDivs.push(highlight);\r\n            }\r\n\r\n            ranges.forEach(range => {\r\n                // finds highlight start and end lines and columns\r\n                const start = getPositionLineAndColumn(this.value, range.start);\r\n                const end = getPositionLineAndColumn(this.value, range.end);\r\n                // error on one line only\r\n                if (start.line === end.line) {\r\n                    pushHighlight(createHighlightDiv(start.line, start.column, end.column - start.column,\r\n                        range.msg, this));\r\n                }\r\n                // error on multiple lines\r\n                else {\r\n                    // pushes first line part - from error start to line end\r\n                    pushHighlight(createHighlightDiv(start.line, start.column,\r\n                        getLineLength(this.value, start.line) - start.column, range.msg, this));\r\n                    // pushes middle lines\r\n                    for (let line = start.line + 1; line < end.line; ++line) {\r\n                        pushHighlight(createHighlightDiv(line, 0, getLineLength(this.value, line),\r\n                            range.msg, this));\r\n                    }\r\n                    // pushes last line part - from line start to error end\r\n                    pushHighlight(createHighlightDiv(end.line, 0, end.column, range.msg, this));\r\n                }\r\n            });\r\n\r\n            // moves highlight to current positions\r\n            this.moveErrors();\r\n        }\r\n\r\n        // handles whisper div position when scrolling on page\r\n        window.addEventListener('scroll', () => ta.moveWhisper());\r\n        window.addEventListener('resize', () => {\r\n            ta.moveWhisper();\r\n            ta.moveErrors();\r\n        });\r\n        window.addEventListener('click', () => ta.hideWhisper());\r\n        ta.onscroll     = () => {\r\n            ta.paintLineNumbers(this.props.darkTheme);\r\n            ta.moveWhisper();\r\n            ta.moveErrors();\r\n        };\r\n        //ta.addEventListener(\"focusout\", () => ta.hideWhisper());\r\n        ta.onmousedown  = event => {\r\n            ta.mouseIsDown = true;\r\n            event.stopPropagation();\r\n        }\r\n        ta.onmouseup    = () => {\r\n            ta.mouseIsDown = false;\r\n            ta.paintLineNumbers(this.props.darkTheme);\r\n        };\r\n        ta.onmousemove  = () => {\r\n            if (ta.mouseIsDown) ta.paintLineNumbers(this.props.darkTheme);\r\n        };\r\n        ta.oninput      = (ev) => {\r\n            // @ts-ignore\r\n            this.props.onChange(ev.target.value, ev.target.selectionStart);\r\n        }\r\n        // prevents default behavior of special keys input when whisperDiv is shown, passes key event to the parent\r\n        ta.onkeydown    = (ev) => {\r\n            if (ta.whisperDiv.isShown) {\r\n                if (ev.key === \"ArrowDown\") {\r\n                    ta.whisperDiv.changeSelected(1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"ArrowUp\") {\r\n                    ta.whisperDiv.changeSelected(-1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"PageDown\") {\r\n                    // moves selected whisper to bottom\r\n                    ta.whisperDiv.setSelected(-1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"PageUp\") {\r\n                    // moves selected whisper to top\r\n                    ta.whisperDiv.setSelected(0);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"End\" || ev.key === \"Home\") {\r\n                    ta.hideWhisper();\r\n                    // keeps default behaviour\r\n                }\r\n                if (ev.key === \"Escape\" || ev.key === \"Esc\") {\r\n                    ta.hideWhisper();\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Enter\" && !ev.ctrlKey) {\r\n                    ta.insertCurrentSelectedWhisper(this.props.onChange);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Enter\" && ev.ctrlKey) {\r\n                    ta.hideWhisper();\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Tab\") {\r\n                    ta.insertCurrentSelectedWhisper(this.props.onChange);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"ArrowLeft\") {\r\n                    const cursor = (ta.selectionStart === 0) ? 0 : (ta.selectionStart - 1);\r\n                    // forces update to recompute whispers if needed\r\n                    this.props.onChange(ta.value, cursor);\r\n                    // keeps default behaviour\r\n                }\r\n                if (ev.key === \"ArrowRight\") {\r\n                    const cursor = (ta.selectionStart === ta.value.length) ? ta.selectionStart : ta.selectionStart + 1;\r\n                    // forces update to recompute whispers if needed\r\n                    this.props.onChange(ta.value, cursor);\r\n                    // keeps default behaviour\r\n                }\r\n            }\r\n            if (ev.key === \"Enter\" || ev.key === \"Tab\") {\r\n                // does not show whisper after pressing Enter or Tab\r\n                ta.notAutoShowWhisper = true;\r\n            }\r\n            if (ev.key === \"Backspace\" && !ta.whisperDiv.isShown) {\r\n                // does not show whisper after pressing Backspace when it is closed\r\n                ta.notAutoShowWhisper = true;\r\n            }\r\n            if (ev.ctrlKey) {\r\n                if (ev.key === \" \") {\r\n                    if (ta.whisperDiv.isShown) {\r\n                        ta.hideWhisper();\r\n                    }\r\n                    else {\r\n                        this.props.onChange(ta.value, ta.selectionStart);\r\n                    }\r\n                }\r\n                this.props.onCtrlInput(ev);\r\n            }\r\n        }\r\n\r\n        // make sure numbers are painted\r\n        ta.update(this.props.text, this.props.darkTheme);\r\n        // shows highlights\r\n        ta.updateErrors(this.props.errors);\r\n        this.textarea = ta;\r\n    }\r\n\r\n    /**\r\n     * Updates text content and component style.\r\n     */\r\n    componentDidUpdate(prevProps: Readonly<XTextAreaProps>) {\r\n        this.textarea.update(this.props.text, this.props.darkTheme);\r\n        if (prevProps.darkTheme !== this.props.darkTheme) {\r\n            this.textarea.paintLineNumbers(this.props.darkTheme);\r\n        }\r\n        // whispers\r\n        if (this.props.whispers !== prevProps.whispers) {\r\n            if (this.textarea.notAutoShowWhisper) {\r\n                this.textarea.notAutoShowWhisper = false;\r\n            }\r\n            else {\r\n                this.textarea.createWhisper(this.props.whispers);\r\n            }\r\n        }\r\n        // highlights error\r\n        if (this.props.errors !== undefined) {\r\n            this.textarea.updateErrors(this.props.errors);\r\n        }\r\n        // first undefined highlight removes 'x-textarea-err' from textarea.className to show selection with blue color\r\n        else if (this.props.errors !== prevProps.errors) {\r\n            this.textarea.classList.remove('x-textarea-err');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders only an empty div. Other maintaining is not provided by React.\r\n     */\r\n    public render() {\r\n        return <div id={this.props.id} className=\"x-textarea-div\" />;\r\n    }\r\n}\r\n\r\n/**\r\n * Computes line and column number for given position in text.\r\n */\r\nfunction getPositionLineAndColumn(text: string, position: number): {line: number, column: number} {\r\n    const textBeforeCursor: string = text.slice(0, position);\r\n    const line: number = (textBeforeCursor.match(/\\n/g) || []).length;\r\n    const lastNewLine: number = textBeforeCursor.lastIndexOf('\\n');\r\n    const column: number = textBeforeCursor.length - lastNewLine - 1;\r\n    return {line, column};\r\n}\r\n\r\n/**\r\n * Returns number of characters on the given line.\r\n */\r\nfunction getLineLength(text: string, line: number): number {\r\n    let newLinesFound = 0;\r\n    let lineStart = 0;  // index of line-th newline\r\n    let lineEnd = 0;    // index of (line+1)-th newline\r\n    for (let i = 0; i < text.length; ++i) {\r\n        if (text.charAt(i) === '\\n') {\r\n            ++newLinesFound;\r\n            if (newLinesFound === line) {\r\n                lineStart = i;\r\n            }\r\n            else if (newLinesFound === line + 1) {\r\n                lineEnd = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (lineEnd === 0) {\r\n        lineEnd = text.length; // handles case of last line in text\r\n    }\r\n    return lineEnd - lineStart;\r\n}\r\n\r\n/**\r\n * Creates a div for highlighting text in the given textarea.\r\n */\r\nfunction createHighlightDiv(startLine: number, startColumn: number, rangeLength: number, msg: string,\r\n                            textarea: ExtendedHTMLTextArea): ErrorDiv {\r\n    // @ts-ignore\r\n    const highlight: ErrorDiv = document.createElement('div');\r\n    highlight.classList.add(\"x-textarea-highlight\");\r\n    highlight.startLine = startLine;\r\n    highlight.startColumn = startColumn;\r\n    highlight.rangeLength = rangeLength;\r\n    // dispatches click event to not block textarea underneath highlights\r\n    highlight.onclick = (ev: MouseEvent) => {\r\n        const newEvent: MouseEvent = new MouseEvent(ev.type, {...ev});\r\n        textarea.dispatchEvent(newEvent);\r\n        ev.stopPropagation();\r\n    }\r\n    const span: HTMLSpanElement = document.createElement('span');\r\n    span.classList.add(\"highlight-tooltip\");\r\n    span.innerText = msg;\r\n    highlight.messageSpan = span;\r\n    highlight.appendChild(span);\r\n    return highlight;\r\n}","/**\r\n * Modulo operation with positive result for negative numbers (as % in JavaScript can give negative results).\r\n *\r\n * @param n base number\r\n * @param m dividing number\r\n */\r\nexport function mod(n: number, m: number) {\r\n    return ((n % m) + m) % m;\r\n}","import RASemanticError from \"./raSemanticError\";\r\nimport RASyntaxError from \"./raSyntaxError\";\r\nimport CodeError from \"./codeError\";\r\n\r\n/**\r\n * Codes for CodeErrors.\r\n */\r\nexport enum CodeErrorCodes {\r\n    resultSection_getCurrentRelation_nodeIndexNotFound = 1,\r\n    resultSection_getCurrentRelation_evalError,\r\n    resultSection_saveResultRelation_nullRelationToSave,\r\n    resultSection_handleAddRelation_nullRelationToAdd,\r\n\r\n    row_getOrderedValues_absentColumn,\r\n\r\n    valueParser_rpnToVETreeRecursive_unexpectedToken,\r\n\r\n    exprParser_isValidSequence_unexpectedToken,\r\n    exprParser_rpnToVETreeRecursive_unexpectedToken,\r\n    exprParser_parseTokensForWhisper_thetaJoinBranchError,\r\n    exprParser_parseTokensForWhisper_projectionBranchError\r\n}\r\n\r\n/**\r\n * Codes for RASemanticErrors.\r\n */\r\nexport enum SemanticErrorCodes {\r\n    exprParser_parse_relationNotDefined = 1001,\r\n\r\n    binaryNode_eval_commonColumnsInSources,\r\n    setOperationNode_eval_notEqualColumnsInSources,\r\n    divisionNode_eval_rightColumnsNotSubsetOfLeft,\r\n    divisionNode_eval_rightColumnsNotProperSubsetOfLeft,\r\n    renameNode_eval_absentOriginalColumn,\r\n    renameNode_eval_changeToDuplicitName,\r\n    projectionNode_eval_absentColumn,\r\n\r\n    referenceValue_eval_absentColumn\r\n}\r\n\r\n/**\r\n * Codes for RASyntaxErrors.\r\n */\r\nexport enum SyntaxErrorCodes {\r\n    exprParser_parse_emptyStringGiven = 2001,\r\n    exprParser_parseTokens_outerJoinWhenNullNotSupported,\r\n    exprParser_parseTokens_unexpectedPart,\r\n    exprParser_parseTokens_bothBranchesError,\r\n    exprParser_rpnToVETree_invalidExpression,\r\n    exprParser_assertValidInfixTokens_invalidParentheses,\r\n    exprParser_assertValidInfixTokens_invalidStart,\r\n    exprParser_assertValidInfixTokens_invalidEnd,\r\n    exprParser_assertValidInfixTokens_relationAfterRelation,\r\n    exprParser_assertValidInfixTokens_relationAfterUnary,\r\n    exprParser_assertValidInfixTokens_relationAfterClosing,\r\n    exprParser_assertValidInfixTokens_unaryAfterBinary,\r\n    exprParser_assertValidInfixTokens_unaryAfterOpening,\r\n    exprParser_assertValidInfixTokens_binaryAfterBinary,\r\n    exprParser_assertValidInfixTokens_binaryAfterOpening,\r\n    exprParser_assertValidInfixTokens_openingAfterRelation,\r\n    exprParser_assertValidInfixTokens_openingAfterUnary,\r\n    exprParser_assertValidInfixTokens_openingAfterClosing,\r\n    exprParser_assertValidInfixTokens_closingAfterBinary,\r\n    exprParser_assertValidInfixTokens_closingAfterOpening,\r\n\r\n    valueParser_parseTokens_emptyInput,\r\n    valueParser_parseTokens_unsupportedNull,\r\n    valueParser_parseTokens_unexpectedPart,\r\n    valueParser_toRPN_missingOpeningParenthesis,\r\n    valueParser_toRPN_missingClosingParenthesis,\r\n    valueParser_rpnToVETree_invalidExpression,\r\n    valueParser_rpnToVETree_invalidStart,\r\n    valueParser_rpnToVETree_invalidEnd,\r\n    valueParser_rpnToVETree_literalAfterLiteral,\r\n    valueParser_rpnToVETree_literalAfterReference,\r\n    valueParser_rpnToVETree_literalAfterClosing,\r\n    valueParser_rpnToVETree_referenceAfterLiteral,\r\n    valueParser_rpnToVETree_referenceAfterReference,\r\n    valueParser_rpnToVETree_referenceAfterClosing,\r\n    valueParser_rpnToVETree_notAfterLiteral,\r\n    valueParser_rpnToVETree_notAfterReference,\r\n    valueParser_rpnToVETree_notAfterClosing,\r\n    valueParser_rpnToVETree_binaryAfterOperator,\r\n    valueParser_rpnToVETree_binaryAfterOpening,\r\n    valueParser_rpnToVETree_openingAfterLiteral,\r\n    valueParser_rpnToVETree_openingAfterReference,\r\n    valueParser_rpnToVETree_openingAfterClosing,\r\n    valueParser_rpnToVETree_closingAfterOperator,\r\n    valueParser_rpnToVETree_closingAfterOpening,\r\n\r\n    parser_nextBorderedPart_missingClosingChar,\r\n    parser_skipWhitespacesAndChar_charNotFound,\r\n\r\n    projectionNode_constructor_invalidProjectionString,\r\n    projectionNode_parseProjection_invalidProjectedColumnName,\r\n\r\n    renameNode_parseChanges_invalidRenameString,\r\n    renameNode_parseChanges_missingArrow,\r\n    renameNode_parseChanges_invalidNewName,\r\n    renameNode_parseChanges_keywordNewName,\r\n    renameNode_parseChanges_multipleRenameOfTheColumn,\r\n\r\n    selectionNode_constructor_invalidString,\r\n    selectionNode_constructor_emptyString,\r\n    selectionNode_eval_resultNotBoolean,\r\n\r\n    thetaJoinNode_constructor_invalidString,\r\n    thetaJoinNode_constructor_emptyString,\r\n    thetaJoinNode_eval_resultNotBoolean,\r\n\r\n    thetaSemiJoinNode_constructor_invalidString,\r\n    thetaSemiJoinNode_constructor_emptyString,\r\n    thetaSemiJoinNode_eval_resultNotBoolean,\r\n\r\n    comparingOperator_eval_differentInputTypes,\r\n\r\n    computingOperator_eval_inputTypesNotNumbers,\r\n\r\n    logicalOperator_eval_leftInputNotBoolean,\r\n    logicalOperator_eval_rightInputNotBoolean\r\n}\r\n\r\n/**\r\n * English messages for CodeErrors mapped by their error codes.\r\n */\r\nconst codeErrMsgEng: Map<CodeErrorCodes, string[]> = new Map<CodeErrorCodes, string[]>([\r\n    [CodeErrorCodes.resultSection_getCurrentRelation_nodeIndexNotFound,\r\n        [\"ResultSection.getCurrentRelation: Selected node index in evaluation tree not found.\"]],\r\n    [CodeErrorCodes.resultSection_getCurrentRelation_evalError,\r\n        [\"ResultSection.getCurrentRelation: Evaluation error in result section: \", \"\"]],\r\n    [CodeErrorCodes.resultSection_saveResultRelation_nullRelationToSave,\r\n        [\"ResultSection.saveResultRelation: Result relation is null when tried to save it.\"]],\r\n    [CodeErrorCodes.resultSection_handleAddRelation_nullRelationToAdd,\r\n        [\"ResultSection.handleAddRelation: Result relation is null when tried to add it.\"]],\r\n\r\n    [CodeErrorCodes.row_getOrderedValues_absentColumn,\r\n        [\"Row.getOrderedValues: Column \", \" is absent in row with columns: \", \"\"]],\r\n\r\n    [CodeErrorCodes.valueParser_rpnToVETreeRecursive_unexpectedToken,\r\n        [\"ValueParser.rpnToVETreeRecursive: Unexpected token: \", \".\"]],\r\n\r\n    [CodeErrorCodes.exprParser_isValidSequence_unexpectedToken,\r\n        [\"ExprParser.isValidSequence: Unexpected token: \", \".\"]],\r\n    [CodeErrorCodes.exprParser_rpnToVETreeRecursive_unexpectedToken,\r\n        [\"ExprParser.rpnToVETreeRecursive: Unexpected token: \", \".\"]],\r\n    [CodeErrorCodes.exprParser_parseTokensForWhisper_thetaJoinBranchError,\r\n        [\"ExprParser.parseTokensForWhisper: Error in theta join branch: \", \".\"]],\r\n    [CodeErrorCodes.exprParser_parseTokensForWhisper_projectionBranchError,\r\n        [\"ExprParser.parseTokensForWhisper: Error in projection branch: \", \".\"]]\r\n]);\r\n\r\n/**\r\n * English messages for RASemanticErrors mapped by their error codes.\r\n */\r\nconst semanticErrMsgEng: Map<SemanticErrorCodes, string[]> = new Map<SemanticErrorCodes, string[]>([\r\n    [SemanticErrorCodes.exprParser_parse_relationNotDefined,\r\n        [\"Relation \\\"\", \"\\\" is not defined. Please check relations definitions.\"]],\r\n\r\n    [SemanticErrorCodes.binaryNode_eval_commonColumnsInSources,\r\n        [\"Source relations for \", \" have common columns \\\"\", \"\\\".\"]],\r\n    [SemanticErrorCodes.setOperationNode_eval_notEqualColumnsInSources,\r\n        [\"Source relations \\\"\", \"\\\" and \\\"\", \"\\\" for set \", \" do not have the same column sets.\"]],\r\n    [SemanticErrorCodes.divisionNode_eval_rightColumnsNotSubsetOfLeft,\r\n        [\"Right source relation \\\"\", \"\\\" is not a subset of the left source relation \\\"\", \"\\\".\"]],\r\n    [SemanticErrorCodes.divisionNode_eval_rightColumnsNotProperSubsetOfLeft,\r\n        [\"Right source relation \\\"\", \"\\\" is not a proper subset of the left source relation \\\"\",\r\n            \". There must exist a column in the left relation which is not present in the right relation.\"]],\r\n    [SemanticErrorCodes.renameNode_eval_absentOriginalColumn,\r\n        [\"Invalid rename, column \\\"\", \"\\\" does not exist in the source relation.\"]],\r\n    [SemanticErrorCodes.renameNode_eval_changeToDuplicitName,\r\n        [\"Invalid rename, new column name \\\"\", \"\\\" is duplicit in the changed relation.\"]],\r\n    [SemanticErrorCodes.projectionNode_eval_absentColumn,\r\n        [\"Invalid projection of the column \\\"\", \"\\\". It does not exist in the source relation.\"]],\r\n\r\n    [SemanticErrorCodes.referenceValue_eval_absentColumn,\r\n        [\"Column \\\"\", \"\\\" is absent in a schema with columns: \", \".\"]],\r\n]);\r\n\r\n/**\r\n * English messages for RASyntaxErrors mapped by their error codes.\r\n */\r\nconst syntaxErrMsgEng: Map<SyntaxErrorCodes, string[]> = new Map<SyntaxErrorCodes, string[]>([\r\n    [SyntaxErrorCodes.exprParser_parse_emptyStringGiven,\r\n        [\"Cannot parse an expression from an empty string.\"]],\r\n    [SyntaxErrorCodes.exprParser_parseTokens_outerJoinWhenNullNotSupported,\r\n        [\"Found \", \" when null values are not supported.\"]],\r\n    [SyntaxErrorCodes.exprParser_parseTokens_unexpectedPart,\r\n        [\"Unexpected part \\\"\", \"\\\" in RA expression.\"]],\r\n    [SyntaxErrorCodes.exprParser_parseTokens_bothBranchesError,\r\n        [\"All combinations throw error in \\\"\", \"\\\". When treated as projection:\\n\", \"\\nWhen treated as theta join:\\n\", \"\"]],\r\n    [SyntaxErrorCodes.exprParser_rpnToVETree_invalidExpression,\r\n        [\"Given string is not a valid expression.\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_invalidParentheses,\r\n        [\"Invalid structure of parentheses in the expression.\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_invalidStart,\r\n        [\"RA expression cannot start with \", \".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_invalidEnd,\r\n        [\"RA expression cannot end with \", \".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_relationAfterRelation,\r\n        [\"Relation \\\"\", \"\\\" after relation \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_relationAfterUnary,\r\n        [\"Relation \\\"\", \"\\\" after unary operator \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_relationAfterClosing,\r\n        [\"Relation \\\"\", \"\\\" after closing parenthesis.\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_unaryAfterBinary,\r\n        [\"Unary operator \\\"\", \"\\\" after binary operator \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_unaryAfterOpening,\r\n        [\"Unary operator \\\"\", \"\\\" after opening parenthesis.\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_binaryAfterBinary,\r\n        [\"Binary operator \\\"\", \"\\\" after binary operator \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_binaryAfterOpening,\r\n        [\"Binary operator \\\"\", \"\\\" after opening parenthesis.\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_openingAfterRelation,\r\n        [\"Opening parentheses after relation \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_openingAfterUnary,\r\n        [\"Opening parentheses after unary operator \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_openingAfterClosing,\r\n        [\"Opening parentheses after closing parentheses.\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_closingAfterBinary,\r\n        [\"Closing parentheses after binary operator \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.exprParser_assertValidInfixTokens_closingAfterOpening,\r\n        [\"Closing parentheses after opening parentheses.\"]],\r\n\r\n    [SyntaxErrorCodes.valueParser_parseTokens_emptyInput,\r\n        [\"An empty string given as a condition.\"]],\r\n    [SyntaxErrorCodes.valueParser_parseTokens_unsupportedNull,\r\n        [\"Null constant used when null values are not supported.\"]],\r\n    [SyntaxErrorCodes.valueParser_parseTokens_unexpectedPart,\r\n        [\"Unexpected part \\\"\", \"\\\" in expression.\"]],\r\n    [SyntaxErrorCodes.valueParser_toRPN_missingOpeningParenthesis,\r\n        [\"Missing opening parenthesis '(' in an expression.\"]],\r\n    [SyntaxErrorCodes.valueParser_toRPN_missingClosingParenthesis,\r\n        [\"Missing closing parenthesis ')' in an expression.\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_invalidExpression,\r\n        [\"Given string is not a valid expression.\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_invalidStart,\r\n        [\"Expression cannot start with \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_invalidEnd,\r\n        [\"Expression cannot end with \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_literalAfterLiteral,\r\n        [\"Literal \\\"\", \"\\\" after literal \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_literalAfterReference,\r\n        [\"Literal \\\"\", \"\\\" after reference to column \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_literalAfterClosing,\r\n        [\"Literal \\\"\", \"\\\" after closing parentheses.\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_referenceAfterLiteral,\r\n        [\"Reference to column \\\"\", \"\\\" after literal \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_referenceAfterReference,\r\n        [\"Reference to column \\\"\", \"\\\" after reference to column \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_referenceAfterClosing,\r\n        [\"Reference to column \\\"\", \"\\\" after closing parentheses.\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_notAfterLiteral,\r\n        [\"Logical not operator \\\"\", \"\\\" after literal \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_notAfterReference,\r\n        [\"Logical not operator \\\"\", \"\\\" after reference to column \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_notAfterClosing,\r\n        [\"Logical not operator \\\"\", \"\\\" after closing parentheses.\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_binaryAfterOperator,\r\n        [\"Binary operator \\\"\", \"\\\" after binary operator \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_binaryAfterOpening,\r\n        [\"Binary operator \\\"\", \"\\\" after opening parentheses.\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_openingAfterLiteral,\r\n        [\"Opening parentheses after literal \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_openingAfterReference,\r\n        [\"Opening parentheses after reference to column \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_openingAfterClosing,\r\n        [\"Opening parentheses after closing parentheses.\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_closingAfterOperator,\r\n        [\"Closing parentheses after binary operator \\\"\", \"\\\".\"]],\r\n    [SyntaxErrorCodes.valueParser_rpnToVETree_closingAfterOpening,\r\n        [\"Closing parentheses after opening parentheses.\"]],\r\n\r\n    [SyntaxErrorCodes.parser_nextBorderedPart_missingClosingChar,\r\n        [\"Missing '\", \"' after opening '\", \"'.\"]],\r\n    [SyntaxErrorCodes.parser_skipWhitespacesAndChar_charNotFound,\r\n        [\"Expected \\\"\", \"\\\" not found.\"]],\r\n\r\n    [SyntaxErrorCodes.projectionNode_constructor_invalidProjectionString,\r\n        ['\"', \"\\\" is not a projection string. It must be bordered with '[' and ']'.\"]],\r\n    [SyntaxErrorCodes.projectionNode_parseProjection_invalidProjectedColumnName,\r\n        [\"Invalid projection of column \\\"\", \"\\\". Column name must contain letters, number and underscores only and start with a letter.\"]],\r\n\r\n    [SyntaxErrorCodes.renameNode_parseChanges_invalidRenameString,\r\n        ['\"', \"\\\" is not a rename string. It must be bordered with '<' and '>'.\"]],\r\n    [SyntaxErrorCodes.renameNode_parseChanges_missingArrow,\r\n        [\"Invalid rename, please use \\\"OldName -> NewName\\\" for each column renaming separated by commas ','.\"]],\r\n    [SyntaxErrorCodes.renameNode_parseChanges_invalidNewName,\r\n        [\"Invalid rename to \\\"\", \"\\\". New column name must contain letters, number and underscores only and start with a letter.\"]],\r\n    [SyntaxErrorCodes.renameNode_parseChanges_keywordNewName,\r\n        [\"Invalid rename to \\\"\", \"\\\". New column name cannot be a keyword.\"]],\r\n    [SyntaxErrorCodes.renameNode_parseChanges_multipleRenameOfTheColumn,\r\n        [\"Multiple rename of column \\\"\", \"\\\".\"]],\r\n\r\n    [SyntaxErrorCodes.selectionNode_constructor_invalidString,\r\n        [\"Invalid selection, it must be bordered with '(' and ')'.\"]],\r\n    [SyntaxErrorCodes.selectionNode_constructor_emptyString,\r\n        [\"The selection cannot be empty.\"]],\r\n    [SyntaxErrorCodes.selectionNode_eval_resultNotBoolean,\r\n        [\"Result of the selection condition \", \" is not a boolean value, but \", \".\"]],\r\n\r\n    [SyntaxErrorCodes.thetaJoinNode_constructor_invalidString,\r\n        [\"Invalid theta join, it must be bordered with '[' and ']'.\"]],\r\n    [SyntaxErrorCodes.thetaJoinNode_constructor_emptyString,\r\n        [\"The theta join condition cannot be empty.\"]],\r\n    [SyntaxErrorCodes.thetaJoinNode_eval_resultNotBoolean,\r\n        [\"Result of the theta join condition \", \" is not a boolean value, but \", \".\"]],\r\n\r\n    [SyntaxErrorCodes.thetaSemiJoinNode_constructor_invalidString,\r\n        [\"Invalid theta semijoin, it must be bordered with '<' and ']' or '[' and '>'.\"]],\r\n    [SyntaxErrorCodes.thetaSemiJoinNode_constructor_emptyString,\r\n        [\"The theta semijoin condition cannot be empty.\"]],\r\n    [SyntaxErrorCodes.thetaSemiJoinNode_eval_resultNotBoolean,\r\n        [\"Result of the theta semijoin condition \", \" is not a boolean value, but \", \".\"]],\r\n\r\n    [SyntaxErrorCodes.comparingOperator_eval_differentInputTypes,\r\n        [\"Inputs for \\\"\", \"\\\"  have different types \", \" and \", \".\"]],\r\n\r\n    [SyntaxErrorCodes.computingOperator_eval_inputTypesNotNumbers,\r\n        [\"Inputs for \\\"\", \"\\\" are not both numbers, they are \", \" and \", \".\"]],\r\n\r\n    [SyntaxErrorCodes.logicalOperator_eval_leftInputNotBoolean,\r\n        [\"Left input value for \\\"\",  \"\\\" is not a boolean, but \", \".\"]],\r\n    [SyntaxErrorCodes.logicalOperator_eval_rightInputNotBoolean,\r\n        [\"Right input value for \\\"\", \"\\\" is not a boolean, but \", \".\"]]\r\n]);\r\n\r\n/**\r\n * Factory for creating custom application errors: CodeError, RASemanticError, RASyntaxError.\r\n * It creates an error message by given error code and string parameters.\r\n */\r\nexport class ErrorFactory {\r\n\r\n    /**\r\n     * Creates a new CodeError with given code. Params are used to join error messages expecting textual specification.\r\n     *\r\n     * @param code code of the code error\r\n     * @param params textual specification\r\n     */\r\n    public static codeError(code: CodeErrorCodes, ...params: string[]): CodeError {\r\n        let msg: string[] | undefined = codeErrMsgEng.get(code);\r\n        if (msg === undefined) {\r\n            console.log(\"Unknown code of code error given: \" + code);\r\n            msg = [\"Code error\"];\r\n        }\r\n        assertParamsCount(msg.length - 1, params, code);\r\n        return new CodeError(joinStringArrays(msg, params));\r\n    }\r\n\r\n    /**\r\n     * Creates a new RASemanticError with given code and range. Params are used to join error messages expecting textual\r\n     * specification.\r\n     *\r\n     * @param code code of the semantic error\r\n     * @param range text range of the error in the input when defined\r\n     * @param params textual specification\r\n     */\r\n    public static semanticError(code: SemanticErrorCodes, range: {start: number, end: number} | undefined, ...params: string[]): RASemanticError {\r\n        let msg: string[] | undefined = semanticErrMsgEng.get(code);\r\n        if (msg === undefined) {\r\n            console.log(\"Unknown code of semantic error given: \" + code);\r\n            msg = [\"Semantic error\"];\r\n        }\r\n        assertParamsCount(msg.length - 1, params, code);\r\n        return new RASemanticError(joinStringArrays(msg, params), range);\r\n    }\r\n\r\n    /**\r\n     * Creates a new RASyntaxError with given code and range. Params are used to join error messages expecting textual\r\n     * specification.\r\n     *\r\n     * @param code code of the syntax error\r\n     * @param range text range of the error in the input when defined\r\n     * @param params textual specification\r\n     */\r\n    public static syntaxError(code: SyntaxErrorCodes, range: {start: number, end: number} | undefined, ...params: string[]): RASyntaxError {\r\n        let msg: string[] | undefined = syntaxErrMsgEng.get(code);\r\n        if (msg === undefined) {\r\n            console.log(\"Unknown code of syntax error given: \" + code);\r\n            msg = [\"Syntax error\"];\r\n        }\r\n        assertParamsCount(msg.length - 1, params, code);\r\n        return new RASyntaxError(joinStringArrays(msg, params), range);\r\n    }\r\n}\r\n\r\n/**\r\n * Extends the given params array with empty strings to have the length of expectedCount. When the intial length of the\r\n * given params array is same or greater, the array is unchanged.\r\n *\r\n * @param expectedCount\r\n * @param params\r\n * @param code code of the error\r\n */\r\nexport function assertParamsCount(expectedCount: number, params: string[], code: number): void {\r\n    if (params.length !== expectedCount) {\r\n        console.log(\"Unexpected params count for error \" + code + \", expected \" + expectedCount + \", given \" + params.length);\r\n        while (params.length < expectedCount) {\r\n            params.push(\"\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Joins given string arrays [a1, a2, ..., an] and [b1, b2, ..., bn-1] to one string \"a1b1a2b2...an-1bn-1an\".\r\n * WARNING: a.length is expected to be at least 1. b.length is expected to be at least \"a.length - 1\".\r\n *\r\n * @param a array of length at least 1\r\n * @param b array of length at least \"a.length - 1\"\r\n */\r\nexport function joinStringArrays(a: string[], b: string[]): string {\r\n    const aLen: number = a.length;\r\n    const toConcat: string[] = Array<string>(2 * aLen - 2);\r\n    for (let i = 1; i < aLen; i++) {\r\n        toConcat[2 * i - 2] = b[i - 1];\r\n        toConcat[2 * i - 1] = a[i];\r\n    }\r\n    return a[0].concat(...toConcat);\r\n}","import Row from \"./row\";\r\nimport {SupportedColumnType} from \"./columnType\";\r\nimport { isEqual } from \"lodash\";\r\n\r\n/**\r\n * Relation from relational algebra. It contains relational schema (set of columns' names and types)\r\n * and relation's relation (set of rows).\r\n */\r\nexport default class Relation {\r\n\r\n    public readonly name: string;\r\n    private columns = new Map<string, SupportedColumnType>();\r\n    private columnNames: string[] = []; // array to have an ordered printing of columns\r\n    private rows: Row[] = [];\r\n    private finishedSchema = false;\r\n\r\n    /**\r\n     * Creates an empty relation of the given name.\r\n     *\r\n     * @param name name of the relation\r\n     */\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Returns name of the relation.\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * @return true if the relational schema is finished (no more columns can be added)\r\n     */\r\n    public hasFinishedSchema(): boolean {\r\n        return this.finishedSchema;\r\n    }\r\n\r\n    /**\r\n     * Sets the relational schema finished (no more columns can be added).\r\n     */\r\n    public finishSchema(): void {\r\n        this.finishedSchema = true;\r\n    }\r\n\r\n    /**\r\n     * Adds a column to a relational schema if the relational schema is not finished yet.\r\n     *\r\n     * @param name name of the column\r\n     * @param type type of the column\r\n     * @return true if the column was added (relation did not contain a column with the same name before)\r\n     */\r\n    public addColumn(name: string, type: SupportedColumnType): boolean {\r\n        if (!this.hasColumn(name) && !this.hasFinishedSchema()) {\r\n            this.columns.set(name, type);\r\n            this.columnNames.push(name);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the relation has a column with the same name\r\n     * (NOTE: type of the column does not matter).\r\n     *\r\n     * @param name Column name to be checked\r\n     * @return true if the relation has a column with the same name\r\n     */\r\n    public hasColumn(name: string): boolean {\r\n        return this.columnNames.some(cn => cn === name);\r\n    }\r\n\r\n    /**\r\n     * @return map (name -> value) of columns' values in a relation.\r\n     */\r\n    public getColumns(): Map<string, SupportedColumnType> {\r\n        return this.columns;\r\n    }\r\n\r\n    /**\r\n     * @param f function to be applied for each column in the relation\r\n     */\r\n    public forEachColumn(f: (type: SupportedColumnType, name: string) => void): void {\r\n        return this.columns.forEach(f);\r\n    }\r\n\r\n    /**\r\n     * @return array of column names in a relation.\r\n     */\r\n    public getColumnNames(): string[] {\r\n        return this.columnNames;\r\n    }\r\n\r\n    /**\r\n     * @return Number of columns in a relation.\r\n     */\r\n    public getColumnsCount(): number {\r\n        return this.columnNames.length;\r\n    }\r\n\r\n    /**\r\n     * Adds a row to a relation. The row must have the same column set as the relation. If the row was added,\r\n     * sets the row finished and returns true. Also the relational schema of this relation\r\n     * is set finished (no more columns can be added). If the row was not added, returns false.\r\n     * NOTE: Rows in a relation cannot be duplicit, adding a duplicit row returns true, but only one is kept.\r\n     *\r\n     * @param row row to be added\r\n     * @return true if the row was added, false otherwise\r\n     */\r\n    public addRow(row: Row): boolean {\r\n        if (isEqual(row.getTypes(), this.columns)) {\r\n            this.finishSchema();\r\n            row.finish();\r\n            if (!this.rows.some(r => r.equals(row))) {\r\n                this.rows.push(row);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @return array of rows in a relation.\r\n     */\r\n    public getRows(): Row[] {\r\n        return this.rows;\r\n    }\r\n\r\n    /**\r\n     * @return Number of rows in a relation.\r\n     */\r\n    public getRowsCount(): number {\r\n        return this.rows.length;\r\n    }\r\n\r\n    /**\r\n     * Returns a relational schema in a format: RelationName(ColumnOneName: ColumnOneType, ...) - both column names\r\n     * and column types are used.\r\n     *\r\n     * @return relational schema as a string\r\n     */\r\n    public getSchemaString(): string {\r\n        return this.name + \"(\" + [...this.columns].map(s => s[0] + \": \" + s[1]).join(\", \") + \")\";\r\n    }\r\n\r\n    /**\r\n     * Returns a relational schema in a format: RelationName(ColumnOneName, ...) - only column names are used.\r\n     *\r\n     * @return relational schema as a string\r\n     */\r\n    public getNamesSchemaString(): string {\r\n        return this.name + \"(\" + this.columnNames.join(\", \") + \")\";\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the relation content (column names, column types and rows).\r\n     *\r\n     * @return string representation of the relation\r\n     */\r\n    public contentString(): string {\r\n        const names = this.columnNames.join(', ') + '\\n';\r\n        const types = this.columnNames.map((name) => this.columns.get(name)).join(', ') + '\\n';\r\n        const rows = [...this.rows].map(row => row.getOrderedPrintValues(this.columnNames).join(', ')).join('\\n');\r\n        return names + types + rows;\r\n    }\r\n\r\n    /**\r\n     * Custom equals function for testing purposes.\r\n     *\r\n     * @param other\r\n     */\r\n    public equals(other: any): boolean {\r\n        if (other instanceof Relation) {\r\n            return this.name === other.name &&\r\n                isEqual(this.columns, other.columns) &&\r\n                isEqual(new Set(this.rows), new Set(other.rows));\r\n        }\r\n        return false;\r\n    }\r\n}","/**\r\n * Error caused by fatal error in code of the application.\r\n */\r\nexport default class CodeError extends Error {\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, CodeError);\r\n        }\r\n        this.name = 'CodeError';\r\n    }\r\n}","import {BinaryNodeClass} from \"../ratree/binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {UnaryNodeClass} from \"../ratree/unaryNode\";\r\n\r\n/**\r\n * Abstract parent class for all RATokens.\r\n */\r\nexport abstract class ExprToken {\r\n    protected constructor(public readonly str: IndexedString) {\r\n    }\r\n\r\n    /**\r\n     * Gets token start and end index in the text (if the token has IndexedString representation) or undefined.\r\n     */\r\n    public getRange(): {start: number, end: number} | undefined {\r\n        return this.str.getRange();\r\n    }\r\n}\r\n\r\n/**\r\n * Parentheses.\r\n */\r\nexport abstract class ParenthesisToken extends ExprToken {}\r\n\r\nexport class OpeningParenthesis extends ParenthesisToken {\r\n    public constructor(str: IndexedString) {\r\n        super(str);\r\n    }\r\n}\r\n\r\nexport class ClosingParenthesis extends ParenthesisToken {\r\n    public constructor(str: IndexedString) {\r\n        super(str);\r\n    }\r\n}\r\n\r\n/**\r\n * Relation reference.\r\n */\r\nexport class RelationToken extends ExprToken {\r\n    public constructor(name: IndexedString) {\r\n        super(name);\r\n    }\r\n}\r\n\r\n/**\r\n * Unary operators.\r\n */\r\nexport class UnaryOperatorToken extends ExprToken {\r\n\r\n    public static selection(selection: IndexedString) {\r\n        return new UnaryOperatorToken(selection, \"selection\");\r\n    }\r\n\r\n    public static projection(projection: IndexedString) {\r\n        return new UnaryOperatorToken(projection, \"projection\");\r\n    }\r\n\r\n    public static rename(rename: IndexedString) {\r\n        return new UnaryOperatorToken(rename, \"rename\");\r\n    }\r\n\r\n    private constructor(str: IndexedString, public readonly type: UnaryNodeClass) {\r\n        super(str);\r\n    }\r\n}\r\n\r\n/**\r\n * Precedence values for binary operators (highest to lowest). As there is no fixed precedence order for RA and set\r\n * operation, we chose the following.\r\n */\r\nconst precedenceLevelA: number = 10;\r\nconst cartesianPrecedence: number = precedenceLevelA;\r\nconst naturalPrecedence: number = precedenceLevelA;\r\nconst thetaPrecedence: number = precedenceLevelA;\r\n\r\nconst precedenceLevelB: number = precedenceLevelA - 1;\r\nconst semiPrecedence: number = precedenceLevelB;\r\nconst antiPrecedence: number = precedenceLevelB;\r\nconst thetaSemiPrecedence: number = precedenceLevelB;\r\n\r\nconst precedenceLevelC: number = precedenceLevelB - 1;\r\nconst outerPrecedence: number = precedenceLevelC;\r\n\r\nconst precedenceLevelD: number = precedenceLevelC - 1;\r\nconst divisionPrecedence: number = precedenceLevelD;\r\n\r\nconst precedenceLevelE: number = precedenceLevelD - 1;\r\nconst intersectionPrecedence: number = precedenceLevelE;\r\n\r\nconst precedenceLevelF: number = precedenceLevelE - 1;\r\nconst differencePrecedence: number = precedenceLevelF;\r\n\r\nconst precedenceLevelG: number = precedenceLevelF - 1;\r\nconst unionPrecedence: number = precedenceLevelG;\r\n\r\n/**\r\n * Binary operators.\r\n */\r\nexport class BinaryOperatorToken extends ExprToken {\r\n\r\n    static naturalJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, naturalPrecedence, \"natural join\");\r\n    }\r\n\r\n    static cartesianProduct(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, cartesianPrecedence, \"cartesian product\");\r\n    }\r\n\r\n    static union(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, unionPrecedence, \"union\");\r\n    }\r\n\r\n    static intersection(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, intersectionPrecedence, \"intersection\");\r\n    }\r\n\r\n    static difference(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, differencePrecedence, \"difference\");\r\n    }\r\n\r\n    static leftSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, semiPrecedence, \"left semijoin\");\r\n    }\r\n\r\n    static rightSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, semiPrecedence, \"right semijoin\");\r\n    }\r\n\r\n    static leftAntijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, antiPrecedence, \"left antijoin\");\r\n    }\r\n\r\n    static rightAntijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, antiPrecedence, \"right antijoin\");\r\n    }\r\n\r\n    static thetaJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaPrecedence, \"theta join\");\r\n    }\r\n\r\n    static leftThetaSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaSemiPrecedence, \"left theta semijoin\");\r\n    }\r\n\r\n    static rightThetaSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaSemiPrecedence, \"right theta semijoin\");\r\n    }\r\n\r\n    static fullOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"full outer join\");\r\n    }\r\n\r\n    static leftOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"left outer join\");\r\n    }\r\n\r\n    static rightOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"right outer join\");\r\n    }\r\n\r\n    static division(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, divisionPrecedence, \"division\");\r\n    }\r\n\r\n    private constructor(str: IndexedString, public readonly precedence: number, public readonly type: BinaryNodeClass) {\r\n        super(str);\r\n    }\r\n}","import {ErrorFactory, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport RASyntaxError from \"../error/raSyntaxError\";\r\n\r\n/**\r\n * Class providing general helper functions for strings.\r\n */\r\nexport default class StringUtils {\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains letters only and has length at least 1\r\n     */\r\n    public static isWord(str: string): boolean {\r\n        return str.length > 0 && str.split(\"\").every(c => StringUtils.isLetter(c));\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains letters, numbers and underscores only, has length at least 1 and starts with\r\n     * a letter or an underscore\r\n     */\r\n    public static isName(str: string): boolean {\r\n        if (str.length === 0) {\r\n            return false;\r\n        }\r\n        if (!StringUtils.isLetter(str.charAt(0)) && str.charAt(0) !== '_') {\r\n            return false;\r\n        }\r\n        return str.split(\"\").every(c => StringUtils.isNameChar(c));\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains whitespaces only\r\n     */\r\n    public static isWhitespacesOnly(str: string): boolean {\r\n        const regex = /\\s*/;\r\n        const res = regex.exec(str);\r\n        return res === null ? false : res[0] === str;\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a letter\r\n     */\r\n    public static isLetter(c: string): boolean {\r\n        return c.length === 1 && c.toLowerCase() !== c.toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a letter, a number or an underscore\r\n     */\r\n    public static isNameChar(c: string): boolean {\r\n        return StringUtils.isLetter(c) || StringUtils.isDigit(c) || c === '_';\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a digit\r\n     */\r\n    public static isDigit(c: string): boolean {\r\n        return c.length === 1 && c.match(/\\d/) !== null;\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string represents a decimal number\r\n     */\r\n    public static isNumber(str: string): boolean {\r\n        return /^[-]?[\\d]+([.][\\d]+)?$/.test(str);\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of letters and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, as a word is returned an empty string.\r\n     *\r\n     * @param str string to be split\r\n     * @return split string in a pair { word, rest }\r\n     */\r\n    public static nextWord(str: string): { first: string, second: string } {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (!StringUtils.isLetter(str.charAt(i))) {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of letters, numbers and underscores, which starts with a letter or\r\n     * an underscore and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, or an underscore, as a name is returned an empty string.\r\n     *\r\n     * @param str string to be split\r\n     * @return split string in a pair { name, rest }\r\n     */\r\n    public static nextName(str: string): { first: string, second: string } {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        if (!StringUtils.isLetter(str.charAt(0)) && str.charAt(0) !== '_') {\r\n            return { first: \"\", second: str };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            const char: string = str.charAt(i);\r\n            if (!StringUtils.isLetter(char) && !StringUtils.isDigit(char) && char !== '_') {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of non-whitespace characters and its rest and returns these parts in a pair.\r\n     *\r\n     * @param str string to be split\r\n     * @return split string in a pair { word, rest }\r\n     */\r\n    public static nextNonWhitespacePart(str: string): { first: string, second: string } {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (str.charAt(i).match(/\\s/)) {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting number and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a digit, as a number is returned an empty string.\r\n     *\r\n     * @param str string to be split\r\n     * @return split string in a pair (word, rest)\r\n     */\r\n    static nextNumber(str: string): { first: string, second: string } {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        // string starts with '-' sign\r\n        if (str.charAt(0) === '-') {\r\n            // if there is a digit after '-', shifts the start\r\n            if (str.length > 1 && StringUtils.isDigit(str.charAt(1))) {\r\n                i = 1;\r\n            }\r\n            // there is no digit\r\n            else {\r\n                return { first: \"\", second: str };\r\n            }\r\n        }\r\n        let digitFound: boolean = false;\r\n        let dotFound: boolean = false;\r\n        while (i < str.length) {\r\n            if (StringUtils.isDigit(str.charAt(i))) {\r\n                digitFound = true;\r\n                ++i;\r\n            }\r\n            else if (str.charAt(i) === '.') {\r\n                // second dot or a dot without previous digits\r\n                if (dotFound || !digitFound) {\r\n                    break;\r\n                }\r\n                else {\r\n                    dotFound = true;\r\n                    ++i;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        const numStr = str.substring(0, i);\r\n        const rest = str.substring(i);\r\n        return { first: numStr, second: rest };\r\n    }\r\n\r\n    /**\r\n     * Splits the given string into starting quoted part and the rest. Quotes can be escaped by an odd count of\r\n     * backslashes.\r\n     * NOTE: When the closing quote is not found until the rest of the line, unclosed string is returned\r\n     * => the error is not thrown, it is only added to the return object.\r\n     * NOTE: First character of the string is expected to be '\"'.\r\n     *\r\n     * @param str string to be split\r\n     * @return pair of the starting bordered part and the rest\r\n     */\r\n    static nextQuotedString(str: string): { first: string, second: string, error: RASyntaxError | undefined } {\r\n        let i: number = 1;\r\n        // backslashes escape the quote character only in odd count\r\n        let backslashes: number = 0;\r\n        while (i < str.length) {\r\n            const curChar = str.charAt(i);\r\n            // increases index for using \"i\" in slicing\r\n            ++i;\r\n            // found quote - changes ignoring of special chars\r\n            if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                return { first: str.slice(0, i), second: str.slice(i), error: undefined };\r\n            }\r\n            // end of line breaks the string\r\n            if (curChar === '\\n') {\r\n                return {\r\n                    first: str.slice(0, i),\r\n                    second: str.slice(i),\r\n                    error: ErrorFactory.syntaxError(SyntaxErrorCodes.parser_nextBorderedPart_missingClosingChar,\r\n                        undefined, '\"', '\"')\r\n                };\r\n            }\r\n            // updates backslash count\r\n            if (curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n        }\r\n        return {\r\n            first: str,\r\n            second: \"\",\r\n            error: ErrorFactory.syntaxError(SyntaxErrorCodes.parser_nextBorderedPart_missingClosingChar,\r\n                undefined, '\"', '\"')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Splits the string to the starting bordered part and the rest and returns these parts in a pair.\r\n     * If there is only one ending character and it differs from the starting one, nested bordering is supported.\r\n     * Characters after an odd count of escape characters are ignored and cannot start or end a bordered part.\r\n     * Starting and ending characters in quoted part are ignored, quotes can be escaped by an odd count of backslashes.\r\n     * NOTE: First character of the string is expected to be 'start'.\r\n     * NOTE: Should not be used for slicing quoted strings, use nextQuotedString instead.\r\n     * NOTE: It is expected, that there are no comments in the given string.\r\n     *\r\n     * @param str string to be split\r\n     * @param start starting character of the string and also starting character of the bordered part (one character)\r\n     * @param end ending characters of the bordered part (one or more characters)\r\n     * @param escape character which makes next character being ignored (default '\\0')\r\n     * @return pair of the starting bordered part and the rest\r\n     */\r\n    static nextBorderedPart(str: string, start: string, end: string, escape: string = '\\0'): { first: string, second: string } {\r\n        let depth: number = 1;\r\n        let i: number = 1;\r\n        // to ignore special characters in quoted part\r\n        let inQuotes: boolean = false;\r\n        // nested bordering is supported if there is only one ending character\r\n        const nesting: boolean = end.length === 1;\r\n        // backslashes escape the quote character only in odd count\r\n        let backslashes: number = 0;\r\n        // escape characters escape the end character only in odd count\r\n        let escapeCount: number = 0;\r\n        while (i < str.length) {\r\n            const curChar = str.charAt(i);\r\n            // checks end of the part (before checking start for a case when start == end)\r\n            if (end.indexOf(curChar) > -1 && (escapeCount % 2) === 0 && !inQuotes) {\r\n                --depth;\r\n            }\r\n            // checks start of the bordered part (if only one ending character was given)\r\n            else if (curChar === start && (escapeCount % 2) === 0 && nesting && !inQuotes) {\r\n                ++depth;\r\n            }\r\n            // found quote - changes ignoring of special chars\r\n            else if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                inQuotes = !inQuotes;\r\n            }\r\n            // updates escape chars count\r\n            if (curChar === escape) {\r\n                ++escapeCount;\r\n            }\r\n            else {\r\n                escapeCount = 0;\r\n            }\r\n            // updates backslash count\r\n            if (curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            // increases index for using \"i\" in slicing\r\n            ++i;\r\n            if (depth === 0) {\r\n                return { first: str.slice(0, i), second: str.slice(i) };\r\n            }\r\n        }\r\n        throw ErrorFactory.syntaxError(SyntaxErrorCodes.parser_nextBorderedPart_missingClosingChar, undefined,\r\n            end.split('').join(\"' or '\"), start);\r\n    }\r\n\r\n    /**\r\n     * Skips all whitespaces and exactly one given character and returns rest of the string.\r\n     * If the string does not match this pattern, throws error.\r\n     *\r\n     * @param str string to be skipped in\r\n     * @param char char to be skipped exactly one time (expected to be string of length 1)\r\n     * @return given string without starting sequence of whitespaces and exactly one char\r\n     */\r\n    public static skipWhitespacesAndChar(str: string, char: string): string {\r\n        let charFound: boolean = false;\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (str.charAt(i).match(/\\s/)) {\r\n                ++i;\r\n            }\r\n            else if (str.charAt(i) === char && !charFound) {\r\n                charFound = true;\r\n                ++i;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (!charFound) {\r\n            throw ErrorFactory.syntaxError(SyntaxErrorCodes.parser_skipWhitespacesAndChar_charNotFound, undefined, char);\r\n        }\r\n        return str.substring(i);\r\n    }\r\n\r\n    /**\r\n     * Deletes all line contents after '//'.\r\n     *\r\n     * @param str string to be deleted comments in\r\n     */\r\n    public static deleteCommentLines(str: string) {\r\n        return str.split('\\n').map(line => {\r\n            let insideQuotes: boolean = false;\r\n            let backslashes: number = 0;\r\n            for (let i = 0; i < line.length; ++i) {\r\n                const curChar = line.charAt(i);\r\n                // quotes found\r\n                if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                    insideQuotes = !insideQuotes;\r\n                }\r\n                if (insideQuotes && curChar === '\\\\') {\r\n                    ++backslashes;\r\n                }\r\n                else {\r\n                    backslashes = 0;\r\n                }\r\n                // double-backslash found outside quotes\r\n                if (!insideQuotes && curChar === '/' && i > 0 && line.charAt(i - 1) === '/') {\r\n                    return line.slice(0, i - 1);\r\n                }\r\n            }\r\n            return line;\r\n        }).join('\\n');\r\n    }\r\n}","import Relation from \"../relation/relation\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Abstract general node of the relational algebra syntactic tree.\r\n */\r\nexport default abstract class RATreeNode {\r\n\r\n    protected resultRelation: Relation | undefined;\r\n\r\n    protected constructor() {\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * After successful call, this.resultRelation must be set to valid Relation.\r\n     */\r\n    public abstract eval(): void;\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper\r\n     */\r\n    public abstract fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]};\r\n\r\n    /**\r\n     * @return true if this node and its subtree was already evaluated\r\n     */\r\n    public isEvaluated(): boolean {\r\n        return this.resultRelation !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the resulting relation. The node and its subtree is evaluated if it was not evaluated before.\r\n     *\r\n     * @return resulting relation gained by evaluating this node and its subtree\r\n     */\r\n    public getResult(): Relation {\r\n        if (this.resultRelation === undefined) {\r\n            this.eval();\r\n        }\r\n        // @ts-ignore\r\n        return this.resultRelation;\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line\r\n     */\r\n    public abstract printInLine(): string;\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node\r\n     */\r\n    public abstract getOperationName(): string;\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node\r\n     */\r\n    public abstract getOperationSymbol(): string;\r\n}","import Relation from \"../relation/relation\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Leave node of the relational algebra syntactic tree with reference to a source relation.\r\n */\r\nexport default class RelationNode extends RATreeNode {\r\n\r\n    public constructor(relation: Relation) {\r\n        super();\r\n        this.resultRelation = relation;\r\n    }\r\n\r\n    public eval(): void {\r\n        // nothing to evaluate\r\n    }\r\n\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        // @ts-ignore\r\n        return {result: this.resultRelation, whispers: [], errors: []};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        // @ts-ignore\r\n        return this.resultRelation.getName();\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        // @ts-ignore\r\n        return this.resultRelation.getName();\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return \"\";\r\n    }\r\n}","/**\r\n * String representation with index of each character. Provides some usual string functions.\r\n */\r\nexport class IndexedString {\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing the given string. StartIndex is used as the offset for indexes.\r\n     * When the startIndex is omitted, 0 is used. When NaN is given, all indexes are NaN.\r\n     * Indexes of the characters are (0 + startIndex, ..., str.length - 1 + startIndex).\r\n     * NOTE: Each character has its own index. That means '\\r\\n' line separator has two indexes. For expected behavior, use\r\n     * '\\n' separator instead.\r\n     *\r\n     * @param str string\r\n     * @param startIndex\r\n     */\r\n    public static new(str: string, startIndex: number = 0): IndexedString {\r\n        return new IndexedString(str, str.split('').map((char, index) => {return {char: char, index: index + startIndex}}));\r\n    }\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing an empty string \"\".\r\n     */\r\n    public static empty(): IndexedString {\r\n        return new IndexedString('', []);\r\n    }\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing the given array of IndexedChars.\r\n     *\r\n     * @param arr IndexedChar array\r\n     */\r\n    public static newFromArray(arr: IndexedChar[]): IndexedString {\r\n        return new IndexedString(arr.map(ic => ic.char).join(''), arr);\r\n    }\r\n\r\n    /**\r\n     * Joins given array of IndexedStrings with given separator. Inserted separators have indexed given from the\r\n     * separatorIndexes array. NOTE: separatorIndexes array is expected to have length at least \"arr.length - 1\".\r\n     *\r\n     * @param arr array to join\r\n     * @param separator separator string\r\n     * @param separatorIndexes\r\n     */\r\n    public static join(arr: IndexedString[], separator: string, separatorIndexes: number[]): IndexedString {\r\n        if (arr.length === 0) {\r\n            return IndexedString.empty();\r\n        }\r\n        if (arr.length === 1) {\r\n            return arr[0];\r\n        }\r\n        const toConcat: IndexedString[] = Array<IndexedString>(2 * arr.length - 2);\r\n        for (let i = 1; i < arr.length; i++) {\r\n            toConcat[2 * i - 2] = IndexedString.new(separator, separatorIndexes[i - 1]);\r\n            toConcat[2 * i - 1] = arr[i];\r\n        }\r\n        return arr[0].concat(...toConcat);\r\n    }\r\n\r\n    /**\r\n     * Private constructor to ensure compatible string and IndexCharArray.\r\n     *\r\n     * @param str string representation\r\n     * @param chars IndexedChar representation\r\n     */\r\n    private constructor(private readonly str: string, private readonly chars: IndexedChar[]) { }\r\n\r\n    /**\r\n     * Returns string representation of the IndexedString.\r\n     */\r\n    public toString(): string {\r\n        return this.str;\r\n    }\r\n\r\n    /**\r\n     * Returns length of the string.\r\n     */\r\n    public length(): number {\r\n        return this.str.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the IndexedString represents an empty string \"\".\r\n     */\r\n    public isEmpty(): boolean {\r\n        return this.length() === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns IndexedChar array representing the IndexedString.\r\n     * The array is reference to inner IndexedString structure.\r\n     */\r\n    public getChars(): IndexedChar[] {\r\n        return this.chars;\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the first character of the IndexedString. Returns undefined if empty.\r\n     */\r\n    public getFirstIndex(): number | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.chars[0].index;\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the last character of the IndexedString. Returns undefined if empty.\r\n     */\r\n    public getLastIndex(): number | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.chars[this.length() - 1].index;\r\n    }\r\n\r\n    /**\r\n     * Returns the first non-NaN index of a character of the IndexedString. Returns undefined if empty.\r\n     * If all indexes are NaN, NaN is returned.\r\n     */\r\n    public getFirstNonNaNIndex(): number | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        for (let i = 0; i < this.length(); i++) {\r\n            if (!isNaN(this.chars[i].index)) {\r\n                return this.chars[i].index;\r\n            }\r\n        }\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * Returns the last non-NaN index of a character of the IndexedString. Returns undefined if empty.\r\n     * If all indexes are NaN, NaN is returned.\r\n     */\r\n    public getLastNonNaNIndex(): number | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        for (let i = this.length() - 1; i >= 0; i--) {\r\n            if (!isNaN(this.chars[i].index)) {\r\n                return this.chars[i].index;\r\n            }\r\n        }\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * Returns indexes of the first and the last character of the IndexedString. Returns undefined if empty.\r\n     */\r\n    public getRange(): {start: number, end: number} | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return { start: this.chars[0].index, end: this.chars[this.length() - 1].index };\r\n    }\r\n\r\n    /**\r\n     * Returns the first and the last non-NaN indexes of characters of the IndexedString. Returns undefined if empty or\r\n     * if all indexes are NaN.\r\n     */\r\n    public getNonNaNRange(): {start: number, end: number} | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        // @ts-ignore\r\n        const start: number = this.getFirstNonNaNIndex();\r\n        // returns undefined when all indexes are NaN\r\n        if (isNaN(start)) {\r\n            return undefined;\r\n        }\r\n        // @ts-ignore\r\n        const end: number = this.getLastNonNaNIndex();\r\n        return { start: start, end: end };\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the character at the given index. Throws RangeError if the index is\r\n     * out of IndexedString bounds.\r\n     *\r\n     * @param index\r\n     */\r\n    public charAt(index: number): string {\r\n        if (index < 0 || index >= this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return this.chars[index].char;\r\n    }\r\n\r\n    /**\r\n     * Returns an original position index of the character at the given current index. Throws RangeError if the given index is\r\n     * out of IndexedString bounds.\r\n     *\r\n     * @param index\r\n     */\r\n    public indexAt(index: number): number {\r\n        if (index < 0 || index >= this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return this.chars[index].index;\r\n    }\r\n\r\n    /**\r\n     * Split a string into substrings using the specified separator and return them as an array.\r\n     * It does not accept RegEx separators and array limit as built-in string.\r\n     *\r\n     * @param separator string separator\r\n     */\r\n    public split(separator: string): IndexedString[] {\r\n        if (this.isEmpty()) {\r\n            if (separator === '') {\r\n                return [];\r\n            }\r\n            return [IndexedString.empty()];\r\n        }\r\n        const sepLen: number = separator.length;\r\n        const strSplit: string[] = this.str.split(separator);\r\n        const prefixSum: number[] = Array<number>(strSplit.length);\r\n        prefixSum[0] = 0;\r\n        for (let i = 1; i < strSplit.length; i++) {\r\n            prefixSum[i] = prefixSum[i - 1] + strSplit[i - 1].length + sepLen;\r\n        }\r\n\r\n        return strSplit.map((strSplit, index) => {\r\n            return new IndexedString(strSplit, this.chars.slice(prefixSum[index], prefixSum[index] + strSplit.length));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Split a string into substrings using the '\\n' separator and return them as an array.\r\n     * Also, it returns indexes of removed '\\n's.\r\n     */\r\n    public splitToLines(): {split: IndexedString[], separatorIndexes: number[]} {\r\n        if (this.isEmpty()) {\r\n            return {split: [IndexedString.empty()], separatorIndexes: []};\r\n        }\r\n        const strSplit: string[] = this.str.split('\\n');\r\n        const strSplitLenMinusOne = strSplit.length - 1;\r\n        const prefixSum: number[] = Array<number>(strSplit.length);\r\n        const separatorIndexes: number[] = Array<number>(strSplit.length - 1);\r\n        prefixSum[0] = 0;\r\n        for (let i = 0; i < strSplitLenMinusOne; i++) {\r\n            const ps = prefixSum[i] + strSplit[i].length + 1;\r\n            separatorIndexes[i] = this.indexAt(ps - 1);\r\n            prefixSum[i + 1] = ps;\r\n        }\r\n\r\n        const split = strSplit.map((strSplit, index) => {\r\n            return new IndexedString(strSplit, this.chars.slice(prefixSum[index], prefixSum[index] + strSplit.length));\r\n        });\r\n        return {split, separatorIndexes};\r\n    }\r\n\r\n    /**\r\n     * Returns a section of a IndexedString.\r\n     *\r\n     * @param start The index of the beginning of the specified portion of stringObj.\r\n     * @param end The index of the end of the specified portion of IndexedString. The substring includes the characters\r\n     * up to, but not including, the character indicated by end. If this value is not specified, the substring\r\n     * continues to the end of IndexedString.\r\n     */\r\n    public slice(start: number, end?: number): IndexedString {\r\n        const _start = start < 0 ? this.length() + start : start;\r\n        const _end = end !== undefined ? (end < 0 ? this.length() + end : end) : this.length();\r\n        if (_start > _end || _start < 0 || _end > this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return IndexedString.newFromArray(this.chars.slice(_start, _end));\r\n    }\r\n\r\n    /**\r\n     * Removes the leading and trailing white space and line terminator characters from a string.\r\n     */\r\n    public trim(): IndexedString {\r\n        const trimStr: string = this.str.trim();\r\n        if (trimStr === '') {\r\n            return new IndexedString('', []);\r\n        }\r\n        const start: number = this.str.indexOf(trimStr.charAt(0));\r\n        return IndexedString.newFromArray(this.chars.slice(start, start + trimStr.length));\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the concatenation of this IndexedString with multiple other.\r\n     *\r\n     * @param strings The IndexedStrings to append to the end of the string.\r\n     */\r\n    public concat(...strings: IndexedString[]) {\r\n        return IndexedString.newFromArray(this.chars.concat(...strings.map(is => is.chars)));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the searchString sequence is the same as the corresponding\r\n     * elements of this object starting at position. Otherwise returns false.\r\n     *\r\n     * @param searchString\r\n     * @param position\r\n     */\r\n    public startsWith(searchString: string, position?: number | undefined): boolean {\r\n        return this.str.startsWith(searchString, position);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the searchString sequence is the same as the corresponding\r\n     * elements of this object starting at endPosition – searchString.length. Otherwise returns false.\r\n     *\r\n     * @param searchString\r\n     * @param position\r\n     */\r\n    public endsWith(searchString: string, position?: number | undefined): boolean {\r\n        return this.str.endsWith(searchString, position);\r\n    }\r\n\r\n    /**\r\n     * Replaces text in a string, using a regular expression or search string.\r\n     * NOTE: Returns built-in string.\r\n     *\r\n     * @param searchValue A string or RegEx to search for.\r\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n     */\r\n    public replace(searchValue: string | RegExp, replaceValue: string): string {\r\n        return this.str.replace(searchValue, replaceValue);\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the first occurrence of a substring.\r\n     *\r\n     * @param searchValue The substring to search for in the string\r\n     * @param fromIndex The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n     */\r\n    public indexOf(searchValue: string, fromIndex?: number): number {\r\n        return this.str.indexOf(searchValue, fromIndex);\r\n    }\r\n\r\n    /**\r\n     * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n     *\r\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n     */\r\n    public match(regexp: string | RegExp): RegExpMatchArray | null {\r\n        return this.str.match(regexp);\r\n    }\r\n\r\n    /**\r\n     * Creates a deep copy of the IndexedString.\r\n     */\r\n    public copy(): IndexedString {\r\n        return new IndexedString(this.str, this.chars.map(ic => {return {char: ic.char, index: ic.index}}));\r\n    }\r\n\r\n    /**\r\n     * Returns deep copy of the string with all whitespaces removed.\r\n     */\r\n    public removeWhitespaces(): IndexedString {\r\n        return new IndexedString(this.str.replace(/\\s/g, ''), this.chars\r\n            .filter(ic => {return !/\\s/.test(ic.char)})\r\n            .map(ic => {return {char: ic.char, index: ic.index}})\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns next index of the string (this.getLastIndex() + 1), if last index of the string is a number.\r\n     * Otherwise, returns NaN.\r\n     */\r\n    public getNextIndexOrNaN(): number {\r\n        const lastIndex = this.getLastIndex();\r\n        return lastIndex === undefined ? NaN : lastIndex + 1;\r\n    }\r\n\r\n    /**\r\n     * Returns true if it contains any of the characters from string chars. Otherwise, returns false.\r\n     */\r\n    public containsAny(chars: string): boolean {\r\n        for (let i = 0; i < chars.length; ++i) {\r\n            if (this.str.indexOf(chars[i]) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Indexed representation of one character.\r\n * WARNING: It is always assumed that IndexedChar.char is a string of length 1.\r\n */\r\nexport interface IndexedChar {\r\n    char: string,\r\n    index: number\r\n}","import {IndexedString} from \"../types/indexedString\";\r\nimport StringUtils from \"./stringUtils\";\r\nimport {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport RASyntaxError from \"../error/raSyntaxError\";\r\n\r\n/**\r\n * Class providing general helper functions for IndexedString.\r\n */\r\nexport default class IndexedStringUtils {\r\n\r\n    /**\r\n     * @param str Checked indexed string\r\n     * @return true if the string contains letters only and has length at least 1\r\n     */\r\n    public static isWord(str: IndexedString): boolean {\r\n        return StringUtils.isWord(str.toString());\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains letters, numbers and underscores only, has length at least 1 and starts with\r\n     * a letter or an underscore\r\n     */\r\n    public static isName(str: IndexedString): boolean {\r\n        return StringUtils.isName(str.toString());\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains whitespaces only\r\n     */\r\n    public static isWhitespacesOnly(str: IndexedString): boolean {\r\n        return StringUtils.isWhitespacesOnly(str.toString());\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a letter\r\n     */\r\n    public static isLetter(c: IndexedString): boolean {\r\n        return StringUtils.isLetter(c.toString());\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a letter, a number or an underscore\r\n     */\r\n    public static isNameChar(c: IndexedString): boolean {\r\n        return StringUtils.isNameChar(c.toString());\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a digit\r\n     */\r\n    public static isDigit(c: IndexedString): boolean {\r\n        return StringUtils.isDigit(c.toString());\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string represents a decimal number\r\n     */\r\n    public static isNumber(str: IndexedString): boolean {\r\n        return StringUtils.isNumber(str.toString());\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of letters and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, as a word is returned an empty string.\r\n     *\r\n     * @param str indexed string to be split\r\n     * @return split indexed string in a pair { word, rest }\r\n     */\r\n    public static nextWord(str: IndexedString): { first: IndexedString, second: IndexedString } {\r\n        const strParts: { first: string, second: string } = StringUtils.nextWord(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of letters, numbers and underscores, which starts with a letter or\r\n     * an underscore and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, or an underscore, as a name is returned an empty string.\r\n     *\r\n     * @param str string to be split\r\n     * @return split indexed string in a pair { name, rest }\r\n     */\r\n    public static nextName(str: IndexedString): { first: IndexedString, second: IndexedString } {\r\n        const strParts: { first: string, second: string } = StringUtils.nextName(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of non-whitespace characters and its rest and returns these\r\n     * parts in a pair.\r\n     *\r\n     * @param str string to be split\r\n     * @return split indexed string in a pair { name, rest }\r\n     */\r\n    public static nextNonWhitespacePart(str: IndexedString): { first: IndexedString, second: IndexedString } {\r\n        const strParts: { first: string, second: string } = StringUtils.nextNonWhitespacePart(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting number and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a digit, as a number is returned an empty string.\r\n     *\r\n     * @param str indexed string to be split\r\n     * @return split indexed string in a pair (word, rest)\r\n     */\r\n    static nextNumber(str: IndexedString): { first: IndexedString, second: IndexedString } {\r\n        const strParts: { first: string, second: string } = StringUtils.nextNumber(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits the given indexed string into starting quoted part and the rest. Quotes can be escaped by an odd count of\r\n     * backslashes.\r\n     * NOTE: When the closing quote is not found until the rest of the line, unclosed string is returned\r\n     * => the error is not thrown, it is only added to the return object.\r\n     * NOTE: First character of the string is expected to be '\"'.\r\n     *\r\n     * @param str string to be split\r\n     * @return pair of the starting bordered part and the rest\r\n     */\r\n    static nextQuotedString(str: IndexedString): { first: IndexedString, second: IndexedString, error: RASyntaxError | undefined } {\r\n        const strParts: { first: string, second: string, error: RASyntaxError | undefined } = StringUtils.nextQuotedString(str.toString());\r\n        const startIndex = str.getFirstNonNaNIndex();\r\n        if (startIndex !== undefined) {\r\n            strParts.error = insertRangeIfUndefined(strParts.error, {start: startIndex, end: startIndex});\r\n        }\r\n        return {\r\n            first: str.slice(0, strParts.first.length),\r\n            second: str.slice(strParts.first.length),\r\n            error: strParts.error\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Splits the indexed string to the starting bordered part and the rest and returns these parts in a pair.\r\n     * If there is only one ending character and it differs from the starting one, nested bordering is supported.\r\n     * Characters after escape character are ignored and cannot start or end a bordered part.\r\n     * Starting and ending characters in quoted part are ignored.\r\n     * NOTE: First character of the string is expected to be 'start'.\r\n     * NOTE: Should not be used for slicing quoted strings, use nextQuotedString instead.\r\n     * NOTE: It is expected, that there are no comments in the given string.\r\n     *\r\n     * @param str indexed string to be split\r\n     * @param start starting character of the string and also starting character of the bordered part (one character)\r\n     * @param end ending characters of the bordered part (one or more characters)\r\n     * @param escape character which makes next character being ignored (default '\\0')\r\n     * @return pair of the starting bordered part and the rest as indexed strings\r\n     */\r\n    static nextBorderedPart(str: IndexedString, start: string, end: string, escape: string = '\\0'):\r\n        { first: IndexedString, second: IndexedString } {\r\n        try {\r\n            const strParts: { first: string, second: string } = StringUtils.nextBorderedPart(str.toString(), start, end, escape);\r\n            return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n        }\r\n        catch (err) {\r\n            const startIndex = str.getFirstNonNaNIndex();\r\n            if (startIndex !== undefined) {\r\n                throw insertRangeIfUndefined(err, {start: startIndex, end: startIndex});\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Skips all whitespaces and exactly one given character and returns rest of the string.\r\n     * If the string does not match this pattern, throws error.\r\n     *\r\n     * @param str string to be skipped in\r\n     * @param char char to be skipped exactly one time (expected to be string of length 1)\r\n     * @return given string without starting sequence of whitespaces and exactly one char\r\n     */\r\n    public static skipWhitespacesAndChar(str: IndexedString, char: string): IndexedString {\r\n        try {\r\n            const skippedStr: string = StringUtils.skipWhitespacesAndChar(str.toString(), char);\r\n            return str.slice(str.length() - skippedStr.length);\r\n        }\r\n        catch (err) {\r\n            throw insertRangeIfUndefined(err, str.getNonNaNRange());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes all lines, where two first non-whitespace characters are '//'.\r\n     *\r\n     * @param str indexed string to be deleted comments in\r\n     */\r\n    public static deleteCommentLines(str: IndexedString) {\r\n        const {split, separatorIndexes} = str.splitToLines();\r\n        const toJoin = split.map(line => {\r\n            let insideQuotes: boolean = false;\r\n            let backslashes: number = 0;\r\n            for (let i = 0; i < line.length(); ++i) {\r\n                const curChar = line.charAt(i);\r\n                // quotes found\r\n                if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                    insideQuotes = !insideQuotes;\r\n                }\r\n                if (insideQuotes && curChar === '\\\\') {\r\n                    ++backslashes;\r\n                }\r\n                else {\r\n                    backslashes = 0;\r\n                }\r\n                // double-backslash found outside quotes\r\n                if (!insideQuotes && curChar === '/' && i > 0 && line.charAt(i - 1) === '/') {\r\n                    return line.slice(0, i - 1);\r\n                }\r\n            }\r\n            return line;\r\n        });\r\n        return IndexedString.join(toJoin, '\\n', separatorIndexes);\r\n    }\r\n}","import RATreeNode from \"./raTreeNode\";\r\n\r\n/**\r\n * Classes extending unary node.\r\n */\r\nexport type UnaryNodeClass = \"rename\" | \"projection\" | \"selection\";\r\n\r\n/**\r\n * Abstract node of the relational algebra syntactic tree with one subtree.\r\n */\r\nexport default abstract class UnaryNode extends RATreeNode {\r\n\r\n    protected subtree: RATreeNode;\r\n\r\n    protected constructor(subtree: RATreeNode) {\r\n        super();\r\n        this.subtree = subtree;\r\n    }\r\n\r\n    public getSubtree(): RATreeNode {\r\n        return this.subtree;\r\n    }\r\n}","import {ColumnContent, SupportedColumnType} from \"./columnType\";\r\nimport {isEqual} from \"lodash\";\r\nimport {CodeErrorCodes, ErrorFactory} from \"../error/errorFactory\";\r\n\r\n/**\r\n * Row stores a set of columns' values in a relation.\r\n */\r\nexport default class Row {\r\n\r\n    private readonly types = new Map<string, SupportedColumnType>();\r\n    private values = new Map<string, ColumnContent>();\r\n    private finished: boolean;\r\n\r\n    /**\r\n     * Creates a new row with given columns. Given column set is final, no more column can be added.\r\n     * Given columns' values are set to null. They can be set to a new value by addColumn function, as long as the row\r\n     * is not set finished.\r\n     *\r\n     * @param columns set of columns in a row\r\n     */\r\n    public constructor(columns: Map<string, SupportedColumnType>) {\r\n        // adds empty columns\r\n        columns.forEach((value, name) => {\r\n            this.values.set(name, null);\r\n        });\r\n        this.types = columns;\r\n        this.finished = false;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the row is finished and no more column change is possible.\r\n     *\r\n     * @return true if the row is finished\r\n     */\r\n    public isFinished(): boolean {\r\n        return this.finished;\r\n    }\r\n\r\n    /**\r\n     * Sets the row as finished, no more changes in column values are possible.\r\n     */\r\n    public finish(): void {\r\n        this.finished = true;\r\n    }\r\n\r\n    /**\r\n     * Gets name of all columns in a row.\r\n     *\r\n     * @return set of all columns' names\r\n     */\r\n    public getColumnNames(): IterableIterator<string> {\r\n        return this.types.keys();\r\n    }\r\n\r\n    /**\r\n     * Adds a value to the row. If the addition succeeded, returns true. It can fail, if the row is finished,\r\n     * if there is no column of the given name or if there is a column with the name, but different type.\r\n     *\r\n     * @param name name of the column\r\n     * @param value new value of the column\r\n     * @return true if addition succeeded\r\n     */\r\n    public addValue(name: string, value: ColumnContent): boolean {\r\n        // finished row or not present column\r\n        if (this.finished || !this.types.has(name)) {\r\n            return false;\r\n        }\r\n        let givenType = typeof value;\r\n        // null can be set all column types\r\n        if (value !== null && givenType !== this.types.get(name)) {\r\n            return false;\r\n        }\r\n        this.values.set(name, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the value (possibly null) of the column with the given name. If there is no column with this name, undefined is returned.\r\n     *\r\n     * @param name name of the column\r\n     * @return value of the column or undefined if there is no such column\r\n     */\r\n    public getValue(name: string): ColumnContent | undefined {\r\n        return this.values.get(name);\r\n    }\r\n\r\n    /**\r\n     * Returns the type of the given column or undefined if the column is absent.\r\n     *\r\n     * @param name name of the column\r\n     * @return the type of the column\r\n     */\r\n    public getType(name: string): SupportedColumnType | undefined {\r\n        return this.types.get(name);\r\n    }\r\n\r\n    /**\r\n     * Gets types of all columns.\r\n     *\r\n     * @return map of columns (name -> type)\r\n     */\r\n    public getTypes(): Map<string, SupportedColumnType> {\r\n        return this.types;\r\n    }\r\n\r\n    /**\r\n     * Gets values of all columns.\r\n     *\r\n     * @return map of columns (name -> value)\r\n     */\r\n    public getValues(): Map<string, ColumnContent> {\r\n        return this.values;\r\n    }\r\n\r\n    /**\r\n     * Returns values of all columns ordered by given array of column names. OrderedColumns are expected to be from the\r\n     * relation that contains the row. The returned values are converted to string type. String column values are\r\n     * changed to printing representation - escaped '\\\\' and '\"' are returned without the escape '\\\\'.\r\n     *\r\n     * @param orderedColumns order of columns to be returned\r\n     * @return ordered array of values\r\n     */\r\n    public getOrderedPrintValues(orderedColumns: string[]): string[] {\r\n        let ret: string[] = [];\r\n        orderedColumns.forEach(column => {\r\n            const value = this.values.get(column);\r\n            const type = this.types.get(column);\r\n            // should be handled before call\r\n            if (value === undefined || type === undefined) {\r\n                throw ErrorFactory.codeError(CodeErrorCodes.row_getOrderedValues_absentColumn, column, [...this.types.values()].join(', '));\r\n            }\r\n            if (type === \"string\") {\r\n                const str = String(value).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n                ret.push(str);\r\n            }\r\n            else {\r\n                ret.push(String(value));\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Custom equals function.\r\n     *\r\n     * @param other\r\n     */\r\n    public equals(other: Object): boolean {\r\n        if (other instanceof Row) {\r\n            return isEqual(this.types, other.types) && isEqual(this.values, other.values);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Lowercase reserved keywords which cannot be used for column names. They are:\r\n * - Null value: null\r\n * - Boolean values: true, false\r\n * - Empty string: \"\"\r\n */\r\nconst forbiddenColumnNames: string[] = [\"null\", \"true\", \"false\", \"\"];\r\n\r\n/**\r\n * Reserved keywords which cannot be used for relation names. They are:\r\n * - First characters of outer joins: F, L, R, f, l, r\r\n * - Empty string: \"\"\r\n */\r\nconst forbiddenRelationNames: string[] = [\"F\", \"L\", \"R\", \"\"];\r\n\r\n/**\r\n * Returns lowercase reserved keywords which cannot be used for column names. They are:\r\n * - Null value: null\r\n * - Boolean values: true, false\r\n * - Empty string: \"\"\r\n */\r\nexport function getForbiddenColumnNames(): string[] {\r\n    return forbiddenColumnNames;\r\n}\r\n\r\n/**\r\n * Returns reserved keywords which cannot be used for relation names. They are:\r\n * - First characters of outer joins: F, L, R, f, l, r\r\n * - Empty string: \"\"\r\n */\r\nexport function getForbiddenRelationNames(): string[] {\r\n    return forbiddenRelationNames;\r\n}\r\n\r\n/**\r\n * Returns true if the given string is forbidden as a column name.\r\n */\r\nexport function isForbiddenColumnName(str: string | IndexedString): boolean {\r\n    return forbiddenColumnNames.indexOf(str.toString().toLowerCase()) > -1;\r\n}\r\n\r\n/**\r\n * Returns true if the given string is forbidden as a relation name.\r\n */\r\nexport function isForbiddenRelationName(str: string | IndexedString): boolean {\r\n    // does not use to lower because forbidden names are upper\r\n    return forbiddenRelationNames.indexOf(str.toString()) > -1;\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Types of ComparingOperator class.\r\n */\r\nexport enum ComparingOperatorType {\r\n    equal,\r\n    nonEqual,\r\n    less,\r\n    more,\r\n    lessOrEqual,\r\n    moreOrEqual\r\n}\r\n\r\n/**\r\n * Comparing operator compares two values and returns boolean.\r\n */\r\nexport class ComparingOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of equality type (type = ComparingOperatorType.equal).\r\n     *\r\n     * @param operator used string representation of equality operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of equality type\r\n     */\r\n    public static equal(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.equal, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of non-equality type (type = ComparingOperatorType.nonEqual).\r\n     *\r\n     * @param operator used string representation of non-equality operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of non-equality type\r\n     */\r\n    public static nonEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.nonEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of less type (type = ComparingOperatorType.less).\r\n     *\r\n     * @param operator used string representation of less operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of less type\r\n     */\r\n    public static less(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.less, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of more type (type = ComparingOperatorType.more).\r\n     *\r\n     * @param operator used string representation of more operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of more type\r\n     */\r\n    public static more(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.more, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of less-or-equal type (type = ComparingOperatorType.lessOrEqual).\r\n     *\r\n     * @param operator used string representation of less-or-equal operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of less-or-equal type\r\n     */\r\n    public static lessOrEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.lessOrEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of more-or-equal type (type = ComparingOperatorType.moreOrEqual).\r\n     *\r\n     * @param operator used string representation of more-or-equal operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of more-or-equal type\r\n     */\r\n    public static moreOrEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.moreOrEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator of the given type.\r\n     *\r\n     * @param type ComparingOperator type\r\n     * @param operator used string representation of the operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     */\r\n    public constructor(private readonly type: ComparingOperatorType, private readonly operator: IndexedString,\r\n                       private readonly left: VETreeNode, private readonly right: VETreeNode) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluate the node and its subtrees and compares their value results to produce a boolean value. It needs to\r\n     * receive results of the same type from its subtrees.\r\n     * NOTE: If one of the subtrees' results is null, only equality and non-equality are valid. Other comparing\r\n     * operations returns always false.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes\r\n     * @return boolean comparing left and right subtrees' values\r\n     */\r\n    public eval(source: Row): { value: boolean, type: \"boolean\" } {\r\n        const leftResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.left.eval(source);\r\n        const rightResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.right.eval(source);\r\n\r\n        if (leftResult.type !== \"null\" && rightResult.type !== \"null\" && leftResult.type !== rightResult.type) {\r\n            throw ErrorFactory.syntaxError(SyntaxErrorCodes.comparingOperator_eval_differentInputTypes,\r\n                this.operator.getRange(), this.operator.toString(), leftResult.type, rightResult.type);\r\n        }\r\n\r\n        // if both values are null but both types are not null, returns false\r\n        if (leftResult.value === null && rightResult.value === null && leftResult.type !== \"null\" && rightResult.type !== \"null\") {\r\n            return {value: false, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.equal) {\r\n            return {value: leftResult.value === rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.nonEqual) {\r\n            // if any value of non-null type is null, returns false\r\n            if ((leftResult.value === null && leftResult.type !== \"null\") || (rightResult.value === null && rightResult.type !== \"null\")) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value !== rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.less) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value < rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.more) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value > rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.lessOrEqual) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value <= rightResult.value, type: \"boolean\"};\r\n        }\r\n        // if (this.type === ComparingOperatorType.moreOrEqual)\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value >= rightResult.value, type: \"boolean\"};\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"(\" + this.left.toString() + \" \" + this.operator.toString() + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import UnaryNode from \"./unaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ErrorFactory, SemanticErrorCodes, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {isForbiddenColumnName} from \"../utils/keywords\";\r\nimport IndexedStringUtils from \"../utils/indexedStringUtils\";\r\n\r\n/**\r\n * Projection node of the relational algebra syntactic tree.\r\n */\r\nexport default class ProjectionNode extends UnaryNode {\r\n\r\n    private readonly projection: IndexedString;\r\n    private readonly stringRange: { start: number, end: number } | undefined;\r\n\r\n    /**\r\n     * Expects the projection string to start with '[' and end with ']'.\r\n     *\r\n     * @param projection\r\n     * @param subtree\r\n     */\r\n    constructor(projection: IndexedString, subtree: RATreeNode) {\r\n        super(subtree);\r\n        this.projection = projection;\r\n        this.stringRange = projection.getRange();\r\n    }\r\n\r\n    /**\r\n     * Parses projection string to set of projected columns.\r\n     * If doThrow is true, throws found errors. Otherwise, adds found errors to given errors array.\r\n     */\r\n    private parseProjection(doThrow: boolean, errors: ErrorWithTextRange[] = []): Set<IndexedString> {\r\n        const ret: Set<IndexedString> = new Set<IndexedString>();\r\n        // @ts-ignore\r\n        let str: IndexedString = this.projection.slice(1, -1);\r\n        let parts: IndexedString[] = str.split(\",\");\r\n        parts.forEach(part => {\r\n            part = part.trim();\r\n            // @ts-ignore\r\n            const isName = IndexedStringUtils.isName(part);\r\n            if (isName && !isForbiddenColumnName(part)) {\r\n                ret.add(part);\r\n            }\r\n            else {\r\n                let range = part.getRange();\r\n                if (part.isEmpty() && this.stringRange !== undefined) {\r\n                    range = {start: this.stringRange.start, end: this.stringRange.start};\r\n                }\r\n                const error = ErrorFactory.syntaxError(SyntaxErrorCodes.projectionNode_parseProjection_invalidProjectedColumnName,\r\n                    range, part.toString());\r\n                if (doThrow) {\r\n                    throw error;\r\n                }\r\n                else {\r\n                    errors.push(error);\r\n                }\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Expectations: projected names are subset of source schema\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const source: Relation = this.subtree.getResult();\r\n        const projectedIndexed: IndexedString[] = [...this.parseProjection(true)];\r\n        // checks if projected columns really exist in source relation\r\n        projectedIndexed.forEach(name => {\r\n            if (!source.hasColumn(name.toString())) {\r\n                throw ErrorFactory.semanticError(SemanticErrorCodes.projectionNode_eval_absentColumn,\r\n                    name.getRange(), name.toString());\r\n            }\r\n        });\r\n\r\n        const projected: string[] = projectedIndexed.map(p => p.toString());\r\n        const result: Relation = new Relation(source.getName() + \"[...]\");\r\n        // projection of relational schema\r\n        source.forEachColumn((type, name) => {\r\n            if (projected.indexOf(name) > -1) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // projection of relation rows\r\n        source.getRows().forEach(row => {\r\n             let newRow: Row = new Row(result.getColumns());\r\n             row.getValues().forEach((value, name) => {\r\n                 if (projected.indexOf(name) > -1) {\r\n                     newRow.addValue(name, value);\r\n                 }\r\n             });\r\n             result.addRow(newRow);\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: projected names are subset of source schema\r\n     * Returned schema: intersection of projected names and source schema\r\n     * Second possible approach would be to return all projected names - less strict.\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        let source: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.subtree.fakeEval(cursorIndex);\r\n        // checks whether the cursor is in this projection block - saves current available columns\r\n        let whispers = source.whispers;\r\n        if (this.stringRange !== undefined && this.stringRange.start < cursorIndex && cursorIndex <= this.stringRange.end) {\r\n            whispers = source.result.getColumnNames();\r\n        }\r\n        // adds errors from current expression\r\n        const errors = source.errors;\r\n        const projected: Set<IndexedString> = this.parseProjection(false, errors);\r\n        // creates relational schema - \"projected columns\"\r\n        const result: Relation = new Relation(source.result.name + \"[...]\");\r\n        // adds only projected, which exist in source\r\n        const absent: IndexedString[] = [];\r\n        projected.forEach(name => {\r\n            const strName = name.toString();\r\n            if (source.result.hasColumn(strName)) {\r\n                // @ts-ignore - strName must be in the source now\r\n                result.addColumn(strName, source.result.getColumns().get(strName));\r\n            }\r\n            else {\r\n                absent.push(name);\r\n            }\r\n        });\r\n        absent.forEach(column => {\r\n            errors.push(ErrorFactory.semanticError(SemanticErrorCodes.projectionNode_eval_absentColumn,\r\n                column.getRange(), column.toString()));\r\n        });\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return \"Projection\";\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.projection.replace(/\\s+/g, ' ');\r\n    }\r\n}","import {IndexedString} from \"./indexedString\";\r\n\r\ninterface KeyValue {\r\n    key: IndexedString,\r\n    value: IndexedString\r\n}\r\n\r\n/**\r\n * Wrapper of JavaScript Map object to provide usage of object (string | IndexedString) as a key for (string |\r\n * IndexedString) values.\r\n * Keys \"IndexedString: something\" and \"string: something\" are equal for this map.\r\n */\r\nexport class ISToISMap {\r\n    private map: Map<string, KeyValue> = new Map<string, KeyValue>();\r\n\r\n    public get(key: string | IndexedString): string | IndexedString | undefined {\r\n        const keyValue = this.map.get(key.toString());\r\n        return keyValue === undefined ? undefined : keyValue.value;\r\n    }\r\n\r\n    public set(key: IndexedString, value: IndexedString): void {\r\n        this.map.set(key.toString(), {key, value});\r\n    }\r\n\r\n    public delete(key: IndexedString): boolean {\r\n        return this.map.delete(key.toString());\r\n    }\r\n\r\n    public has(key: string | IndexedString): boolean {\r\n        return this.map.has(key.toString());\r\n    }\r\n\r\n    public clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    public size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    public forEach(f: (value: IndexedString, row: IndexedString, index?: number) => void): void {\r\n        [...this.map.values()].forEach((keyValue, index) => f(keyValue.value, keyValue.key, index));\r\n    }\r\n}","import UnaryNode from \"./unaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\nimport Relation from \"../relation/relation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport Row from \"../relation/row\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ErrorFactory, SemanticErrorCodes, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport {isForbiddenColumnName} from \"../utils/keywords\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {ISToISMap} from \"../types/isToISMap\";\r\n\r\n/**\r\n * Renaming node of the relational algebra syntactic tree.\r\n */\r\nexport default class RenameNode extends UnaryNode {\r\n\r\n    private readonly rename: IndexedString;\r\n    private readonly stringRange: { start: number, end: number } | undefined;\r\n\r\n    /**\r\n     * Creates a new renaming node with given subtree.\r\n     * The rename string is expected to start with '<' and end with '>'.\r\n     *\r\n     * @param rename string describing each renaming\r\n     * @param subtree source subtree for renaming\r\n     */\r\n    public constructor(rename: IndexedString, subtree: RATreeNode) {\r\n        super(subtree);\r\n        this.rename = rename;\r\n        this.stringRange = rename.getRange();\r\n    }\r\n\r\n    private parseChanges(doThrow: boolean, errors: ErrorWithTextRange[] = []): ISToISMap {\r\n        const handleError = (error: SyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            } else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        const parts: IndexedString[] = this.rename.slice(1, -1).split(\",\");\r\n        const ret: ISToISMap = new ISToISMap();\r\n        for (let part of parts) {\r\n            // @ts-ignore\r\n            let words: IndexedString[] = part.split(\"->\").map(w => w.trim());\r\n            let beforeError = false; // true when there was an error in before in \"before -> after\"\r\n            let afterError = false;  // true when there was an error in after in \"before -> after\"\r\n            if (words.length !== 2) {\r\n                let range = part.getRange();\r\n                if (part.isEmpty() && this.stringRange !== undefined) {\r\n                    range = {start: this.stringRange.start, end: this.stringRange.start};\r\n                }\r\n                handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.renameNode_parseChanges_missingArrow, range));\r\n                beforeError = true;\r\n                afterError = true;\r\n            }\r\n            if (!beforeError && ret.has(words[0])) {\r\n                handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.renameNode_parseChanges_multipleRenameOfTheColumn,\r\n                    words[0].getRange(), words[0].toString()));\r\n                beforeError = true;\r\n            }\r\n            if (!afterError && !StringUtils.isName(words[1].toString())) {\r\n                handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.renameNode_parseChanges_invalidNewName,\r\n                    words[1].getRange(), words[1].toString()));\r\n                afterError = true;\r\n            }\r\n            if (!afterError && isForbiddenColumnName(words[1])) {\r\n                handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.renameNode_parseChanges_keywordNewName,\r\n                    words[1].getRange(), words[1].toString()));\r\n                afterError = true;\r\n            }\r\n            // if no error found, adds original rename pair\r\n            if (!beforeError && !afterError) {\r\n                ret.set(words[0], words[1]);\r\n            }\r\n            // if no before error, fakes rename \"before -> before\"\r\n            else if (!beforeError) {\r\n                ret.set(words[0], words[0]);\r\n            }\r\n            // if no after error, fakes rename \"\"\" -> before\", where empty string has undefined range\r\n            else if (!afterError) {\r\n                ret.set(IndexedString.empty(), words[0]);\r\n            }\r\n            // if both errors, adds nothing\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Expectations: original names in projection pair (original -> new) are subset of the source schema,\r\n     * new names with rest of the source schema contain no duplicity\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const changes: ISToISMap = this.parseChanges(true);\r\n        const source: Relation = this.subtree.getResult();\r\n        // check whether all columns to rename are in source relation\r\n        changes.forEach((value, key) => {\r\n             if (source.getColumnNames().indexOf(key.toString()) === -1) {\r\n                 throw ErrorFactory.semanticError(SemanticErrorCodes.renameNode_eval_absentOriginalColumn,\r\n                     key.getRange(), key.toString());\r\n             }\r\n        });\r\n        // rename of relational schema\r\n        const result: Relation = new Relation(source.getName() + \"<...>\");\r\n        const toChange: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>();\r\n        // in first loop adds unchanged columns only\r\n        source.forEachColumn((type, name) => {\r\n            if (changes.has(name)) {\r\n                toChange.set(name, type);\r\n            }\r\n            else {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // in second loop adds changed columns\r\n        toChange.forEach((type, name) => {\r\n            // @ts-ignore (changes must contain 'name' key now)\r\n            if (!result.addColumn(changes.get(name).toString(), type)) {\r\n                throw ErrorFactory.semanticError(SemanticErrorCodes.renameNode_eval_changeToDuplicitName,\r\n                    this.rename.getRange(), changes.get(name) as string);\r\n            }\r\n        });\r\n        // rename of relation rows\r\n        source.getRows().forEach(row => {\r\n            const newRow: Row = new Row(result.getColumns());\r\n            row.getValues().forEach((value, name) => {\r\n                const returned = changes.get(name);\r\n                if (typeof returned === \"undefined\") {\r\n                    newRow.addValue(name, value);\r\n                }\r\n                else {\r\n                    newRow.addValue(returned.toString(), value);\r\n                }\r\n            });\r\n            result.addRow(newRow);\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: original names in projection pair (original -> new) are subset of the source schema,\r\n     * new names with rest of the source schema contain no duplicity\r\n     * Returned schema: if the cursor is not after the arrow '->' returns\r\n     * (source schema minus originals) union (news whose originals were in source schema),\r\n     * otherwise returns empty array (does not whisper to what the user should rename)\r\n     * Second possible approach would be to return (source schema minus originals) union (news) - less strict.\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const source: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.subtree.fakeEval(cursorIndex);\r\n        // checks whether the cursor is in this rename block\r\n        let whispers = source.whispers;\r\n        if (this.stringRange !== undefined && this.stringRange.start < cursorIndex && cursorIndex <= this.stringRange.end) {\r\n            // if the last special character before cursor is '<' or ',' returns current available columns (subtree schema)\r\n            const beforeCursor: IndexedString = this.rename.slice(0, cursorIndex - this.stringRange.start).trim();\r\n            const regexMatch = beforeCursor.match(/.*[^\\w\\s]/);\r\n            if (regexMatch !== null && (regexMatch[0].endsWith('<') || regexMatch[0].endsWith(','))) {\r\n                whispers = source.result.getColumnNames();\r\n            }\r\n        }\r\n        // adds errors from current expression\r\n        const errors = source.errors;\r\n        const changes: ISToISMap = this.parseChanges(false, errors);\r\n        // creates relational schema - \"(source minus to-rename) union (renamed existing in source)\"\r\n        const result: Relation = new Relation(source.result.getName() + \"<...>\");\r\n        // in first loop adds source columns which are not in changes.keys\r\n        source.result.forEachColumn((type, name) => {\r\n            if (!changes.has(name)) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // in second loop adds changes.values whose changes.keys are in source\r\n        const absent: IndexedString[] = [];\r\n        const duplicit: IndexedString[] = [];\r\n        changes.forEach((after, before) => {\r\n            const beforeStr = before.toString();\r\n            const afterStr = after.toString();\r\n            if (!source.result.hasColumn(beforeStr) && !before.isEmpty()) {\r\n                absent.push(before);\r\n            }\r\n            // @ts-ignore source must have beforeStr now\r\n            else if(!result.addColumn(afterStr, source.result.getColumns().get(beforeStr))) {\r\n                duplicit.push(after);\r\n            }\r\n        });\r\n        absent.forEach(column => {\r\n            errors.push(ErrorFactory.semanticError(SemanticErrorCodes.renameNode_eval_absentOriginalColumn,\r\n                column.getRange(), column.toString()));\r\n        });\r\n        duplicit.forEach(column => {\r\n            errors.push(ErrorFactory.semanticError(SemanticErrorCodes.renameNode_eval_changeToDuplicitName,\r\n                column.getRange(), column.toString()));\r\n        });\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return \"Rename\";\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.rename.replace(/\\s+/g, ' ');\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\n\r\n/**\r\n * Abstract class for value-evaluating nodes producing new values.\r\n */\r\nexport abstract class VETreeNode {\r\n\r\n    /**\r\n     * Evaluates this value-evaluating tree.\r\n     *\r\n     * @param source row with values to be used to reference to\r\n     * @return evaluated value and its type\r\n     */\r\n    public abstract eval(source: Row): { value: ColumnContent, type: SupportedColumnType | \"null\" };\r\n\r\n    /**\r\n     * @return string representation of the value-evaluating tree\r\n     */\r\n    public abstract toString(): string;\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Types of LogicalOperator class.\r\n */\r\nenum LogicalOperatorType {\r\n    and,\r\n    or,\r\n    not\r\n}\r\n\r\n/**\r\n * Logical operator chains boolean values and produces new ones.\r\n */\r\nexport class LogicalOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates an 'and' logical operator.\r\n     *\r\n     * @param operator String representing an 'and' in input (used to printing)\r\n     * @param left Left subtree evaluating to a boolean value\r\n     * @param right Right subtree evaluating to a boolean value\r\n     */\r\n    public static and(operator: IndexedString, left: VETreeNode, right: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.and, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates an 'or' logical operator.\r\n     *\r\n     * @param operator String representing an 'or' in input (used to printing)\r\n     * @param left Left subtree evaluating to a boolean value\r\n     * @param right Right subtree evaluating to a boolean value\r\n     */\r\n    public static or(operator: IndexedString, left: VETreeNode, right: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.or, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates a 'not' logical operator.\r\n     *\r\n     * @param operator String representing a 'not' in input (used to printing)\r\n     * @param subtree Subtree evaluating to a boolean value\r\n     */\r\n    public static not(operator: IndexedString, subtree: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.not, operator, subtree);\r\n    }\r\n\r\n    private constructor(private readonly type: LogicalOperatorType, private readonly operator: IndexedString,\r\n                        private readonly left: VETreeNode, private readonly right?: VETreeNode) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluates recursively subtrees and transforms their boolean results into a new boolean.\r\n     * If any subtree evaluates to string or number, throws error.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes\r\n     * @return boolean comparing left and right subtrees' values\r\n     */\r\n    public eval(source: Row): { value: boolean, type: \"boolean\" } {\r\n\r\n        const leftResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.left.eval(source);\r\n        if (leftResult.type !== \"boolean\") {\r\n            throw ErrorFactory.syntaxError(SyntaxErrorCodes.logicalOperator_eval_leftInputNotBoolean,\r\n                this.operator.getRange(), this.operator.toString(), leftResult.type);\r\n        }\r\n\r\n        if (this.type === LogicalOperatorType.not) {\r\n            if (leftResult.value === null) {\r\n                return { value: false, type: \"boolean\" };\r\n            }\r\n            return { value: !leftResult.value, type: \"boolean\" };\r\n        }\r\n        else {\r\n            // @ts-ignore (in and/or operations right subtree must exist)\r\n            const rightResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.right.eval(source);\r\n            if (rightResult.type !== \"boolean\") {\r\n                throw ErrorFactory.syntaxError(SyntaxErrorCodes.logicalOperator_eval_rightInputNotBoolean,\r\n                    this.operator.getRange(), this.operator.toString(), rightResult.type);\r\n            }\r\n\r\n            if (this.type === LogicalOperatorType.and) {\r\n                if (leftResult.value === null || rightResult.value === null) {\r\n                    return { value: false, type: \"boolean\" };\r\n                }\r\n                // @ts-ignore (they must be both booleans now)\r\n                return { value: leftResult.value && rightResult.value, type: \"boolean\" };\r\n            }\r\n            else /* if (this.type === LogicalOperatorType.or)*/ {\r\n                if (leftResult.value === null && rightResult.value === null) {\r\n                    return { value: false, type: \"boolean\" };\r\n                }\r\n                if (leftResult.value === null) {\r\n                    // @ts-ignore (it must be boolean now)\r\n                    return { value: rightResult.value, type: \"boolean\" };\r\n                }\r\n                if (rightResult.value === null) {\r\n                    // @ts-ignore (it must be boolean now)\r\n                    return { value: leftResult.value, type: \"boolean\" };\r\n                }\r\n                // @ts-ignore (they must be both booleans now)\r\n                return { value: leftResult.value || rightResult.value, type: \"boolean\" };\r\n            }\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.type === LogicalOperatorType.not) {\r\n            return this.operator.toString() + \"(\" + this.left.toString() + \")\";\r\n        }\r\n        // @ts-ignore (in and, or operations right subtree must exist)\r\n        return \"(\" + this.left.toString() + \" \" + this.operator.toString() + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory, SyntaxErrorCodes} from \"../error/errorFactory\";\r\n\r\n/**\r\n * Types of ComputingOperator class.\r\n */\r\nenum ComputingOperatorType {\r\n    plus = \"+\",\r\n    minus = \"-\",\r\n    multiplication = \"*\",\r\n    division = \"/\"\r\n}\r\n\r\n/**\r\n * Comparing operator takes two number values and returns a new computed number.\r\n */\r\nexport class ComputingOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates an addition (+) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value\r\n     * @param right Right subtree evaluating to a number value\r\n     * @param range Range of the operator in the input string to highlight errors\r\n     */\r\n    public static add(left: VETreeNode, right: VETreeNode, range: {start: number, end: number} | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.plus, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a deduction (-) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value\r\n     * @param right Right subtree evaluating to a number value\r\n     * @param range Range of the operator in the input string to highlight errors\r\n     */\r\n    public static deduct(left: VETreeNode, right: VETreeNode, range: {start: number, end: number} | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.minus, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a multiplication (*) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value\r\n     * @param right Right subtree evaluating to a number value\r\n     * @param range Range of the operator in the input string to highlight errors\r\n     */\r\n    public static multiply(left: VETreeNode, right: VETreeNode, range: {start: number, end: number} | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.multiplication, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a division (/) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value\r\n     * @param right Right subtree evaluating to a number value\r\n     * @param range Range of the operator in the input string to highlight errors\r\n     */\r\n    public static divide(left: VETreeNode, right: VETreeNode, range: {start: number, end: number} | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.division, left, right, range);\r\n    }\r\n\r\n    private constructor(private readonly type: ComputingOperatorType, private readonly left: VETreeNode,\r\n                        private readonly right: VETreeNode, private readonly range: {start: number, end: number} | undefined) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluates recursively subtrees and transforms their number results into a new number.\r\n     * If any subtree evaluates to string or boolean, throws error.\r\n     * If any subtree evaluates to null, returns null.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes\r\n     * @return number produced from subtrees with given operation, or null if any subtree returned null\r\n     */\r\n    public eval(source: Row): { value: number | null, type: \"number\" } {\r\n        const leftResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.left.eval(source);\r\n        const rightResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.right.eval(source);\r\n\r\n        if (leftResult.type !== \"number\" || rightResult.type !== \"number\") {\r\n            throw ErrorFactory.syntaxError(SyntaxErrorCodes.computingOperator_eval_inputTypesNotNumbers, this.range,\r\n                this.type, leftResult.type, rightResult.type);\r\n        }\r\n\r\n        if (leftResult.value === null || rightResult.value === null) {\r\n            return { value: null, type: \"number\" };\r\n        }\r\n\r\n        switch (this.type) {\r\n            case ComputingOperatorType.plus:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value + rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.minus:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value - rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.multiplication:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value * rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.division:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value / rightResult.value, type: \"number\" };\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"(\" + this.left.toString() + \" \" + this.type + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\n\r\n/**\r\n * Class storing literal value of number, string or null type.\r\n */\r\nexport class LiteralValue extends VETreeNode {\r\n\r\n    /**\r\n     * Creates a literal storing given value.\r\n     *\r\n     * @param value value to be returned by eval(...) function\r\n     * @param type type of the literal value\r\n     */\r\n    public constructor(private readonly value: ColumnContent, private readonly type: SupportedColumnType | \"null\") {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Returns stored value.\r\n     *\r\n     * @param source row with actual values of columns (note: not used in literals)\r\n     * @return stored value and its type\r\n     */\r\n    public eval(source: Row): { value: ColumnContent, type: SupportedColumnType | \"null\" } {\r\n        return { value: this.value, type: this.type };\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.value === null) {\r\n            return \"null\";\r\n        }\r\n        return this.value.toString();\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory, SemanticErrorCodes} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Class storing reference to a column.\r\n */\r\nexport class ReferenceValue extends VETreeNode {\r\n\r\n    /**\r\n     * Creates a reference to the given column.\r\n     *\r\n     * @param columnName name of the column whose value is returned by eval(...) function\r\n     */\r\n    public constructor(private readonly columnName: IndexedString) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Returns value (expected to be string, number, or boolean) of the referenced column from given source row.\r\n     *\r\n     * @param source row with actual values of columns\r\n     * @return referenced value and its type\r\n     */\r\n    public eval(source: Row): { value: ColumnContent, type: SupportedColumnType } {\r\n        const value: ColumnContent | undefined = source.getValue(this.columnName.toString());\r\n        const type: SupportedColumnType | undefined = source.getType(this.columnName.toString());\r\n        if (value === undefined || type === undefined) {\r\n            throw ErrorFactory.semanticError(SemanticErrorCodes.referenceValue_eval_absentColumn,\r\n                this.columnName.getRange(), this.columnName.toString(), [...source.getColumnNames()].join(', '));\r\n        }\r\n        return { value: value, type: type };\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.columnName.toString();\r\n    }\r\n}","import {ComparingOperatorType} from \"../vetree/comparingOperator\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Precedence value for all token types.\r\n */\r\nconst precedenceNot: number = 50;\r\nconst precedenceMulDiv: number = 30;\r\nconst precedencePlusMinus: number = 25;\r\nconst precedenceComparison: number = 20;\r\nconst precedenceAnd: number = 10;\r\nconst precedenceOr: number = 5;\r\n\r\n/**\r\n * Tokens used for parsing of string expression to BooleanEvaluating tree.\r\n */\r\nexport abstract class ValueToken {\r\n    protected constructor(public readonly str: IndexedString) {}\r\n\r\n    /**\r\n     * Gets token start and end index in the text (if the token has IndexedString representation) or undefined.\r\n     */\r\n    public getRange(): {start: number, end: number} | undefined {\r\n        return this.str.getNonNaNRange();\r\n    }\r\n}\r\n\r\nexport abstract class OperatorToken extends ValueToken {\r\n    protected constructor(str: IndexedString, readonly precedence: number) {\r\n        super(str);\r\n    }\r\n}\r\n\r\nexport class LogicalNotToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceNot);\r\n    }\r\n}\r\n\r\nexport class LogicalAndToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceAnd);\r\n    }\r\n}\r\n\r\nexport class LogicalOrToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceOr);\r\n    }\r\n}\r\n\r\nexport class ComputingMultiplicationToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceMulDiv);\r\n    }\r\n}\r\n\r\nexport class ComputingDivisionToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceMulDiv);\r\n    }\r\n}\r\n\r\nexport class ComputingPlusToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedencePlusMinus);\r\n    }\r\n}\r\n\r\nexport class ComputingMinusToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedencePlusMinus);\r\n    }\r\n}\r\n\r\nexport class ComparingToken extends OperatorToken {\r\n    constructor(readonly type: ComparingOperatorType, operator: IndexedString) {\r\n        super(operator, precedenceComparison);\r\n    }\r\n}\r\n\r\nexport abstract class ParenthesisToken extends ValueToken {\r\n    protected constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class OpeningParentheses extends ParenthesisToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class ClosingParentheses extends ParenthesisToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class LiteralToken extends ValueToken {\r\n    constructor(str: IndexedString, readonly value: ColumnContent, readonly type: SupportedColumnType | \"null\") {\r\n        super(str);\r\n    }\r\n}\r\n\r\nexport class ReferenceToken extends ValueToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(columnName: IndexedString) {\r\n        super(columnName);\r\n    }\r\n}","import StringUtils from \"../utils/stringUtils\";\r\nimport {ComparingOperator, ComparingOperatorType} from \"../vetree/comparingOperator\";\r\nimport {LogicalOperator} from \"../vetree/logicalOperator\";\r\nimport {LiteralValue} from \"../vetree/literalValue\";\r\nimport {ReferenceValue} from \"../vetree/referenceValue\";\r\nimport {ComputingOperator} from \"../vetree/computingOperator\";\r\nimport {\r\n    ClosingParentheses,\r\n    ComparingToken,\r\n    ComputingDivisionToken,\r\n    ComputingMinusToken,\r\n    ComputingMultiplicationToken,\r\n    ComputingPlusToken,\r\n    LiteralToken,\r\n    LogicalAndToken,\r\n    LogicalNotToken,\r\n    LogicalOrToken,\r\n    OpeningParentheses,\r\n    OperatorToken,\r\n    ParenthesisToken,\r\n    ReferenceToken,\r\n    ValueToken\r\n} from \"./valueTokens\"\r\nimport {VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport IndexedStringUtils from \"../utils/indexedStringUtils\";\r\nimport ErrorWithTextRange, {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {CodeErrorCodes, ErrorFactory, SemanticErrorCodes, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport RASyntaxError from \"../error/raSyntaxError\";\r\n\r\n/**\r\n * StringUtils of string infix boolean and algebraic expression to value-evaluating tree.\r\n */\r\nexport default class ValueParser {\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression into an value-evaluating tree and returns the tree.\r\n     * Uses Shunting-yard algorithm (first, it transforms the string into reverse polish notation).\r\n     * Supported expressions:\r\n     * - logical: and (&&, &), or (||, |), not (!, ~)\r\n     * - computing: addition (+), deduction (-), multiplication (*), division (/)\r\n     * - comparing: equal (==, =), non-equal (!=, <>), less (<), more (>), less-or-equal (<=), more-or-equal (>=)\r\n     * - literals: numbers (1, 5.02, etc.), strings (\"String\", \"With inner \\\" symbol\", etc.), nulls (null),\r\n     * booleans (true, false)\r\n     * - column references (ColumnNameAsStringWithoutQuotes, Id, etc.)\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @return VETreeNode tree (its root)\r\n     */\r\n    public static parse(str: IndexedString, nullValuesSupport: boolean): VETreeNode {\r\n        let tokens: ValueToken[] = ValueParser.parseTokens(str, nullValuesSupport, true);\r\n        this.assertValidInfixTokens(tokens, true);\r\n        tokens = this.simplify(tokens);\r\n        try {\r\n            const rpn: ValueToken[] = ValueParser.toRPN(tokens);\r\n            return ValueParser.rpnToVETree(rpn);\r\n        }\r\n        catch (err) {\r\n            throw insertRangeIfUndefined(err, str.getRange());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression and returns errors in it.\r\n     * For supported operations see ValueParser.parse().\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param columns\r\n     */\r\n    public static fakeParse(str: IndexedString, nullValuesSupport: boolean, columns: string[]): ErrorWithTextRange[] {\r\n        const errors: ErrorWithTextRange[] = [];\r\n        let tokens: ValueToken[] = ValueParser.parseTokens(str, nullValuesSupport, false, errors);\r\n        tokens.forEach(token => {\r\n            if (token instanceof ReferenceToken && columns.indexOf(token.str.toString()) === -1) {\r\n                errors.push(ErrorFactory.semanticError(SemanticErrorCodes.referenceValue_eval_absentColumn,\r\n                    token.str.getRange(), token.str.toString(), columns.join(', ')));\r\n            }\r\n        })\r\n        this.assertValidInfixTokens(tokens, false, errors);\r\n        return errors;\r\n    }\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression into an array of Tokens.\r\n     * Tokens are returned infix (in order parsed from string).\r\n     * If doThrow is true, found errors are thrown. Otherwise, they are added in errors array and ignored.\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param doThrow true if errors should be thrown\r\n     * @param errors array for storing not thrown errors\r\n     * @return infix array of parsed Tokens\r\n     */\r\n    public static parseTokens(str: IndexedString, nullValuesSupport: boolean, doThrow: boolean,\r\n                              errors: ErrorWithTextRange[] = []): ValueToken[] {\r\n        const handleError = (error: RASyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            }\r\n            else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        let rest: IndexedString = str.trim();\r\n        if (rest.isEmpty()) {\r\n            handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_parseTokens_emptyInput, undefined));\r\n        }\r\n        const tokens: ValueToken[] = [];\r\n        while (!rest.isEmpty()) {\r\n            // PARENTHESES\r\n            if (rest.startsWith('(')) {\r\n                tokens.push(new OpeningParentheses(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith(')')) {\r\n                tokens.push(new ClosingParentheses(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // COMPUTING OPERATORS\r\n            else if (rest.startsWith('+')) {\r\n                tokens.push(new ComputingPlusToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('-')) {\r\n                tokens.push(new ComputingMinusToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('*')) {\r\n                tokens.push(new ComputingMultiplicationToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('/')) {\r\n                tokens.push(new ComputingDivisionToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // COMPARING OPERATORS\r\n            else if (rest.startsWith('==')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.equal, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('=')) {     // NOTE: needs to be after '==' check\r\n                tokens.push(new ComparingToken(ComparingOperatorType.equal, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('!=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.nonEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<>')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.nonEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.lessOrEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('>=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.moreOrEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.less, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('>')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.more, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // LOGICAL OPERATORS\r\n            else if (rest.startsWith('!') || rest.startsWith('~')\r\n                || rest.startsWith('\\u00ac')) { // NOTE: needs to be after '!=' check\r\n                tokens.push(new LogicalNotToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('&&')) {\r\n                tokens.push(new LogicalAndToken(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('&') || rest.startsWith('\\u2227')) { // NOTE: needs to be after '&&' check\r\n                tokens.push(new LogicalAndToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('||')) {\r\n                tokens.push(new LogicalOrToken(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('|') || rest.startsWith('\\u2228')) { // NOTE: needs to be after '||' check\r\n                tokens.push(new LogicalOrToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // LITERALS\r\n            else if (rest.startsWith('\"')) {\r\n                const split = IndexedStringUtils.nextQuotedString(rest);\r\n                if (split.error !== undefined) {\r\n                    handleError(split.error);\r\n                }\r\n                const end = split.first.length() > 1 ? -1 : undefined;\r\n                const str = split.first.slice(1, end);\r\n                tokens.push(new LiteralToken(str, str.toString(), \"string\"));\r\n                rest = split.second;\r\n            }\r\n            else if (StringUtils.isDigit(rest.charAt(0))) {\r\n                let split = IndexedStringUtils.nextNumber(rest);\r\n                tokens.push(new LiteralToken(split.first, Number(split.first.toString()), \"number\"));\r\n                rest = split.second;\r\n            }\r\n            else if (rest.startsWith('null')) {\r\n                if (!nullValuesSupport) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_parseTokens_unsupportedNull,\r\n                        rest.slice(0, 4).getRange()));\r\n                }\r\n                tokens.push(new LiteralToken(rest.slice(0, 4), null, \"null\"));\r\n                rest = rest.slice(4);\r\n            }\r\n            else if (rest.startsWith('true') || rest.startsWith('True') || rest.startsWith('TRUE')) {\r\n                tokens.push(new LiteralToken(rest.slice(0, 4), true, \"boolean\"));\r\n                rest = rest.slice(4);\r\n            }\r\n            else if (rest.startsWith('false') || rest.startsWith('False') || rest.startsWith('FALSE')) {\r\n                tokens.push(new LiteralToken(rest.slice(0, 5), false, \"boolean\"));\r\n                rest = rest.slice(5);\r\n            }\r\n            // COLUMN REFERENCE\r\n            else if (StringUtils.isLetter(rest.charAt(0)) || rest.charAt(0) === '_') {\r\n                let split = IndexedStringUtils.nextName(rest);\r\n                tokens.push(new ReferenceToken(split.first));\r\n                rest = split.second;\r\n            }\r\n            // UNEXPECTED PART\r\n            else {\r\n                const split = IndexedStringUtils.nextNonWhitespacePart(rest);\r\n                handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_parseTokens_unexpectedPart,\r\n                    split.first.getRange(), split.first.toString()));\r\n                rest = rest.slice(split.first.length());\r\n            }\r\n            rest = rest.trim();\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * It checks whether all adjacent pairs of tokens are possible and if the array start and end are valid\r\n     * (e.i., it starts with '(', literal, column reference or '!' and it ends with ')', literal or column reference).\r\n     * If doThrow is true, found errors are thrown. Otherwise, they are added in errors array and ignored.\r\n     */\r\n    public static assertValidInfixTokens(tokens: ValueToken[], doThrow: boolean, errors: ErrorWithTextRange[] = []) {\r\n        if (tokens.length === 0) {\r\n            return;\r\n        }\r\n        \r\n        const handleError = (error: RASyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            }\r\n            else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        \r\n        // checks start of an array: it must start with '(', literal, reference or '!'\r\n        // it cannot start with binary operator or ')'\r\n        if ((tokens[0] instanceof ClosingParentheses) || ((tokens[0] instanceof OperatorToken) && !(tokens[0] instanceof LogicalNotToken))) {\r\n            handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_invalidStart,\r\n                tokens[0].getRange(), tokens[0].str.toString()));\r\n        }\r\n        // checks end of an array: it must end with ')', literal or reference\r\n        // it cannot end with operator or '('\r\n        if ((tokens[tokens.length - 1] instanceof OpeningParentheses) || (tokens[tokens.length - 1] instanceof OperatorToken)) {\r\n            handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_invalidEnd,\r\n                tokens[tokens.length - 1].getRange(), tokens[tokens.length - 1].str.toString()));\r\n        }\r\n        // checks adjacent pairs of tokens\r\n        let i2: number = 1;\r\n        while (i2 < tokens.length) {\r\n            const token1: ValueToken = tokens[i2 - 1];\r\n            const token2: ValueToken = tokens[i2];\r\n            ++i2;\r\n\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            if (token2 instanceof LiteralToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_literalAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_literalAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_literalAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof ReferenceToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_referenceAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_referenceAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_referenceAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof LogicalNotToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_notAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_notAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_notAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: literal, reference or ')'\r\n            // invalid predecessors: operator or '('\r\n            else if (token2 instanceof OperatorToken /* only binary (without LogicalNotToken) */ ) {\r\n                if (token1 instanceof OperatorToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_binaryAfterOperator,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof OpeningParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_binaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof OpeningParentheses) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_openingAfterLiteral,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_openingAfterReference,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_openingAfterClosing,\r\n                        token2.getRange()));\r\n                }\r\n            }\r\n            // valid predecessors: literal or reference\r\n            // invalid predecessors: operator, '(' or ')'\r\n            else if (token2 instanceof ClosingParentheses) {\r\n                if (token1 instanceof OperatorToken) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_closingAfterOperator,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof OpeningParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_closingAfterOpening,\r\n                        token2.getRange()));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simplifies given token array in infix form. That means all groups of LogicalNotTokens ('!') are reduced to 1 or 0\r\n     * tokens (\"!\" => \"!\", \"!!\" => \"\", \"!!!\" => \"!\", \"!!!!\" => \"\", ...).\r\n     *\r\n     * @param tokens tokens to simplify\r\n     */\r\n    public static simplify(tokens: ValueToken[]): ValueToken[] {\r\n        const notIndexes: number[] = [];\r\n        const indexesToRemove: Set<number> = new Set<number>();\r\n        // finds indexes in tokens where '!'s are\r\n        tokens.forEach((token, i) => {\r\n            if (token instanceof LogicalNotToken) {\r\n                notIndexes.push(i);\r\n            }\r\n        });\r\n        for (let i = 1; i < notIndexes.length; ++i) {\r\n            // if there is \"x - 1\" and \"x\" next to each other, adds them to remove\r\n            if (notIndexes[i - 1] + 1 === notIndexes[i]) {\r\n                indexesToRemove.add(notIndexes[i - 1]);\r\n                indexesToRemove.add(notIndexes[i]);\r\n                notIndexes[i] = NaN; // sets to NaN to not remove possible third '!' in a row\r\n            }\r\n        }\r\n        if (indexesToRemove.size === 0) {\r\n            return tokens;\r\n        }\r\n        return tokens.filter((t, i) => !indexesToRemove.has(i));\r\n    }\r\n\r\n    /**\r\n     * Transforms given infix boolean and algebraic expression into postfix (reverse polish) form.\r\n     *\r\n     * @param tokens infix boolean and algebraic expression as Token array\r\n     * @return postfix (reverse polish) form of given array\r\n     */\r\n    public static toRPN(tokens: ValueToken[]): ValueToken[] {\r\n        const rpnQueue: ValueToken[] = [];\r\n        const operatorsStack: Array<OperatorToken | ParenthesisToken> = [];\r\n        tokens.forEach(token => {\r\n            if (token instanceof LiteralToken || token instanceof ReferenceToken) {\r\n                rpnQueue.push(token);\r\n            }\r\n            else if (token instanceof OperatorToken) {\r\n                while (operatorsStack.length > 0 && operatorsStack[operatorsStack.length - 1] instanceof OperatorToken) {\r\n                    // @ts-ignore (token must be of OperatorToken class)\r\n                    let other: OperatorToken = operatorsStack[operatorsStack.length - 1];\r\n                    // all used operators have left associativity\r\n                    if (token.precedence <= other.precedence) {\r\n                        // @ts-ignore (token must be present)\r\n                        rpnQueue.push(operatorsStack.pop());\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof OpeningParentheses) {\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof ClosingParentheses) {\r\n                while (true) {\r\n                    if (operatorsStack.length === 0) {\r\n                        throw ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_toRPN_missingOpeningParenthesis,\r\n                            undefined);\r\n                    }\r\n                    if (operatorsStack[operatorsStack.length - 1] instanceof OpeningParentheses) {\r\n                        operatorsStack.pop();\r\n                        break;\r\n                    }\r\n                    // @ts-ignore (token must be present)\r\n                    rpnQueue.push(operatorsStack.pop());\r\n                }\r\n            }\r\n        });\r\n        while (operatorsStack.length > 0) {\r\n            // @ts-ignore (token must be present)\r\n            const curToken: ValueToken = operatorsStack.pop();\r\n            if (curToken instanceof OpeningParentheses) {\r\n                throw ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_toRPN_missingClosingParenthesis,\r\n                    undefined);\r\n            }\r\n            else {\r\n                rpnQueue.push(curToken);\r\n            }\r\n        }\r\n        return rpnQueue;\r\n    }\r\n\r\n    /**\r\n     * Creates a value-evaluating tree from the given array of tokens in reverse polish form.\r\n     * Wraps recursive function rpnToVETreeRecursive(tokens), when not all tokens are used, throws error.\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @return VETreeNode tree (its root)\r\n     */\r\n    public static rpnToVETree(tokens: ValueToken[]): VETreeNode {\r\n        const ret: VETreeNode = this.rpnToVETreeRecursive(tokens);\r\n        // not all tokens were used\r\n        if (tokens.length > 0) {\r\n            throw ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_invalidExpression, undefined);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates a value-evaluating tree from the given array of tokens in reverse polish form.\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @return VETreeNode tree (its root)\r\n     */\r\n    public static rpnToVETreeRecursive(tokens: ValueToken[]): VETreeNode {\r\n        if (tokens.length === 0) {\r\n            throw ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_rpnToVETree_invalidExpression, undefined);\r\n        }\r\n        // @ts-ignore (there must be a token)\r\n        const token: ValueToken = tokens.pop();\r\n        if (token instanceof LogicalNotToken) {\r\n            const subtree: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.not(token.str, subtree);\r\n        }\r\n        if (token instanceof LogicalAndToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.and(token.str, left, right);\r\n        }\r\n        if (token instanceof LogicalOrToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.or(token.str, left, right);\r\n        }\r\n        if (token instanceof ComparingToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return new ComparingOperator(token.type, token.str, left, right);\r\n        }\r\n        if (token instanceof LiteralToken) {\r\n            return new LiteralValue(token.value, token.type);\r\n        }\r\n        if (token instanceof ReferenceToken) {\r\n            return new ReferenceValue(token.str);\r\n        }\r\n        if (token instanceof ComputingPlusToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.add(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingMinusToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.deduct(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingMultiplicationToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.multiply(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingDivisionToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.divide(left, right, token.getRange());\r\n        }\r\n        // should never happen\r\n        throw ErrorFactory.codeError(CodeErrorCodes.valueParser_rpnToVETreeRecursive_unexpectedToken, JSON.stringify(token));\r\n    }\r\n}","import RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Classes extending binary node.\r\n */\r\nexport type BinaryNodeClass = \"left antijoin\" | \"right antijoin\" | \"cartesian product\" | \"division\" | \"natural join\"\r\n    | \"left outer join\" | \"right outer join\" | \"full outer join\" | \"left semijoin\" | \"right semijoin\" | \"union\"\r\n    | \"intersection\" | \"difference\" | \"theta join\" | \"left theta semijoin\" | \"right theta semijoin\";\r\n\r\n/**\r\n * Abstract node of the relational algebra syntactic tree with two subtrees.\r\n */\r\nexport default abstract class BinaryNode extends RATreeNode {\r\n\r\n    protected leftSubtree: RATreeNode;\r\n    protected rightSubtree: RATreeNode;\r\n\r\n    protected constructor(left: RATreeNode, right: RATreeNode) {\r\n        super();\r\n        this.leftSubtree = left;\r\n        this.rightSubtree = right;\r\n    }\r\n\r\n    public getLeftSubtree(): RATreeNode {\r\n        return this.leftSubtree;\r\n    }\r\n\r\n    public getRightSubtree(): RATreeNode {\r\n        return this.rightSubtree;\r\n    }\r\n\r\n    /**\r\n     * Fake evaluates left and right subtrees of the current not-parametrized binary node.\r\n     * If not, returns new simple faked schema with empty \"\" name:\r\n     * - type = union: returns union of source schemas\r\n     * - type = left: returns left source schema\r\n     * - type = right: returns right source schema\r\n     */\r\n    protected fakeEvalBinary(cursorIndex: number, type: \"union\" | \"left\" | \"right\"):\r\n        {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        // evaluates the subtrees\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        // creates return relation\r\n        const result: Relation = new Relation(\"\");\r\n        if (type === \"left\" || type === \"union\") {\r\n            left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (type === \"right\" || type === \"union\") {\r\n            right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        left.errors.push(...right.errors);\r\n        return {result, whispers: left.whispers.length !== 0 ? left.whispers : right.whispers, errors: left.errors};\r\n    }\r\n}","import RATreeNode from \"./raTreeNode\";\r\nimport UnaryNode from \"./unaryNode\";\r\nimport BinaryNode from \"./binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Finds the root in the given tree with the given index with respect to depth first search. Root has index 0.\r\n *\r\n * @param root root of the searched tree\r\n * @param index index to be found\r\n * @return found root with given index or null if not found\r\n */\r\nexport function depthSearch(root: RATreeNode, index: number): RATreeNode | null {\r\n    let i: number = 0;\r\n    const findIndexInTree = (node: RATreeNode): RATreeNode | null => {\r\n        // wanted index found\r\n        if (i === index) {\r\n            return node;\r\n        }\r\n        i++;\r\n        if (node instanceof UnaryNode) {\r\n            return findIndexInTree(node.getSubtree());\r\n        }\r\n        if (node instanceof BinaryNode) {\r\n            const leftSearch = findIndexInTree(node.getLeftSubtree());\r\n            if (leftSearch === null) {\r\n                return findIndexInTree(node.getRightSubtree());\r\n            }\r\n            return leftSearch;\r\n        }\r\n        // end of the branch without the result\r\n        return null;\r\n    }\r\n    return findIndexInTree(root);\r\n}\r\n\r\n/**\r\n * Computes depth of the tree. One node has depth 0.\r\n *\r\n * @param root root of the tree to compute the depth for\r\n * @return tree depth\r\n */\r\nexport function getTreeDepth(root: RATreeNode): number {\r\n    if (root instanceof BinaryNode) {\r\n        const left: number = getTreeDepth(root.getLeftSubtree());\r\n        const right: number = getTreeDepth(root.getRightSubtree());\r\n        return Math.max(left, right) + 1;\r\n    }\r\n    if (root instanceof UnaryNode) {\r\n        return getTreeDepth(root.getSubtree()) + 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Returns true, if the given cursor position is in the given range and it is not inside quotes.\r\n * Note: given range is expected to be computed from given string.\r\n */\r\nexport function isInRangeAndNotInQuotes(cursor: number, range: { start: number, end: number } | undefined, str: IndexedString): boolean {\r\n    if (range !== undefined && range.start < cursor && cursor <= range.end) {\r\n        const len = range.end - range.start;\r\n        const s = str.toString();\r\n        const cursorIndexInStr = cursor - range.start;\r\n        let insideQuotes: boolean = false;\r\n        let backslashes: number = 0;\r\n        for (let i = 0; i < len; ++i) {\r\n            const curChar = s.charAt(i);\r\n            // quotes found\r\n            if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                insideQuotes = !insideQuotes;\r\n            }\r\n            if (insideQuotes && curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            if (i === cursorIndexInStr - 1) {\r\n                // when the cursor was reached, returns true, when it is not in quotes\r\n                return !insideQuotes;\r\n            }\r\n        }\r\n        console.warn(\"isInRangeAndNotInQuotes outside range\")\r\n    }\r\n    return false;\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Types of antijoin node.\r\n */\r\nexport enum AntijoinType {\r\n    left = \"\\u22b3\",\r\n    right = \"\\u22b2\"\r\n}\r\n\r\n/**\r\n * Antijoin node of the relational algebra syntactic tree.\r\n */\r\nexport default class AntijoinNode extends BinaryNode {\r\n\r\n    private readonly type: AntijoinType;\r\n\r\n    public constructor(operator: AntijoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: none\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        let rowsToKeep: Row[];   // rows from the subtree, which have to be kept in result\r\n        let rowsToHelp: Row[];\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        if (this.type === AntijoinType.left) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n            rowsToKeep = leftSource.getRows();\r\n            rowsToHelp = rightSource.getRows();\r\n        }\r\n        else {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n            rowsToKeep = rightSource.getRows();\r\n            rowsToHelp = leftSource.getRows();\r\n        }\r\n        // join of relation rows\r\n        rowsToKeep.forEach(keptRow => {\r\n            let someMatch: boolean = rowsToHelp.some(helpRow => {\r\n                // if all common columns match, the row should not be added\r\n                return commonColumns.every(c => keptRow.getValue(c) === helpRow.getValue(c));\r\n            });\r\n            if (!someMatch) {\r\n                let newRow: Row = new Row(result.getColumns());\r\n                keptRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                result.addRow(newRow);\r\n            }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: none\r\n     * Returned schema: left/right source schema (for left/right antijoin)\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const type = this.type === AntijoinType.left ? \"left\" : \"right\";\r\n        return this.fakeEvalBinary(cursorIndex, type);\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return this.type === AntijoinType.left ? \"Left antijoin\" : \"Right antijoin\";\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import UnaryNode from \"./unaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport {VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport ValueParser from \"../expression/valueParser\";\r\nimport {ErrorFactory, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange, {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {isInRangeAndNotInQuotes} from \"./raTreeTools\";\r\n\r\n/**\r\n * Selection node of the relational algebra syntactic tree.\r\n */\r\nexport default class SelectionNode extends UnaryNode {\r\n\r\n    private readonly selection: IndexedString;\r\n    private readonly stringRange: { start: number, end: number } | undefined;\r\n    private readonly nullValuesSupport: boolean;\r\n\r\n    /**\r\n     * Expects the selection string to start with '(' and end with ')'.\r\n     *\r\n     * @param selection\r\n     * @param subtree\r\n     * @param nullValuesSupport\r\n     */\r\n    public constructor(selection: IndexedString, subtree: RATreeNode, nullValuesSupport: boolean) {\r\n        super(subtree);\r\n        this.selection = selection;\r\n        this.stringRange = selection.getRange();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n    }\r\n\r\n    /**\r\n     * Expectations: condition is valid expression which evaluates to boolean\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n\r\n        let boolExpr: VETreeNode;\r\n        try {\r\n            boolExpr = ValueParser.parse(this.selection.slice(1, -1), this.nullValuesSupport);\r\n        }\r\n        catch (e) {\r\n            throw insertRangeIfUndefined(e, this.stringRange);\r\n        }\r\n\r\n        const source: Relation = this.subtree.getResult();\r\n        const result: Relation = new Relation(source.name + \"(...)\");\r\n        source.forEachColumn((type, name) => result.addColumn(name, type));\r\n\r\n        source.getRows().forEach(row => {\r\n            let bool: { value: ColumnContent, type: SupportedColumnType | \"null\" } = boolExpr.eval(row);\r\n            if (bool.type !== \"boolean\") {\r\n                throw ErrorFactory.syntaxError(SyntaxErrorCodes.selectionNode_eval_resultNotBoolean,\r\n                    this.stringRange, this.selection.replace(/\\s+/g, \" \"), bool.type);\r\n            }\r\n            if (bool.value) {\r\n                result.addRow(row);\r\n            }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: columns names used in the condition exists in source schema\r\n     * Returned schema: source schema\r\n     * Usage of absent column names does not affect returned schema.\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        let {result, whispers, errors} = this.subtree.fakeEval(cursorIndex);\r\n        const newResult = new Relation(result.getName() + \"(...)\");\r\n        result.forEachColumn((type, name) => {\r\n            newResult.addColumn(name, type);\r\n        });\r\n        result = newResult;\r\n        // checks whether the cursor is in this selection block (and not in the string) - saves current available columns\r\n        if (isInRangeAndNotInQuotes(cursorIndex, this.stringRange, this.selection)) {\r\n            whispers = result.getColumnNames();\r\n        }\r\n        // checks empty selection input\r\n        if (this.selection.toString().slice(1, -1).trim().length  === 0) {\r\n            errors.push(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_parseTokens_emptyInput, this.stringRange));\r\n        }\r\n        // adds errors from current expression\r\n        else {\r\n            errors.push(...ValueParser.fakeParse(this.selection.slice(1, -1), this.nullValuesSupport, result.getColumnNames()));\r\n        }\r\n        // result schema is the same as the source\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return \"Selection\";\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.selection.replace(/\\s+/g, ' ');\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Types of outer join node.\r\n */\r\nexport enum OuterJoinType {\r\n    left = \"*L*\",\r\n    right = \"*R*\",\r\n    full = \"*F*\"\r\n}\r\n\r\n/**\r\n * Outer join node of the relational algebra syntactic tree.\r\n */\r\nexport default class OuterJoinNode extends BinaryNode {\r\n\r\n    private readonly type: OuterJoinType;\r\n\r\n    public constructor(operator: OuterJoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: none\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // join of relation rows\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        // adds naturally joined rows\r\n        leftRows.forEach(leftRow => {\r\n            rightRows.forEach(rightRow => {\r\n                // if all common columns have the same value\r\n                if (commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c))) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        // adds left source rows with right null values\r\n        if (this.type === OuterJoinType.left || this.type === OuterJoinType.full) {\r\n            leftRows.forEach(leftRow => {\r\n                let someMatch: boolean = rightRows.some(rightRow => {\r\n                    // if all common columns match, the row should not be added\r\n                    return commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c));\r\n                });\r\n                if (!someMatch) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        }\r\n        // adds right source rows with left null values\r\n        if (this.type === OuterJoinType.right || this.type === OuterJoinType.full) {\r\n            rightRows.forEach(rightRow => {\r\n                let someMatch: boolean = leftRows.some(leftRow => {\r\n                    // if all common columns match, the row should not be added\r\n                    return commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c));\r\n                });\r\n                if (!someMatch) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        }\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: none\r\n     * Returned schema: union of source schemas (in all cases - full/left/right)\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        return this.fakeEvalBinary(cursorIndex, \"union\");\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        let typeStr: string;\r\n        if (this.type === OuterJoinType.left) {\r\n            typeStr = \"Left\";\r\n        }\r\n        else if (this.type === OuterJoinType.right) {\r\n            typeStr = \"Right\";\r\n        }\r\n        else {\r\n            typeStr = \"Full\";\r\n        }\r\n        return typeStr + \" outer join\";\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport {ErrorFactory, SemanticErrorCodes} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Cartesian product node of the relational algebra syntactic tree.\r\n */\r\nexport default class CartesianProductNode extends BinaryNode {\r\n\r\n    public constructor(leftSubtree: RATreeNode, rightSubtree: RATreeNode, private stringRange: { start: number, end: number } | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: disjointness\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // join of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + \"\\u2a2f\" + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        rightSource.forEachColumn((type, name) => {\r\n            if (!result.addColumn(name, type)) {\r\n                throw ErrorFactory.semanticError(SemanticErrorCodes.binaryNode_eval_commonColumnsInSources,\r\n                    this.stringRange, \"cartesian product\", name);\r\n            }\r\n        });\r\n        // join of relation rows\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                let newRow: Row = new Row(result.getColumns());\r\n                leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                result.addRow(newRow);\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: disjointness\r\n     * Returned schema: union of source schemas\r\n     * Returned fake schema is not affected when disjointness is not held\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]}{\r\n        // evaluates the subtrees\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        // creates return relation\r\n        const result: Relation = new Relation(\"\");\r\n        left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // checks errors\r\n        left.errors.push(...right.errors);\r\n        const commonColumns: string[] = [];\r\n        left.result.getColumnNames().forEach(leftColumn => {\r\n            if (right.result.hasColumn(leftColumn)) {\r\n                commonColumns.push(leftColumn);\r\n            }\r\n        });\r\n        if (commonColumns.length > 0) {\r\n            left.errors.push(ErrorFactory.semanticError(SemanticErrorCodes.binaryNode_eval_commonColumnsInSources,\r\n                this.stringRange, \"cartesian product\", commonColumns.join('\", \"')));\r\n        }\r\n        return {result, whispers: left.whispers.length !== 0 ? left.whispers : right.whispers, errors: left.errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return \"Cartesian product\";\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return \"⨯\";\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory, SemanticErrorCodes} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Division node of the relational algebra syntactic tree.\r\n */\r\nexport default class DivisionNode extends BinaryNode {\r\n\r\n    public constructor(leftSubtree: RATreeNode, rightSubtree: RATreeNode, private stringRange: { start: number, end: number } | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: right source schema is a proper subset of left source schema\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        const leftColumns: Map<string, SupportedColumnType> = leftSource.getColumns();\r\n        const rightColumns: Map<string, SupportedColumnType> = rightSource.getColumns();\r\n\r\n        if (![...rightColumns].every(value => leftColumns.has(value[0]) && leftColumns.get(value[0]) === value[1])) {\r\n            throw ErrorFactory.semanticError(SemanticErrorCodes.divisionNode_eval_rightColumnsNotSubsetOfLeft,\r\n                this.stringRange, rightSource.getSchemaString(), leftSource.getSchemaString());\r\n        }\r\n\r\n        // difference of columns in left and right subtree\r\n        const resultColumns: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>();\r\n        leftColumns.forEach((type, name) => {\r\n           if (!rightColumns.has(name)) {\r\n               resultColumns.set(name, type);\r\n           }\r\n        });\r\n\r\n        if (resultColumns.size === 0) {\r\n            throw ErrorFactory.semanticError(SemanticErrorCodes.divisionNode_eval_rightColumnsNotProperSubsetOfLeft,\r\n                this.stringRange, rightSource.getNamesSchemaString(), leftSource.getNamesSchemaString());\r\n        }\r\n\r\n        // join of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + \"\\u00f7\" + rightSource.getName() + \")\");\r\n        resultColumns.forEach((type, name) => result.addColumn(name, type));\r\n        // filter relation rows\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        leftRows.forEach(leftRow => {\r\n           if (rightRows.every(rightRow => {\r\n               // creates a row with left row's extra columns and right row's common columns\r\n               let testRow: Row = new Row(leftColumns);\r\n               // left row's extra columns\r\n               // @ts-ignore ('name' must be present in left row)\r\n               resultColumns.forEach((type, name) => testRow.addValue(name, leftRow.getValue(name)));\r\n               // right row's common columns\r\n               rightRow.getValues().forEach((type, name) => testRow.addValue(name, type));\r\n               // tests if the created row exists in left relation\r\n               return [...leftRows].some(lr => lr.equals(testRow));\r\n           })) {\r\n               let newRow: Row = new Row(result.getColumns());\r\n               // @ts-ignore ('name' must be present in left row)\r\n               resultColumns.forEach((value, name) => newRow.addValue(name, leftRow.getValue(name)));\r\n               result.addRow(newRow);\r\n           }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: right source schema is a proper subset of left source schema\r\n     * Returned schema: left source schema minus right source schema\r\n     * Returned fake schema may be empty (right source schema may contain all left source columns).\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        const leftColumns = left.result.getColumns();\r\n        const rightColumns = right.result.getColumns();\r\n        // creates relation schema - \"left columns minus right columns\"\r\n        const resultColumns = new Map([...leftColumns.entries()].filter(([key, _]) => !rightColumns.has(key)));\r\n        const result = new Relation(\"(\" + left.result.getName() + \"\\u00f7\" + right.result.getName() + \")\");\r\n        resultColumns.forEach((type, name) => result.addColumn(name, type));\r\n        // checks errors in schema\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        if (![...rightColumns].every(value => leftColumns.has(value[0]) && leftColumns.get(value[0]) === value[1])\r\n            && left.result.getName() !== \"\") {\r\n            errors.push(ErrorFactory.semanticError(SemanticErrorCodes.divisionNode_eval_rightColumnsNotSubsetOfLeft,\r\n                this.stringRange, right.result.getSchemaString(), left.result.getSchemaString()));\r\n        }\r\n        else if (resultColumns.size === 0 && left.result.getName() !== \"\") {\r\n            errors.push(ErrorFactory.semanticError(SemanticErrorCodes.divisionNode_eval_rightColumnsNotProperSubsetOfLeft,\r\n                this.stringRange, right.result.getNamesSchemaString(), left.result.getNamesSchemaString()));\r\n        }\r\n        return {result, whispers: left.whispers.length !== 0 ? left.whispers : right.whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return \"Division\";\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return \"÷\";\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Types of natural join node.\r\n */\r\nexport enum NaturalJoinType {\r\n    natural = \"*\",\r\n    leftSemi = \"<*\",\r\n    rightSemi = \"*>\"\r\n}\r\n\r\n/**\r\n * Natural join or semi join node of the relational algebra syntactic tree.\r\n */\r\nexport default class NaturalJoinNode extends BinaryNode {\r\n\r\n    private readonly type: NaturalJoinType;\r\n\r\n    public constructor(operator: NaturalJoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: none\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        if (this.type === NaturalJoinType.leftSemi || this.type === NaturalJoinType.natural) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === NaturalJoinType.rightSemi || this.type === NaturalJoinType.natural) {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // join of relation rows\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                // if all common columns have the same value\r\n                if ([...commonColumns].every(c => leftRow.getValue(c) === rightRow.getValue(c))) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    if (this.type === NaturalJoinType.leftSemi || this.type === NaturalJoinType.natural) {\r\n                        leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    if (this.type === NaturalJoinType.rightSemi || this.type === NaturalJoinType.natural) {\r\n                        rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: none\r\n     * Returned schema: left/right/both source schema (for left-semijoin/right-semijoin/natural join)\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        let type: \"union\" | \"left\" | \"right\" = \"union\";\r\n        if (this.type === NaturalJoinType.leftSemi) {\r\n            type = \"left\";\r\n        }\r\n        else if (this.type === NaturalJoinType.rightSemi) {\r\n            type = \"right\";\r\n        }\r\n        return this.fakeEvalBinary(cursorIndex, type);\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        if (this.type === NaturalJoinType.leftSemi) {\r\n            return \"Left semijoin\";\r\n        }\r\n        else if (this.type === NaturalJoinType.rightSemi) {\r\n            return \"Right semijoin\";\r\n        }\r\n        else {\r\n            return \"Natural join\";\r\n        }\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return \"*\";\r\n    }\r\n\r\n    public getType(): NaturalJoinType {\r\n        return this.type;\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport { isEqual } from \"lodash\";\r\nimport {ErrorFactory, SemanticErrorCodes} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Types of set operation node.\r\n */\r\nexport enum SetOperationType {\r\n    union = \"\\u222a\",\r\n    intersection = \"\\u2229\",\r\n    difference = \"\\\\\"\r\n}\r\n\r\n/**\r\n * Set operation node of the relational algebra syntactic tree.\r\n */\r\nexport default class SetOperationNode extends BinaryNode {\r\n\r\n    private readonly type: SetOperationType;\r\n\r\n    public constructor(operator: SetOperationType, leftSubtree: RATreeNode, rightSubtree: RATreeNode,\r\n                       private stringRange: { start: number, end: number } | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    private getTypeStr(): string {\r\n        if (this.type === SetOperationType.union) {\r\n            return \"Union\";\r\n        }\r\n        else if (this.type === SetOperationType.intersection) {\r\n            return \"Intersection\";\r\n        }\r\n        else {\r\n            return \"Difference\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: equality\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n\r\n        if (!isEqual(leftSource.getColumns(), rightSource.getColumns())) {\r\n            let typeStr: string = this.getTypeStr().toLowerCase();\r\n            throw ErrorFactory.semanticError(SemanticErrorCodes.setOperationNode_eval_notEqualColumnsInSources,\r\n                this.stringRange, leftSource.getSchemaString(), rightSource.getSchemaString(), typeStr);\r\n        }\r\n        // copy of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // change of relation rows\r\n        let resultRows: Row[];\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        if (this.type === SetOperationType.union) {\r\n            resultRows = [...leftRows, ...rightRows];\r\n        }\r\n        else if (this.type === SetOperationType.intersection) {\r\n            resultRows = [...leftRows].filter(lr => [...rightRows].some(rr => lr.equals(rr)));\r\n        }\r\n        else /* this.type === SetOperationType.difference */ {\r\n            resultRows = [...leftRows].filter(lr => ![...rightRows].some(rr => lr.equals(rr)));\r\n        }\r\n        resultRows.forEach(row => result.addRow(row));\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: equality\r\n     * Returned schema: intersection of source schemas\r\n     * Returned schema may be empty (when there is no common column in sources).\r\n     * Second possible approach would be to return union of source schemas (less strict).\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        // join of relational schema - \"left intersection right\"\r\n        const result: Relation = new Relation(\"(\" + left.result.getName() + this.type + right.result.getName() + \")\");\r\n        left.result.forEachColumn((type, name) => {\r\n            if (right.result.hasColumn(name)) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // checks errors in schema\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        if (!isEqual(left.result.getColumns(), right.result.getColumns()) && left.result.getName() !== \"\" && right.result.getName() !== \"\") {\r\n            let typeStr: string = this.getTypeStr().toLowerCase();\r\n            errors.push(ErrorFactory.semanticError(SemanticErrorCodes.setOperationNode_eval_notEqualColumnsInSources,\r\n                this.stringRange, left.result.getSchemaString(), right.result.getSchemaString(), typeStr));\r\n        }\r\n        return {result, whispers: left.whispers.length !== 0 ? left.whispers : right.whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return this.getTypeStr();\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport ValueParser from \"../expression/valueParser\";\r\nimport {ErrorFactory, SemanticErrorCodes, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange, {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {isInRangeAndNotInQuotes} from \"./raTreeTools\";\r\n\r\n/**\r\n * Types of theta join node.\r\n */\r\nexport enum ThetaJoinType {\r\n    full = \"[]\",\r\n    left = \"<]\",\r\n    right = \"[>\"\r\n}\r\n\r\n/**\r\n * Theta join or theta semijoin node of the relational algebra syntactic tree.\r\n */\r\nexport default class ThetaJoinNode extends BinaryNode {\r\n\r\n    private readonly type: ThetaJoinType;\r\n    private readonly condition: IndexedString;\r\n    private readonly stringRange: { start: number, end: number } | undefined;\r\n    private readonly nullValuesSupport: boolean;\r\n\r\n    /**\r\n     * Expects the condition string to start with '<' and end with ']' or start with '[' and end with '>'.\r\n     */\r\n    public constructor(type: ThetaJoinType, condition: IndexedString,\r\n                       leftSubtree: RATreeNode, rightSubtree: RATreeNode, nullValuesSupport: boolean) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.condition = condition;\r\n        this.stringRange = condition.getRange();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: disjointness\r\n     * Other expectations: condition is valid expression which evaluates to boolean\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n\r\n        let boolExpr: VETreeNode;\r\n        try {\r\n            boolExpr = ValueParser.parse(this.condition.slice(1, -1), this.nullValuesSupport);   // slices brackets out\r\n        }\r\n        catch (e) {\r\n            throw insertRangeIfUndefined(e, this.stringRange);\r\n        }\r\n\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n\r\n        leftSource.getColumnNames().forEach(leftColumn => {\r\n            if (rightSource.hasColumn(leftColumn)) {\r\n                throw ErrorFactory.semanticError(SemanticErrorCodes.binaryNode_eval_commonColumnsInSources, this.stringRange,\r\n                    this.getOperationName().toLowerCase(), leftColumn);\r\n            }\r\n        });\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type.charAt(0) + \"...\" + this.type.charAt(1) + rightSource.getName() + \")\");\r\n        if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // combine columns of both source relations to use it in testing row\r\n        const bothSourceColumns: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>(leftSource.getColumns());\r\n        rightSource.forEachColumn((type, name) => bothSourceColumns.set(name, type));\r\n\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                const testRow: Row = new Row(bothSourceColumns);\r\n                leftRow.getValues().forEach((value, name) => testRow.addValue(name, value));\r\n                rightRow.getValues().forEach((value, name) => testRow.addValue(name, value));\r\n                // checks whether the combined row from both relations' columns satisfies the condition\r\n                let booleanResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = boolExpr.eval(testRow);\r\n                if (booleanResult.type !== \"boolean\") {\r\n                    throw ErrorFactory.syntaxError(SyntaxErrorCodes.thetaSemiJoinNode_eval_resultNotBoolean,\r\n                        this.stringRange, this.condition.replace(/\\s+/g, \" \"), booleanResult.type);\r\n                }\r\n                if (booleanResult.value) {\r\n                    const newRow: Row = new Row(result.getColumns());\r\n                    if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n                        leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n                        rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: disjointness\r\n     * Returned schema: left/right/both source schema (for left/right/full semijoin)\r\n     * Returned fake schema is not affected when disjointness is not held\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        const sourceColumns: string[] = [];\r\n        sourceColumns.push(...left.result.getColumnNames());\r\n        sourceColumns.push(...right.result.getColumnNames());\r\n        // creates return relation\r\n        const result: Relation = new Relation(\"\");\r\n        if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n            left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n            right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // checks whether the cursor is in this condition block (and not in the string) - saves current available columns\r\n        let whispers = left.whispers.length !== 0 ? left.whispers : right.whispers;\r\n        if (isInRangeAndNotInQuotes(cursorIndex, this.stringRange, this.condition)) {\r\n            whispers = sourceColumns;\r\n        }\r\n        // adds errors from current expression\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        const commonColumns: string[] = [];\r\n        left.result.getColumnNames().forEach(leftColumn => {\r\n            if (right.result.hasColumn(leftColumn)) {\r\n                commonColumns.push(leftColumn);\r\n            }\r\n        });\r\n        if (commonColumns.length > 0 && this.stringRange !== undefined) {\r\n            errors.push(ErrorFactory.semanticError(SemanticErrorCodes.binaryNode_eval_commonColumnsInSources,\r\n                {start: this.stringRange.start, end: this.stringRange.start},   // highlight only opening bracket\r\n                this.getOperationName().toLowerCase(), commonColumns.join('\", \"')));\r\n        }\r\n        // checks empty condition input\r\n        if (this.condition.toString().slice(1, -1).trim().length  === 0) {\r\n            errors.push(ErrorFactory.syntaxError(SyntaxErrorCodes.valueParser_parseTokens_emptyInput, this.stringRange));\r\n        }\r\n        else {\r\n            errors.push(...ValueParser.fakeParse(this.condition.slice(1, -1), this.nullValuesSupport, sourceColumns));\r\n        }\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        if (this.type === ThetaJoinType.left) {\r\n            return \"Left theta semijoin\";\r\n        }\r\n        else if (this.type === ThetaJoinType.right) {\r\n            return \"Right theta semijoin\";\r\n        }\r\n        else {\r\n            return \"Theta join\";\r\n        }\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.condition.replace(/\\s+/g, ' ');\r\n    }\r\n\r\n    public getType(): ThetaJoinType {\r\n        return this.type;\r\n    }\r\n}","import Relation from \"../relation/relation\";\r\nimport {CodeErrorCodes, ErrorFactory, SemanticErrorCodes, SyntaxErrorCodes} from \"../error/errorFactory\";\r\nimport {\r\n    BinaryOperatorToken,\r\n    ClosingParenthesis,\r\n    ExprToken,\r\n    OpeningParenthesis,\r\n    ParenthesisToken,\r\n    RelationToken,\r\n    UnaryOperatorToken\r\n} from \"./exprTokens\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\nimport CodeError from \"../error/codeError\";\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport RelationNode from \"../ratree/relationNode\";\r\nimport {\r\n    IndexedString\r\n} from \"../types/indexedString\";\r\nimport IndexedStringUtils from \"../utils/indexedStringUtils\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport RATreeFactory from \"../ratree/raTreeFactory\";\r\n\r\n/**\r\n * Assertion types for assertValidInfixTokens function.\r\n */\r\nenum AssertType {\r\n    NOT_THROW,\r\n    THROW_STRICT,\r\n    THROW_NOT_STRICT\r\n}\r\n\r\n/**\r\n * StringUtils of relational algebra expressions. Provides parsing function parse(String expr) and additional\r\n * helping functions and predicates. Uses IndexedString to describe error ranges in thrown errors.\r\n */\r\nexport class ExprParser {\r\n\r\n    /**\r\n     * Creates a parser with given source relations.\r\n     *\r\n     * @param relations Map with relations' names as keys and relation themselves as values used as source for leave nodes\r\n     * @param nullValuesSupport whether to support null values\r\n     */\r\n    public constructor(readonly relations: Map<string, Relation>, readonly nullValuesSupport: boolean) {}\r\n\r\n    /**\r\n     * Parses given relational algebra expression 'expr' and returns tree of RA operations.\r\n     * Expression is expected to respect following constraints:\r\n     * - all relation's and column's names contain letters, numbers and underscores only\r\n     * - all relation's and column's names start with a letter\r\n     * - used operations must be in a practical notation and be well-structured\r\n     * - comment begins with '//' and ends with newline\r\n     *\r\n     * Supported operations are:\r\n     * - projection of columns: Relation[projectedColumn1, ...]\r\n     * - selection of rows: Relation(condition)\r\n     * - rename of columns: Relation<oldName -> newName, ...>\r\n     * - cartesian product: A \\u2a2f B\r\n     * - natural join: A * B\r\n     * - theta join: A [condition] B\r\n     * - left and right semijoin: A <* B and A *> B\r\n     * - left and right antijoin: A \\u22b3 B and A \\u22b2 B\r\n     * - left and right theta semijoin: A <condition] B and A [condition> B\r\n     * - division: A \\u00f7 B\r\n     * - left, right and full outer join: A *L* B, A *R* B and A *F* B\r\n     * - union, intersection and difference: A \\u222a B, A \\u2229 B and A \\ B\r\n     *\r\n     * See ValueParser for condition constraints.\r\n     *\r\n     * @param expr relational algebra expression in expected format\r\n     * @return tree structure of 'expr'\r\n     */\r\n    public parse(expr: string): RATreeNode {\r\n        const indexedExpr = IndexedStringUtils.deleteCommentLines(IndexedString.new(expr));\r\n        if (indexedExpr.trim().isEmpty()) {\r\n            throw ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_parse_emptyStringGiven, undefined);\r\n        }\r\n        const tokens: ExprToken[] = this.parseTokens(indexedExpr);\r\n        this.assertValidInfixTokens(tokens, AssertType.THROW_STRICT);\r\n        const rpn: ExprToken[] = this.toRPN(tokens);\r\n        return this.rpnToRATree(rpn, true);\r\n    }\r\n\r\n    /**\r\n     * Parses given expression and finds words to whisper for the given cursorIndex.\r\n     * If the cursor is located next to any RA operator, returns list of all defined relation names.\r\n     * If the cursor is located inside any RA operator, which uses relation columns, returns list of available column\r\n     * names at given place.\r\n     * If a parsing error occurs, it is faked to work or ignored and reported in returning errors array.\r\n     */\r\n    public fakeParse(expr: string, cursorIndex: number): {whispers: string[], errors: ErrorWithTextRange[]} {\r\n        if (expr.trim() === \"\") {\r\n            return {whispers: [...this.relations.keys()], errors: []};\r\n        }\r\n        const indexedExpr = IndexedStringUtils.deleteCommentLines(IndexedString.new(expr));\r\n        const {whispers, tokens, errors} = this.fakeParseTokens(indexedExpr, cursorIndex);\r\n        // prevent errors in creation of RPN\r\n        if (tokens.length === 0) {\r\n            return {whispers: whispers, errors: errors};\r\n        }\r\n        // fakes found errors to valid parse\r\n        this.assertValidInfixTokens(tokens, AssertType.NOT_THROW, errors);\r\n        const rpn: ExprToken[] = this.toRPN(tokens);\r\n        const raTree: RATreeNode = this.rpnToRATree(rpn, false, errors);\r\n        // tries to find whispers inside RA operations with parameters\r\n        const innerResult: {whispers: string[], errors: ErrorWithTextRange[]} = raTree.fakeEval(cursorIndex);\r\n        errors.push(...innerResult.errors);\r\n        // if there are whispers from inner operators, returns them\r\n        if (innerResult.whispers.length > 0) {\r\n            return {whispers: innerResult.whispers, errors: errors};\r\n        }\r\n        // otherwise returns outer whispers (or empty array if no were found)\r\n        return {whispers: whispers, errors: errors};\r\n    }\r\n\r\n    /**\r\n     * Given expression string is expected to be without comment lines and not empty.\r\n     *\r\n     * @param expr IndexedString to parse the expression from\r\n     * @param selectionExpected true if next part \"(...)\" should be treated as a selection = last part\r\n     * was a relation or an unary operator (default false)\r\n     */\r\n    public parseTokens(expr: IndexedString, selectionExpected: boolean = false): ExprToken[] {\r\n        let tokens: ExprToken[] = [];\r\n        // alternative solution in case of finding \"[...]\"\r\n        let alternativeTokens: ExprToken[] = [];\r\n        let rest: IndexedString = expr.trim();\r\n\r\n        while (!rest.isEmpty()) {\r\n            // '(' can be a selection or a parentheses\r\n            if (rest.startsWith(\"(\")) {\r\n                const split = IndexedStringUtils.nextBorderedPart(rest, '(', ')');\r\n                // whole \"(...)\" part pushed as selection\r\n                if (selectionExpected) {\r\n                    tokens.push(UnaryOperatorToken.selection(split.first));\r\n                }\r\n                // inner of \"(...)\" part parsed as parentheses structure\r\n                else {\r\n                    tokens.push(new OpeningParenthesis(split.first.slice(0, 1)));\r\n                    tokens.push(...this.parseTokens(split.first.slice(1, -1)));\r\n                    tokens.push(new ClosingParenthesis(split.first.slice(-1)));\r\n                    selectionExpected = true;\r\n                }\r\n                rest = split.second;\r\n            }\r\n            // '[' can be a projection, theta join, or right theta semi join\r\n            else if (rest.startsWith(\"[\")) {\r\n                const split = IndexedStringUtils.nextBorderedPart(rest, '[', ']>');\r\n                // right theta semijoin found\r\n                if (split.first.endsWith('>')) {\r\n                    tokens.push(BinaryOperatorToken.rightThetaSemijoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // the expression cannot end with a theta join (right source expected)\r\n                else if (split.second.isEmpty()) {\r\n                    tokens.push(UnaryOperatorToken.projection(split.first));\r\n                    break;\r\n                }\r\n                // it is no known yet whether it is a projection or a theta join, recursively tries both possibilities\r\n                else {\r\n                    let errorAlternative: Error | undefined;\r\n                    let error: Error | undefined;\r\n\r\n                    // 1: treat as Theta join (it must copy tokens first)\r\n                    try {\r\n                        alternativeTokens.push(...tokens);\r\n                        alternativeTokens.push(BinaryOperatorToken.thetaJoin(split.first));\r\n                        alternativeTokens.push(...this.parseTokens(split.second, false));\r\n                    }\r\n                    catch (err) {\r\n                        if (err instanceof CodeError) {\r\n                            throw err;\r\n                        }\r\n                        errorAlternative = err;\r\n                    }\r\n\r\n                    // 2: treat as Projection\r\n                    try {\r\n                        tokens.push(UnaryOperatorToken.projection(split.first));\r\n                        tokens.push(...this.parseTokens(split.second, true));\r\n                    }\r\n                    catch (err) {\r\n                        if (err instanceof CodeError) {\r\n                            throw err;\r\n                        }\r\n                        error = err;\r\n                    }\r\n\r\n                    // both branches have error - reports it to user\r\n                    if (errorAlternative !== undefined && error !== undefined) {\r\n                        // when errors were the same, throws one of them\r\n                        if (errorAlternative.message === error.message) {\r\n                            throw error;\r\n                        }\r\n                        // when errors were different, joins them\r\n                        throw ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_parseTokens_bothBranchesError,\r\n                            undefined, split.first.toString(), error.message, errorAlternative.message);\r\n                    }\r\n                    // does not use alternative tokens after error\r\n                    if (errorAlternative !== undefined) {\r\n                        alternativeTokens = [];\r\n                    }\r\n                    // uses alternative tokens after error in second branch\r\n                    if (error !== undefined) {\r\n                        tokens = alternativeTokens;\r\n                        alternativeTokens = [];\r\n                    }\r\n                    // breaks the while - the rest was parsed recursively\r\n                    break;\r\n                }\r\n            }\r\n            // BINARY OPERATORS\r\n            else if (rest.startsWith(\"*F*\") || rest.startsWith(\"*L*\") || rest.startsWith(\"*R*\")) {\r\n                if (!this.nullValuesSupport) {\r\n                    let errorRange: {start: number, end: number} | undefined = undefined;\r\n                    if (rest.getFirstNonNaNIndex() !== undefined) {\r\n                        // @ts-ignore\r\n                        errorRange = {start: rest.getFirstNonNaNIndex(), end: rest.getFirstNonNaNIndex() + 2};\r\n                    }\r\n                    throw ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_parseTokens_outerJoinWhenNullNotSupported,\r\n                        errorRange, \"*F*\");\r\n                }\r\n                if (rest.startsWith(\"*F\")) {\r\n                    tokens.push(BinaryOperatorToken.fullOuterJoin(rest.slice(0, 3)));\r\n                }\r\n                else if (rest.startsWith(\"*L\")) {\r\n                    tokens.push(BinaryOperatorToken.leftOuterJoin(rest.slice(0, 3)));\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.rightOuterJoin(rest.slice(0, 3)));\r\n                }\r\n                rest = rest.slice(3);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"<*\")) {\r\n                tokens.push(BinaryOperatorToken.leftSemijoin(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"*>\")) {\r\n                tokens.push(BinaryOperatorToken.rightSemijoin(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"*\")) {\r\n                tokens.push(BinaryOperatorToken.naturalJoin(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u2a2f\")) {\r\n                tokens.push(BinaryOperatorToken.cartesianProduct(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u222a\")) {\r\n                tokens.push(BinaryOperatorToken.union(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u2229\")) {\r\n                tokens.push(BinaryOperatorToken.intersection(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\\\\")) {\r\n                tokens.push(BinaryOperatorToken.difference(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u22b3\")) {\r\n                tokens.push(BinaryOperatorToken.leftAntijoin(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u22b2\")) {\r\n                tokens.push(BinaryOperatorToken.rightAntijoin(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u00f7\")) {\r\n                tokens.push(BinaryOperatorToken.division(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            // '<' can be a rename or left theta semi join - this \"if\" must be after <* and *>\r\n            else if (rest.startsWith('<')) {\r\n                const split = IndexedStringUtils.nextBorderedPart(rest, '<', '>]', '-');\r\n                if (split.first.endsWith('>')) {\r\n                    tokens.push(UnaryOperatorToken.rename(split.first));\r\n                    selectionExpected = true;\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.leftThetaSemijoin(split.first));\r\n                    selectionExpected = false;\r\n                }\r\n                rest = split.second;\r\n            }\r\n            // RELATION REFERENCE\r\n            else if (StringUtils.isLetter(rest.charAt(0)) || rest.charAt(0) === '_') {\r\n                const split = IndexedStringUtils.nextName(rest);\r\n                tokens.push(new RelationToken(split.first));\r\n                rest = split.second;\r\n                selectionExpected = true;\r\n            }\r\n            // UNEXPECTED PART\r\n            else {\r\n                const split = IndexedStringUtils.nextNonWhitespacePart(rest);\r\n                throw ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_parseTokens_unexpectedPart,\r\n                    split.first.getRange(), split.first.toString());\r\n            }\r\n            rest = rest.trim();\r\n        }\r\n        // checks whether alternative tokens are valid when used\r\n        if (alternativeTokens.length > 0) {\r\n            try {\r\n                // assert not strict validity (because this can be in nested recursion call where some rules are not held)\r\n                this.assertValidInfixTokens(alternativeTokens, AssertType.THROW_NOT_STRICT, []);\r\n                // if error not thrown, returns alternative tokens\r\n                return alternativeTokens;\r\n            }\r\n            catch (ignored) {}\r\n        }\r\n        // when alternative tokens are not set or valid, returns tokens\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * Parses given expression to ExprToken array. While parsing, it tries to find cursor index and returns whispers.\r\n     * Parsing errors are not thrown but stored in errors array.\r\n     *\r\n     * @param expr IndexedString to parse the expression from\r\n     * @param cursorIndex\r\n     * @param selectionExpected true if next part \"(...)\" should be treated as a selection = last part\r\n     * was a relation or an unary operator (default false)\r\n     */\r\n    public fakeParseTokens(expr: IndexedString, cursorIndex: number, selectionExpected: boolean = false):\r\n        { tokens: ExprToken[], whispers: string[], errors: ErrorWithTextRange[] } {\r\n        let whispers: string[] = [];\r\n        let tokens: ExprToken[] = [];\r\n        let errors: ErrorWithTextRange[] = [];\r\n\r\n        let rest: IndexedString = expr;\r\n        while (!rest.isEmpty()) {\r\n            // checks whether the cursor was reached\r\n            const restStartIndex: number | undefined = rest.getFirstNonNaNIndex();\r\n            if (restStartIndex === cursorIndex) {\r\n                whispers = [...this.relations.keys()];\r\n            }\r\n\r\n            //rest = rest.trim();\r\n            // '(' can be a selection or a parentheses\r\n            if (rest.startsWith(\"(\")) {\r\n                let split: {first: IndexedString, second: IndexedString};\r\n                try {\r\n                    split = IndexedStringUtils.nextBorderedPart(rest, '(', ')');\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (err) {\r\n                    // saves error\r\n                    if (err instanceof ErrorWithTextRange) {\r\n                        errors.push(err);\r\n                    }\r\n\r\n                    if (selectionExpected) {\r\n                        // it fakes the unclosed expression part as a selection operator\r\n                        // pushes space with valid index and parentheses with NaN index for expected behavior (error\r\n                        // indexing) in fakeEval in selection/theta join nodes and fakeEval in ValueParser\r\n                        tokens.push(UnaryOperatorToken.selection(rest.concat(IndexedString.newFromArray([\r\n                            {char: ' ', index: rest.getNextIndexOrNaN()}, {char: ')', index: NaN}]))));\r\n                    }\r\n                    else {\r\n                        // checks whether the cursor was reached after the opening parentheses\r\n                        if (restStartIndex === cursorIndex - 1) {\r\n                            whispers = [...this.relations.keys()];\r\n                        }\r\n\r\n                        // it fakes the unclosed expression as nested expression in parentheses\r\n                        tokens.push(new OpeningParenthesis(rest.slice(0, 1)));\r\n                        // parses inner part between parentheses\r\n                        const recursiveReturn = this.fakeParseTokens(rest.slice(1), cursorIndex);\r\n                        errors.push(...recursiveReturn.errors);\r\n                        whispers.push(...recursiveReturn.whispers);\r\n                        tokens.push(...recursiveReturn.tokens);\r\n                        // gives invalid index (NaN for not reporting errors with this imaginary parentheses\r\n                        tokens.push(new ClosingParenthesis(IndexedString.new(')', NaN)));\r\n                    }\r\n                    // breaks the while cycle because rest was parsed recursively\r\n                    break;\r\n                }\r\n\r\n                // whole \"(...)\" part pushed as selection\r\n                if (selectionExpected) {\r\n                    tokens.push(UnaryOperatorToken.selection(split.first));\r\n                }\r\n                // inner of \"(...)\" part parsed as parentheses structure\r\n                else {\r\n                    tokens.push(new OpeningParenthesis(split.first.slice(0, 1)));\r\n                    const recursiveReturn = this.fakeParseTokens(split.first.slice(1, -1), cursorIndex);\r\n                    errors.push(...recursiveReturn.errors);\r\n                    whispers.push(...recursiveReturn.whispers);\r\n                    tokens.push(...recursiveReturn.tokens);\r\n                    tokens.push(new ClosingParenthesis(split.first.slice(-1)));\r\n                    selectionExpected = true;\r\n                }\r\n                rest = split.second;\r\n            }\r\n            // '[' can be a projection, theta join, or right theta semi join\r\n            else if (rest.startsWith(\"[\")) {\r\n                let split: {first: IndexedString, second: IndexedString};\r\n                let error: boolean = false;\r\n                try {\r\n                    split = IndexedStringUtils.nextBorderedPart(rest, '[', ']>');\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (err) {\r\n                    error = true;\r\n                    // saves error\r\n                    if (err instanceof ErrorWithTextRange) {\r\n                        errors.push(err);\r\n                    }\r\n                    // it fakes the unclosed expression part as a projection operator\r\n                    split = {first: rest.concat(IndexedString.new(']', rest.getNextIndexOrNaN())), second: IndexedString.empty()};\r\n                }\r\n\r\n                // checks whether the cursor was reached\r\n                const operatorEndIndex: number | undefined = split.first.getLastNonNaNIndex();\r\n                if (!error && operatorEndIndex === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                // right theta semijoin found \"[...>\"\r\n                if (split.first.endsWith('>')) {\r\n                    tokens.push(BinaryOperatorToken.rightThetaSemijoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // if the next part contains any character from =<>+/*&|~\"()! it cannot be a valid Projection\r\n                else if (split.first.containsAny('=<>+/*&|~\"()!')) {\r\n                    tokens.push(BinaryOperatorToken.thetaJoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // else suppose it is a projection\r\n                else {\r\n                    tokens.push(UnaryOperatorToken.projection(split.first));\r\n                    selectionExpected = true;\r\n                    rest = split.second;\r\n                }\r\n            }\r\n            // BINARY OPERATORS\r\n            else if (rest.startsWith(\"*F*\") || rest.startsWith(\"*L*\") || rest.startsWith(\"*R*\")) {\r\n                const operator: IndexedString = rest.slice(0, 3);\r\n                // checks whether the cursor was reached\r\n                const operatorEndIndex: number | undefined = operator.getLastNonNaNIndex();\r\n                if (operatorEndIndex === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"*F\")) {\r\n                    tokens.push(BinaryOperatorToken.fullOuterJoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"*L\")) {\r\n                    tokens.push(BinaryOperatorToken.leftOuterJoin(operator));\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.rightOuterJoin(operator));\r\n                }\r\n                rest = rest.slice(3);\r\n                selectionExpected = false;\r\n            }\r\n            // operators of 2 characters\r\n            else if (rest.startsWith(\"<*\") || rest.startsWith(\"*>\")) {\r\n                const operator: IndexedString = rest.slice(0, 2);\r\n                // checks whether the cursor was reached\r\n                const operatorEndIndex: number | undefined = operator.getLastNonNaNIndex();\r\n                if (operatorEndIndex === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"<*\")) {\r\n                    tokens.push(BinaryOperatorToken.leftSemijoin(operator));\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.rightSemijoin(operator));\r\n                }\r\n                rest = rest.slice(2);\r\n                selectionExpected = false;\r\n            }\r\n            // operators of 1 character\r\n            else if (\"*\\u2a2f\\u222a\\u2229\\\\\\u22b3\\u22b2\\u00f7\".indexOf(rest.charAt(0)) > -1) {\r\n                const operator: IndexedString = rest.slice(0, 1);\r\n                // checks whether the cursor was reached\r\n                const operatorEndIndex: number | undefined = operator.getLastNonNaNIndex();\r\n                if (operatorEndIndex === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"*\")) {\r\n                    tokens.push(BinaryOperatorToken.naturalJoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u2a2f\")) {\r\n                    tokens.push(BinaryOperatorToken.cartesianProduct(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u222a\")) {\r\n                    tokens.push(BinaryOperatorToken.union(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u2229\")) {\r\n                    tokens.push(BinaryOperatorToken.intersection(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\\\\")) {\r\n                    tokens.push(BinaryOperatorToken.difference(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u22b3\")) {\r\n                    tokens.push(BinaryOperatorToken.leftAntijoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u22b2\")) {\r\n                    tokens.push(BinaryOperatorToken.rightAntijoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u00f7\")) {\r\n                    tokens.push(BinaryOperatorToken.division(operator));\r\n                }\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            // '<' can be a rename or left theta semi join - this \"if\" must be after <*\r\n            else if (rest.startsWith('<')) {\r\n                try {\r\n                    const split = IndexedStringUtils.nextBorderedPart(rest, '<', '>]', '-');\r\n                    // checks whether the cursor was reached\r\n                    const operatorEndIndex: number | undefined = split.first.getLastNonNaNIndex();\r\n                    if (operatorEndIndex === cursorIndex - 1) {\r\n                        whispers = [...this.relations.keys()];\r\n                    }\r\n                    // found rename\r\n                    if (split.first.endsWith('>')) {\r\n                        tokens.push(UnaryOperatorToken.rename(split.first));\r\n                        selectionExpected = true;\r\n                    }\r\n                    // found left theta semi join\r\n                    else {\r\n                        tokens.push(BinaryOperatorToken.leftThetaSemijoin(split.first));\r\n                        selectionExpected = false;\r\n                    }\r\n                    rest = split.second;\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (e) {\r\n                    // it fakes the unclosed expression part as a rename operator\r\n                    tokens.push(UnaryOperatorToken.rename(rest.concat(IndexedString.new('>', rest.getNextIndexOrNaN()))));\r\n                    // breaks the while cycle as all was used\r\n                    break;\r\n                }\r\n            }\r\n            // RELATION REFERENCE\r\n            else if (StringUtils.isLetter(rest.charAt(0)) || rest.charAt(0) === '_') {\r\n                const split = IndexedStringUtils.nextName(rest);\r\n\r\n                // checks whether the cursor was reached in the relation reference string\r\n                const relationStartIndex: number | undefined = split.first.getFirstNonNaNIndex();\r\n                const relationEndIndex: number | undefined = split.first.getLastNonNaNIndex();\r\n                if (typeof relationStartIndex === \"number\" && typeof relationEndIndex === \"number\" &&\r\n                    relationStartIndex <= cursorIndex - 1 && cursorIndex - 1 <= relationEndIndex) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                tokens.push(new RelationToken(split.first));\r\n                rest = split.second;\r\n                selectionExpected = true;\r\n            }\r\n            // WHITE SPACE\r\n            else if (rest.charAt(0).match(/\\s/)) {\r\n                let i = 0;\r\n                while (i < rest.length() && rest.charAt(i).match(/\\s/)) {\r\n                    if (rest.indexAt(i) === cursorIndex - 1) {\r\n                        whispers = [...this.relations.keys()];\r\n                    }\r\n                    ++i;\r\n                }\r\n                rest = rest.slice(i);\r\n            }\r\n            // UNEXPECTED PART\r\n            else {\r\n                const split = IndexedStringUtils.nextNonWhitespacePart(rest);\r\n                errors.push(ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_parseTokens_unexpectedPart,\r\n                    split.first.getRange(), split.first.toString()));\r\n                // tries to skip first unexpected character\r\n                rest = rest.slice(split.first.length());\r\n            }\r\n        }\r\n        return { tokens, whispers, errors };\r\n    }\r\n\r\n    /**\r\n     * Checks the validity of the given infix token array.\r\n     * If the type is THROW_STRICT or THROW_NOT_STRICT, it throws found errors. Strict version checks the first\r\n     * token in the array, not strict version does not. In both throw version is the errors parameter ignored.\r\n     * If the type is NOT_THROW, it adds fake tokens if the array is not valid.\r\n     * Fake tokens are relations with empty name \"\", or natural joins \"*\", their error ranges are undefined.\r\n     * All faked errors are reported pushed in given errors array.\r\n     * Expects validly nested parentheses: yes \"(()())\", no \")()\", \")(\". Expects not empty array.\r\n     *\r\n     * @param tokens token array to check\r\n     * @param type type of the assertion\r\n     * @param errors array for pushing faked errors for NOT_THROW type\r\n     */\r\n    public assertValidInfixTokens(tokens: ExprToken[], type: AssertType, errors: ErrorWithTextRange[] = []): void {\r\n        /**\r\n         * Handles the error described by given error code, params and range. If doThrow is true, throws the described\r\n         * error. Otherwise, fakes it by inserting a new token at given index. The token is binary (natural join) if\r\n         * missing is \"binary\", otherwise, it is a relation with empty name.\r\n         */\r\n        const handleError = (index: number, missing: \"binary\" | \"relation\",\r\n                             code: SyntaxErrorCodes, range: {start: number, end: number} | undefined, ...params: string[]) => {\r\n            const error = ErrorFactory.syntaxError(code, range, ...params);\r\n            if (type !== AssertType.NOT_THROW) {\r\n                throw error;\r\n            }\r\n            else if (missing === \"binary\") {\r\n                errors.push(error);\r\n                tokens.splice(index, 0, BinaryOperatorToken.naturalJoin(IndexedString.new(\"*\")));\r\n            }\r\n            else {\r\n                errors.push(error);\r\n                tokens.splice(index, 0, new RelationToken(IndexedString.new(\"\")));\r\n            }\r\n        }\r\n\r\n        if (type !== AssertType.THROW_NOT_STRICT) {\r\n            // checks start of an array: it must start with '(' or relation\r\n            if (tokens[0] instanceof UnaryOperatorToken || tokens[0] instanceof BinaryOperatorToken || tokens[0] instanceof ClosingParenthesis) {\r\n                handleError(0, \"relation\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_invalidStart,\r\n                    tokens[0].getRange(), tokens[0].str.toString());\r\n            }\r\n        }\r\n\r\n        // checks end of an array: it must end with ')', relation or an unary operator\r\n        if (tokens[tokens.length - 1] instanceof OpeningParenthesis || tokens[tokens.length - 1] instanceof BinaryOperatorToken) {\r\n            handleError(tokens.length, \"relation\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_invalidEnd,\r\n                tokens[tokens.length - 1].getRange(), tokens[tokens.length - 1].str.toString());\r\n        }\r\n\r\n        // checks adjacent pairs of tokens\r\n        let i2: number = 1;\r\n        while (i2 < tokens.length) {\r\n            const token1: ExprToken = tokens[i2 - 1];\r\n            const token2: ExprToken = tokens[i2];\r\n\r\n            // valid predecessors: binary operator or '('\r\n            if (token2 instanceof RelationToken) {\r\n                if (token1 instanceof RelationToken) {\r\n                    handleError(i2, \"binary\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_relationAfterRelation,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof UnaryOperatorToken) {\r\n                    handleError(i2, \"binary\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_relationAfterUnary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof ClosingParenthesis) {\r\n                    handleError(i2, \"binary\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_relationAfterClosing,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof UnaryOperatorToken) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_unaryAfterBinary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_unaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof BinaryOperatorToken) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_binaryAfterBinary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_binaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: binary operator or '('\r\n            else if (token2 instanceof OpeningParenthesis) {\r\n                if (token1 instanceof RelationToken) {\r\n                    handleError(i2, \"binary\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_openingAfterRelation,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof UnaryOperatorToken) {\r\n                    handleError(i2, \"binary\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_openingAfterUnary,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof ClosingParenthesis) {\r\n                    handleError(i2, \"binary\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_openingAfterClosing,\r\n                        token2.getRange());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof ClosingParenthesis) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_closingAfterBinary,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", SyntaxErrorCodes.exprParser_assertValidInfixTokens_closingAfterOpening,\r\n                        token2.getRange());\r\n                }\r\n            }\r\n            else {\r\n                throw ErrorFactory.codeError(CodeErrorCodes.exprParser_isValidSequence_unexpectedToken, JSON.stringify(token2));\r\n            }\r\n            ++i2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transforms given infix relation algebra expression into postfix (reverse polish) form.\r\n     * Throws error when invalid parentheses structure is given.\r\n     *\r\n     * @param tokens infix relational algebra expression as Token array\r\n     * @return postfix (reverse polish) form of given array\r\n     */\r\n    public toRPN(tokens: ExprToken[]): ExprToken[] {\r\n        const rpnQueue: ExprToken[] = [];\r\n        const operatorsStack: Array<BinaryOperatorToken | ParenthesisToken> = [];\r\n        tokens.forEach(token => {\r\n            if (token instanceof RelationToken || token instanceof UnaryOperatorToken) {\r\n                rpnQueue.push(token);\r\n            }\r\n            else if (token instanceof BinaryOperatorToken) {\r\n                while (operatorsStack.length > 0 && operatorsStack[operatorsStack.length - 1] instanceof BinaryOperatorToken) {\r\n                    // @ts-ignore (token must be of BinaryOperatorToken class)\r\n                    let other: BinaryOperatorToken = operatorsStack[operatorsStack.length - 1];\r\n                    // all used operators have left associativity\r\n                    if (token.precedence <= other.precedence) {\r\n                        // @ts-ignore (token must be present)\r\n                        rpnQueue.push(operatorsStack.pop());\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof OpeningParenthesis) {\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof ClosingParenthesis) {\r\n                while (true) {\r\n                    if (operatorsStack.length === 0) {\r\n                        throw ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_assertValidInfixTokens_invalidParentheses,\r\n                            undefined);\r\n                    }\r\n                    if (operatorsStack[operatorsStack.length - 1] instanceof OpeningParenthesis) {\r\n                        operatorsStack.pop();\r\n                        break;\r\n                    }\r\n                    // @ts-ignore (token must be present)\r\n                    rpnQueue.push(operatorsStack.pop());\r\n                }\r\n            }\r\n        });\r\n        while (operatorsStack.length > 0) {\r\n            // @ts-ignore (token must be present)\r\n            const curToken: ExprToken = operatorsStack.pop();\r\n            if (curToken instanceof OpeningParenthesis) {\r\n                throw ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_assertValidInfixTokens_invalidParentheses,\r\n                    undefined);\r\n            }\r\n            else {\r\n                rpnQueue.push(curToken);\r\n            }\r\n        }\r\n        return rpnQueue;\r\n    }\r\n\r\n    /**\r\n     * Creates a RA expression evaluating tree from the given array of tokens in reverse polish form.\r\n     * Wraps recursive function rpnToRATreeRecursive(tokens).\r\n     * Possible errors:\r\n     * - not all tokens were used (invalid RPN structure was given, should not happen if the previous infix structure\r\n     * was asserted/faked) - if doThrow = false, returns a RelationNode with an empty relation\r\n     * - reference to a relation which does not exist found - if doThrow = false, replaces it with an empty relation\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @param doThrow if true and an error occurs, throws an error, if false and an error occurs, fakes it and does\r\n     * not throw\r\n     * @param errors\r\n     * @return RATreeNode tree (its root)\r\n     */\r\n    public rpnToRATree(tokens: ExprToken[], doThrow: boolean, errors: ErrorWithTextRange[] = []): RATreeNode {\r\n        const ret: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n        // not all tokens were used\r\n        if (tokens.length > 0) {\r\n            if (doThrow) {\r\n                throw ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_rpnToVETree_invalidExpression, undefined);\r\n            }\r\n            else {\r\n                return new RelationNode(new Relation(\"\"));\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    public rpnToRATreeRecursive(tokens: ExprToken[], doThrow: boolean, errors: ErrorWithTextRange[]): RATreeNode {\r\n        if (tokens.length === 0) {\r\n            throw ErrorFactory.syntaxError(SyntaxErrorCodes.exprParser_rpnToVETree_invalidExpression, undefined);\r\n        }\r\n        // @ts-ignore (there must be a token)\r\n        const token: ExprToken = tokens.pop();\r\n        // RELATION REFERENCE\r\n        if (token instanceof RelationToken) {\r\n            const relation: Relation | undefined = this.relations.get(token.str.toString());\r\n            // when the relation does not exist, throws or fakes it with an empty relation\r\n            if (relation === undefined) {\r\n                const error = ErrorFactory.semanticError(SemanticErrorCodes.exprParser_parse_relationNotDefined,\r\n                    token.getRange(), token.str.toString());\r\n                if (doThrow) {\r\n                    throw error;\r\n                }\r\n                else {\r\n                    errors.push(error);\r\n                    return new RelationNode(new Relation(\"\"));\r\n                }\r\n            }\r\n            return new RelationNode(relation);\r\n        }\r\n        // UNARY OPERATORS\r\n        if (token instanceof UnaryOperatorToken) {\r\n            const subtree: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            return RATreeFactory.createUnary(token.type, subtree, this.nullValuesSupport, token.str);\r\n        }\r\n        // BINARY OPERATORS\r\n        if (token instanceof BinaryOperatorToken) {\r\n            const right: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            const left: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            return RATreeFactory.createBinary(token.type, left, right, this.nullValuesSupport, token.str);\r\n        }\r\n        // should never happen\r\n        throw ErrorFactory.codeError(CodeErrorCodes.exprParser_rpnToVETreeRecursive_unexpectedToken, JSON.stringify(token));\r\n    }\r\n}\r\n","import RATreeNode from \"./raTreeNode\";\r\nimport ProjectionNode from \"./projectionNode\";\r\nimport RenameNode from \"./renameNode\";\r\nimport SelectionNode from \"./selectionNode\";\r\nimport UnaryNode, {UnaryNodeClass} from \"./unaryNode\";\r\nimport AntijoinNode, {AntijoinType} from \"./antijoinNode\";\r\nimport CartesianProductNode from \"./cartesianProductNode\";\r\nimport DivisionNode from \"./divisionNode\";\r\nimport OuterJoinNode, {OuterJoinType} from \"./outerJoinNode\";\r\nimport NaturalJoinNode, {NaturalJoinType} from \"./naturalJoinNode\";\r\nimport SetOperationNode, {SetOperationType} from \"./setOperationNode\";\r\nimport BinaryNode, {BinaryNodeClass} from \"./binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport ThetaJoinNode, {ThetaJoinType} from \"./thetaJoinNode\";\r\n\r\n/**\r\n * Factory for creating unary and binary nodes of given class.\r\n */\r\nexport default class RATreeFactory {\r\n\r\n    /**\r\n     * Creates new unary node of given class.\r\n     *\r\n     * @param unaryClass wanted class\r\n     * @param subtree source subtree for a node\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param expr expression used to specify node's behavior\r\n     */\r\n    public static createUnary(unaryClass: UnaryNodeClass, subtree: RATreeNode,\r\n                              nullValuesSupport: boolean, expr: IndexedString): UnaryNode {\r\n        switch (unaryClass) {\r\n            case \"projection\":\r\n                return new ProjectionNode(expr, subtree);\r\n            case \"rename\":\r\n                return new RenameNode(expr, subtree);\r\n            case \"selection\":\r\n                return new SelectionNode(expr, subtree, nullValuesSupport);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new binary node of given class.\r\n     *\r\n     * @param binaryClass wanted class\r\n     * @param left left source subtree for a node\r\n     * @param right right source subtree for a node\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param expr expression used to specify node's behavior\r\n     */\r\n    public static createBinary(binaryClass: BinaryNodeClass, left: RATreeNode, right: RATreeNode,\r\n                               nullValuesSupport: boolean, expr: IndexedString): BinaryNode {\r\n        switch (binaryClass) {\r\n            case \"left antijoin\":\r\n                return new AntijoinNode(AntijoinType.left, left, right);\r\n            case \"right antijoin\":\r\n                return new AntijoinNode(AntijoinType.right, left, right);\r\n            case \"cartesian product\":\r\n                return new CartesianProductNode(left, right, expr.getRange());\r\n            case \"division\":\r\n                return new DivisionNode(left, right, expr.getRange());\r\n            case \"natural join\":\r\n                return new NaturalJoinNode(NaturalJoinType.natural, left, right);\r\n            case \"left outer join\":\r\n                return new OuterJoinNode(OuterJoinType.left, left, right);\r\n            case \"right outer join\":\r\n                return new OuterJoinNode(OuterJoinType.right, left, right);\r\n            case \"full outer join\":\r\n                return new OuterJoinNode(OuterJoinType.full, left, right);\r\n            case \"left semijoin\":\r\n                return new NaturalJoinNode(NaturalJoinType.leftSemi, left, right);\r\n            case \"right semijoin\":\r\n                return new NaturalJoinNode(NaturalJoinType.rightSemi, left, right);\r\n            case \"union\":\r\n                return new SetOperationNode(SetOperationType.union, left, right, expr.getRange());\r\n            case \"intersection\":\r\n                return new SetOperationNode(SetOperationType.intersection, left, right, expr.getRange());\r\n            case \"difference\":\r\n                return new SetOperationNode(SetOperationType.difference, left, right, expr.getRange());\r\n            case \"theta join\":\r\n                return new ThetaJoinNode(ThetaJoinType.full, expr, left, right, nullValuesSupport);\r\n            case \"left theta semijoin\":\r\n                return new ThetaJoinNode(ThetaJoinType.left, expr, left, right, nullValuesSupport);\r\n            case \"right theta semijoin\":\r\n                return new ThetaJoinNode(ThetaJoinType.right, expr, left, right, nullValuesSupport);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\n\r\ninterface TextInputProps {\r\n    // label before the input\r\n    label: string,\r\n    // initial value for the input\r\n    value: string,\r\n    // text on the submit button\r\n    buttonText: string,\r\n    // handler of input submit\r\n    onSubmit: (text: string) => void,\r\n    // function which returns true for forbidden inputs which cannot be submitted\r\n    forbidden: (text: string) => boolean,\r\n\r\n    // id of the input\r\n    id: string\r\n}\r\n\r\ninterface TextInputState {\r\n    value: string,\r\n    buttonDisable: boolean\r\n}\r\n\r\n/**\r\n * Basic text input with submit button. The input cannot be submit if the current value is forbidden.\r\n * All inserted tabulators are replaced by 4 spaces.\r\n */\r\nexport class TextInput extends React.Component<TextInputProps, TextInputState> {\r\n\r\n    private readonly inputRef: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: TextInputProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            buttonDisable: this.props.forbidden(this.props.value)\r\n        }\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<TextInputProps>) {\r\n        if (prevProps.value !== this.props.value) {\r\n            this.setState({value: this.props.value});\r\n        }\r\n    }\r\n\r\n    private handleChange = (value: string): void => {\r\n        value = value.replace(/\\t/g, \"    \");\r\n        const disable: boolean = this.props.forbidden(value);\r\n        this.setState({\r\n            value: value,\r\n            buttonDisable: disable\r\n        });\r\n    }\r\n\r\n    private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n        if (event.key === \"Enter\") {\r\n            if (!this.state.buttonDisable) {\r\n                this.handleSubmit();\r\n            }\r\n        }\r\n        else if (event.key === \"Escape\" || event.key === \"Esc\") {\r\n            if (this.inputRef.current !== null) {\r\n                this.inputRef.current.blur();\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleSubmit = (): void => {\r\n        this.props.onSubmit(this.state.value);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <>\r\n                <label htmlFor={this.props.id}>{this.props.label}</label>\r\n                <input\r\n                    ref={this.inputRef}\r\n                    type='text'\r\n                    id={this.props.id}\r\n                    spellCheck={false}\r\n                    autoComplete={\"off\"}\r\n                    value={this.state.value}\r\n                    onChange={event => this.handleChange(event.target.value)}\r\n                    onKeyDown={this.handleKeyDown}\r\n                    className={'text-input'}\r\n                />\r\n                <button\r\n                    onClick={this.handleSubmit}\r\n                    disabled={this.state.buttonDisable}\r\n                >{this.props.buttonText}</button>\r\n            </>\r\n        );\r\n    }\r\n}","import \"./css/messageBox.css\"\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\nconst boxMargin: number = Number(cssConstants.getPropertyValue('--message-box-margin-num'));\r\n\r\nexport class MessageBox {\r\n\r\n    private static readonly hideTimeout: number = 5000;\r\n\r\n    private static box: HTMLDivElement = MessageBox.init();\r\n    private static hideIntervalId: NodeJS.Timeout;\r\n\r\n    private static init(): HTMLDivElement {\r\n        const box = document.createElement(\"div\");\r\n        box.classList.add(\"message-box\");\r\n        box.style.visibility = \"hidden\";\r\n        box.onmouseenter = () => {\r\n            MessageBox.clearHideTimeout();\r\n        }\r\n        box.onmouseleave = () => {\r\n            MessageBox.setHideTimeout();\r\n        }\r\n\r\n        const paragraph = document.createElement(\"p\");\r\n        box.appendChild(paragraph);\r\n\r\n        const button = document.createElement(\"button\");\r\n        button.innerText = \"\\u2716\";\r\n        button.onclick = () => {\r\n            MessageBox.hideBox();\r\n        }\r\n        box.appendChild(button);\r\n\r\n        window.addEventListener('resize', () => {\r\n            MessageBox.moveBox();\r\n        });\r\n\r\n        document.body.appendChild(box);\r\n        return box;\r\n    }\r\n\r\n    private static setHideTimeout = () => {\r\n        // clears previous hide interval\r\n        MessageBox.clearHideTimeout();\r\n        MessageBox.hideIntervalId = setTimeout(MessageBox.hideBox, MessageBox.hideTimeout);\r\n    }\r\n\r\n    private static clearHideTimeout = () => {\r\n        clearTimeout(MessageBox.hideIntervalId);\r\n    }\r\n\r\n    private static hideBox = () => {\r\n        MessageBox.box.style.visibility = \"hidden\";\r\n    }\r\n\r\n    private static moveBox = () => {\r\n        if (MessageBox.box.style.visibility === \"visible\") {\r\n            MessageBox.box.style.width = (document.body.clientWidth - 2 * boxMargin) + \"px\";\r\n        }\r\n    }\r\n\r\n    private static display(msg: string, error: boolean): void {\r\n        const box = MessageBox.box;\r\n        // @ts-ignore - first element is paragraph\r\n        box.firstElementChild.innerText = msg;\r\n        box.style.visibility = \"visible\";\r\n        box.classList.toggle(\"message-box-message\", !error);\r\n        box.classList.toggle(\"message-box-error\", error);\r\n        MessageBox.moveBox();\r\n        MessageBox.setHideTimeout();\r\n    }\r\n\r\n    /**\r\n     * Displays given message in a message box fixed on the page bottom.\r\n     */\r\n    public static message(msg: string): void {\r\n        MessageBox.display(msg, false);\r\n    }\r\n\r\n    /**\r\n     * Displays given error in a message box fixed on the page bottom.\r\n     */\r\n    public static error(msg: string): void {\r\n        MessageBox.display(msg, true);\r\n    }\r\n}","import React from \"react\";\r\nimport \"./css/expressionSection.css\"\r\nimport Relation from \"../relation/relation\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport RASyntaxError from \"../error/raSyntaxError\";\r\nimport RASemanticError from \"../error/raSemanticError\";\r\nimport {XTextArea} from \"./xTextArea\";\r\nimport {ExprParser} from \"../expression/exprParser\";\r\nimport {getStartOfWordBeforeIndex, sortWhispers} from \"../utils/whisperUtils\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {TextInput} from \"./textInput\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport {MessageBox} from \"./messageBox\";\r\n\r\ninterface ExpressionSectionProps {\r\n    // available expressions\r\n    expressions: Expression[],\r\n    // index of the current selected expression in the expression list\r\n    currentExpressionIndex: number,\r\n\r\n    // loaded relations user as sources for expression evaluation\r\n    relations: Map<string, Relation>,\r\n\r\n    // handler of selecting different expression as current\r\n    onSelectDifferentExpression: (newIndex: number) => void,\r\n    // handler of creating the new expression\r\n    onNewExpression: () => void,\r\n    // handler of deleting the current expression\r\n    onDeleteExpression: (onDone: () => void) => void,\r\n    // handler of saving the expressions\r\n    onExportExpressions: (onDone: (msg: string) => void) => void,\r\n    // handler of loading the expressions\r\n    onImportExpressions: (onDone: (msg: string) => void) => void,\r\n\r\n    // handler of change in the current selected expression\r\n    onChange: (name: string, text: string) => void,\r\n    // handler of evaluation, it accepts the parsed tree from the expression text\r\n    onEval: (tree: RATreeNode) => void,\r\n    // handler of unexpected errors\r\n    onUnexpectedError: (e: Error) => void,\r\n\r\n    // whether to support null values\r\n    nullValuesSupport: boolean,\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean\r\n}\r\n\r\ninterface ExpressionSectionState {\r\n    sectionClicked: boolean,\r\n    whispers: string[],\r\n    errors: {start: number, end: number, msg: string}[],\r\n    cursorIndex: number\r\n}\r\n\r\ninterface OpButtonProps {\r\n    // key for React DOM\r\n    key: string,\r\n    // characters to be added on click\r\n    char: string,\r\n    // text to display on the button\r\n    text: string,\r\n    // tooltip ti show on mouse move\r\n    tooltip: string,\r\n    // shift to left of the cursor after adding the characters\r\n    shift: number\r\n}\r\n\r\n/**\r\n * Section to edit, manage, and eval relational algebra expressions.\r\n */\r\nexport class ExpressionSection extends React.Component<ExpressionSectionProps, ExpressionSectionState> {\r\n\r\n    private readonly unaryButtons: Array<OpButtonProps> = [\r\n        {key: 'unary_a', char: '()',        text: '()', tooltip: 'Selection',   shift: 1},\r\n        {key: 'unary_b', char: '[]',        text: '[]', tooltip: 'Projection',  shift: 1},\r\n        {key: 'unary_c', char: '< -> >',    text: '<>', tooltip: 'Rename',      shift: 5}\r\n    ];\r\n    private readonly setOperatorsButtons: Array<OpButtonProps> = [\r\n        {key: 'set_a', char: '\\u222a',  text: '\\u222a', tooltip: 'Union',         shift: 0},\r\n        {key: 'set_b', char: '\\u2229',  text: '\\u2229', tooltip: 'Intersection',  shift: 0},\r\n        {key: 'set_c', char: '\\\\',      text: '\\\\',     tooltip: 'Difference',    shift: 0},\r\n    ];\r\n    private readonly innerJoinsButtons: Array<OpButtonProps> = [\r\n        {key: 'inner_a', char: '*',       text: '*',      tooltip: 'Natural join',            shift: 0},\r\n        {key: 'inner_b', char: '\\u2a2f',  text: '\\u2a2f', tooltip: 'Cartesian product',       shift: 0},\r\n        {key: 'inner_c', char: '<*',      text: '<*',     tooltip: 'Left semijoin',           shift: 0},\r\n        {key: 'inner_d', char: '*>',      text: '*>',     tooltip: 'Right semijoin',          shift: 0},\r\n        {key: 'inner_e', char: '\\u22b3',  text: '\\u22b3', tooltip: 'Left antijoin',           shift: 0},\r\n        {key: 'inner_f', char: '\\u22b2',  text: '\\u22b2', tooltip: 'Right antijoin',          shift: 0},\r\n        {key: 'inner_g', char: '[]',      text: '[]',     tooltip: 'Theta join',              shift: 1},\r\n        {key: 'inner_h', char: '<]',      text: '<]',     tooltip: 'Left theta semijoin',     shift: 1},\r\n        {key: 'inner_i', char: '[>',      text: '[>',     tooltip: 'Right theta semijoin',    shift: 1},\r\n    ];\r\n    private readonly outerJoinsButtons: Array<OpButtonProps> = [\r\n        {key: 'outer_a', char: '*F*', text: '*F*', tooltip: 'Full outer join',  shift: 0},\r\n        {key: 'outer_b', char: '*L*', text: '*L*', tooltip: 'Left outer join',  shift: 0},\r\n        {key: 'outer_c', char: '*R*', text: '*R*', tooltip: 'Right outer join', shift: 0}\r\n    ];\r\n    private readonly divisionButton: Array<OpButtonProps> = [\r\n        {key: 'division', char: '\\u00f7',  text: '\\u00f7', tooltip: 'Division', shift: 0}\r\n    ];\r\n    private readonly specialButtons: Array<OpButtonProps> = [\r\n        {key: 'special_a', char: '//',  text: '//', tooltip: 'Comment', shift: 0}\r\n    ];\r\n\r\n    // reference to child textarea element\r\n    private readonly textAreaRef: React.RefObject<XTextArea>;\r\n    // timestamp of last expression text change\r\n    private lastChange: number = 0;\r\n    // timestamp of last display of whispers and errors\r\n    private lastWhisperAndErrorsUpdate: number = 0;\r\n    // update rate of whispers and errors (in ms)\r\n    private readonly whispersAndErrorsUpdateRate: number = 400;\r\n\r\n    constructor(props: ExpressionSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false,\r\n            whispers: [],\r\n            errors: [],\r\n            cursorIndex: 0\r\n        }\r\n        this.textAreaRef = React.createRef<XTextArea>();\r\n        setInterval(() => this.updateWhispersAndErrors(), this.whispersAndErrorsUpdateRate);\r\n    }\r\n\r\n    /**\r\n     * Updates displayed errors in the text area input.\r\n     */\r\n    public updateErrors = () => {\r\n        const text = this.getCurExpr().text;\r\n        const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n        const { errors } = exprParser.fakeParse(text, this.state.cursorIndex);\r\n        this.setState({\r\n            errors: errors.filter(err => err.range !== undefined)\r\n                // @ts-ignore\r\n                .map(err => {return {start: err.range.start, end: err.range.end + 1, msg: err.message}})\r\n        });\r\n    }\r\n\r\n    private getCurExpr(): Expression {\r\n        return this.props.expressions[this.props.currentExpressionIndex];\r\n    }\r\n\r\n    private handleSelectDifferentExpression(index: number): void {\r\n        this.setState({errors: []});\r\n        this.props.onSelectDifferentExpression(index);\r\n    }\r\n\r\n    private evalExpr = (): void => {\r\n        try {\r\n            const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n            const tree = exprParser.parse(this.props.expressions[this.props.currentExpressionIndex].text);\r\n            tree.eval();\r\n            this.setState({errors: []});\r\n            this.props.onEval(tree);\r\n        }\r\n        catch (err) {\r\n            if (err instanceof ErrorWithTextRange) {\r\n                if (err.range !== undefined) {\r\n                    // change end to also highlight the last char\r\n                    err.range.end += 1;\r\n                    this.setState(state => {\r\n                        const errorRanges = state.errors;\r\n                        // does not push duplicate error range\r\n                        if (errorRanges.every(er => er.start !== err.range.start || er.end !== err.range.end)) {\r\n                            errorRanges.push({...err.range, msg: err.message});\r\n                        }\r\n                        return {errors: errorRanges}\r\n                    });\r\n                }\r\n            }\r\n            this.showError(err);\r\n        }\r\n    }\r\n\r\n    private newExpression = (): void => {\r\n        this.props.onNewExpression();\r\n    }\r\n\r\n    private deleteExpression = (): void => {\r\n        this.props.onDeleteExpression(this.updateErrors);\r\n    }\r\n\r\n    private saveExpressions = (): void => {\r\n        this.props.onExportExpressions(MessageBox.message);\r\n    }\r\n\r\n    private loadExpressions = (): void => {\r\n        this.setState({errors: []});\r\n        this.props.onImportExpressions((msg) => {\r\n            MessageBox.message(msg);\r\n            this.updateErrors();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds given special string into RA expression at the current cursor position.\r\n     *\r\n     * @param str string to be added\r\n     * @param shift move of the cursor from added string end position (to the beginning)\r\n     */\r\n    private addSpecialString = (str: string, shift: number): void => {\r\n        // @ts-ignore\r\n        const {start, end} = this.textAreaRef.current.getSelection();\r\n        const firstPart: string = this.getCurExpr().text.substring(0, start);\r\n        const secondPart: string = this.getCurExpr().text.substring(end);\r\n        const newPosition: number = firstPart.length + str.length - shift;\r\n        const newStr: string = firstPart + str + secondPart;\r\n        // updates text in textarea\r\n        this.handleExprChange(newStr, newPosition, () => {\r\n            // @ts-ignore - moves cursor to expected position\r\n            this.textAreaRef.current.setSelection(newPosition);\r\n            // @ts-ignore\r\n            this.textAreaRef.current.focus();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles change of expression text. Updates text and notifies the parent.\r\n     *\r\n     * @param text\r\n     * @param cursorIndex\r\n     * @param onDone callback after updating the state\r\n     */\r\n    private handleExprChange = (text: string, cursorIndex: number, onDone: () => void = () => {}): void => {\r\n        this.props.onChange(this.getCurExpr().name, text);  // must be called before setState for proper functionality of XTextArea\r\n        this.setState({cursorIndex: cursorIndex}, onDone);\r\n        this.lastChange = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Handles input with Ctrl key pressed from textarea.\r\n     */\r\n    private handleCtrlInput = (ev: KeyboardEvent): void => {\r\n        if (ev.key === \"Enter\") {\r\n            this.evalExpr();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows current whispers and errors, if the text area is focused and there was a text change after last update.\r\n     */\r\n    private updateWhispersAndErrors = () => {\r\n        const textArea = this.textAreaRef.current;\r\n        if (textArea !== null && textArea.isFocused() && this.lastChange > this.lastWhisperAndErrorsUpdate) {\r\n            const text = this.getCurExpr().text;\r\n            const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n            const fakeParseResult = exprParser.fakeParse(text, this.state.cursorIndex);\r\n            const wordBeforeCursor: string = text.slice(getStartOfWordBeforeIndex(text, this.state.cursorIndex), this.state.cursorIndex);\r\n            const whispers = sortWhispers(fakeParseResult.whispers, wordBeforeCursor);\r\n            this.setState({\r\n                whispers: whispers,\r\n                errors: fakeParseResult.errors.filter(err => err.range !== undefined)\r\n                    // @ts-ignore\r\n                    .map(err => {return {start: err.range.start, end: err.range.end + 1, msg: err.message}})\r\n            });\r\n            this.lastWhisperAndErrorsUpdate = Date.now();\r\n        }\r\n    }\r\n\r\n    private handleExprNameChange = (name: string) => {\r\n        this.props.onChange(name, this.getCurExpr().text);\r\n    }\r\n\r\n    /**\r\n     * Handles and shows the given error. If the error is not of RASyntaxError or RASemanticError class, it is passed\r\n     * to the parent as unexpected error.\r\n     *\r\n     * @param err the error to handle\r\n     */\r\n    private showError = (err: Error) => {\r\n        // common user's errors\r\n        if (err instanceof RASyntaxError || err instanceof RASemanticError) {\r\n            MessageBox.error(err.message);\r\n        }\r\n        else {\r\n            this.props.onUnexpectedError(err);\r\n            MessageBox.error(\"UNEXPECTED ERROR: \" + err.message + \"\\n\" +\r\n                \"Please, help us and report your last actions, thank you!\");\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const createExprMenuButtons = () => {\r\n            return this.props.expressions.map((expr, i) => {\r\n                const className: string = (this.props.currentExpressionIndex === i ? \"button-clicked\" : \"\");\r\n                return (<button\r\n                    key={i}\r\n                    onClick={() => this.handleSelectDifferentExpression(i)}\r\n                    className={className}\r\n                >{expr.name}</button>);\r\n            });\r\n        }\r\n\r\n        const createButton = (text: string, onClick: () => void, tooltip: string, style?: React.CSSProperties) => {\r\n            return (<TooltipButton\r\n                key={text}\r\n                text={text}\r\n                onClick={onClick}\r\n                className={\"\"}\r\n                style={style}\r\n                tooltip={tooltip}\r\n                tooltipClassName={\"tooltip\"}\r\n            />);\r\n        }\r\n\r\n        /**\r\n         * Creates buttons for inserting given operators and adds margin after them.\r\n         */\r\n        const createOpButtons = (buttonProps: Array<OpButtonProps>) => {\r\n            return buttonProps.map((prop, i) => {\r\n                const style = i === buttonProps.length - 1 ? {marginRight: \"10px\"} : undefined;\r\n                return (<TooltipButton\r\n                    key={prop.key}\r\n                    text={prop.text}\r\n                    onClick={() => this.addSpecialString(prop.char, prop.shift)}\r\n                    className={\"\"}\r\n                    tooltip={prop.tooltip}\r\n                    tooltipClassName={\"tooltip\"}\r\n                    style={style}\r\n                />);\r\n            });\r\n        }\r\n\r\n        return (\r\n            <section className=\"page-section\">\r\n                <header>\r\n                    <h2>Expressions</h2>\r\n                    {createButton(\"Import\", this.loadExpressions, \"Loads expressions from a file\")}\r\n                    {createButton(\"Export\", this.saveExpressions, \"Saves expressions to a file\")}\r\n                </header>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    {createExprMenuButtons()}\r\n                    <button onClick={this.newExpression}\r\n                        style={{minWidth: \"0\", marginLeft: \"10px\", padding: \"2px 6px 1px 6px\"}}>\r\n                        <strong>+</strong>\r\n                    </button>\r\n                </menu>\r\n\r\n                <XTextArea\r\n                    ref={this.textAreaRef}\r\n                    id=\"expression-section-textarea\"\r\n                    text={this.getCurExpr().text}\r\n                    placeholder=\"Write RA expression here...\"\r\n                    errors={this.state.errors}\r\n                    whispers={this.state.whispers}\r\n\r\n                    onChange={this.handleExprChange}\r\n                    onCtrlInput={this.handleCtrlInput}\r\n\r\n                    darkTheme={this.props.darkTheme}\r\n                />\r\n\r\n                <menu className=\"expressions-operators-menu\">\r\n                    {createOpButtons(this.unaryButtons)}\r\n                    {createOpButtons(this.setOperatorsButtons)}\r\n                    {createOpButtons(this.innerJoinsButtons)}\r\n                    {this.props.nullValuesSupport ? createOpButtons(this.outerJoinsButtons) : null}\r\n                    {createOpButtons(this.divisionButton)}\r\n                    {createOpButtons(this.specialButtons)}\r\n                </menu>\r\n\r\n                <menu className=\"page-section-management-menu\">\r\n                    <TooltipButton\r\n                        key=\"Evaluate\"\r\n                        text=\"Evaluate\"\r\n                        onClick={this.evalExpr}\r\n                        className={\"action-button\"}\r\n                        style={{marginRight: \"40px\"}}\r\n                        tooltip=\"Evaluates given RA expression\"\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                    <TextInput\r\n                        label=\"\"\r\n                        value={this.getCurExpr().name}\r\n                        buttonText=\"Rename\"\r\n                        onSubmit={this.handleExprNameChange}\r\n                        forbidden={() => false}\r\n                        id=\"expression-name-input\"\r\n                    />\r\n                    {createButton(\"Delete\", this.deleteExpression, \"Deletes current RA expression\")}\r\n                </menu>\r\n            </section>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Relation from \"../relation/relation\";\r\nimport './css/resultRelationTable.css'\r\nimport Row from \"../relation/row\";\r\n\r\ninterface RelationTableProps {\r\n    // relation to be shown\r\n    relation: Relation\r\n}\r\n\r\ninterface RelationTableState {\r\n    // index of the column which is used to order the table (or -1 if none is used)\r\n    orderBy: number,\r\n    // 1 = ascending, -1 = descending\r\n    orderDir: number\r\n}\r\n\r\n/**\r\n * Table which shows given relation. The relation cannot be edited\r\n * Rows can be ordered by column values when the column header is clicked.\r\n * When the same column header is clicked for the second time, the order direction is changed (asc, des, asc, des, ...).\r\n */\r\nexport class ResultRelationTable extends React.Component<RelationTableProps, RelationTableState> {\r\n\r\n    constructor(props: RelationTableProps) {\r\n        super(props);\r\n        this.state = {\r\n            orderBy: -1,\r\n            orderDir: 1\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RelationTableProps>, prevState: Readonly<RelationTableState>, snapshot?: any) {\r\n        if (prevProps.relation !== this.props.relation) {\r\n            this.setState({\r\n                orderDir: 1,\r\n                orderBy: -1\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates ordering column or direction. If the given orderBy index is already selected, switches ASC/DESC order.\r\n     * Otherwise, sets ASC ordering by new orderBy column index.\r\n     */\r\n    private updateOrderBy(orderBy: number): void {\r\n        this.setState(state => {\r\n            if (state.orderBy === orderBy) {\r\n                return {\r\n                    orderDir: -state.orderDir,\r\n                    orderBy: orderBy\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    orderDir: 1,\r\n                    orderBy: orderBy\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    private getOrderByText = (): string => {\r\n        return this.state.orderDir === 1 ? \" ▼\" : \" ▲\";\r\n    }\r\n\r\n    /**\r\n     * Creates a header row for a table (with given column names).\r\n     *\r\n     * @param columns\r\n     */\r\n    private createHeaderRow(columns: string[]) {\r\n        return (\r\n            <tr>\r\n                <td className=\"row-number-td\"/>\r\n                {columns.map((columnName, index) => {\r\n                    const text: string = this.state.orderBy === index ?\r\n                        (columnName + this.getOrderByText()) : columnName;\r\n                    return <th key={index} onClick={() => this.updateOrderBy(index)}>{text}</th>\r\n                })}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates rows for a table. If there is no row in a resultRelation, returns one cell \"<<NO ROWS>>\".\r\n     *\r\n     * @param columns\r\n     */\r\n    private createRows(columns: string[]) {\r\n        // creates default row if no exists\r\n        if (this.props.relation.getRowsCount() === 0) {\r\n            return (\r\n                <tr key='1'>\r\n                    <td className=\"row-number-td\"/>\r\n                    <td key='1' colSpan={columns.length}>{'<<NO ROWS>>'}</td>\r\n                </tr>\r\n            );\r\n        }\r\n        const rows: Row[] = this.props.relation.getRows();\r\n        // sorts rows if orderBy is given (null values are after other values)\r\n        if (this.state.orderBy > -1 && this.state.orderBy < columns.length) {\r\n            const sortCol: string = columns[this.state.orderBy];\r\n            // @ts-ignore cannot be undefined\r\n            const type: \"string\" | \"number\" | \"boolean\" = rows[0].getType(sortCol);\r\n            if (type === \"number\") {\r\n                rows.sort((a, b) => {\r\n                    // @ts-ignore\r\n                    let aValue: number | null = a.getValue(sortCol);\r\n                    // @ts-ignore\r\n                    let bValue: number | null = b.getValue(sortCol);\r\n                    // a is null\r\n                    if (aValue === null && bValue !== null) {\r\n                        return this.state.orderDir * Number.MAX_SAFE_INTEGER;\r\n                    }\r\n                    // b is null\r\n                    if (aValue !== null && bValue === null) {\r\n                        return this.state.orderDir * Number.MIN_SAFE_INTEGER;\r\n                    }\r\n                    // no is null - compares as numbers\r\n                    if (aValue !== null && bValue !== null) {\r\n                        // @ts-ignore\r\n                        return this.state.orderDir * (a.getValue(sortCol) - b.getValue(sortCol));\r\n                    }\r\n                    // both are null\r\n                    return 0;\r\n                });\r\n            }\r\n            else {\r\n                rows.sort((a, b) => {\r\n                    // @ts-ignore\r\n                    let aValue: string | boolean | null = a.getValue(sortCol);\r\n                    // @ts-ignore\r\n                    let bValue: string | boolean | null = b.getValue(sortCol);\r\n                    // a is null\r\n                    if (aValue === null && bValue !== null) {\r\n                        return this.state.orderDir * Number.MAX_SAFE_INTEGER;\r\n                    }\r\n                    // b is null\r\n                    if (aValue !== null && bValue === null) {\r\n                        return this.state.orderDir * Number.MIN_SAFE_INTEGER;\r\n                    }\r\n                    // no is null - compares as strings\r\n                    if (aValue !== null && bValue !== null) {\r\n                        return this.state.orderDir * String(a.getValue(sortCol)).localeCompare(String(b.getValue(sortCol)));\r\n                    }\r\n                    // both are null\r\n                    return 0;\r\n                });\r\n            }\r\n        }\r\n        // creates all rows if any\r\n        return rows.map((row, index) => (\r\n            <tr key={index}>\r\n                <td className=\"row-number-td\">{index + 1}</td>\r\n                {row.getOrderedPrintValues(columns).map((value, index) => (\r\n                    <td key={index}>{value}</td>\r\n                ))}\r\n            </tr>\r\n        ));\r\n    }\r\n\r\n    render(){\r\n        // creates header row\r\n        const columns: string[] = this.props.relation.getColumnNames();\r\n        const headerRow = this.createHeaderRow(columns);\r\n        const rows = this.createRows(columns);\r\n\r\n        return (\r\n            <div className=\"result-table-container scrollbar-container\">\r\n                <table className=\"result-table\">\r\n                    <thead>\r\n                    {headerRow}\r\n                    </thead>\r\n                    <tbody>\r\n                    {rows}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Group } from '@visx/group';\r\nimport { hierarchy, Tree } from '@visx/hierarchy';\r\nimport { HierarchyPointNode, HierarchyPointLink } from '@visx/hierarchy/lib/types';\r\nimport { LinkVertical } from '@visx/shape';\r\nimport ParentSize from \"@visx/responsive/lib/components/ParentSize\";\r\nimport {useTooltip} from '@visx/tooltip';\r\nimport './css/evaluationTree.css';\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport UnaryNode from \"../ratree/unaryNode\";\r\nimport BinaryNode from \"../ratree/binaryNode\";\r\nimport {getTreeDepth} from \"../ratree/raTreeTools\";\r\nimport {computeFontSizeInPx} from \"../utils/fontUtils\";\r\n\r\nexport const evalTreeSVGId: string = \"eval-tree-svg\";\r\n\r\ninterface EvaluationTreeProps {\r\n    // root of the evaluation tree to be displayed\r\n    tree: RATreeNode,\r\n    // index of the current selected node (with respect to depth first search)\r\n    selected: number,\r\n    // handler of click on nodes, it receives the index of the clicked node (with respect to depth first search)\r\n    onClick: (index: number) => void,\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean\r\n}\r\n\r\n/**\r\n * Component displaying an evaluation tree. The tree is interactive and handles clicking on the nodes.\r\n */\r\nexport class EvaluationTree extends React.Component<EvaluationTreeProps, {}> {\r\n    render() {\r\n        return (\r\n            <ParentSize>{({ width }) =>\r\n                <TreeComponent\r\n                    raTree={this.props.tree}\r\n                    selected={this.props.selected}\r\n                    width={width}\r\n                    onClick={this.props.onClick}\r\n                    darkTheme={this.props.darkTheme}\r\n                />}\r\n            </ParentSize>\r\n        );\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\n\r\nconst fontSize: string = cssConstants.getPropertyValue('--eval-tree-font-size');\r\nconst fontFamily: string = cssConstants.getPropertyValue('--eval-tree-font-family');\r\nconst {fontWidth, fontHeight} = computeFontSizeInPx(fontFamily, fontSize);\r\nconst nodePaddingX2: number = 24;\r\nconst nodeHeight = 2 * fontHeight + nodePaddingX2;\r\nconst maxNodeTextLength = 30;\r\n\r\nconst backgroundColorLight = cssConstants.getPropertyValue('--light-color-a');\r\nconst backgroundColorDark = cssConstants.getPropertyValue('--dark-color-a');\r\nconst textColorLight = cssConstants.getPropertyValue('--text-color-light');\r\nconst textColorDark = cssConstants.getPropertyValue('--text-color-dark');\r\nconst selectedNodeColorLight = cssConstants.getPropertyValue('--light-color-c');\r\nconst unselectedNodeColorLight = cssConstants.getPropertyValue('--light-color-b');\r\nconst selectedNodeColorDark = cssConstants.getPropertyValue('--dark-color-d');\r\nconst unselectedNodeColorDark = cssConstants.getPropertyValue('--dark-color-c');\r\n\r\ninterface DisplayTreeNode {\r\n    title: string;\r\n    symbol: string,\r\n    index: number;\r\n    children?: this[];\r\n}\r\n\r\n/**\r\n * Creates a DisplayTreeNode tree from the given RATreeNode tree.\r\n *\r\n * @param tree RATreeNode tree to parse to DisplayTreeNode tree\r\n * @return parsed DisplayTreeNode tree\r\n */\r\nfunction parseTreeForDisplay(tree: RATreeNode): DisplayTreeNode {\r\n    let indexes = 0;\r\n    function parseTreeForDisplayHelper(node: RATreeNode): DisplayTreeNode {\r\n        let symbol: string = node.getOperationSymbol();\r\n        if (symbol.length > maxNodeTextLength) {\r\n            symbol = symbol.slice(0, maxNodeTextLength - 4) + \"...\" + symbol.charAt(symbol.length - 1);\r\n        }\r\n\r\n        if (node instanceof UnaryNode) {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++,\r\n                children: [\r\n                    parseTreeForDisplayHelper(node.getSubtree())\r\n                ]\r\n            }\r\n        }\r\n        else if (node instanceof BinaryNode) {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++,\r\n                children: [\r\n                    parseTreeForDisplayHelper(node.getLeftSubtree()),\r\n                    parseTreeForDisplayHelper(node.getRightSubtree())\r\n                ]\r\n            }\r\n        }\r\n        else /* (tree instanceof RelationNode) */ {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++\r\n            };\r\n        }\r\n    }\r\n    return parseTreeForDisplayHelper(tree);\r\n}\r\n\r\n/**\r\n * Component representing individual nodes of the displayed tree.\r\n *\r\n * Props:\r\n * - node: HierarchyPointNode<DisplayTreeNode>: node to be displayed wrapped as visx HierarchyPointNode.\r\n * - selected: boolean: boolean whether the given node is currently selected by the user\r\n * - onClick: (index: number) => void: handler of click on the node, it receives the index of the node (with\r\n * respect to depth first search)\r\n */\r\nfunction TreeNodeComponent({ node, selected, onClick, darkTheme }:\r\n                               { node: HierarchyPointNode<DisplayTreeNode>, selected: boolean, onClick: (index: number) => void, darkTheme: boolean }): JSX.Element {\r\n    const {\r\n        tooltipOpen, // true when mouse is over\r\n        showTooltip,\r\n        hideTooltip\r\n    } = useTooltip();\r\n\r\n    const handleMouseOver = () => {\r\n        showTooltip({ tooltipLeft: 0, tooltipTop: 0 });\r\n    };\r\n\r\n    // computes node width with respect to the text length and asserts it wider than taller\r\n    let nodeWidth = Math.max(node.data.title.length, node.data.symbol.length) * fontWidth + nodePaddingX2;\r\n    if (nodeWidth < nodeHeight) {\r\n        nodeWidth = nodeHeight;\r\n    }\r\n\r\n    return (\r\n        // top=y, left=x for vertical layout; top=x, left=y for horizontal layout\r\n        <Group top={node.y} left={node.x}>\r\n            <rect\r\n                height={nodeHeight} width={nodeWidth}\r\n                y={-nodeHeight / 2} x={-nodeWidth / 2} rx={20}\r\n                fill={darkTheme ?\r\n                    (selected ? selectedNodeColorDark : (tooltipOpen ? selectedNodeColorDark : unselectedNodeColorDark)) :\r\n                    (selected ? selectedNodeColorLight : (tooltipOpen ? selectedNodeColorLight : unselectedNodeColorLight))}\r\n                onClick={() => {\r\n                    onClick(node.data.index);\r\n                }}\r\n                cursor=\"pointer\"\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={hideTooltip}\r\n            />\r\n            <text\r\n                y=\"-4px\"\r\n                dy=\".2em\"\r\n                fontSize={fontSize}\r\n                fontFamily={fontFamily}\r\n                textAnchor=\"middle\"\r\n                style={{ pointerEvents: \"none\"}}\r\n                fill={darkTheme ? textColorDark : textColorLight}\r\n            >\r\n                {node.data.symbol === \"\" ?\r\n                    <tspan x=\"0\" dy=\".5em\">{node.data.title}</tspan> :\r\n                    (<>\r\n                        <tspan x=\"0\" dy=\"0\">{node.data.title}</tspan>\r\n                        <tspan x=\"0\" dy=\"1.2em\">{node.data.symbol}</tspan>\r\n                    </>)}\r\n            </text>\r\n        </Group>\r\n    );\r\n}\r\n\r\n/**\r\n * Internal component for displaying the evaluation tree. It uses visx Tree component.\r\n *\r\n * Props:\r\n * - tree: RATreeNode: root of the evaluation tree to be displayed\r\n * - selected: number: index of the current selected node (with respect to depth first search)\r\n * - width: number: width of the parent container\r\n * - onClick: (index: number) => void: handler of click on nodes, it receives the index of the clicked node (with\r\n * respect to depth first search)\r\n */\r\nfunction TreeComponent({raTree, selected, width, onClick, darkTheme}:\r\n                           {raTree: RATreeNode, selected: number, width: number, onClick: (index: number) => void, darkTheme: boolean}): JSX.Element | null {\r\n    const treeDepth: number = getTreeDepth(raTree);\r\n    // height = \"nodes height\" + \"gaps between nodes\" + \"margin up and under\"\r\n    const height = (treeDepth + 1) * nodeHeight + treeDepth * nodeHeight / 2 + nodeHeight;\r\n    const margin = { top: nodeHeight, left: 0 / 2, right: 0 / 2, bottom: nodeHeight };\r\n    const yMax = height - margin.top - margin.bottom;\r\n    const xMax = width - margin.left - margin.right;\r\n\r\n    const tree: DisplayTreeNode = parseTreeForDisplay(raTree);\r\n    const data = hierarchy<DisplayTreeNode>(tree);\r\n\r\n    return width < 10 ? null : (\r\n        <svg id=\"eval-tree-svg\" width={width} height={height}>\r\n            <rect width={width} height={height} rx={14} fill={darkTheme ? backgroundColorDark : backgroundColorLight} />\r\n            <Tree<DisplayTreeNode> root={data} size={[xMax, yMax]}>\r\n                {tree => (\r\n                    <Group top={margin.top} left={margin.left}>\r\n                        {tree.links().map((link, i) => (\r\n                            <LinkVertical<HierarchyPointLink<DisplayTreeNode>, HierarchyPointNode<DisplayTreeNode>>\r\n                                key={`cluster-link-${i}`}\r\n                                data={link}\r\n                                stroke={darkTheme ? textColorDark : textColorLight}\r\n                                strokeWidth=\"1\"\r\n                                strokeOpacity={1}\r\n                                fill=\"none\"\r\n                            />\r\n                        ))}\r\n                        {tree.descendants().map((node) => (\r\n                            <TreeNodeComponent\r\n                                key={`node-${node.data.index}`}\r\n                                node={node}\r\n                                selected={node.data.index === selected}\r\n                                onClick={onClick}\r\n                                darkTheme={darkTheme}\r\n                            />\r\n                        ))}\r\n                    </Group>\r\n                )}\r\n            </Tree>\r\n        </svg>\r\n    );\r\n}","export interface File {\r\n    name: string,\r\n    text: string | null\r\n}\r\n\r\n/**\r\n * FileDialog for loading files to the application.\r\n */\r\nexport class FileDialog {\r\n\r\n    /**\r\n     * Loads asynchronously a textual content from one file selected by the user in the file browser.\r\n     *\r\n     * @param accept comma-separated list of extensions for filter (default are all extensions)\r\n     */\r\n    public static openFile(accept: string = \"*\"): Promise<File> {\r\n        return new Promise<File>(resolve => {\r\n            let element = document.createElement('div');\r\n            element.innerHTML = `<input type=\"file\" accept=${accept}>`;\r\n            let fileInput = element.firstChild;\r\n            // @ts-ignore\r\n            fileInput.addEventListener('change', function() {\r\n                // @ts-ignore\r\n                let file = fileInput.files[0];\r\n                let reader = new FileReader();\r\n                reader.onload = function() {\r\n                    // @ts-ignore\r\n                    resolve({name: file.name, text: reader.result});\r\n                };\r\n                reader.readAsText(file);\r\n            });\r\n            // @ts-ignore\r\n            fileInput.click();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously loads textual content from multiple files selected by the user in the file browser.\r\n     *\r\n     * @param accept comma-separated list of extensions for filter (default are all extensions)\r\n     */\r\n    public static openFiles(accept: string = \"*\"): Promise<File[]> {\r\n        return new Promise<File[]>(resolve => {\r\n            FileDialog.openFilesHelper(resolve, accept);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads textual content from multiple files selected by the user in the file browser.\r\n     * Multiple file input handling inspired by xaedes on https://stackoverflow.com/a/13975217.\r\n     *\r\n     * @param resolve - function called when the loading is done, it should accept an array of file information\r\n     * {name: string, text: string | null}[] where name contains the filename and text contains the content of the file.\r\n     * @param accept comma-separated list of extensions for filter\r\n     */\r\n    private static openFilesHelper(resolve: (files: File[]) => void, accept: string): void {\r\n        let element = document.createElement('div');\r\n        element.innerHTML = `<input type=\"file\" accept=${accept} multiple>`;\r\n        // @ts-ignore\r\n        let fileInput: HTMLInputElement = element.firstChild;\r\n        const fileInfo: {name: string, text: string | null}[] = [];\r\n        fileInput.addEventListener('change', function() {\r\n            // @ts-ignore\r\n            const files: FileList = fileInput.files;\r\n            function readFile(index: number) {\r\n                if (index === files.length) {\r\n                    return resolve(fileInfo);\r\n                }\r\n                const file = files[index];\r\n                const reader = new FileReader();\r\n                reader.onload = function(e) {\r\n                    // @ts-ignore\r\n                    fileInfo.push({name: file.name, text: e.target.result});\r\n                    readFile(index+1);\r\n                    console.log('File ' + (index+1) + '/' + files.length + ' loaded');\r\n                }\r\n                reader.readAsText(file);\r\n            }\r\n            readFile(0);\r\n        });\r\n        fileInput.click();\r\n    }\r\n}\r\n","/**\r\n * Wrapper of JavaScript Map object to provide usage of object {row: number | \"name\", column: number} as a key for\r\n * string values.\r\n */\r\nexport class NNToSMap {\r\n    private map: Map<string, string> = new Map<string, string>();\r\n\r\n    public get(row: number | \"name\", column: number): string | undefined {\r\n        return this.map.get(row + \":\" + column);\r\n    }\r\n\r\n    public set(row: number | \"name\", column: number, value: string): void {\r\n        this.map.set(row + \":\" + column, value);\r\n    }\r\n\r\n    public delete(row: number | \"name\", column: number): boolean {\r\n        return this.map.delete(row + \":\" + column);\r\n    }\r\n\r\n    public clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    public size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    public forEach(f: (value: string, row: number | \"name\", column: number, index?: number) => void): void {\r\n        [...this.map.entries()]\r\n            .map((entry) => {return {value: entry[1], key: NNToSMap.parseKey(entry[0])}})\r\n            .forEach((entry, index) => f(entry.value, entry.key.row, entry.key.column, index));\r\n    }\r\n\r\n    private static parseKey(key: string): {row: number | \"name\", column: number} {\r\n        const split = key.split(':');\r\n        return {row: Number(split[0]), column: Number(split[1])};\r\n    }\r\n}","import {isSupportedColumnType, SupportedColumnType} from \"./columnType\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\nimport {NNToSMap} from \"../types/nnToSMap\";\r\nimport Relation from \"./relation\";\r\nimport Row from \"./row\";\r\nimport {isForbiddenColumnName} from \"../utils/keywords\";\r\n\r\n/**\r\n * Plain object representation of the stored relation.\r\n */\r\nexport interface StoredRelationData {\r\n    name: string;\r\n    columnNames: string[];\r\n    columnTypes: SupportedColumnType[];\r\n    rows: string[][];\r\n    columnCount: number;\r\n    rowCount: number;\r\n}\r\n\r\n/**\r\n * Creates a copy of the given stored relation data.\r\n */\r\nexport function copyStoredRelationData(data: StoredRelationData): StoredRelationData {\r\n    return {\r\n        name: data.name,\r\n        columnNames: [...data.columnNames],\r\n        columnTypes: [...data.columnTypes],\r\n        rows: data.rows.map(row => [...row]),\r\n        columnCount: data.columnCount,\r\n        rowCount: data.rowCount\r\n    }\r\n}\r\n\r\n/**\r\n * String representation of the relation for its storing. The relation may happen to be in inconsistent state.\r\n */\r\nexport class StoredRelation {\r\n\r\n    /**\r\n     * Creates a new stored relation with given name, one column and no rows.\r\n     */\r\n    static new(name: string, nullValuesSupport: boolean): StoredRelation {\r\n        return new StoredRelation(name, [\"Column1\"], [\"number\"], [], nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Creates a new stored relation from given plain relation object. If the object is not a valid StoredRelationData,\r\n     * throws error.\r\n     */\r\n    static fromData(data: any, nullValuesSupport: boolean): StoredRelation {\r\n        if (isStoredRelationData(data)) {\r\n            const d: StoredRelationData = data as StoredRelationData;\r\n            return new StoredRelation(d.name, d.columnNames, d.columnTypes, d.rows, nullValuesSupport);\r\n        }\r\n        throw new Error(\"Given object is not a valid relation.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new stored relation from given full relation representation.\r\n     */\r\n    static fromRelation(name: string, relation: Relation, nullValuesSupport: boolean): StoredRelation {\r\n        const columnNames: string[] = [];\r\n        const columnTypes: SupportedColumnType[] = [];\r\n        relation.getColumns().forEach((type, name) => {\r\n            columnNames.push(name);\r\n            columnTypes.push(type);\r\n        });\r\n        const rows: string[][] = relation.getRows().map(row => {\r\n            return row.getOrderedPrintValues(columnNames);\r\n        });\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Creates a new relation with the same name, columns, rows a null values support.\r\n     */\r\n    static copy(relation: StoredRelation): StoredRelation {\r\n        const name = relation.name;\r\n        const columnNames = [...relation.columnNames];\r\n        const columnTypes = [...relation.columnTypes];\r\n        const rows = relation.rows.map(row => [...row]);\r\n        const nullValuesSupport = relation.nullValuesSupport;\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    private name: string;\r\n    private columnNames: string[];\r\n    private columnTypes: SupportedColumnType[];\r\n    private rows: string[][];\r\n    private columnCount: number;\r\n    private rowCount: number;\r\n    private readonly errors: NNToSMap;\r\n    private nullValuesSupport: boolean;\r\n    private actual: boolean;\r\n    private revertState: StoredRelationData;\r\n\r\n    /**\r\n     * Creates new relation with given name, one default column and no rows.\r\n     */\r\n    constructor(name: string, columnNames: string[], columnTypes: SupportedColumnType[],\r\n                        rows: string[][], nullValuesSupport: boolean) {\r\n        this.name = name;\r\n        this.columnNames = columnNames;\r\n        this.columnTypes = columnTypes;\r\n        this.rows = rows;\r\n        this.columnCount = columnNames.length;\r\n        this.rowCount = rows.length;\r\n        this.errors = new NNToSMap();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n        this.actual = false;\r\n        this.revertState = this.toDataObject();\r\n        this.recomputeErrors();\r\n    }\r\n\r\n    /**\r\n     * Checks all possible errors in the relation.\r\n     */\r\n    private recomputeErrors(): void {\r\n        this.errors.clear();\r\n        this.checkColumnNames();\r\n        for (let c = 0; c < this.columnCount; ++c) {\r\n            [...new Array(this.rowCount).keys()].forEach(r => this.checkRowInput(c, r));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the column name on given index is valid and not duplicit and updates error map.\r\n     */\r\n    private checkColumnNames(): void {\r\n        for (let columnIndex = 0; columnIndex < this.columnCount; ++columnIndex) {\r\n            const columnName: string = this.columnNames[columnIndex].trim();\r\n            if (columnName === \"\") {\r\n                this.errors.set(\"name\", columnIndex, \"Column name cannot be empty\");\r\n                continue;\r\n            }\r\n            const nameCount: number = this.columnNames.reduce((agg, name) => {\r\n                return (name === columnName) ? (agg + 1) : agg;\r\n            }, 0);\r\n            if (nameCount > 1) {\r\n                this.errors.set(\"name\", columnIndex, \"Duplicit column name\");\r\n                continue;\r\n            }\r\n            if (isForbiddenColumnName(columnName)) {\r\n                this.errors.set(\"name\", columnIndex, \"Column name cannot be a keyword\");\r\n                continue;\r\n            }\r\n            if (!StringUtils.isName(columnName)) {\r\n                this.errors.set(\"name\", columnIndex, \"Invalid characters in column name\");\r\n                continue;\r\n            }\r\n            this.errors.delete(\"name\", columnIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the row input on given index is valid and updates error map.\r\n     */\r\n    private checkRowInput(columnIndex: number, rowIndex: number): void {\r\n        this.errors.delete(rowIndex, columnIndex);\r\n        const input: string = this.rows[rowIndex][columnIndex].trim();\r\n        // empty input = null\r\n        if (input === \"\" || input === \"null\") {\r\n            if (this.nullValuesSupport) {\r\n                this.errors.delete(rowIndex, columnIndex);\r\n            }\r\n            else {\r\n                this.errors.set(rowIndex, columnIndex, \"Null values are not supported\");\r\n            }\r\n        }\r\n        else if (this.columnTypes[columnIndex] === \"number\") {\r\n            if (!StringUtils.isNumber(input.replace(/\\s/g, \"\"))) {\r\n                this.errors.set(rowIndex, columnIndex, \"Given string is not a number\");\r\n            }\r\n        }\r\n        else if (this.columnTypes[columnIndex] === \"boolean\") {\r\n            const lower = input.toLowerCase();\r\n            if (lower !== \"true\" && lower !== \"t\" && lower !== \"false\" && lower !== \"f\") {\r\n                this.errors.set(rowIndex, columnIndex, \"Given string is not a boolean\");\r\n            }\r\n        }\r\n        /* STRING COLUMNS CANNOT BE INVALID */\r\n    }\r\n\r\n    /**\r\n     * Checks whether all row inputs on given column index are valid and updates error map.\r\n     */\r\n    private checkColumnTypes(columnIndex: number): void {\r\n        this.rows.forEach((_, i) => this.checkRowInput(columnIndex, i));\r\n    }\r\n\r\n    /**\r\n     * Creates a relation with full schema.\r\n     * WARNING: It expects that there are no errors in the stored relation before call.\r\n     */\r\n    public createRelation(): Relation {\r\n        const relation: Relation = new Relation(this.name);\r\n        for (let c = 0; c < this.columnCount; ++c) {\r\n            relation.addColumn(this.columnNames[c], this.columnTypes[c]);\r\n        }\r\n        this.rows.forEach(rowInput => {\r\n            const row: Row = new Row(relation.getColumns());\r\n            rowInput.forEach((input, c) => {\r\n                input = input.trim();\r\n                if (input === \"\" || input === \"null\") {\r\n                    row.addValue(this.columnNames[c], null);\r\n                }\r\n                else if (this.columnTypes[c] === \"string\") {\r\n                    // changes input representation to expected in inner relations\r\n                    // replaces all used '\\' by two '\\\\' and all used '\"' by '\\\"'\r\n                    input = input.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\r\n                    row.addValue(this.columnNames[c], input);\r\n                }\r\n                else if (this.columnTypes[c] === \"number\") {\r\n                    row.addValue(this.columnNames[c], Number(input.replace(/\\s/g, \"\")));\r\n                }\r\n                else /* this.columnTypes[c] === \"boolean\" */ {\r\n                    const lower = input.toLowerCase();\r\n                    row.addValue(this.columnNames[c], lower === \"t\" || lower === \"true\");\r\n                }\r\n            });\r\n            relation.addRow(row);\r\n        });\r\n        relation.finishSchema();\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Creates plain object representation of the stored relation.\r\n     */\r\n    public toDataObject(): StoredRelationData {\r\n        return {\r\n            name: this.name,\r\n            columnNames: [...this.columnNames],\r\n            columnTypes: [...this.columnTypes],\r\n            rows: this.rows.map(row => [...row]),\r\n            columnCount: this.columnCount,\r\n            rowCount: this.rowCount\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns map \"row/column => error\". Numeric row keys are for relation rows, row key \"name\" is for column name row.\r\n     */\r\n    public getErrors(): NNToSMap {\r\n        return this.errors;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are no errors in the relation.\r\n     */\r\n    public isValid(): boolean {\r\n        return this.errors.size() === 0;\r\n    }\r\n\r\n    /**\r\n     * Sets null values support to check null errors in the relation.\r\n     */\r\n    public setNullValuesSupport(nullValuesSupport: boolean): void {\r\n        if (nullValuesSupport !== this.nullValuesSupport) {\r\n            this.nullValuesSupport = nullValuesSupport;\r\n            this.recomputeErrors();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new column with default name \"Column n\", default type \"number\", and empty inputs \"\" in all rows.\r\n     */\r\n    public addNewColumn(): void {\r\n        let i = (this.columnNames.length + 1);\r\n        let name = \"Column\" + i;\r\n        while (this.columnNames.indexOf(name) > -1) {\r\n            name = \"Column\" + ++i;\r\n        }\r\n        this.columnNames.push(name);\r\n        this.columnTypes.push(\"number\");\r\n        if (this.nullValuesSupport) {\r\n            this.rows.forEach(r => r.push(\"\"));\r\n        }\r\n        else {\r\n            this.rows.forEach(r => r.push(\"0\"));\r\n        }\r\n        ++this.columnCount;\r\n        this.checkColumnNames();\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row with empty inputs \"\" in all columns.\r\n     */\r\n    public addNewRow(): void {\r\n        if (this.nullValuesSupport) {\r\n            this.rows.push([...new Array(this.columnCount).keys()].map(_ => \"\"));\r\n        }\r\n        else {\r\n            this.rows.push([...new Array(this.columnCount).keys()].map(i => {\r\n                if (this.columnTypes[i] === \"number\") {\r\n                    return \"0\";\r\n                }\r\n                else if (this.columnTypes[i] === \"boolean\") {\r\n                    return \"false\";\r\n                }\r\n                return '\"\"';\r\n            }));\r\n        }\r\n        ++this.rowCount;\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Deletes a column with the given index. If the last column was deleted, removes all rows and creates\r\n     * new default column.\r\n     *\r\n     * @param columnIndex\r\n     */\r\n    public deleteColumn(columnIndex: number): void {\r\n        this.columnNames.splice(columnIndex, 1);\r\n        this.columnTypes.splice(columnIndex, 1);\r\n        this.rows.forEach(row => row.splice(columnIndex, 1));\r\n        --this.columnCount;\r\n        // if last column was deleted, removes all rows and creates new default column\r\n        if (this.columnCount === 0) {\r\n            this.rows = [];\r\n            this.addNewColumn();\r\n        }\r\n        this.errors.forEach((value, row, column) => {\r\n            // removes errors for given row\r\n            if (column === columnIndex) {\r\n                this.errors.delete(row, column);\r\n            }\r\n            // updates row index for errors in rows under deleted one\r\n            else if (column > columnIndex) {\r\n                this.errors.delete(row, column);\r\n                this.errors.set(row, column, value);\r\n            }\r\n        });\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Deletes a row with given index.\r\n     *\r\n     * @param rowIndex\r\n     */\r\n    public deleteRow(rowIndex: number): void {\r\n        this.rows.splice(rowIndex, 1);\r\n        --this.rowCount;\r\n        this.errors.forEach((value, row, column) => {\r\n            // removes errors for given row\r\n            if (row === rowIndex) {\r\n                this.errors.delete(row, column);\r\n            }\r\n            // updates row index for errors in rows under deleted one\r\n            else if (typeof row === \"number\" && row > rowIndex) {\r\n                this.errors.delete(row, column);\r\n                this.errors.set(row - 1, column, value);\r\n            }\r\n        });\r\n        this.actual = false;\r\n    }\r\n\r\n    public getRowCount(): number {\r\n        return this.rowCount;\r\n    }\r\n\r\n    public getColumnCount(): number {\r\n        return this.columnCount;\r\n    }\r\n\r\n    public setName(name: string): void {\r\n        this.name = name;\r\n        this.actual = false;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public getColumnNames(): string[] {\r\n        return this.columnNames;\r\n    }\r\n\r\n    public setColumnName(columnName: string, columnIndex: number): void {\r\n        this.columnNames[columnIndex] = columnName;\r\n        this.checkColumnNames();\r\n        this.actual = false;\r\n    }\r\n\r\n    public getColumnTypes(): SupportedColumnType[] {\r\n        return this.columnTypes;\r\n    }\r\n\r\n    public setColumnType(columnType: SupportedColumnType, columnIndex: number): void {\r\n        this.columnTypes[columnIndex] = columnType;\r\n        this.checkColumnTypes(columnIndex);\r\n        this.actual = false;\r\n    }\r\n\r\n    public getRows(): string[][] {\r\n        return this.rows;\r\n    }\r\n\r\n    public setRowInput(input: string, rowIndex: number, columnIndex: number): void {\r\n        this.rows[rowIndex][columnIndex] = input;\r\n        this.checkRowInput(columnIndex, rowIndex);\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if no changes were made after last setActual(true) call.\r\n     * The StoredRelation is created with isActual() = false.\r\n     */\r\n    public isActual(): boolean {\r\n        return this.actual;\r\n    }\r\n\r\n    /**\r\n     * Sets current StoredRelation state as actual. Any change sets the state as not actual automatically.\r\n     * If it is set to actual, the current state is saved as the revert state.\r\n     */\r\n    public setActual(actual: boolean): void {\r\n        this.actual = actual;\r\n        if (actual) {\r\n            this.revertState = this.toDataObject();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the relation has saved previous state.\r\n     */\r\n    public canRevert(): boolean {\r\n        return this.revertState !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns name of the saved relation state to revert or empty string.\r\n     */\r\n    public getRevertName(): string {\r\n        if (this.revertState !== undefined) {\r\n            return this.revertState.name;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reverts the current relation to its last loaded state (if any exists, call canRevert() to check).\r\n     * The relation is set as not actual, null values support and saved revert state is not reverted.\r\n     */\r\n    public revert(): void {\r\n        if (this.revertState !== undefined) {\r\n            this.name = this.revertState.name;\r\n            this.columnNames = [...this.revertState.columnNames];\r\n            this.columnTypes = [...this.revertState.columnTypes];\r\n            this.rows = this.revertState.rows.map(row => [...row]);\r\n            this.columnCount = this.revertState.columnCount;\r\n            this.rowCount = this.revertState.rowCount;\r\n            this.actual = false;\r\n            this.recomputeErrors();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Returns true if the relation relation object has at least one column, and all rows has the same length.\r\n */\r\nexport function isStoredRelationData(obj: any): boolean {\r\n    if (typeof obj !== \"object\") {\r\n        return false;\r\n    }\r\n    if (!(\"name\" in obj) || typeof obj.name !== \"string\") {\r\n        return false;\r\n    }\r\n    if (!(\"columnCount\" in obj) || typeof obj.columnCount !== \"number\" || obj.columnCount < 1) {\r\n        return false;\r\n    }\r\n    if (!(\"rowCount\" in obj) || typeof obj.rowCount !== \"number\") {\r\n        return false;\r\n    }\r\n    if (!(\"columnNames\" in obj) || !Array.isArray(obj.columnNames) || obj.columnNames.length !== obj.columnCount ||\r\n        obj.columnNames.some((o: any) => typeof o !== \"string\")) {\r\n        return false;\r\n    }\r\n    if (!(\"columnTypes\" in obj) || !Array.isArray(obj.columnTypes) || obj.columnTypes.length !== obj.columnCount ||\r\n        obj.columnTypes.some((o: any) => !isSupportedColumnType(o))) {\r\n        return false;\r\n    }\r\n    return (\"rows\" in obj && Array.isArray(obj.rows) && obj.rows.every((o: any) => {\r\n        return Array.isArray(o) && o.length === obj.columnCount && o.every((d: any) => typeof d === \"string\");\r\n    }));\r\n}","/**\r\n * Specifies supported column types in the application. When changed, update the keywords.ts file.\r\n */\r\n\r\n/**\r\n * Supported string names of types of columns for a relational schema.\r\n */\r\nexport type SupportedColumnType = \"string\" | \"number\" | \"boolean\";\r\n\r\n/**\r\n * Possible types of the content of columns (null values included).\r\n */\r\nexport type ColumnContent = string | number | boolean | null;\r\n\r\n/**\r\n * Returns true if the given obj is string with value SupportedColumnType value.\r\n */\r\nexport function isSupportedColumnType(obj: any): boolean {\r\n    if (typeof obj !== \"string\") {\r\n        return false;\r\n    }\r\n    return obj === \"string\" || obj === \"number\" || obj === \"boolean\";\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport {\r\n    CsvValueSeparator,\r\n    findValueSeparator\r\n} from \"../types/csvSupport\";\r\nimport {StoredRelation} from \"./storedRelation\";\r\nimport {SupportedColumnType} from \"./columnType\";\r\nimport {saveAs} from \"file-saver\";\r\nimport JSZip from \"jszip\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\n\r\n/**\r\n * Class for loading and saving relation definitions.\r\n */\r\nexport class RelationStoreManager {\r\n\r\n    /**\r\n     * Loads textual relation representations from multiple csv files selected by the user. If the csv does not have\r\n     * valid stricture, it is skipped. Loaded csv are parsed to StoredRelations and returned in a promise.\r\n     *\r\n     * @param nullValuesSupport null values support to set in created StoredRelations\r\n     */\r\n    public static load(nullValuesSupport: boolean): Promise<{relations: StoredRelation[], skipped: number}> {\r\n        return new Promise<{relations: StoredRelation[], skipped: number}>(resolve => {\r\n            FileDialog.openFiles(\".csv\").then(files => {\r\n                let relations: StoredRelation[] = [];\r\n                let skipped: number = 0;\r\n                files.forEach(file => {\r\n                    if (file.name.match(/\\.csv$/)) {\r\n                        try {\r\n                            relations.push(this.csvToRelation(RelationStoreManager.createValidName(file.name.slice(0, -4)),\r\n                                file.text, nullValuesSupport));\r\n                        }\r\n                        catch (err) {\r\n                            console.log('File ' + file.name + ' skipped for bad format of csv');\r\n                            skipped += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log('Unsupported filetype: ' + file.name);\r\n                        skipped += 1;\r\n                    }\r\n                });\r\n                resolve({relations: relations, skipped: skipped});\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves given relations into csv files (in one csv file each relation). Uses given value separator.\r\n     *\r\n     * @param relations map of the relations to be saved\r\n     * @param filename name of the downloaded file (without .zip/.csv extension)\r\n     * @param valueSeparator the separator of values\r\n     */\r\n    public static save(relations: StoredRelation[], filename: string, valueSeparator: CsvValueSeparator): void {\r\n        if (relations.length === 0) {\r\n            return;\r\n        }\r\n        if (relations.length === 1) {\r\n            const blob = new Blob([this.relationToCsv(relations[0], valueSeparator)], {type: \"text/plain;charset=utf-8\"});\r\n            saveAs(blob, relations[0].getName() + '.csv');\r\n            return;\r\n        }\r\n        const zip: JSZip = JSZip();\r\n        relations.forEach(relation => {\r\n            zip.file(relation.getName() + '.csv', this.relationToCsv(relation, valueSeparator));\r\n        });\r\n        zip.generateAsync({type: \"blob\"}).then(content => {\r\n            saveAs(content, filename + \".zip\");\r\n        }).catch(err => {\r\n            throw err;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses a StoredRelation from given csv text. If the text is invalid, throws error.\r\n     *\r\n     * @param name name of the relation\r\n     * @param text csv content to parse a relation from\r\n     * @param nullValuesSupport null values support to set in created StoredRelation\r\n     */\r\n    private static csvToRelation(name: string, text: string | null, nullValuesSupport: boolean): StoredRelation {\r\n        if (text === null || text === \"\") {\r\n            console.log(\"null or empty string read from file \" + name);\r\n            throw Error();\r\n        }\r\n\r\n        text = text.trim().replace(/\\r\\n/g, '\\n')\r\n            .replace(/\\r/g, '\\n').replace(/\\t/g, \"    \");\r\n\r\n        const lines: string[] = text.split('\\n');\r\n\r\n        if (lines.length < 2) {\r\n            console.log(\"file \" + name + \" has only one line\");\r\n            throw Error();  // at least two lines are expected (names and types)\r\n        }\r\n\r\n        lines[0] = lines[0].replace(/\\s/g, '');\r\n        lines[1] = lines[1].replace(/\\s/g, '');\r\n\r\n        let separator = findValueSeparator(lines[1]);\r\n        // if no separator is found, only one column is expected - sets separator to not defined value to unify the\r\n        // following process\r\n        if (separator === undefined) {\r\n            separator = ';';\r\n        }\r\n\r\n        const columnNames: string[] = lines[0].split(separator);\r\n        const columnTypes: SupportedColumnType[] = lines[1].split(separator).map(str => {\r\n            const lower = str.toLowerCase();\r\n            if (lower === \"string\" || lower === \"str\" || lower === \"s\") {\r\n                return \"string\";\r\n            }\r\n            else if (lower === \"number\" || lower === \"num\" || lower === \"n\") {\r\n                return \"number\";\r\n            }\r\n            return \"boolean\";\r\n        });\r\n        const rows: string[][] = lines.slice(2).map(line => {\r\n            const row: string[] = []\r\n            line = line.trim();\r\n            while (true) {\r\n                // @ts-ignore - separator cannot be undefined now\r\n                const split = RelationStoreManager.nextRowInput(line, separator);\r\n                row.push(split.input);\r\n                if (split.rest === undefined) {\r\n                    break;\r\n                }\r\n                line = split.rest;\r\n            }\r\n            return row;\r\n        });\r\n\r\n        // all rows must have equal column count\r\n        const columnCount = columnNames.length;\r\n        if (columnTypes.length !== columnCount || rows.some(row => row.length !== columnCount)) {\r\n            console.log(\"rows in file \" + name + \" do not have the same number of columns\");\r\n            throw new Error();\r\n        }\r\n\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Removes invalid characters for name. If the filtered name is empty, returns string \"relation\".\r\n     */\r\n    private static createValidName(name: string): string {\r\n        name = name.split('').filter(char => StringUtils.isNameChar(char)).join('');\r\n        if (name === \"\") {\r\n            return \"relation\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Returns next part of the line before separator. Separators in string literals are ignored.\r\n     */\r\n    private static nextRowInput(line: string, separator: string): {input: string, rest: string | undefined} {\r\n        let inString = false;\r\n        let backslashes = 0;\r\n        let i = 0;\r\n        while (i < line.length) {\r\n            const char = line.charAt(i);\r\n            // separator found not in the string literal\r\n            if (!inString && char === separator) {\r\n                return {input: line.slice(0, i), rest: line.slice(i + 1)};\r\n            }\r\n            // next backslash found in a row\r\n            if (char === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            // resets backslashes in a row\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            // not escaped quotes found\r\n            if (char === '\"' && (backslashes % 2) === 0) {\r\n                inString = !inString;\r\n            }\r\n            ++i;\r\n        }\r\n        return {input: line, rest: undefined}\r\n    }\r\n\r\n    /**\r\n     * Creates a csv representation for the given relation.\r\n     */\r\n    private static relationToCsv(relation: StoredRelation, valueSeparator: CsvValueSeparator): string {\r\n        const names: string = relation.getColumnNames().join(valueSeparator);\r\n        const types: string = relation.getColumnTypes().join(valueSeparator);\r\n        const rows: string[] = relation.getRows().map(row => row.join(valueSeparator));\r\n        return [names, types, ...rows].join('\\n');\r\n    }\r\n}","/**\r\n * Two possible CSV value separators: comma (,) and semicolon (;).\r\n */\r\nexport type CsvValueSeparator = \",\" | \";\";\r\n\r\nexport function findValueSeparator(str: string): string | undefined {\r\n    for (let i = 0; i < str.length; ++i) {\r\n        const char: string = str.charAt(i);\r\n        if (char === \",\") {\r\n            return \",\";\r\n        }\r\n        if (char === \";\") {\r\n            return \";\";\r\n        }\r\n    }\r\n    return undefined;\r\n}","import React from \"react\";\r\n// @ts-ignore - type declaration is not needed for its short usage\r\nimport downloadSVG from \"export-svg-with-styles\";\r\nimport Relation from \"../relation/relation\";\r\nimport {ResultRelationTable} from \"./resultRelationTable\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {evalTreeSVGId, EvaluationTree} from \"./evaluationTree\";\r\nimport {depthSearch} from \"../ratree/raTreeTools\";\r\nimport {CodeErrorCodes, ErrorFactory} from \"../error/errorFactory\";\r\nimport {RelationStoreManager} from \"../relation/relationStoreManager\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport \"./css/resultSection.css\"\r\n\r\ninterface ResultSectionProps {\r\n    // the root of the current evaluation tree to display\r\n    evaluationTreeRoot: RATreeNode,\r\n    // name of the evaluated expression\r\n    expressionName: string,\r\n\r\n    // handler of adding the given relation to defined relations\r\n    onAddResult: (relation: Relation) => void,\r\n\r\n    // handler of unexpected errors\r\n    onUnexpectedError: (e: Error) => void,\r\n\r\n    // current selected value separator in csv files\r\n    csvValueSeparator: CsvValueSeparator\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean,\r\n}\r\n\r\ninterface ResultSectionState {\r\n    selectedIndex: number\r\n}\r\n\r\n/**\r\n * Section to show the evaluation result. It contains a table with a result and text input and buttons to save it.\r\n * The component is hidden if given resultRelation is null.\r\n */\r\nexport class ResultSection extends React.Component<ResultSectionProps, ResultSectionState> {\r\n\r\n    // reference to this section element\r\n    private readonly sectionRef: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: ResultSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedIndex: 0\r\n        }\r\n        this.sectionRef = React.createRef<HTMLDivElement>();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ResultSectionProps>) {\r\n        if (prevProps.evaluationTreeRoot !== this.props.evaluationTreeRoot) {\r\n            this.setState({selectedIndex: 0});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the result relation for the current selected node.\r\n     */\r\n    private getCurrentRelation = (): Relation | null => {\r\n        let currentNode: RATreeNode | null = depthSearch(this.props.evaluationTreeRoot, this.state.selectedIndex);\r\n        if (currentNode === null) {\r\n            currentNode = depthSearch(this.props.evaluationTreeRoot, 0);\r\n            if (currentNode === null) {\r\n                this.props.onUnexpectedError(ErrorFactory.codeError(CodeErrorCodes.resultSection_getCurrentRelation_nodeIndexNotFound));\r\n                return null;\r\n            }\r\n        }\r\n        try {\r\n            return currentNode.getResult();\r\n        }\r\n        catch (err) {\r\n            // errors should be handled in expression section\r\n            this.props.onUnexpectedError(ErrorFactory.codeError(CodeErrorCodes.resultSection_getCurrentRelation_evalError, err.message));\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private handleSelectedNodeChange = (index: number): void => {\r\n        this.setState({selectedIndex: index});\r\n    }\r\n\r\n    /**\r\n     * Saves the displayed evaluation tree as png picture.\r\n     */\r\n    private exportEvalTreeAsPng = (): void => {\r\n        const svg = document.getElementById(evalTreeSVGId);\r\n        if (svg !== null) {\r\n            const rect = svg.getBoundingClientRect();\r\n            const options = {\r\n                width: rect.width * 3,\r\n                height: rect.height * 3,\r\n                svg: svg,\r\n                filename: this.props.expressionName + \" - evaluation tree.png\"\r\n            }\r\n            downloadSVG(options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the current selected relation to a file.\r\n     */\r\n    private exportRelation = (): void => {\r\n        if (this.getCurrentRelation() === null) {\r\n            this.props.onUnexpectedError(ErrorFactory.codeError(CodeErrorCodes.resultSection_saveResultRelation_nullRelationToSave));\r\n            return;\r\n        }\r\n        try {\r\n            RelationStoreManager.save(\r\n                [StoredRelation.fromRelation(\"rachel_result\", this.getCurrentRelation() as Relation, true)],\r\n                \"rachel_result\", this.props.csvValueSeparator);\r\n        }\r\n        catch (err) {\r\n            console.warn(\"Saving error: \" + err, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the current selected relation with the given name to the parent.\r\n     */\r\n    private addRelation = (): void => {\r\n        if (this.getCurrentRelation() === null) {\r\n            this.props.onUnexpectedError(ErrorFactory.codeError(CodeErrorCodes.resultSection_handleAddRelation_nullRelationToAdd));\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        this.props.onAddResult(this.getCurrentRelation());\r\n    }\r\n\r\n    render() {\r\n        // does not show null result\r\n        if (this.getCurrentRelation() === null) {\r\n            return null;\r\n        }\r\n        const relationType: string = this.state.selectedIndex === 0 ? \"Result\" : \"Intermediate\"\r\n        const selectedNode: RATreeNode | null = depthSearch(this.props.evaluationTreeRoot, this.state.selectedIndex);\r\n        const tableTitle: string | null = selectedNode === null ? null : selectedNode.printInLine();\r\n\r\n        return (\r\n            <section\r\n                ref={this.sectionRef}\r\n                className=\"page-section result-section\">\r\n                <header>\r\n                    <h2>Result</h2>\r\n                    <TooltipButton\r\n                        text=\"Export\"\r\n                        onClick={this.exportEvalTreeAsPng}\r\n                        className={\"\"}\r\n                        tooltip={\"Saves the evaluation tree as png\"}\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                </header>\r\n\r\n                <p className=\"upper-p\">\r\n                    <strong>{'Evaluation tree of ' + this.props.evaluationTreeRoot.printInLine() + ':'}</strong>\r\n                </p>\r\n\r\n                <EvaluationTree\r\n                    tree={this.props.evaluationTreeRoot}\r\n                    selected={this.state.selectedIndex}\r\n                    onClick={this.handleSelectedNodeChange}\r\n                    darkTheme={this.props.darkTheme}\r\n                />\r\n\r\n                <p className=\"lower-p\"><strong>{relationType} relation {tableTitle}:</strong></p>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    <TooltipButton\r\n                        text=\"Add\"\r\n                        onClick={this.addRelation}\r\n                        className={\"\"}\r\n                        tooltip={\"Adds given relation to stored ones\"}\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                    <TooltipButton\r\n                        text=\"Export\"\r\n                        onClick={this.exportRelation}\r\n                        className={\"\"}\r\n                        tooltip={\"Saves given relation to a file\"}\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                </menu>\r\n\r\n                <ResultRelationTable\r\n                    relation={this.getCurrentRelation() as Relation}\r\n                />\r\n            </section>\r\n        );\r\n    }\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport {saveAs} from \"file-saver\";\r\nimport {Expression} from \"./expression\";\r\n\r\n/**\r\n * Promised relation in ExpressionStoreManager.load() function. Contains:\r\n * - expressions: Expression[] - successfully parsed expressions\r\n * - skippedExpressions: number - number of skipped expressions (from successfully loaded files)\r\n * - loadedFiles: number - number of successfully loaded files\r\n * - skippedFiles: number - number of skipped files (not .txt, null loaded...)\r\n */\r\nexport interface ExpressionLoadData {\r\n    expressions: Expression[],\r\n    skippedExpressions: number,\r\n    loadedFiles: number,\r\n    skippedFiles: number\r\n}\r\n\r\n/**\r\n * Class for loading and saving expressions.\r\n */\r\nexport class ExpressionStoreManager {\r\n\r\n    /**\r\n     * Loads expressions from multiple textual files selected by the user. Each file can contain multiple expressions,\r\n     * split by '\\n###\\n'. When different line separator is used (\\r, \\r\\n), it is replaced by \\n before return.\r\n     * All tabulators are replaces by 4 spaces.\r\n     */\r\n    public static load(): Promise<ExpressionLoadData> {\r\n        return new Promise<ExpressionLoadData>(resolve => {\r\n            FileDialog.openFiles(\".txt\").then(files =>{\r\n                let expressions: Expression[] = [];\r\n                let skippedExpressions: number = 0;\r\n                let loadedFiles: number = 0;\r\n                let skippedFiles: number = 0;\r\n                files.forEach(file => {\r\n                    if (file.text === null) {\r\n                        console.log('Null read from file ' + file.name);\r\n                        skippedFiles += 1;\r\n                    }\r\n                    else if (file.name.match(/\\.txt$/)) {\r\n                        // replaces line separators to expected '\\n' and tabulators to four spaces\r\n                        file.text = file.text.replace(/\\r\\n/g, '\\n')\r\n                            .replace(/\\r/g, '\\n').replace(/\\t/g, \"    \");\r\n                        // prepends newline for first expected splitting of the first expression\r\n                        ('\\n'.concat(file.text)).split('\\n### ').forEach(part => {\r\n                            try {\r\n                                if (part.trim().length !== 0) {\r\n                                    expressions.push(this.splitExpressionNameAndText(part));\r\n                                }\r\n                            }\r\n                            catch (err) {\r\n                                skippedExpressions += 1;\r\n                            }\r\n                        });\r\n                        loadedFiles += 1;\r\n                    }\r\n                    else {\r\n                        console.log('Unsupported filetype: ' + file.name);\r\n                        skippedFiles += 1;\r\n                    }\r\n                });\r\n                resolve({expressions, skippedExpressions, loadedFiles, skippedFiles});\r\n            });\r\n        });\r\n    }\r\n\r\n    private static splitExpressionNameAndText(expr: string): Expression {\r\n        const firstNewLineIndex: number = expr.indexOf('\\n');\r\n        if (firstNewLineIndex === -1) {\r\n            console.log(\"Expression does not contain first name line.\");\r\n            throw Error();\r\n        }\r\n        const firstRow: string = expr.slice(0, firstNewLineIndex).trim();\r\n        if (!firstRow.endsWith(' ###')) {\r\n            console.log(\"Expression does not contain name between hashes.\");\r\n            throw Error();\r\n        }\r\n        const name: string = firstRow.slice(0, -4);\r\n        const text: string = expr.slice(firstNewLineIndex).trim();\r\n        return {name: name, text: text};\r\n    }\r\n\r\n    /**\r\n     * Saves given expressions to a textual file. Each expression starts with \"### Expression name ###\\n\" line.\r\n     *\r\n     * @param expressions array of expressions to be saved\r\n     * @param filename name of the downloaded file (without extension)\r\n     */\r\n    public static save(expressions: Expression[], filename: string): void {\r\n        const textContent: string = expressions.map(e => {\r\n            return \"### \" + e.name + \" ###\\n\\n\" + e.text;\r\n        }).join('\\n\\n');\r\n        const blob = new Blob([textContent], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, filename + '.txt');\r\n    }\r\n}","import {Project} from \"./project\";\r\n\r\nexport interface ProjectSample {\r\n    name: string,\r\n    project: Project\r\n}\r\n\r\nconst samples: ProjectSample[] = [\r\n    {\r\n        name: \"Cars and Owners\",\r\n        project: {\r\n            relations: [\r\n                {\r\n                    name: \"Car\",\r\n                    columnNames: [\"Id\", \"Owner\", \"Color\", \"Electric\", \"Weight\"],\r\n                    columnTypes: [\"number\", \"number\", \"string\", \"boolean\", \"number\"],\r\n                    rows: [\r\n                        ['1', '1', 'Blue', 'True', '1000'],\r\n                        ['2', '1', 'Green', 'false', '1 200'],\r\n                        ['3', '2', 'Blue', 'F', '850.42'],\r\n                        ['4', '3', 'Black', 't', '1 111.111 111']\r\n                    ],\r\n                    columnCount: 5,\r\n                    rowCount: 4\r\n                },\r\n                {\r\n                    name: \"Owner\",\r\n                    columnNames: [\"Id\", \"Name\"],\r\n                    columnTypes: [\"number\", \"string\"],\r\n                    rows: [\r\n                        ['1', 'George Smith'],\r\n                        ['2', 'Adam \"Driver /\\\\\" Jackson'],\r\n                        ['3', 'Michael Trueman'],\r\n                        ['Fix errors', 'before loading'],\r\n                        ['Or delete', 'invalid rows']\r\n                    ],\r\n                    columnCount: 2,\r\n                    rowCount: 3\r\n                }\r\n            ],\r\n            expressions: [\r\n                {\r\n                    name: \"Relation only\",\r\n                    text:\r\n                        \"// You can use comments until the line end after '//'\\n\" +\r\n                        \"// You must load relations before using them in expressions\\n\" +\r\n                        \"\\n\" +\r\n                        \"Car\\n\" +\r\n                        \"\\n\" +\r\n                        \"// After evaluation, you will see the evaluation tree\\n\" +\r\n                        \"// and the result relation at the bottom of the page\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Unary operator\",\r\n                    text:\r\n                        \"// Unary operator comes after the source relation\\n\" +\r\n                        \"// If the relation is still not defined, go check its definition\\n\" +\r\n                        \"// This expression returns all owners with id 1\\n\" +\r\n                        \"\\n\" +\r\n                        \"Owner(Id = 1)\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Binary operator\",\r\n                    text:\r\n                        \"// Binary operator comes between source relations\\n\" +\r\n                        \"// This expression returns natural join of cars and owners\\n\" +\r\n                        \"\\n\" +\r\n                        \"Car*Owner\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Escapes\",\r\n                    text:\r\n                        \"// Strings in expressions are enclosed in quotes\\n\" +\r\n                        \"// To use quotes inside a string, you must escape them by a backslash '\\\\\\\"'\\n\" +\r\n                        \"// To use backslash inside a string, you must escape it with second one '\\\\\\\\'\\n\" +\r\n                        \"\\n\" +\r\n                        'Owner(Name == \"Adam \\\\\"Driver /\\\\\\\\\\\\\" Jackson\")\\n' +\r\n                        '\\n' +\r\n                        '// This does not work: Owner(Name == \"Adam \"Driver /\\\\\" Jackson\")\\n' +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Example\",\r\n                    text:\r\n                        \"// Errors are highlighted by red underline - hover mouse over it to see details\\n\" +\r\n                        \"// While typing, Rachel shows you available relations or columns\\n\" +\r\n                        \"// (if relations are loaded in the application)\\n\" +\r\n                        \"// Try to write a query for: all cars' ids and their owners' names\\n\" +\r\n                        \"\\n\" +\r\n                        \"TODO...\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Example result\",\r\n                    text:\r\n                        \"// One possible expression is like this...\\n\" +\r\n                        \"\\n\" +\r\n                        \"(\\n\" +\r\n                        \"  Car\\n\" +\r\n                        \"  *\\n\" +\r\n                        \"  Owner< Id -> Owner >\\n\" +\r\n                        \")[Id, Name]\\n\" +\r\n                        \"\\n\" +\r\n                        \"// For more detailed manual click 'About' button in the page header\\n\" +\r\n                        \"\"\r\n                }\r\n            ],\r\n            nullValuesSupport: true\r\n        }\r\n    }\r\n];\r\n\r\n/**\r\n * Returns prepared project samples.\r\n */\r\nexport function getSamples(): ProjectSample[] {\r\n    return samples;\r\n}","import React from \"react\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {SupportedLanguage} from \"../types/supportedLanguage\";\r\nimport \"./css/managementSection.css\"\r\nimport {getSamples} from \"../project/samples\";\r\nimport {Project} from \"../project/project\";\r\n\r\ninterface ManagementSectionProps {\r\n    // handler of batch processing\r\n    onBatch: () => void,\r\n\r\n    // handler of project loading\r\n    onLoadProject: () => void,\r\n    // handler of project saving\r\n    onSaveProject: () => void,\r\n\r\n    // handler of loading the selected sample project\r\n    onLoadSample: (sample: Project) => void,\r\n\r\n    // current selected value separator in csv files\r\n    csvValueSeparator: CsvValueSeparator,\r\n    // current selected language of the application\r\n    language: SupportedLanguage,\r\n    // current selected null values support\r\n    nullValuesSupport: boolean,\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean,\r\n\r\n    // handler of change of the current selected value separator in csv files\r\n    onCsvValueSeparatorChange: (csvValueSeparator: CsvValueSeparator) => void,\r\n    // handler of change of the current selected language of the application\r\n    onLanguageChange: (language: SupportedLanguage) => void,\r\n    // handler of change of the current selected null values support\r\n    onNullValuesSupportChange: (nullValuesSupport: boolean) => void,\r\n    // handler of change of the current selected theme\r\n    onDarkModeChange: (darkTheme: boolean) => void\r\n}\r\n\r\ninterface ManagementSectionState {\r\n    sectionClicked: boolean\r\n}\r\n\r\n/**\r\n * Section to manage batch processing, importing/exporting the project, and settings.\r\n */\r\nexport class ManagementSection extends React.Component<ManagementSectionProps, ManagementSectionState> {\r\n\r\n    constructor(props: ManagementSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const createBatchButton = () => {\r\n            return (<button onClick={this.props.onBatch}>Batch</button>);\r\n        }\r\n        const createLoadProjectButton = () => {\r\n            return (<button onClick={this.props.onLoadProject} >Load</button>);\r\n        }\r\n        const createSaveProjectButton = () => {\r\n            return (<button onClick={this.props.onSaveProject} >Save</button>);\r\n        }\r\n        const createSettingsButton = () => {\r\n            const settingsMenu = (\r\n                <ul className=\"list-menu\">\r\n                    <li>\r\n                        <span>Null values:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"null_values_support\"\r\n                            value=\"allowed\"\r\n                            id=\"null_values_support_allowed\"\r\n                            checked={this.props.nullValuesSupport}\r\n                            onChange={() => this.props.onNullValuesSupportChange(true)} />\r\n                        <label htmlFor=\"null_values_support_allowed\">allowed</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"null_values_support\"\r\n                            value=\"forbidden\"\r\n                            id=\"null_values_support_forbid\"\r\n                            checked={!this.props.nullValuesSupport}\r\n                            onChange={() => this.props.onNullValuesSupportChange(false)} />\r\n                        <label htmlFor=\"null_values_support_forbid\">forbidden</label>\r\n                    </li>\r\n                    <li>\r\n                        <span>CSV separator:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"value_separator\"\r\n                            value=\"semicolon\"\r\n                            id=\"value_separator_semi\"\r\n                            checked={this.props.csvValueSeparator === \";\"}\r\n                            onChange={() => this.props.onCsvValueSeparatorChange(\";\")}/>\r\n                        <label htmlFor=\"value_separator_semi\">semicolon</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"value_separator\"\r\n                            value=\"comma\"\r\n                            id=\"value_separator_comma\"\r\n                            checked={this.props.csvValueSeparator === \",\"}\r\n                            onChange={() => this.props.onCsvValueSeparatorChange(\",\")}/>\r\n                        <label htmlFor=\"value_separator_comma\">comma</label>\r\n                    </li>\r\n                    <li>\r\n                        <span>Theme:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"dark_mode\"\r\n                            value=\"on\"\r\n                            id=\"dark_mode_on\"\r\n                            checked={!this.props.darkTheme}\r\n                            onChange={() => this.props.onDarkModeChange(false)} />\r\n                        <label htmlFor=\"dark_mode_on\">light</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"dark_mode\"\r\n                            value=\"off\"\r\n                            id=\"dark_mode_off\"\r\n                            checked={this.props.darkTheme}\r\n                            onChange={() => this.props.onDarkModeChange(true)} />\r\n                        <label htmlFor=\"dark_mode_off\">dark</label>\r\n                    </li>\r\n                </ul>\r\n            );\r\n            return (<div className={\"button-like\"}>Settings{settingsMenu}</div>);\r\n        }\r\n        const createSamplesButton = () => {\r\n            const settingsMenu = (\r\n            <ul className=\"list-menu\">\r\n                {\"Prepared sample projects\"}\r\n                {getSamples().map((sample, i) => {\r\n                    return (\r\n                        <li key={i}>\r\n                            {\"- \"}\r\n                            <button onClick={() => this.props.onLoadSample(sample.project)}\r\n                            >{sample.name}</button>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            );\r\n            return (<div className={\"button-like\"} >Samples{settingsMenu}</div>);\r\n        }\r\n        const createAboutButton = () => {\r\n            return (\r\n                <a  href=\"https://github.com/kotliluk/rachel\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                    className={\"button-like\"}\r\n                >About</a>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <header className=\"management-section\">\r\n                <h1>RACHEL</h1>\r\n                {createBatchButton()}\r\n                {createLoadProjectButton()}\r\n                {createSaveProjectButton()}\r\n                {createSamplesButton()}\r\n                {createSettingsButton()}\r\n                {createAboutButton()}\r\n            </header>\r\n        );\r\n    }\r\n}","import {copyExpression, Expression, isExpression} from \"../expression/expression\";\r\nimport {copyStoredRelationData, isStoredRelationData, StoredRelationData} from \"../relation/storedRelation\";\r\n\r\n/**\r\n * Project interface to store information about project relations and expressions relation.\r\n * Does not store custom settings about saving file types etc.\r\n */\r\nexport interface Project {\r\n    relations: StoredRelationData[],\r\n    expressions: Expression[],\r\n    nullValuesSupport: boolean\r\n}\r\n\r\n/**\r\n * Checks whether the given value is Project (i.e., has all required fields of required types).\r\n *\r\n * @param obj value to be checked\r\n * @return \"OK\" string if the given obj is Project or string description of found error in the structure\r\n */\r\nexport function isProjectObject(obj: any): string {\r\n    if (typeof obj !== \"object\") {\r\n        return 'The file cannot be parsed to an object.';\r\n    }\r\n    if (!(\"relations\" in obj) || !Array.isArray(obj.relations) || obj.relations.length === 0 ||\r\n        obj.relations.some((o: any) => !isStoredRelationData(o))) {\r\n        return 'The file must contain the field \"relations: StoredRelationData[]\" of length at least one';\r\n    }\r\n    if (!(\"expressions\" in obj) || !Array.isArray(obj.expressions) || obj.expressions.length === 0 ||\r\n        obj.expressions.some((o: any) => !isExpression(o))) {\r\n        return 'The file must contain the field \"expressions: Expression[]\" of length at least one';\r\n    }\r\n    if (!(\"nullValuesSupport\" in obj) || typeof obj.nullValuesSupport !== \"boolean\") {\r\n        return 'The file must contain the field \"nullValuesSupport: boolean\"';\r\n    }\r\n    return 'OK';\r\n}\r\n\r\n/**\r\n * Creates a copy of the given project.\r\n */\r\nexport function copyProject(proj: Project): Project {\r\n    return {\r\n        relations: proj.relations.map(rel => copyStoredRelationData(rel)),\r\n        expressions: proj.expressions.map(expr => copyExpression(expr)),\r\n        nullValuesSupport: proj.nullValuesSupport\r\n    }\r\n}","/**\r\n * Representation of named RA expression.\r\n */\r\nexport interface Expression {\r\n    name: string,\r\n    text: string\r\n}\r\n\r\n/**\r\n * Checks whether the given obj is an Expression.\r\n *\r\n * @param obj\r\n */\r\nexport function isExpression(obj: any): boolean {\r\n    if (typeof obj !== \"object\") {\r\n        return false;\r\n    }\r\n    return (\"name\" in obj) && (typeof obj.name === \"string\") && (\"text\" in obj) && (typeof obj.text === \"string\");\r\n}\r\n\r\n/**\r\n * Creates a copy of the given expression.\r\n */\r\nexport function copyExpression(exp: Expression): Expression {\r\n    return {name: exp.name, text: exp.text};\r\n}","import {isProjectObject, Project} from \"./project\";\r\nimport {FileDialog} from \"../utils/fileDialog\";\r\nimport {saveAs} from \"file-saver\";\r\n\r\n/**\r\n * Class for loading and saving project relations and expressions relation.\r\n */\r\nexport class ProjectStoreManager {\r\n\r\n    /**\r\n     * Loads asynchronously the project from a .rachel (JSON) file selected by the user.\r\n     * The file must contain the representation of the project object: {\r\n     * relations: StoredRelationData[],\r\n     * expressionTexts: string[],\r\n     * nullValuesSupport: boolean\r\n     * }.\r\n     * Returned string values always use '\\n' as line separator.\r\n     */\r\n    public static load(): Promise<Project> {\r\n        return new Promise<Project>((resolve, reject) => {\r\n            FileDialog.openFile(\".rachel\").then(file => {\r\n                if (file.text === null) {\r\n                    reject(\"Reading of the content of the file \" + file.name + \" failed.\");\r\n                }\r\n                else if (file.name.match(/\\.rachel$/)) {\r\n                    // replaces line separators to expected '\\n'\r\n                    file.text = file.text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n')\r\n                        .replace(/\\t/g, \"    \");\r\n                    let obj = JSON.parse(file.text);\r\n                    const result: string = isProjectObject(obj);\r\n                    if (result === \"OK\") {\r\n                        const project: Project = obj;\r\n                        resolve(project);\r\n                    }\r\n                    else {\r\n                        reject(\"Invalid structure of the JSON file. \" + result)\r\n                    }\r\n                }\r\n                else {\r\n                    reject(\"Please select a JSON file to load a project relation from.\");\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves the given Project into the .rachel (JSON) file.\r\n     *\r\n     * @param project the Project object with all project relation\r\n     * @param filename name of the downloaded file (without extension)\r\n     */\r\n    public static save(project: Project, filename: string): void {\r\n        const blob = new Blob([JSON.stringify(project)], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, filename + '.rachel');\r\n    }\r\n}","import {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {isSupportedLanguage, SupportedLanguage} from \"../types/supportedLanguage\";\r\n\r\nconst defaultCsvValueSeparator: CsvValueSeparator = \";\";\r\nconst defaultLanguage: SupportedLanguage = \"ENG\";\r\nconst defaultDarkMode: string = \"false\";\r\n\r\n/**\r\n * Static class for maintaining the access to local storage of the browser. It handles user settings:\r\n * saving file type, csv value separator, language, light/dark theme of the application.\r\n * If the local storage is not used, it uses the application memory and the default values.\r\n */\r\nexport class LocalStorage {\r\n\r\n    private static isInit: boolean = false;\r\n    private static storageSupported: boolean = typeof(Storage) !== \"undefined\";\r\n\r\n    private static csvValueSeparator: CsvValueSeparator;\r\n    private static language: SupportedLanguage;\r\n    private static darkTheme: string;\r\n\r\n    /**\r\n     * Initializes the LocalStorage. If there are the requested values, loads them to application memory.\r\n     * If the local storage is not supported, uses the default values.\r\n     */\r\n    private static init(): void {\r\n        if (LocalStorage.storageSupported) {\r\n            const storedSeparator = localStorage.getItem(\"csvValueSeparator\");\r\n            if (storedSeparator !== \";\" && storedSeparator !== \",\") {\r\n                console.log(\"csvValueSeparator not found in localStorage and set to default\");\r\n                localStorage.setItem(\"csvValueSeparator\", defaultCsvValueSeparator);\r\n                LocalStorage.csvValueSeparator = defaultCsvValueSeparator;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.csvValueSeparator = localStorage.getItem(\"csvValueSeparator\");\r\n            }\r\n            if (!isSupportedLanguage(localStorage.getItem(\"language\"))) {\r\n                console.log(\"language not found in localStorage and set to default\");\r\n                localStorage.setItem(\"language\", defaultLanguage);\r\n                LocalStorage.language = defaultLanguage;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.language = localStorage.getItem(\"language\");\r\n            }\r\n\r\n            if (localStorage.getItem(\"darkTheme\") !== \"true\" && localStorage.getItem(\"darkTheme\") !== \"false\") {\r\n                console.log(\"darkTheme not found in localStorage and set to default\");\r\n                localStorage.setItem(\"darkTheme\", defaultDarkMode);\r\n                LocalStorage.darkTheme = defaultDarkMode;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.darkTheme = localStorage.getItem(\"darkTheme\");\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"LocalStorage not supported in the browser. Default values used.\");\r\n            LocalStorage.csvValueSeparator = defaultCsvValueSeparator;\r\n            LocalStorage.language = defaultLanguage;\r\n            LocalStorage.darkTheme = defaultDarkMode;\r\n        }\r\n        LocalStorage.isInit = true;\r\n    }\r\n\r\n    public static getCsvValueSeparator(): CsvValueSeparator {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.csvValueSeparator;\r\n    }\r\n\r\n    public static setCsvValueSeparator(csvValueSeparator: CsvValueSeparator): void {\r\n        LocalStorage.csvValueSeparator = csvValueSeparator;\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"csvValueSeparator\", csvValueSeparator);\r\n        }\r\n    }\r\n\r\n    public static getLanguage(): SupportedLanguage {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.language;\r\n    }\r\n\r\n    public static setLanguage(language: SupportedLanguage): void {\r\n        LocalStorage.language = language;\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"language\", language);\r\n        }\r\n    }\r\n\r\n    public static getDarkMode(): boolean {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.darkTheme === \"true\";\r\n    }\r\n\r\n    public static setDarkMode(darkTheme: boolean): void {\r\n        LocalStorage.darkTheme = String(darkTheme);\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"darkTheme\", String(darkTheme));\r\n        }\r\n    }\r\n}","/**\r\n * Textual description of supported value separators.\r\n */\r\nexport type SupportedLanguage = \"ENG\" | \"CZE\";\r\n\r\nexport function isSupportedLanguage(x: any): boolean {\r\n    return x === \"ENG\" || x === \"CZE\";\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport JSZip from \"jszip\";\r\nimport {saveAs} from \"file-saver\";\r\nimport Relation from \"../relation/relation\";\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport UnaryNode from \"../ratree/unaryNode\";\r\nimport ProjectionNode from \"../ratree/projectionNode\";\r\nimport RenameNode from \"../ratree/renameNode\";\r\nimport SelectionNode from \"../ratree/selectionNode\";\r\nimport BinaryNode from \"../ratree/binaryNode\";\r\nimport AntijoinNode from \"../ratree/antijoinNode\";\r\nimport CartesianProductNode from \"../ratree/cartesianProductNode\";\r\nimport DivisionNode from \"../ratree/divisionNode\";\r\nimport OuterJoinNode from \"../ratree/outerJoinNode\";\r\nimport NaturalJoinNode, {NaturalJoinType} from \"../ratree/naturalJoinNode\";\r\nimport SetOperationNode from \"../ratree/setOperationNode\";\r\nimport {formatDate} from \"../utils/dateUtils\";\r\nimport ThetaJoinNode, {ThetaJoinType} from \"../ratree/thetaJoinNode\";\r\nimport {isProjectObject, Project} from \"../project/project\";\r\nimport {ExprParser} from \"../expression/exprParser\";\r\nimport {StoredRelation, StoredRelationData} from \"../relation/storedRelation\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {MessageBox} from \"../components/messageBox\";\r\n\r\n/**\r\n * Class for processing multiple input .txt files with expressions.\r\n */\r\nexport class BatchProcessor {\r\n\r\n    /**\r\n     * Opens file dialog and processes files selected by the user. For each .rachel file creates a textual evaluation\r\n     * report. Files are expected to contain valid project data. Returns promise with string message about process.\r\n     */\r\n    public static process(filename: string): void {\r\n        FileDialog.openFiles(\".rachel\").then(files => {\r\n            console.log(files.length + ' files loaded to BatchProcessor');\r\n            console.time(\"Batch duration\");\r\n\r\n            let reports: {name: string, text: string}[] = [];\r\n            let processed: number = 0;\r\n            let skipped: number = 0;\r\n\r\n            /**\r\n             * Processes a file on the given index and calls the processing of the next file.\r\n             * If all files were processed, calls downloadReports().\r\n             */\r\n            const processNext = (i: number) => {\r\n                if (i >= files.length) {\r\n                    return downloadReports();\r\n                }\r\n                const file = files[i];\r\n                if (file.text === null) {\r\n                    reports.push({\r\n                        name: file.name + '-eval-report.txt',\r\n                        text: \"ERROR: Source file cannot be loaded.\"\r\n                    });\r\n                    skipped += 1;\r\n                    console.warn('Null read from ' + file.name);\r\n                }\r\n                else if (file.name.match(/\\.rachel$/)) {\r\n                    // @ts-ignore - file.text cannot be null now\r\n                    reports.push(BatchProcessor.processFile(file));\r\n                    processed += 1;\r\n                }\r\n                else {\r\n                    reports.push({\r\n                        name: file.name + '-eval-report.txt',\r\n                        text: \"ERROR: Source file is not a .rachel file, but: \" + file.name\r\n                    });\r\n                    skipped += 1;\r\n                    console.warn('Unsupported filetype: ' + file.name);\r\n                }\r\n                MessageBox.message(\"Batch in progress... \" + (processed + skipped) + \"/\" + files.length);\r\n                setTimeout(() => processNext(i + 1), 0);\r\n            }\r\n\r\n            /**\r\n             * Downloads created reports.\r\n             */\r\n            const downloadReports = () => {\r\n                if (reports.length === 0) {\r\n                    MessageBox.message(\"Batch finished: \" + processed + \" files processed, \" + skipped + \" skipped.\");\r\n                }\r\n                const zip: JSZip = JSZip();\r\n                reports.forEach(report => {\r\n                    zip.file(report.name, report.text);\r\n                })\r\n                zip.generateAsync({type: \"blob\"}).then(content => {\r\n                    saveAs(content, filename + \".zip\");\r\n                    console.log(\"Batch finished: \" + processed + \" files processed, \" + skipped + \" skipped.\");\r\n                    MessageBox.message(\"Batch finished: \" + processed + \" files processed, \" + skipped + \" skipped.\");\r\n                }).catch(err => {\r\n                    MessageBox.error(\"Results saving error: \" + err.message);\r\n                });\r\n                console.timeEnd(\"Batch duration\");\r\n            }\r\n\r\n            processNext(0);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Tries to parse Project object from given file.text. If successful, parses relations in the project, evaluates\r\n     * expressions in the project and generates textual report: header (see reportHeader()),\r\n     * formatted relations (see formatRelations()) and formatted expressions (see processExpression()).\r\n     */\r\n    private static processFile = (file: {name: string, text: string}): {name: string, text: string} => {\r\n        const project: Project = JSON.parse(file.text);\r\n        const status = isProjectObject(project);\r\n        if (status !== \"OK\") {\r\n            return {name: file.name.slice(0, -4) + '-eval-report.txt', text: \"Invalid JSON file: \" + status};\r\n        }\r\n        const relations: Map<string, Relation> = BatchProcessor.parseRelations(project.relations, project.nullValuesSupport);\r\n        const exprParser: ExprParser = new ExprParser(relations, project.nullValuesSupport);\r\n\r\n        const exprCount: number = project.expressions.length;\r\n        const reports = project.expressions.map(e => BatchProcessor.processExpression(e, exprParser));\r\n        const ops: OperationsCount = addOperations(...reports.map(r => r.counts));\r\n        const errors: number = reports.reduce((agg, report) => agg + report.error, 0);\r\n\r\n        return {\r\n            name: file.name.slice(0, -5) + '-eval-report.txt',\r\n            text: BatchProcessor.reportHeader(exprCount, errors, ops, project.nullValuesSupport) +\r\n                  BatchProcessor.formatRelations(project.relations) +\r\n                  reports.map(r => r.text).join('')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates full Relation representation for given StoredRelationData array.\r\n     */\r\n    private static parseRelations(storedData: StoredRelationData[], nullValuesSupport: boolean): Map<string, Relation> {\r\n        const map: Map<string, Relation> = new Map();\r\n        storedData.forEach(data => {\r\n            try {\r\n                const storedRelation: StoredRelation = StoredRelation.fromData(data, nullValuesSupport);\r\n                if (storedRelation.isValid()) {\r\n                    map.set(storedRelation.getName(), storedRelation.createRelation());\r\n                }\r\n            }\r\n            catch (ignored) { }\r\n        })\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * Processes given expression in context of given parser. Returns formatted expression and its result (or error),\r\n     * count of used RA operations and 0/1 error indicator.\r\n     */\r\n    private static processExpression = (expr: Expression, parser: ExprParser): {text: string, counts: OperationsCount, error: number} => {\r\n        try {\r\n            const evaluationTree = parser.parse(expr.text);\r\n            const counts: OperationsCount = operationsOfTree(evaluationTree);\r\n            const relation: Relation = evaluationTree.getResult();\r\n            return {\r\n                text: '### ' + expr.name + ' ###\\n\\n' + expr.text + '\\n\\n# Result #\\n\\n' + relation.contentString() + '\\n\\n',\r\n                counts: counts,\r\n                error: 0\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                text: '### ' + expr.name + ' ###\\n\\n' + expr.text + '\\n\\n# Error #\\n\\n' + err.message + '\\n\\n',\r\n                counts: zeroOperations(),\r\n                error: 1\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the header of the report. The header contains the time of the report, count of expressions and errors,\r\n     * count of used operations and null values support info.\r\n     *\r\n     * @param expressions count of expressions\r\n     * @param errors count of errors\r\n     * @param operations count of operations\r\n     * @param nullValuesSupport\r\n     */\r\n    private static reportHeader = (expressions: number, errors: number, operations: OperationsCount, nullValuesSupport: boolean): string => {\r\n        const total: number = totalOperations(operations);\r\n        const binary: number = binaryOperations(operations);\r\n        const unary: number = unaryOperations(operations);\r\n        return 'Rachel project report from ' + formatDate(new Date()) + '\\n\\n' +\r\n            'Expressions: ' + expressions + '    Errors: ' + errors + '\\n\\n' +\r\n            'Used operations (' + total + ' in total: ' + binary + ' binary, ' + unary + ' unary):\\n' +\r\n            '    Antijoin: ' + operations.antijoin + '\\n' +\r\n            '    Cartesian product: ' + operations.cartesian + '\\n' +\r\n            '    Division: ' + operations.division + '\\n' +\r\n            '    Natural join: ' + operations.natural + '\\n' +\r\n            '    Outer Join: ' + operations.outerJoin + '\\n' +\r\n            '    Projection: ' + operations.projection + '\\n' +\r\n            '    Rename: ' + operations.rename + '\\n' +\r\n            '    Selection: ' + operations.selection + '\\n' +\r\n            '    Semijoin: ' + operations.semijoin + '\\n' +\r\n            '    Set Operations: ' + operations.setOperation + '\\n' +\r\n            '    Theta Join: ' + operations.thetaJoin + '\\n' +\r\n            '    Theta Semijoin: ' + operations.thetaSemijoin + '\\n\\n' +\r\n            (nullValuesSupport ? 'Null values ALLOWED.\\n\\n' : 'Null values FORBIDDEN.\\n\\n');\r\n    }\r\n\r\n    /**\r\n     * Returns formatted string for given StoredRelationsData array.\r\n     */\r\n    private static formatRelations = (storedData: StoredRelationData[]): string => {\r\n        return \"### Defined relations ###\\n\\n\" + storedData.map(data => {\r\n            return '# ' + data.name + ' #\\n' +\r\n                data.columnNames.join(', ') + '\\n' +\r\n                data.columnTypes.join(', ') + '\\n' +\r\n                data.rows.map(row => row.join(', ')).join('\\n') + '\\n\\n';\r\n        }).join('');\r\n    }\r\n}\r\n\r\n/**\r\n * Counts of all supported relational algebra operations.\r\n */\r\ninterface OperationsCount {\r\n    antijoin: number,\r\n    cartesian: number,\r\n    division: number,\r\n    natural: number,\r\n    outerJoin: number,\r\n    projection: number,\r\n    rename: number,\r\n    selection: number,\r\n    semijoin: number,\r\n    setOperation: number,\r\n    thetaJoin: number,\r\n    thetaSemijoin: number,\r\n}\r\n\r\n/**\r\n * @return zero count of all operations\r\n */\r\nfunction zeroOperations(): OperationsCount {\r\n    return addOperations();\r\n}\r\n\r\n/**\r\n * @return adds given OperationsCounts together\r\n */\r\nfunction addOperations(...counts: OperationsCount[]): OperationsCount {\r\n    return {\r\n        antijoin: counts.reduce((agg, count) => agg + count.antijoin, 0),\r\n        cartesian: counts.reduce((agg, count) => agg + count.cartesian, 0),\r\n        division: counts.reduce((agg, count) => agg + count.division, 0),\r\n        natural: counts.reduce((agg, count) => agg + count.natural, 0),\r\n        outerJoin: counts.reduce((agg, count) => agg + count.outerJoin, 0),\r\n        projection: counts.reduce((agg, count) => agg + count.projection, 0),\r\n        rename: counts.reduce((agg, count) => agg + count.rename, 0),\r\n        selection: counts.reduce((agg, count) => agg + count.selection, 0),\r\n        semijoin: counts.reduce((agg, count) => agg + count.semijoin, 0),\r\n        setOperation: counts.reduce((agg, count) => agg + count.setOperation, 0),\r\n        thetaJoin: counts.reduce((agg, count) => agg + count.thetaJoin, 0),\r\n        thetaSemijoin: counts.reduce((agg, count) => agg + count.thetaSemijoin, 0),\r\n    }\r\n}\r\n\r\n/**\r\n * @return sum of all operation counts\r\n */\r\nfunction totalOperations(o: OperationsCount): number {\r\n    return binaryOperations(o) + unaryOperations(o);\r\n}\r\n\r\n/**\r\n * @return sum of all binary operation counts\r\n */\r\nfunction binaryOperations(o: OperationsCount): number {\r\n    return o.antijoin + o.cartesian + o.division + o.natural + o.outerJoin + o.semijoin + o.setOperation + o.thetaJoin + o.thetaSemijoin;\r\n}\r\n\r\n/**\r\n * @return sum of all unary operation counts\r\n */\r\nfunction unaryOperations(o: OperationsCount): number {\r\n    return o.projection + o.rename + o.selection;\r\n}\r\n\r\n/**\r\n * @return counts all operations used in the given tree.\r\n */\r\nfunction operationsOfTree(tree: RATreeNode): OperationsCount {\r\n    if (tree instanceof UnaryNode) {\r\n        return addOperations(operationOfUnaryNode(tree), operationsOfTree(tree.getSubtree()));\r\n    }\r\n    if (tree instanceof BinaryNode) {\r\n        return addOperations(operationOfBinaryNode(tree), operationsOfTree(tree.getLeftSubtree()), operationsOfTree(tree.getRightSubtree()));\r\n    }\r\n    // no subtree - relation node\r\n    return zeroOperations();\r\n}\r\n\r\n/**\r\n * @return OperationsCount with one given unary operation count set to 1, other 0\r\n */\r\nfunction operationOfUnaryNode(node: UnaryNode): OperationsCount {\r\n    let ret: OperationsCount = zeroOperations();\r\n    if (node instanceof ProjectionNode) {\r\n        ret.projection = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof RenameNode) {\r\n        ret.rename = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof SelectionNode) {\r\n        ret.selection = 1;\r\n        return ret;\r\n    }\r\n    return ret;\r\n}\r\n\r\n/**\r\n * @return OperationsCount with one given binary operation count set to 1, other 0\r\n */\r\nfunction operationOfBinaryNode(node: BinaryNode): OperationsCount {\r\n    let ret: OperationsCount = zeroOperations();\r\n    if (node instanceof AntijoinNode) {\r\n        ret.antijoin = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof CartesianProductNode) {\r\n        ret.cartesian = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof DivisionNode) {\r\n        ret.division = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof OuterJoinNode) {\r\n        ret.outerJoin = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof NaturalJoinNode) {\r\n        if (node.getType() === NaturalJoinType.natural) {\r\n            ret.natural = 1;\r\n        }\r\n        else {\r\n            ret.semijoin = 1;\r\n        }\r\n        return ret;\r\n    }\r\n    if (node instanceof SetOperationNode) {\r\n        ret.setOperation = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof ThetaJoinNode) {\r\n        if (node.getType() === ThetaJoinType.full) {\r\n            ret.thetaJoin = 1;\r\n        }\r\n        else {\r\n            ret.thetaSemijoin = 1;\r\n        }\r\n        return ret;\r\n    }\r\n    return ret;\r\n}","/**\r\n * Formats given date to: dd.mm.yyyy hh:mm.\r\n *\r\n * @param date date to format\r\n */\r\nexport function formatDate(date: Date): string {\r\n    return String(date.getDate()).padStart(2, '0') + '.' + String(date.getMonth() + 1).padStart(2, '0') + '.' +\r\n        String(date.getFullYear()) + ' ' +\r\n        String(date.getHours()).padStart(2, '0') + ':' + String(date.getMinutes()).padStart(2, '0');\r\n}","import React from \"react\";\r\nimport './css/editRelationTable.css';\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {NNToSMap} from \"../types/nnToSMap\";\r\n\r\ninterface EditRelationTableProps {\r\n    // storing representation of the relation to be edited\r\n    relation: StoredRelation,\r\n\r\n    // handler of column name change\r\n    onColumnNameChange: (columnName: string, columnIndex: number) => void,\r\n    // handler of column type change\r\n    onColumnTypeChange: (columnType: SupportedColumnType, columnIndex: number) => void,\r\n    // handler of row input change\r\n    onRowInputChange: (input: string, columnIndex: number, rowIndex: number) => void,\r\n    // handler of adding new row\r\n    onNewRow: (onDone: () => void) => void,\r\n    // handler of adding new column\r\n    onNewColumn: (onDone: () => void) => void,\r\n    // handler of deleting the row of given index\r\n    onDeleteRow: (rowIndex: number) => void,\r\n    // handler of deleting the column of given index\r\n    onDeleteColumn: (columnIndex: number) => void,\r\n\r\n    // handler of input with Ctrl key\r\n    onCtrlInput: (ev: React.KeyboardEvent) => void\r\n}\r\n\r\ninterface EditRelationTableState {\r\n    selectedColumn: number | undefined,\r\n    selectedRow: \"names\" | \"types\" | number | undefined\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\nconst cellPaddingSides: number = Number(cssConstants.getPropertyValue('--cell-padding-sides-num'));\r\nconst inputMarginSides: number = Number(cssConstants.getPropertyValue('--input-margin-sides-num'));\r\n\r\n/**\r\n * Table for editing a relation relation. It supports adding new columns and rows and editing all relation (column names,\r\n * column types and row inputs).\r\n */\r\nexport default class EditRelationTable extends React.Component<EditRelationTableProps, EditRelationTableState> {\r\n\r\n    private readonly containerRef: React.RefObject<HTMLDivElement>;\r\n    // reference to the head row with columns names\r\n    private readonly tableHeadRowRef: React.RefObject<HTMLTableRowElement>;\r\n    // width of cells in head (with deducted padding) to set proper inputs width to not resize the table\r\n    private columnWidths: number[] = [];\r\n\r\n    constructor(props: EditRelationTableProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedColumn: undefined,\r\n            selectedRow: undefined\r\n        }\r\n        this.containerRef = React.createRef<HTMLDivElement>();\r\n        this.tableHeadRowRef = React.createRef<HTMLTableRowElement>();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // clicking in the window blurs the selected input (if clicked into a cell, event propagation is stopped to not blur\r\n        window.addEventListener('click', () => {\r\n            this.setSelectedInput(undefined, undefined);\r\n        });\r\n        this.componentDidUpdate();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const headRow = this.tableHeadRowRef.current;\r\n        if (headRow !== null) {\r\n            // cells without the first (line number) and last (add column button)\r\n            const cells = [...headRow.cells].slice(1, -1);\r\n            this.columnWidths = cells.map(cell => cell.clientWidth - 2 * (cellPaddingSides + inputMarginSides));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes column width if the resized input element does not fit in it anymore.\r\n     */\r\n    private handleInputResize = (inputElement: EventTarget & HTMLInputElement, column: number) => {\r\n        // handles larger width\r\n        if (inputElement.scrollWidth > this.columnWidths[column]) {\r\n            this.columnWidths[column] = inputElement.scrollWidth;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns error of the relation to edit.\r\n     */\r\n    private getErrors = (): NNToSMap => {\r\n        return this.props.relation.getErrors();\r\n    }\r\n\r\n    /**\r\n     * Sets selected input column and row to given values.\r\n     */\r\n    private setSelectedInput = (column: number | undefined, row: \"names\" | \"types\" | number | undefined): void => {\r\n        this.setState({\r\n            selectedColumn: column,\r\n            selectedRow: row\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves selected input to right if it is defined and not in the last column.\r\n     */\r\n    private moveSelectedInputRight = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not last column was selected\r\n            if (selectedColumn < this.props.relation.getColumnCount() - 1) {\r\n                this.setState({selectedColumn: selectedColumn + 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input to left if it is defined and not in the first column.\r\n     */\r\n    private moveSelectedInputLeft = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not first column was selected\r\n            if (selectedColumn > 0) {\r\n                this.setState({selectedColumn: selectedColumn - 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input up if it is defined and not in the first row.\r\n     */\r\n    private moveSelectedInputUp = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not first row was selected\r\n            if (typeof selectedRow === \"number\") {\r\n                if (selectedRow === 0) {\r\n                    this.setState({selectedRow: \"names\"});\r\n                }\r\n                else {\r\n                    this.setState({selectedRow: selectedRow - 1});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input down if it is defined and not in the last row.\r\n     */\r\n    private moveSelectedInputDown = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            if (selectedRow === \"names\" && this.props.relation.getRowCount() > 0) {\r\n                this.setState({selectedRow: 0});\r\n            }\r\n            // if not last row was selected\r\n            if (typeof selectedRow === \"number\" && selectedRow < this.props.relation.getRowCount() - 1) {\r\n                this.setState({selectedRow: selectedRow + 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Catches key inputs with special effects in tht table.\r\n     */\r\n    private handleKeyDown = (event: React.KeyboardEvent): void => {\r\n        if (event.key === \"Enter\" || event.key === \"Esc\" || event.key === \"Escape\") {\r\n            this.setSelectedInput(undefined, undefined);\r\n        }\r\n        else if (event.key === \"Tab\" || (event.ctrlKey && event.key === \"ArrowRight\")) {\r\n            this.moveSelectedInputRight();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowLeft\") {\r\n            this.moveSelectedInputLeft();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowUp\") {\r\n            this.moveSelectedInputUp();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowDown\") {\r\n            this.moveSelectedInputDown();\r\n            event.preventDefault();\r\n        }\r\n        if (event.ctrlKey) {\r\n            this.props.onCtrlInput(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the change of the column name, column type or row input to the parent element.\r\n     * When row = \"types\", it is expected that value is of SupportedColumnType type.\r\n     * Tabulators are replaced by 4 spaces.\r\n     */\r\n    private handleChange = (value: string, column: number, row: \"names\" | \"types\" | number): void => {\r\n        value = value.replace(/\\t/g, \"    \");\r\n        if (row === \"names\") {\r\n            this.props.onColumnNameChange(value, column);\r\n        }\r\n        else if (row === \"types\") {\r\n            // @ts-ignore - should be ensured before method call\r\n            this.props.onColumnTypeChange(value, column);\r\n        }\r\n        else {\r\n            this.props.onRowInputChange(value, column, row);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the relation and scrolls to it.\r\n     */\r\n    private handleNewColumn = (): void => {\r\n        this.props.onNewColumn(() => {\r\n            // @ts-ignore\r\n            this.containerRef.current.scrollTo(this.containerRef.current.clientWidth, this.containerRef.current.scrollTop)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the relation and scrolls to it.\r\n     */\r\n    private handleNewRow = (): void => {\r\n        this.props.onNewRow(() => {\r\n            // @ts-ignore\r\n            this.containerRef.current.scrollTo(this.containerRef.current.scrollLeft, this.containerRef.current.clientHeight)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the column at given index.\r\n     */\r\n    private handleDeleteColumn = (column: number): void => {\r\n        this.props.onDeleteColumn(column);\r\n    }\r\n\r\n    /**\r\n     * Deletes the row at given index.\r\n     */\r\n    private handleDeleteRow = (row: number): void => {\r\n        this.props.onDeleteRow(row);\r\n    }\r\n\r\n    /**\r\n     * Creates a text input bind to handling change of given column and row.\r\n     */\r\n    private createInput = (value: string, column: number, row: \"names\" | \"types\" | number) => {\r\n        return (\r\n            <input\r\n                type='text'\r\n                className={'text-input'}\r\n                spellCheck={false}\r\n                value={value}\r\n                onChange={(e) => {\r\n                    this.handleChange(e.target.value, column, row);\r\n                    this.handleInputResize(e.target, column);\r\n                }}\r\n                autoFocus={true}\r\n                style={{width: this.columnWidths[column] + \"px\"}}\r\n            />\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a tooltip with given text.\r\n     */\r\n    private createTooltip(text: string, style?: React.CSSProperties) {\r\n        return (<span className={\"tooltip\"} style={style}>{text}</span>)\r\n    }\r\n\r\n    /**\r\n     * Creates a button for deleting rows or columns.\r\n     */\r\n    private createDeleteButton = (callback: () => void) => {\r\n        return (<button className=\"delete-row-or-column-button\" onClick={callback}>&#10006;</button>);\r\n    }\r\n\r\n    /**\r\n     * Creates content of the first row of the table with column names.\r\n     * If the table is editable, additional blank column is added for \"add column\" button in next rows.\r\n     */\r\n    private createNamesRow() {\r\n        const rowData = this.props.relation.getColumnNames().map((columnName, columnIndex) => {\r\n            let content: string | JSX.Element = columnName;\r\n            if (this.state.selectedColumn === columnIndex && this.state.selectedRow === \"names\") {\r\n                content = this.createInput(columnName, columnIndex, \"names\");\r\n            }\r\n            let span: null | JSX.Element = null;\r\n            let className: string = \"name-th\";\r\n            const error = this.getErrors().get(\"name\", columnIndex);\r\n            if (error !== undefined) {\r\n                span = this.createTooltip(error, {top: \"90%\", bottom: \"auto\"});\r\n                className += \" error-input\";\r\n            }\r\n            return (\r\n                <th key={columnIndex}\r\n                    className={className}\r\n                    onClick={ev => {\r\n                        this.setSelectedInput(columnIndex, \"names\");\r\n                        ev.stopPropagation();\r\n                    }}\r\n                >{content}{span}</th>\r\n            )});\r\n        // pushes \"add column\" button in last column\r\n        rowData.push(\r\n            <td key='add-column'\r\n                rowSpan={2}\r\n                style={{width: \"24px\", border: \"none\", padding: \"1px\"}}>\r\n                <button onClick={this.handleNewColumn}\r\n                    style={{width: \"100%\", height: \"100%\"}}><strong>+</strong></button>\r\n            </td>);\r\n        return (\r\n            <><td className=\"row-number-td\"/>{rowData}</>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates content of the second row of the table with column types.\r\n     * If the table is editable, \"add column\" button is added in the last column with row span to the end of the table.\r\n     */\r\n    private createTypesRow() {\r\n        const rowData = this.props.relation.getColumnTypes().map((columnType, columnIndex) => {\r\n            const content = (\r\n                <select value={columnType}\r\n                    onChange={(e) => this.handleChange(e.target.value, columnIndex, \"types\")}>\r\n                    <option>number</option>\r\n                    <option>string</option>\r\n                    <option>boolean</option>\r\n                </select>\r\n            );\r\n            return (\r\n                <th key={columnIndex}\r\n                    className=\"type-th\"\r\n                >{content}{this.createDeleteButton(() => this.handleDeleteColumn(columnIndex))}</th>\r\n            )});\r\n        return (\r\n            <><td className=\"row-number-td\"/>{rowData}</>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a data rows of the table.\r\n     */\r\n    private createRows() {\r\n        // creates default row if no exists\r\n        if (this.props.relation.getRows().length === 0) {\r\n            return null;\r\n        }\r\n        const rows: string[][] = this.props.relation.getRows();\r\n        // creates all rows if any\r\n        return rows.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n                <td className=\"row-number-td\">\r\n                    {rowIndex + 1}\r\n                    {this.createDeleteButton(() => this.handleDeleteRow(rowIndex))}\r\n                </td>\r\n                {row.map((value, columnIndex) => {\r\n                    let content: string | JSX.Element = value;\r\n                    if (this.state.selectedColumn === columnIndex && this.state.selectedRow === rowIndex) {\r\n                        content = this.createInput(value, columnIndex, rowIndex);\r\n                    }\r\n                    let span: null | JSX.Element = null;\r\n                    let className: string = \"\";\r\n                    const error = this.getErrors().get(rowIndex, columnIndex);\r\n                    if (error !== undefined) {\r\n                        span = this.createTooltip(error);\r\n                        className = \"error-input\";\r\n                    }\r\n                    return (\r\n                        <td key={columnIndex}\r\n                            className={className}\r\n                            onClick={ev => {\r\n                                this.setSelectedInput(columnIndex, rowIndex);\r\n                                ev.stopPropagation();\r\n                            }}\r\n                        >{content}{span}</td>\r\n                    )})}\r\n            </tr>\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Creates the last row of the table with button for adding rows.\r\n     */\r\n    private createAddRow() {\r\n        return (\r\n            <tr key='add-row'>\r\n                <td key='add-row-column'\r\n                    className=\"add-row-td\">\r\n                    <button onClick={this.handleNewRow}><strong>+</strong></button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        let divClassName: string = \"edit-table-container scrollbar-container\";\r\n        let tableClassName: string = \"edit-table\";\r\n\r\n        return (\r\n            <div\r\n                className={divClassName}\r\n                ref={this.containerRef}\r\n                onKeyDown={this.handleKeyDown}>\r\n                <table className={tableClassName}>\r\n                    <thead>\r\n                        <tr ref={this.tableHeadRowRef}>{this.createNamesRow()}</tr>\r\n                        <tr>{this.createTypesRow()}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.createRows()}\r\n                        {this.createAddRow()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Relation from \"../relation/relation\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport EditRelationTable from \"./editRelationTable\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {TextInput} from \"./textInput\";\r\nimport {getForbiddenRelationNames} from \"../utils/keywords\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\nimport {MessageBox} from \"./messageBox\";\r\n\r\ninterface RelationsSectionProps {\r\n    // all stored relations\r\n    storedRelations: StoredRelation[],\r\n    // index of the current selected relation\r\n    storedRelationIndex: number,\r\n\r\n    // all currently loaded relations in the application\r\n    loadedRelations: Relation[],\r\n\r\n    // handler of change of the name of the current selected relation\r\n    onRelationNameChange: (newName: string) => void,\r\n    // handler of change of the name of the column at given index in the current selected relation\r\n    onColumnNameChange: (columnName: string, columnIndex: number) => void,\r\n    // handler of change of the type of the column at given index in the current selected relation\r\n    onColumnTypeChange: (columnType: SupportedColumnType, columnIndex: number) => void,\r\n    // handler of change of the row input at given column/row index in the current selected relation\r\n    onRowInputChange: (input: string, columnIndex: number, rowIndex: number) => void,\r\n    // handler of adding a new row in the current selected relation\r\n    onNewRow: (onDone: () => void) => void,\r\n    // handler of adding a new column in the current selected relation\r\n    onNewColumn: (onDone: () => void) => void,\r\n    // handler of deleting the row on given index\r\n    onDeleteRow: (rowIndex: number) => void,\r\n    // handler of deleting the column on given index\r\n    onDeleteColumn: (columnIndex: number) => void,\r\n\r\n    // handler of selecting a different relation as current\r\n    onSelectDifferentRelation: (newIndex: number) => void,\r\n    // handler of creating a new relation\r\n    onNewRelation: () => void,\r\n    // handler of loading the current selected relation into the application\r\n    onLoadRelation: (onDone: (msg: string) => void) => void,\r\n    // handler of deleting the current stored relation\r\n    onDeleteStoredRelation: () => void,\r\n\r\n    onRevertRelation: () => void,\r\n\r\n    // handler of loading all valid relations into the application\r\n    onLoadAllRelations: (onDone: (msg: string) => void) => void,\r\n    // handler of deleting the loaded relations\r\n    onDeleteLoadedRelations: (onDone: (msg: string) => void) => void,\r\n    // handler of saving the stored relations into the files\r\n    onExportRelations: (onDone: (msg: string) => void) => void,\r\n    // handler of loading new relations from files\r\n    onImportRelations: (onDone: (msg: string) => void) => void,\r\n\r\n    // whether to support null values\r\n    nullValuesSupport: boolean\r\n}\r\n\r\ninterface RelationsSectionState {\r\n    sectionClicked: boolean\r\n}\r\n\r\n/**\r\n * Section to type the RA expression. It contains textarea for relations definition and control buttons.\r\n */\r\nexport class RelationsSection extends React.Component<RelationsSectionProps, RelationsSectionState> {\r\n\r\n    constructor(props: RelationsSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns selected stored relation.\r\n     */\r\n    private getCurRel = (): StoredRelation => {\r\n        return this.props.storedRelations[this.props.storedRelationIndex];\r\n    }\r\n\r\n    /**\r\n     * Passes change to the parent element if isShowingStored = true. Otherwise, changes the state.loadedRelationIndex.\r\n     */\r\n    private handleSelectDifferentRelation(index: number): void {\r\n        this.props.onSelectDifferentRelation(index);\r\n    }\r\n\r\n    /**\r\n     * Passes change of the relation name to the parent element.\r\n     */\r\n    private handleRelationNameChange = (name: string) => {\r\n        this.props.onRelationNameChange(name);\r\n    }\r\n\r\n    /**\r\n     * Loads the selected relation to the application if there are no errors in it. Otherwise, displays a message to user.\r\n     */\r\n    private loadRelation = () => {\r\n        if (this.getCurRel().isValid()) {\r\n            this.props.onLoadRelation(MessageBox.message);\r\n        }\r\n        else {\r\n            MessageBox.error(\"Cannot use the invalid relation. Check errors and try again.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the load all relations call to the parent.\r\n     */\r\n    private loadAllRelations = () => {\r\n        this.props.onLoadAllRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the export stored relations call to the parent.\r\n     */\r\n    private exportRelations = () => {\r\n        this.props.onExportRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the import stored relations call to the parent.\r\n     */\r\n    private importRelations = () => {\r\n        this.props.onImportRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the call to delete current selected stored relation.\r\n     */\r\n    private deleteRelation = () => {\r\n        this.props.onDeleteStoredRelation();\r\n    }\r\n\r\n    private revertRelation = () => {\r\n        this.props.onRevertRelation();\r\n    }\r\n\r\n    /**\r\n     * Passes the import create new stored relation to the parent.\r\n     */\r\n    private newRelation = () => {\r\n        this.props.onNewRelation();\r\n    }\r\n\r\n    /**\r\n     * Passes the delete all loaded relations call to the parent.\r\n     */\r\n    private deleteAllLoadedRelations = () => {\r\n        this.props.onDeleteLoadedRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Handles input with Ctrl key pressed from relation table.\r\n     */\r\n    private handleCtrlInput = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            this.loadRelation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates menu buttons. Buttons for relations with errors are highlighted.\r\n     */\r\n    private createRelationMenuButtons = () => {\r\n        return this.props.storedRelations.map((rel, i) => {\r\n            const className: string = (this.props.storedRelationIndex === i ? \"button-clicked\" : \"\");\r\n            const actuality: string = rel.isActual() ? \"\" : \"*\";\r\n            const style = rel.isValid() ? {} : {border: \"2px solid #fd3030\"};\r\n            return (\r\n                <button\r\n                    key={i}\r\n                    onClick={() => this.handleSelectDifferentRelation(i)}\r\n                    className={className}\r\n                    style={style}\r\n                >{actuality + rel.getName()}</button>\r\n            );\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const createButton = (text: string, onClick: () => void, tooltip: string, style?: React.CSSProperties) => {\r\n            return (<TooltipButton\r\n                key={text}\r\n                text={text}\r\n                onClick={onClick}\r\n                className={\"\"}\r\n                style={style}\r\n                tooltip={tooltip}\r\n                tooltipClassName={\"tooltip\"}\r\n            />);\r\n        }\r\n\r\n        // the relation cannot be renamed to forbidden relation names and other currently used relation names\r\n        const forbiddenRelationNames: string[] = this.props.storedRelations\r\n            .filter((sr, i) => i !== this.props.storedRelationIndex)\r\n            .map(sr => sr.getName());\r\n        forbiddenRelationNames.push(...getForbiddenRelationNames());\r\n        const forbiddenNamesFunction = (text: string): boolean => {\r\n            if (forbiddenRelationNames.indexOf(text) > -1) {\r\n                return true;\r\n            }\r\n            return !StringUtils.isName(text);\r\n        }\r\n\r\n        return (\r\n            <section className=\"page-section\">\r\n                <header>\r\n                    <h2>Relations</h2>\r\n                    {createButton(\"Load all\", this.loadAllRelations, \"Loads all valid relations into the application\")}\r\n                    {createButton(\"Delete loaded\", this.deleteAllLoadedRelations, \"Deletes relations loaded in the application\")}\r\n                    {createButton(\"Import\", this.importRelations, \"Adds new relations from files\")}\r\n                    {createButton(\"Export\", this.exportRelations, \"Saves stored relations to files\")}\r\n                </header>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    {this.createRelationMenuButtons()}\r\n                    <button onClick={this.newRelation}\r\n                        style={{minWidth: \"0\", marginLeft: \"10px\", padding: \"2px 6px 1px 6px\"}}>\r\n                        <strong>+</strong>\r\n                    </button>\r\n                </menu>\r\n\r\n                <EditRelationTable\r\n                    relation={this.getCurRel()}\r\n\r\n                    onColumnNameChange={this.props.onColumnNameChange}\r\n                    onColumnTypeChange={this.props.onColumnTypeChange}\r\n                    onRowInputChange={this.props.onRowInputChange}\r\n                    onNewRow={this.props.onNewRow}\r\n                    onNewColumn={this.props.onNewColumn}\r\n                    onDeleteRow={this.props.onDeleteRow}\r\n                    onDeleteColumn={this.props.onDeleteColumn}\r\n\r\n                    onCtrlInput={this.handleCtrlInput}\r\n                />\r\n\r\n                <menu className=\"page-section-management-menu\">\r\n                    <TooltipButton\r\n                        key=\"Load\"\r\n                        text=\"Load\"\r\n                        onClick={this.loadRelation}\r\n                        className={\"action-button\"}\r\n                        style={{marginRight: \"40px\"}}\r\n                        tooltip=\"Loads the relation into the application\"\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                    <TextInput\r\n                        label=\"\"\r\n                        value={this.getCurRel().getName()}\r\n                        buttonText=\"Rename\"\r\n                        onSubmit={this.handleRelationNameChange}\r\n                        forbidden={forbiddenNamesFunction}\r\n                        id=\"relation-name-input\"\r\n                    />\r\n                    {createButton(\"Delete\", this.deleteRelation,\"Deletes the relation\")}\r\n                    {this.getCurRel().canRevert() && createButton(\"Revert\", this.revertRelation,\r\n                        \"Reverts to last loaded state (\" + this.getCurRel().getRevertName() + \")\")}\r\n                </menu>\r\n            </section>\r\n        );\r\n    }\r\n}","interface SendData {\r\n    access_token: string,\r\n    subject: string,\r\n    text: string\r\n}\r\n\r\n/**\r\n * Class for sending emails. Powered by https://postmail.invotes.com/.\r\n * TypeScript version of JavaScript Copy & Paste Example from PostMail webpage.\r\n */\r\nexport class Mail {\r\n\r\n    /**\r\n     * Creates a mailer with given Mail access token.\r\n     *\r\n     * @param accessToken token which specifies Mail receiver of mails\r\n     */\r\n    constructor(readonly accessToken: string) {}\r\n\r\n    /**\r\n     * Sends given subject and body of the email to the Mail receiver.\r\n     *\r\n     * @param subject subject of the mail\r\n     * @param body body of the mail\r\n     */\r\n    public send(subject: string, body: string): void {\r\n        const data_js: SendData = {\r\n            access_token: this.accessToken,\r\n            subject: subject,\r\n            text: body\r\n        };\r\n\r\n        const request = new XMLHttpRequest();\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n            } else if(request.readyState === 4) {\r\n                console.log(\"failed creating XMLHttpRequest in Mail.send: \" + request.response);\r\n            }\r\n        };\r\n\r\n        let params = Mail.toParams(data_js);\r\n        request.open(\"POST\", \"https://postmail.invotes.com/send\", true);\r\n        request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n        request.send(params);\r\n    }\r\n\r\n    private static toParams(data: SendData): string {\r\n        return encodeURIComponent(\"access_token\") + \"=\" + encodeURIComponent(data.access_token) + \"&\" +\r\n            encodeURIComponent(\"subject\") + \"=\" + encodeURIComponent(data.subject) + \"&\" +\r\n                encodeURIComponent(\"text\") + \"=\" + encodeURIComponent(data.text);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Relation from '../relation/relation';\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport {ExpressionSection} from \"./expressionSection\";\r\nimport {ResultSection} from \"./resultSection\";\r\nimport {ExpressionStoreManager} from \"../expression/expressionStoreManager\";\r\nimport {ManagementSection} from \"./managementSection\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {ProjectStoreManager} from \"../project/projectStoreManager\";\r\nimport {SupportedLanguage} from \"../types/supportedLanguage\";\r\nimport {LocalStorage} from \"../utils/localStorage\";\r\nimport {BatchProcessor} from \"../batch/batchProcessor\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {RelationsSection} from \"./relationsSection\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {RelationStoreManager} from \"../relation/relationStoreManager\";\r\nimport {Mail} from \"../utils/mail\";\r\nimport {copyProject, Project} from \"../project/project\";\r\nimport {getSamples} from \"../project/samples\";\r\n\r\ninterface MainScreenProps {}\r\n\r\ninterface MainScreenState {\r\n    samples: { name: string, project: Project }[],\r\n\r\n    loadedRelations: Map<string, Relation>,\r\n    storedRelations: StoredRelation[],\r\n    selectedRelation: number,\r\n\r\n    expressions: Expression[],\r\n    selectedExpression: number,\r\n\r\n    evaluationTreeRoot: RATreeNode | null,\r\n    evaluatedExpressionName: string,\r\n\r\n    nullValuesSupport: boolean,\r\n    csvValueSeparator: CsvValueSeparator,\r\n    language: SupportedLanguage,\r\n    darkTheme: boolean\r\n}\r\n\r\n/**\r\n * Main component of Rachel web page. It wraps all page sections and passes messages between them.\r\n */\r\nexport default class MainScreen extends Component<MainScreenProps, MainScreenState> {\r\n\r\n    private readonly expressionSectionRef: React.RefObject<ExpressionSection>;\r\n\r\n    constructor(props: MainScreenProps) {\r\n        super(props);\r\n\r\n        // sets body template by settings from local storage\r\n        document.body.classList.toggle('body-dark', LocalStorage.getDarkMode());\r\n        document.body.classList.toggle('body-light', !LocalStorage.getDarkMode());\r\n\r\n        const initRelationData = {\r\n            name: \"Relation\",\r\n            columnNames: [\"Column1\", \"Column2\", \"Column3\"],\r\n            columnTypes: [\"number\", \"string\", \"boolean\"],\r\n            rows: [\r\n                ['', '', '']\r\n            ],\r\n            columnCount: 3,\r\n            rowCount: 1\r\n        };\r\n\r\n        this.state = {\r\n            samples: getSamples(),\r\n\r\n            loadedRelations: new Map<string, Relation>(),\r\n            storedRelations: [ StoredRelation.fromData(initRelationData, true) ],\r\n            selectedRelation: 0,\r\n\r\n            expressions: [ {name: \"Expression 1\", text: \"\"} ],\r\n            selectedExpression: 0,\r\n\r\n            evaluationTreeRoot: null,\r\n            evaluatedExpressionName: \"\",\r\n\r\n            nullValuesSupport: true,\r\n            csvValueSeparator: LocalStorage.getCsvValueSeparator(),\r\n            language: LocalStorage.getLanguage(),\r\n            darkTheme: LocalStorage.getDarkMode()\r\n        }\r\n        this.expressionSectionRef = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * Reports an error to the author of the application via email.\r\n     *\r\n     * @param err unexpected error\r\n     */\r\n    private reportUnexpectedError = (err: Error): void => {\r\n        const postMail: Mail = new Mail(\"5uog26ex8q9qu7sqib8ea0qd\");\r\n        let body: string = \"Unexpected error \" + err.name + \" in Rachel application.\" +\r\n            \"\\n\\nMessage:\\n\" + err.message +\r\n            \"\\n\\nDate:\\n\" + new Date().toString() +\r\n            \"\\n\\nStack trace:\\n\" + err.stack +\r\n\r\n            \"\\n\\nLoaded relations: ----------------------------\\n\" +\r\n            [...this.state.loadedRelations.values()].map(relation => {\r\n                return relation.getName() + \"\\n\" + relation.contentString();\r\n            }).join(\"\\n\\n\") +\r\n\r\n            \"\\n\\nStored relations: ----------------------------\" +\r\n            \"\\nSelected relation (1-index): \" + (this.state.selectedRelation + 1) + \"\\n\\n\" +\r\n            this.state.storedRelations.map(relation => {\r\n                return relation.getName() + \"\\n\" +\r\n                    relation.getColumnNames().join(\", \") + \"\\n\" +\r\n                    relation.getColumnTypes().join(\", \") + \"\\n\" +\r\n                    relation.getRows().map(row => row.join(\", \")).join(\"\\n\");\r\n            }).join(\"\\n\\n\") +\r\n\r\n            \"\\n\\nExpressions: ----------------------------\" +\r\n            \"\\nSelected expression (1-index): \" + (this.state.selectedExpression + 1) + \"\\n\\n\" +\r\n            this.state.expressions.map(expr => expr.text).join(\"\\n\\n###\\n\\n\") +\r\n\r\n            \"\\n\\nEvaluation tree:\\n\" + this.state.evaluationTreeRoot?.printInLine() +\r\n\r\n            \"\\n\\nOther state: ----------------------------\" +\r\n            \"\\ncsvValueSeparator: \" + this.state.csvValueSeparator +\r\n            \"\\nlanguage:          \" + this.state.language +\r\n            \"\\nnullValuesSupport: \" + this.state.nullValuesSupport +\r\n            \"\\ndarkTheme:         \" + this.state.darkTheme;\r\n\r\n        postMail.send(\"Rachel application unexpected error\", body);\r\n        console.error('Unexpected error: ' + err.stack);\r\n    }\r\n\r\n    /**\r\n     * Overwrites the current project data with the given one.\r\n     *\r\n     * @param project\r\n     */\r\n    private loadProject = (project: Project): void => {\r\n        this.setState({\r\n            loadedRelations: new Map<string, Relation>(),\r\n            storedRelations: project.relations.map(r => StoredRelation.fromData(r, project.nullValuesSupport)),\r\n            selectedRelation: 0,\r\n            expressions: project.expressions,\r\n            nullValuesSupport: project.nullValuesSupport,\r\n            selectedExpression: 0,\r\n            evaluationTreeRoot: null,\r\n            evaluatedExpressionName: \"\"\r\n        }, () => {\r\n            console.log(\"Project loaded.\");\r\n            this.updateExpressionsErrors();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds number after the given name if it already exists in stored relation.\r\n     */\r\n    private ensureUniqueRelationName = (name: string): string => {\r\n        if (this.state.storedRelations.map(sr => sr.getName()).indexOf(name) > -1) {\r\n            for (let i = 2; true; ++i) {\r\n                if (this.state.storedRelations.map(sr => sr.getName()).indexOf(name + i) === -1) {\r\n                    name += i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return name;\r\n    }\r\n\r\n    /****************************************** MANAGEMENT SECTION HANDLERS ******************************************/\r\n\r\n    /**\r\n     * Processes multiple selected files with expressions by the user and saves the reports of the evaluation in textual\r\n     * files.\r\n     */\r\n    private handleBatch = () => {\r\n        BatchProcessor.process('rachel-eval-results');\r\n    }\r\n\r\n    /**\r\n     * Opens a file dialog and lets the user choose a .rachel (JSON) file with project to load.\r\n     */\r\n    private handleLoadProject = (): void => {\r\n        ProjectStoreManager.load().then(this.loadProject).catch(console.warn);\r\n    }\r\n\r\n    /**\r\n     * Saves the project relation to the .rachel (JSON) file.\r\n     */\r\n    private handleSaveProject = (): void => {\r\n        try {\r\n            ProjectStoreManager.save({\r\n                relations: this.state.storedRelations.map(sr => sr.toDataObject()),\r\n                expressions: this.state.expressions,\r\n                nullValuesSupport: this.state.nullValuesSupport\r\n                }, \"project\");\r\n            console.log(\"Project saved.\");\r\n        }\r\n        catch (err) {\r\n            console.warn(\"Project saving failed: \" + err.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles loading a sample project.\r\n     */\r\n    private handleLoadSampleProject = (sample: Project): void => {\r\n        this.loadProject(copyProject(sample));\r\n    }\r\n\r\n    /**\r\n     * Changes the support of the null values in relations.\r\n     *\r\n     * @param nullValuesSupport new support of the null values in relations\r\n     */\r\n    private handleNullValuesSupportChange = (nullValuesSupport: boolean): void => {\r\n        this.state.storedRelations.forEach(sr => sr.setNullValuesSupport(nullValuesSupport));\r\n        // null values change can change validity of the relations, therefore set as not actual\r\n        this.setState({nullValuesSupport: nullValuesSupport}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Changes the value separator used in generated CSV files.\r\n     *\r\n     * @param csvValueSeparator new value separator used in generated CSV files\r\n     */\r\n    private handleCsvValueSeparatorChange = (csvValueSeparator: CsvValueSeparator): void => {\r\n        LocalStorage.setCsvValueSeparator(csvValueSeparator);\r\n        this.setState({csvValueSeparator: csvValueSeparator});\r\n    }\r\n\r\n    /**\r\n     * Changes the language of the application.\r\n     *\r\n     * @param language new language of the application\r\n     */\r\n    private handleLanguageChange = (language: SupportedLanguage): void => {\r\n        LocalStorage.setLanguage(language);\r\n        this.setState({language: language});\r\n    }\r\n\r\n    /**\r\n     * Changes the dark/light mode of the application.\r\n     *\r\n     * @param darkTheme true if dark theme is on\r\n     */\r\n    private handleDarkModeChange = (darkTheme: boolean) => {\r\n        LocalStorage.setDarkMode(darkTheme);\r\n        this.setState({darkTheme: darkTheme});\r\n        document.body.classList.toggle( 'body-dark', darkTheme);\r\n        document.body.classList.toggle( 'body-light', !darkTheme);\r\n    }\r\n\r\n    /******************************************* RELATION SECTION HANDLERS *******************************************/\r\n\r\n    private handleRelationNameChange = (name: string): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setName(name);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationColumnNameChange = (columnName: string, columnIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setColumnName(columnName, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationColumnTypeChange = (columnType: SupportedColumnType, columnIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setColumnType(columnType, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationRowInputChange = (input: string, columnIndex: number, rowIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setRowInput(input, rowIndex, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationNewRow = (onDone: () => void): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].addNewRow();\r\n        // forces update\r\n        this.setState({}, onDone);\r\n    }\r\n\r\n    private handleRelationNewColumn = (onDone: () => void): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].addNewColumn();\r\n        // forces update\r\n        this.setState({}, onDone);\r\n    }\r\n\r\n    private handleRelationDeleteRow = (rowIndex: number): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].deleteRow(rowIndex);\r\n        // forces update\r\n        this.setState({});\r\n    }\r\n\r\n    private handleRelationDeleteColumn = (columnIndex: number): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].deleteColumn(columnIndex);\r\n        // forces update\r\n        this.setState({});\r\n    }\r\n\r\n    /**\r\n     * Selects a new relation from the relations list as the current one.\r\n     */\r\n    private handleSelectDifferentRelation = (newIndex: number): void => {\r\n        this.setState({selectedRelation: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Creates a new empty relation and adds it in the relation list.\r\n     */\r\n    private handleCreateNewRelation = (): void => {\r\n        // inserts a new empty relation in the array\r\n        const newIndex: number = this.state.selectedRelation + 1;\r\n        let name: string = this.ensureUniqueRelationName(\"NewRelation\");\r\n        this.state.storedRelations.splice(newIndex, 0, StoredRelation.new(name, this.state.nullValuesSupport));\r\n        this.setState({selectedRelation: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Deletes the current relation from the relations list (or clears it if it is the last relation in the list).\r\n     */\r\n    private handleDeleteRelation = (): void => {\r\n        // if there is the last relation, only clears it\r\n        if (this.state.storedRelations.length === 1) {\r\n            this.setState({storedRelations: [StoredRelation.new(\"Relation\", this.state.nullValuesSupport)]});\r\n            return;\r\n        }\r\n        const selected: number = this.state.selectedRelation;\r\n        this.state.storedRelations.splice(selected, 1);\r\n        if (selected === this.state.storedRelations.length) {\r\n            this.setState({selectedRelation: selected - 1}, this.updateExpressionsErrors);\r\n        }\r\n        else {\r\n            // forces update\r\n            this.setState({}, this.updateExpressionsErrors);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reverts the current selected stored relation to its last loaded state.\r\n     */\r\n    private handleRevertRelation = (): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].revert();\r\n            return {storedRelations};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes all relations loaded in the application.\r\n     */\r\n    private handleDeleteLoadedRelations = (onDone: (msg: string) => void): void => {\r\n        this.state.loadedRelations.clear();\r\n        this.state.storedRelations.forEach(sr => sr.setActual(false));\r\n        onDone(\"All loaded relations deleted.\");\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Saves the relations list in a textual file.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleExportRelations = (onDone: (msg: string) => void): void => {\r\n        try {\r\n            RelationStoreManager.save(this.state.storedRelations, \"relations\", this.state.csvValueSeparator);\r\n            onDone(this.state.storedRelations.length + \" relations saved.\");\r\n        }\r\n        catch (err) {\r\n            onDone(\"Saving error: \" + err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the relations list from the textual file selected by the user.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleImportRelations = (onDone: (msg: string) => void): void => {\r\n        RelationStoreManager.load(this.state.nullValuesSupport).then(info => {\r\n            const countBefore: number = this.state.storedRelations.length;\r\n            // loads relations to application\r\n            info.relations.forEach(relation => {\r\n                const name = this.ensureUniqueRelationName(relation.getName());\r\n                relation.setName(name);\r\n                this.state.storedRelations.push(relation);\r\n            });\r\n            if (info.relations.length > 0) {\r\n                // shows first loaded relation\r\n                this.setState({selectedRelation: countBefore});\r\n            }\r\n            onDone(info.relations.length + \" relations loaded, \" + info.skipped + \" files skipped.\")\r\n        });\r\n    }\r\n\r\n    private handleLoadRelation = (onDone: (msg: string) => void): void => {\r\n        const currRelation: StoredRelation = this.state.storedRelations[this.state.selectedRelation];\r\n        currRelation.setActual(true);\r\n        this.state.loadedRelations.set(currRelation.getName(), currRelation.createRelation());\r\n        const msgPart2: string = this.state.loadedRelations.size === 0 ?\r\n            \"No relations loaded in the application at the moment.\" :\r\n            \"All current loaded relations (\" + this.state.loadedRelations.size + \"): \" +\r\n            [...this.state.loadedRelations.keys()].join(', ') + \".\";\r\n        onDone(\"Relation loaded to application.\\n\" + msgPart2);\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    private handleLoadAllRelations = (onDone: (msg: string) => void): void => {\r\n        let loaded: number = 0;\r\n        let skipped: number = 0;\r\n        this.state.storedRelations.forEach(sr => {\r\n            if (sr.isValid()) {\r\n                sr.setActual(true);\r\n                this.state.loadedRelations.set(sr.getName(), sr.createRelation());\r\n                ++loaded;\r\n            }\r\n            else {\r\n                ++skipped;\r\n            }\r\n        });\r\n        const msgPart2: string = this.state.loadedRelations.size === 0 ?\r\n            \"No relations loaded in the application at the moment.\" :\r\n            \"All current loaded relations (\" + this.state.loadedRelations.size + \"): \" +\r\n            [...this.state.loadedRelations.keys()].join(', ') + \".\";\r\n        onDone(loaded + \" relations loaded to application, \" + skipped + \" skipped for errors.\\n\" + msgPart2);\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /****************************************** EXPRESSION SECTION HANDLERS ******************************************/\r\n\r\n    private updateExpressionsErrors = (): void => {\r\n        const expressionSection = this.expressionSectionRef.current;\r\n        if (expressionSection !== null) {\r\n            expressionSection.updateErrors();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves evaluation tree for the evaluated RA expression.\r\n     */\r\n    private handleExprEval = (tree: RATreeNode): void => {\r\n        this.setState({\r\n            evaluationTreeRoot: tree,\r\n            evaluatedExpressionName: this.state.expressions[this.state.selectedExpression].name\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the text of the current expression and sets it as not actual.\r\n     */\r\n    private handleExprTextChange = (name: string, text: string): void => {\r\n        this.setState(state => {\r\n            let expressions: Expression[] = state.expressions;\r\n            expressions[state.selectedExpression] = {name: name, text: text};\r\n            return { expressions: expressions }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Selects a new expression from the expression list as the current one.\r\n     */\r\n    private handleSelectDifferentExpression = (newIndex: number): void => {\r\n        this.setState({ selectedExpression: newIndex }, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Creates a new empty expression and adds it in the expression list.\r\n     */\r\n    private handleCreateNewExpression = (): void => {\r\n        // inserts a new empty expression in the array\r\n        const newIndex: number = this.state.selectedExpression + 1;\r\n        this.state.expressions.splice(newIndex, 0, {name: \"New expression\", text: \"\"});\r\n        this.setState({selectedExpression: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Deletes the current expression from the expression list (or clears it if it is the last expression in the list).\r\n     */\r\n    private handleDeleteExpression = (onDone: () => void): void => {\r\n        // if there is the last expression, only clears it\r\n        if (this.state.expressions.length === 1) {\r\n            return this.handleExprTextChange(\"Expression 1\", \"\");\r\n        }\r\n        const selected: number = this.state.selectedExpression;\r\n        this.state.expressions.splice(selected, 1);\r\n        if (selected === this.state.expressions.length) {\r\n            this.setState({selectedExpression: selected - 1}, onDone);\r\n        }\r\n        else {\r\n            // forces update\r\n            this.setState({}, onDone);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the expression list in a textual file.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleExportExpressions = (onDone: (msg: string) => void): void => {\r\n        try {\r\n            ExpressionStoreManager.save(this.state.expressions, 'expressions');\r\n            onDone(\"Expressions saved in a textual file.\");\r\n        }\r\n        catch (err) {\r\n            onDone(\"Expressions saving failed: \" + err.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the expression list from the textual file selected by the user.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleImportExpressions = (onDone: (msg: string) => void): void => {\r\n        ExpressionStoreManager.load().then(info => {\r\n            this.state.expressions.push(...info.expressions);\r\n            this.setState({});\r\n            onDone(info.expressions.length + \" expressions loaded from \" + info.loadedFiles + \" files (\" +\r\n                + info.skippedExpressions + \" expressions skipped, \" + info.skippedFiles + \" files skipped).\");\r\n        });\r\n    }\r\n\r\n    /******************************************** RESULT SECTION HANDLERS ********************************************/\r\n\r\n    /**\r\n     * Adds the given relation to defined relations.\r\n     *\r\n     * @return message and its color (red for errors, black for information)\r\n     */\r\n    private addResultRelation = (relation: Relation): void => {\r\n        const name = this.ensureUniqueRelationName(\"Evaluated\");\r\n        const storedRelation = StoredRelation.fromRelation(name, relation, this.state.nullValuesSupport);\r\n        this.state.storedRelations.push(storedRelation);\r\n        this.setState({selectedRelation: this.state.storedRelations.length - 1});\r\n    }\r\n\r\n    /***************************************************** RENDER *****************************************************/\r\n\r\n    public render() {\r\n        let resultSection = null;\r\n        if (this.state.evaluationTreeRoot !== null) {\r\n            resultSection = (\r\n                <ResultSection\r\n                    evaluationTreeRoot={this.state.evaluationTreeRoot}\r\n                    expressionName={this.state.evaluatedExpressionName}\r\n\r\n                    onAddResult={this.addResultRelation}\r\n                    onUnexpectedError={this.reportUnexpectedError}\r\n\r\n                    csvValueSeparator={this.state.csvValueSeparator}\r\n                    darkTheme={this.state.darkTheme}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <main>\r\n                <ManagementSection\r\n                    onBatch={this.handleBatch}\r\n                    onLoadProject={this.handleLoadProject}\r\n                    onSaveProject={this.handleSaveProject}\r\n                    onLoadSample={this.handleLoadSampleProject}\r\n\r\n                    csvValueSeparator={this.state.csvValueSeparator}\r\n                    language={this.state.language}\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                    darkTheme={this.state.darkTheme}\r\n\r\n                    onCsvValueSeparatorChange={this.handleCsvValueSeparatorChange}\r\n                    onLanguageChange={this.handleLanguageChange}\r\n                    onNullValuesSupportChange={this.handleNullValuesSupportChange}\r\n                    onDarkModeChange={this.handleDarkModeChange}\r\n                />\r\n\r\n                <RelationsSection\r\n                    storedRelations={this.state.storedRelations}\r\n                    storedRelationIndex={this.state.selectedRelation}\r\n\r\n                    loadedRelations={[...this.state.loadedRelations.values()]}\r\n\r\n                    onRelationNameChange={this.handleRelationNameChange}\r\n                    onColumnNameChange={this.handleRelationColumnNameChange}\r\n                    onColumnTypeChange={this.handleRelationColumnTypeChange}\r\n                    onRowInputChange={this.handleRelationRowInputChange}\r\n                    onNewRow={this.handleRelationNewRow}\r\n                    onNewColumn={this.handleRelationNewColumn}\r\n                    onDeleteRow={this.handleRelationDeleteRow}\r\n                    onDeleteColumn={this.handleRelationDeleteColumn}\r\n\r\n                    onSelectDifferentRelation={this.handleSelectDifferentRelation}\r\n                    onNewRelation={this.handleCreateNewRelation}\r\n                    onLoadRelation={this.handleLoadRelation}\r\n                    onDeleteStoredRelation={this.handleDeleteRelation}\r\n                    onRevertRelation={this.handleRevertRelation}\r\n\r\n                    onLoadAllRelations={this.handleLoadAllRelations}\r\n                    onDeleteLoadedRelations={this.handleDeleteLoadedRelations}\r\n                    onExportRelations={this.handleExportRelations}\r\n                    onImportRelations={this.handleImportRelations}\r\n\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                />\r\n\r\n                <ExpressionSection\r\n                    ref={this.expressionSectionRef}\r\n\r\n                    expressions={this.state.expressions}\r\n                    currentExpressionIndex={this.state.selectedExpression}\r\n                    relations={this.state.loadedRelations}\r\n\r\n                    onChange={this.handleExprTextChange}\r\n                    onEval={this.handleExprEval}\r\n\r\n                    onSelectDifferentExpression={this.handleSelectDifferentExpression}\r\n                    onNewExpression={this.handleCreateNewExpression}\r\n                    onDeleteExpression={this.handleDeleteExpression}\r\n                    onExportExpressions={this.handleExportExpressions}\r\n                    onImportExpressions={this.handleImportExpressions}\r\n\r\n                    onUnexpectedError={this.reportUnexpectedError}\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                    darkTheme={this.state.darkTheme}\r\n                />\r\n\r\n                {resultSection}\r\n            </main>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport MainScreen from \"./components/mainScreen\";\r\n\r\n/**\r\n * @license The software is Licensed under the MIT License\r\n *\r\n * Copyright (c) Lukáš Kotlík\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\r\n * to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions\r\n * of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\r\n * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n * ********* Used, Licensed third party code: *********\r\n *\r\n * JSZIP - Create, read and edit .zip files with Javascript\r\n * Version: 3.5.0\r\n * https://github.com/Stuk/jszip\r\n * MIT License - Copyright (c) 2009-2016 Stuart Knightley, David Duponchel, Franz Buchinger, António Afonso\r\n *\r\n * visx - visualization components\r\n * visx/group - version: 1.0.0\r\n * visx/hierarchy - version: 1.0.0\r\n * visx/shape - version: 1.4.0\r\n * visx/responsive - version: 1.3.0\r\n * visx/tooltip - version: 1.3.0\r\n * https://github.com/airbnb/visx\r\n * MIT License - Copyright (c) 2017-2018 Harrison Shoff\r\n *\r\n * export-svg-with-styles - Turn your SVGs to PNGs\r\n * Version: 0.0.4\r\n * https://www.npmjs.com/package/export-svg-with-styles\r\n * MIT License - Copyright (c) 2019 Mathew Leland\r\n *\r\n * FileSaver.js - An HTML5 saveAs() FileSaver implementation\r\n * Version: 2.0.5\r\n * https://github.com/eligrey/FileSaver.js\r\n * MIT License - Copyright (c) 2016 Eli Grey\r\n *\r\n * Lodash - A modern JavaScript utility library delivering modularity, performance, & extras.\r\n * Version: 4.17.20\r\n * https://github.com/lodash/lodash\r\n * MIT License - Copyright JS Foundation and other contributors <https://js.foundation/>\r\n * Based on Underscore.js, copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors <http://underscorejs.org/>\r\n * This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/lodash/lodash\r\n *\r\n * React - A declarative, efficient, and flexible JavaScript library for building user interfaces.\r\n * Version: 16.13.1\r\n * https://github.com/facebook/react\r\n * MIT License - Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * Jest - Delightful JavaScript Testing.\r\n * Version: 26.6.0\r\n * https://github.com/facebook/jest\r\n * MIT License - Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * create-react-app - Set up a modern web app by running one command.\r\n * Version: 3.4.1\r\n * https://github.com/facebook/create-react-app\r\n * MIT License - Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * TypeScript - TypeScript is a superset of JavaScript that compiles to clean JavaScript output.\r\n * Version: 3.7.5\r\n * https://github.com/microsoft/TypeScript\r\n * Apache License 2.0\r\n *\r\n * ********* Used, not Licensed, free to use code and services: *********\r\n *\r\n * PostMail - Send email from JavaScript or static HTML without backend code\r\n * https://postmail.invotes.com/\r\n */\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <MainScreen/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}