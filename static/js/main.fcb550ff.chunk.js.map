{"version":3,"sources":["components/tooltipButton.tsx","error/errorWithTextRange.ts","utils/localStorage.ts","language/language.ts","language/en.ts","language/cs.ts","error/raSyntaxError.ts","error/raSemanticError.ts","utils/fontUtils.ts","utils/whisperUtils.ts","components/xTextArea.tsx","utils/math.ts","relation/relation.ts","error/codeError.ts","error/errorFactory.ts","expression/exprTokens.ts","utils/stringUtils.ts","ratree/raTreeNode.ts","ratree/relationNode.ts","types/indexedString.ts","utils/indexedStringUtils.ts","ratree/unaryNode.ts","relation/row.ts","ratree/projectionNode.ts","utils/keywords.ts","types/isToISMap.ts","vetree/comparingOperator.ts","ratree/renameNode.ts","vetree/veTreeNode.ts","vetree/logicalOperator.ts","vetree/computingOperator.ts","vetree/literalValue.ts","vetree/referenceValue.ts","expression/valueTokens.ts","expression/valueParser.ts","ratree/binaryNode.ts","ratree/raTreeTools.ts","ratree/selectionNode.ts","ratree/antijoinNode.ts","ratree/outerJoinNode.ts","ratree/cartesianProductNode.ts","ratree/divisionNode.ts","ratree/naturalJoinNode.ts","ratree/setOperationNode.ts","ratree/thetaJoinNode.ts","ratree/raTreeFactory.ts","expression/exprParser.ts","components/textInput.tsx","components/messageBox.ts","components/expressionSection.tsx","components/resultRelationTable.tsx","components/evaluationTree.tsx","utils/fileDialog.ts","types/csvSupport.ts","types/nnToSMap.ts","relation/storedRelation.ts","relation/columnType.ts","relation/relationStoreManager.ts","components/resultSection.tsx","expression/expressionStoreManager.ts","project/samples.ts","components/managementSection.tsx","project/project.ts","expression/expression.ts","project/projectStoreManager.ts","batch/batchProcessor.ts","utils/dateUtils.ts","components/editRelationTable.tsx","components/relationsSection.tsx","utils/mail.ts","components/mainScreen.tsx","postMailAccessToken.ts","index.tsx","serviceWorker.ts"],"names":["TooltipButton","className","this","props","onClick","style","text","undefined","tooltipClassName","tooltipStyle","event","stopPropagation","preventDefault","tooltip","React","Component","ErrorWithTextRange","msg","range","Error","insertRangeIfUndefined","err","defaultLanguage","defaultDarkTheme","LocalStorage","storageSupported","storedSeparator","localStorage","getItem","console","log","setItem","csvValueSeparator","lan","allSupportedLanguages","includes","language","darkTheme","warn","isInit","init","String","Storage","EN","abbr","relationErrors","emptyColumn","duplicitColumn","keywordColumn","invalidColumn","unsupportedNull","invalidNumber","invalidBoolean","codeErrors","resultSection_nodeIndexNotFound","resultSection_evalError","resultSection_nullRelationToSave","resultSection_nullRelationToAdd","row_absentColumn","valueParser_unexpectedToken","exprParser_unexpectedToken","exprParser_thetaJoinBranchError","exprParser_projectionBranchError","semanticErrors","exprParser_relationNotDefined","binaryNode_commonColumns","setOperationNode_notEqualColumns","divisionNode_rightColumnsNotSubset","divisionNode_rightColumnsNotProperSubset","renameNode_absentOriginalColumn","renameNode_changeToDuplicit","projectionNode_absentColumn","projectionNode_emptyProjection","referenceValue_absentColumn","semanticError","syntaxErrors","exprParser_emptyStringGiven","exprParser_outerJoinWhenNullNotSupported","exprParser_unexpectedPart","exprParser_bothBranchesError","exprParser_invalidExpression","exprParser_invalidParentheses","exprParser_invalidStart","exprParser_invalidEnd","exprParser_relationAfterRelation","exprParser_relationAfterUnary","exprParser_relationAfterClosing","exprParser_unaryAfterBinary","exprParser_unaryAfterOpening","exprParser_binaryAfterBinary","exprParser_binaryAfterOpening","exprParser_openingAfterRelation","exprParser_openingAfterUnary","exprParser_openingAfterClosing","exprParser_closingAfterBinary","exprParser_closingAfterOpening","valueParser_emptyInput","valueParser_unsupportedNull","valueParser_unexpectedPart","valueParser_missingOpeningParenthesis","valueParser_missingClosingParenthesis","valueParser_invalidExpression","valueParser_invalidStart","valueParser_invalidEnd","valueParser_literalAfterLiteral","valueParser_literalAfterReference","valueParser_literalAfterClosing","valueParser_referenceAfterLiteral","valueParser_referenceAfterReference","valueParser_referenceAfterClosing","valueParser_notAfterLiteral","valueParser_notAfterReference","valueParser_notAfterClosing","valueParser_binaryAfterOperator","valueParser_binaryAfterOpening","valueParser_openingAfterLiteral","valueParser_openingAfterReference","valueParser_openingAfterClosing","valueParser_closingAfterOperator","valueParser_closingAfterOpening","stringUtils_missingClosingChar","stringUtils_charNotFound","renameNode_missingArrow","renameNode_invalidNewName","renameNode_keywordNewName","renameNode_multipleRenameOfTheColumn","selectionNode_resultNotBoolean","thetaJoinNode_resultNotBoolean","comparingOperator_differentInputTypes","computingOperator_inputTypesNotNumbers","logicalOperator_leftInputNotBoolean","logicalOperator_rightInputNotBoolean","syntaxError","userMessages","loadedRelationsTotalNo","loadedRelationsTotalSome","loadRelationNew","loadAllRelationsNew","deleteLoadedRelations","relationsExportOK","relationsExportErr","relationsImport","expressionsExportOK","expressionsExportErr","expressionsImport","operations","selection","projection","rename","union","intersection","difference","naturalJoin","cartesianProduct","leftSemiJoin","rightSemiJoin","leftAntijoin","rightAntijoin","thetaJoin","leftThetaSemiJoin","rightThetaSemiJoin","fullOuterJoin","leftOuterJoin","rightOuterJoin","division","managementSection","batchButton","loadButton","saveButton","samplesButton","samplesMenuTitle","settingsButton","settingsNullValues","settingsNullValuesAllowed","settingsNullValuesForbidden","settingsCSVSeparator","settingsCSVSeparatorSemicolon","settingsCSVSeparatorComma","settingsTheme","settingsThemeLight","settingsThemeDark","settingsLanguage","aboutButton","relationSection","relationSectionHeader","loadAllButton","loadAllButtonTooltip","removeLoadedButton","removeLoadedButtonTooltip","importButton","importButtonTooltip","exportButton","exportButtonTooltip","loadButtonTooltip","renameButton","deleteButton","deleteButtonTooltip","revertButton","revertButtonTooltip","expressionSection","expressionSectionHeader","evaluateButton","evaluateButtonTooltip","expressionTextareaPlaceholder","lineComment","blockComment","resultSection","resultSectionHeader","exportEvalTreeButton","exportEvalTreeButtonTooltip","evalTreeTitle","resultRelationTitle","intermediateRelationTitle","addButton","addButtonTooltip","exportRelationButton","exportRelationButtonTooltip","languageMap","Map","lang","get","getLanguage","RASyntaxError","captureStackTrace","name","RASemanticError","computeFontSizeInPx","fontFamily","fontSize","div","document","createElement","setAttribute","innerText","documentElement","appendChild","divWidth","clientWidth","divHeight","clientHeight","remove","fontWidth","length","fontHeight","getStartOfWordBeforeIndex","str","index","prefixText","slice","i","charAt","match","cssConstants","getComputedStyle","querySelector","getPropertyValue","lineHeight","Number","numsBackgroundLight","numsBackgroundDark","numsColorLight","numsColorDark","XTextArea","textarea","start","selectionStart","end","selectionEnd","setSelectionRange","activeElement","id","focus","placeholder","getElementById","table","classList","add","tr","td1","td2","ta","mouseIsDown","value","canvas","width","canvasWidth","canvasLines","whisperDiv","isShown","selectedIndex","changeSelected","indexDiff","setSelected","newIndex","n","m","childElementCount","children","getSelectedWhisper","paintLineNumbers","height","ctx","getContext","fillStyle","fillRect","scrollHeight","font","linesCount","fillText","e","update","lines","updateParentheses","createWhisper","whispers","hideWhisper","innerHTML","forEach","whisper","onclick","ondblclick","insertCurrentSelectedWhisper","notAutoShowWhisper","moveWhisper","cursorLineAndColumn","getPositionLineAndColumn","cursorDistanceFromTATotalTop","line","cursorDistanceFromTATotalLeft","column","yPos","scrollTop","xPos","scrollLeft","getBoundingClientRect","y","window","innerHeight","currWhisper","beforeAdd","afterAdd","newCursorPos","onChange","errorDivs","moveErrors","highlight","startLine","rangeLength","startColumn","x","innerWidth","messageSpan","updateErrors","ranges","pushHighlight","parentElement","push","createHighlightDiv","getLineLength","parentheses","parenthesesDivs","c1","c2","around","filter","p","first","div1","createParenthesesDiv","div2","toggle","moveParentheses","insertPairSymbol","second","before","between","after","checkPairSymbolDelete","prevI","nextI","prev","next","addEventListener","onscroll","onmousedown","setTimeout","onmouseup","onmousemove","oninput","ev","target","onkeydown","key","ctrlKey","cursor","onCtrlInput","errors","prevProps","position","textBeforeCursor","lastNewLine","lastIndexOf","newLinesFound","lineStart","lineEnd","newEvent","MouseEvent","type","dispatchEvent","span","Relation","columns","columnNames","rows","finishedSchema","hasColumn","hasFinishedSchema","set","some","cn","f","row","isEqual","getTypes","finishSchema","finish","r","equals","map","s","join","columnTypes","getOrderedPrintValues","longest","d","pad","ss","padEnd","repeat","other","Set","CodeError","ErrorFactory","params","assertParamsCount","joinStringArrays","expectedCount","a","b","aLen","toConcat","Array","concat","ExprToken","getRange","ParenthesisToken","OpeningParenthesis","ClosingParenthesis","RelationToken","UnaryOperatorToken","BinaryOperatorToken","precedence","precedenceLevelA","precedenceLevelB","StringUtils","split","every","c","isLetter","isNameChar","res","exec","toLowerCase","toUpperCase","isDigit","test","substring","char","digitFound","dotFound","backslashes","curChar","error","escape","depth","inQuotes","nesting","escapeCount","indexOf","charFound","RATreeNode","resultRelation","eval","RelationNode","relation","cursorIndex","result","getName","IndexedString","chars","startIndex","arr","ic","isEmpty","NaN","RangeError","separator","empty","sepLen","strSplit","prefixSum","_start","_end","newFromArray","trimStr","trim","strings","is","searchString","startsWith","endPosition","endsWith","searchValue","replaceValue","replace","IndexedStringUtils","isWord","toString","isName","isWhitespacesOnly","isNumber","strParts","nextWord","nextName","nextNonWhitespacePart","nextNumber","nextQuotedString","getFirstIndex","nextBorderedPart","copy","getChars","inLineComment","blockCommentStart","errStart","skippedStr","skipWhitespacesAndChar","UnaryNode","subtree","Row","types","values","finished","keys","has","orderedColumns","ret","codeError","ProjectionNode","stringRange","projStart","isEvaluated","source","getResult","projectedIndexed","parseProjection","proj","projected","forEachColumn","addColumn","getRows","newRow","getColumns","getValues","addValue","addRow","fakeEval","getColumnNames","absent","strName","printInLine","getOperationSymbol","forbiddenColumnNames","forbiddenRelationNames","isForbiddenColumnName","ComparingOperatorType","ISToISMap","keyValue","delete","clear","size","RenameNode","doThrow","handleError","parts","part","words","w","beforeError","afterError","changes","parseChanges","toChange","newName","returned","duplicit","beforeStr","afterStr","VETreeNode","LogicalOperatorType","ComparingOperator","operator","left","right","equal","nonEqual","less","more","lessOrEqual","moreOrEqual","leftResult","rightResult","ComputingOperatorType","LogicalOperator","and","or","not","LiteralValue","ReferenceValue","columnName","getValue","getType","ComputingOperator","plus","minus","multiplication","ValueToken","OperatorToken","LogicalNotToken","LogicalAndToken","LogicalOrToken","ComputingMultiplicationToken","ComputingDivisionToken","ComputingPlusToken","ComputingMinusToken","ComparingToken","OpeningParentheses","ClosingParentheses","LiteralToken","ReferenceToken","ValueParser","nullValuesSupport","tokens","parseTokens","assertValidInfixTokens","simplify","rpn","toRPN","rpnToVETree","token","rest","i2","token1","token2","notIndexes","indexesToRemove","t","rpnQueue","operatorsStack","pop","curToken","rpnToVETreeRecursive","deduct","multiply","divide","JSON","stringify","BinaryNode","leftSubtree","rightSubtree","depthSearch","root","findIndexInTree","node","getSubtree","leftSearch","getLeftSubtree","getRightSubtree","getTreeDepth","Math","max","isInRangeAndNotInQuotes","len","cursorIndexInStr","insideQuotes","AntijoinType","SelectionNode","boolExpr","parse","bool","newResult","fakeParse","OuterJoinType","AntijoinNode","rowsToKeep","rowsToHelp","leftSource","rightSource","commonColumns","lc","keptRow","helpRow","fakeEvalBinary","CartesianProductNode","leftRow","rightRow","leftColumn","DivisionNode","leftColumns","rightColumns","getSchemaString","resultColumns","getNamesSchemaString","leftRows","rightRows","testRow","lr","entries","NaturalJoinType","OuterJoinNode","full","SetOperationType","NaturalJoinNode","leftSemi","natural","rightSemi","ThetaJoinType","SetOperationNode","typeStr","getOperationName","rr","ThetaJoinNode","condition","bothSourceColumns","booleanResult","sourceColumns","RATreeFactory","unaryClass","expr","binaryClass","ExprParser","relations","deleteAllComments","new","rpnToRATree","innerResult","pushParentheses","getLastIndex","selectionExpected","restStartIndex","recursiveReturn","rightThetaSemijoin","containsAny","leftSemijoin","rightSemijoin","leftThetaSemijoin","indexAt","missing","splice","rpnToRATreeRecursive","createUnary","createBinary","TextInput","inputRef","handleChange","disable","forbidden","setState","buttonDisable","handleKeyDown","state","handleSubmit","current","blur","onSubmit","createRef","ref","spellCheck","autoComplete","onKeyDown","disabled","buttonText","boxMargin","MessageBox","box","visibility","onmouseenter","clearHideTimeout","onmouseleave","setHideTimeout","paragraph","button","hideBox","moveBox","body","firstElementChild","display","hideTimeout","hideIntervalId","clearTimeout","ExpressionSection","textAreaRef","lastChange","lastWhisperAndErrorsUpdate","whispersAndErrorsUpdateRate","updateErrorsAndParentheses","getCurExpr","isNaN","message","evalExpr","tree","expressions","currentExpressionIndex","onEval","errorRanges","er","showError","newExpression","onNewExpression","deleteExpression","onDeleteExpression","exportExpressions","onExportExpressions","importExpressions","onImportExpressions","addSpecialString","shift","getSelection","firstPart","secondPart","newPosition","newStr","handleExprChange","setSelection","onDone","Date","now","handleCtrlInput","updateWhispersAndErrors","textArea","isFocused","fakeParseResult","wordBeforeCursor","helpArray","likelihood","wordStart","wordEnd","sort","help","sortWhispers","handleExprNameChange","onUnexpectedError","handleDragDrop","data","dataTransfer","getData","fromIndex","onDragExpression","sectionClicked","setInterval","setPlaceholder","onSelectDifferentExpression","ops","createButton","createOpButton","buttonGroupMargin","marginRight","handleSelectDifferentExpression","draggable","onDragStart","setData","onDragOver","onDrop","minWidth","marginLeft","padding","ResultRelationTable","getOrderByText","orderDir","orderBy","prevState","snapshot","updateOrderBy","getRowsCount","colSpan","sortCol","aValue","bValue","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","localeCompare","headerRow","createHeaderRow","createRows","EvaluationTree","TreeComponent","raTree","selected","nodeHeight","backgroundColorLight","backgroundColorDark","textColorLight","textColorDark","selectedNodeColorLight","unselectedNodeColorLight","selectedNodeColorDark","unselectedNodeColorDark","TreeNodeComponent","useTooltip","tooltipOpen","showTooltip","hideTooltip","nodeWidth","title","symbol","Group","top","rx","fill","onMouseOver","tooltipLeft","tooltipTop","onMouseOut","dy","textAnchor","pointerEvents","treeDepth","margin","bottom","yMax","xMax","indexes","parseTreeForDisplayHelper","maxNodeTextLength","parseTreeForDisplay","hierarchy","Tree","links","link","LinkVertical","stroke","strokeWidth","strokeOpacity","descendants","FileDialog","accept","Promise","resolve","element","fileInput","firstChild","file","files","reader","FileReader","onload","readAsText","click","openFilesHelper","fileInfo","readFile","splitCSVLine","partStart","NNToSMap","entry","parseKey","StoredRelation","columnCount","rowCount","actual","revertState","toDataObject","recomputeErrors","isStoredRelationData","rel","checkColumnNames","checkRowInput","columnIndex","reduce","agg","rowIndex","input","lower","_","rowInput","addNewColumn","columnType","checkColumnTypes","obj","isArray","o","isSupportedColumnType","RelationStoreManager","openFiles","then","skipped","csvToRelation","createValidName","filename","valueSeparator","zip","JSZip","relationToCsv","generateAsync","content","saveAs","catch","blob","Blob","findValueSeparator","names","getColumnTypes","ResultSection","sectionRef","getCurrentRelation","currentNode","evaluationTreeRoot","handleSelectedNodeChange","exportEvalTreeAsPng","svg","rect","options","expressionName","downloadSVG","exportRelation","save","fromRelation","addRelation","onAddResult","relationType","selectedNode","tableTitle","ExpressionStoreManager","skippedExpressions","loadedFiles","skippedFiles","splitExpressionNameAndText","firstNewLineIndex","firstRow","textContent","samples","project","getSamples","ManagementSection","onBatch","onLoadProject","onSaveProject","samplesMenu","sample","onLoadSample","createSamplesButton","settingsMenu","checked","onNullValuesSupportChange","htmlFor","onCsvValueSeparatorChange","onDarkThemeChange","onLanguageChange","createSettingsButton","href","isProjectObject","isExpression","copyProject","exp","ProjectStoreManager","reject","openFile","BatchProcessor","time","reports","processed","downloadReports","report","timeEnd","processNext","processFile","storedData","storedRelation","fromData","isValid","createRelation","ignored","status","parseRelations","exprParser","exprCount","processExpression","addOperations","counts","reportHeader","formatRelations","sectionLine","parser","evaluationTree","operationsOfTree","contentLine","contentString","zeroOperations","date","total","binaryOperations","unaryOperations","binary","unary","getDate","padStart","getMonth","getFullYear","getHours","getMinutes","setOperation","cartesian","semijoin","antijoin","thetaSemijoin","outerJoin","inlines","format","count","operationOfUnaryNode","operationOfBinaryNode","cellPaddingSides","inputMarginSides","EditRelationTable","containerRef","tableHeadRowRef","columnWidths","handleInputResize","inputElement","scrollWidth","getErrors","setSelectedInput","selectedColumn","selectedRow","moveSelectedInputRight","getColumnCount","moveSelectedInputLeft","moveSelectedInputUp","moveSelectedInputDown","getRowCount","onColumnNameChange","onColumnTypeChange","onRowInputChange","handleNewColumn","onNewColumn","scrollTo","handleNewRow","onNewRow","handleDeleteColumn","onDeleteColumn","handleDeleteRow","onDeleteRow","createInput","autoFocus","createDeleteButton","callback","componentDidUpdate","headRow","cells","cell","rowData","createTooltip","rowSpan","border","createNamesRow","createTypesRow","createAddRow","RelationsSection","getCurRel","storedRelations","storedRelationIndex","handleRelationNameChange","onRelationNameChange","loadRelation","onLoadRelation","loadAllRelations","onLoadAllRelations","exportRelations","onExportRelations","importRelations","onImportRelations","deleteRelation","onDeleteStoredRelation","revertRelation","onRevertRelation","newRelation","onNewRelation","removeLoadedRelations","onRemoveLoadedRelations","createRelationMenuButtons","actuality","isActual","handleSelectDifferentRelation","onDragRelation","onSelectDifferentRelation","sr","getRevertName","Mail","accessToken","subject","data_js","access_token","request","XMLHttpRequest","onreadystatechange","readyState","response","toParams","open","setRequestHeader","send","encodeURIComponent","MainScreen","expressionSectionRef","reportUnexpectedError","postMail","stack","loadedRelations","selectedRelation","selectedExpression","loadProject","evaluatedExpressionName","updateExpressionsErrors","ensureUniqueRelationName","handleBatch","process","handleLoadProject","load","handleSaveProject","handleLoadSampleProject","handleNullValuesSupportChange","setNullValuesSupport","handleCsvValueSeparatorChange","setCsvValueSeparator","handleLanguageChange","setLanguage","handleDarkThemeChange","setDarkTheme","setName","handleRelationColumnNameChange","setColumnName","handleRelationColumnTypeChange","setColumnType","handleRelationRowInputChange","setRowInput","handleRelationNewRow","addNewRow","handleRelationNewColumn","handleRelationDeleteRow","deleteRow","handleRelationDeleteColumn","deleteColumn","handleDragRelation","from","to","moved","fromValue","newArray","handleCreateNewRelation","handleDeleteRelation","handleRevertRelation","revert","handleRemoveLoadedRelations","previous","setActual","handleExportRelations","handleImportRelations","info","countBefore","handleLoadRelation","currRelation","msgPart2","handleLoadAllRelations","loaded","handleExprEval","handleExprTextChange","handleDragExpression","handleCreateNewExpression","handleDeleteExpression","handleExportExpressions","handleImportExpressions","addResultRelation","getDarkTheme","getCsvValueSeparator","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":";+XA6DaA,G,MAAb,uKAGQ,OACI,4BACIC,UAAWC,KAAKC,MAAMF,UACtBG,QAASF,KAAKC,MAAMC,QACpBC,MAAOH,KAAKC,MAAME,OAChBH,KAAKC,MAAMG,KACb,0BACIL,UAAW,iBAA8CM,IAAhCL,KAAKC,MAAMK,iBAAiCN,KAAKC,MAAMK,iBAAmB,IACnGH,MAAOH,KAAKC,MAAMM,aAClBL,QAAS,SAAAM,GACLA,EAAMC,kBACND,EAAME,mBAEZV,KAAKC,MAAMU,cAhB7B,GAAmCC,IAAMC,Y,gBCrD5BC,EAAb,kDAMI,WAAYC,EAAoBC,GAAmC,IAAD,8BAC9D,cAAMD,IADsBC,QAAkC,EANtE,sBAAwCC,QAoBjC,SAASC,EAA0BC,EAAQH,GAI9C,OAHIG,aAAeL,QAAoCT,IAAdc,EAAIH,QACzCG,EAAIH,MAAQA,GAETG,EC7BX,IACMC,EAAqC,KACrCC,EAA2B,QASpBC,EAAb,oGAcQ,GAAIA,EAAaC,iBAAkB,CAC/B,IAAMC,EAAkBC,aAAaC,QAAQ,qBACrB,MAApBF,GAA+C,MAApBA,GAC3BG,QAAQC,IAAI,kEACZH,aAAaI,QAAQ,oBA7Be,KA8BpCP,EAAaQ,kBA9BuB,KAkCpCR,EAAaQ,kBAAoBL,aAAaC,QAAQ,qBCiNlCK,ED/MCN,aAAaC,QAAQ,YCgN/CM,EAAsBC,SAASF,GDzM1BT,EAAaY,SAAWT,aAAaC,QAAQ,aAN7CC,QAAQC,IAAI,yDACZH,aAAaI,QAAQ,WAAYT,GACjCE,EAAaY,SAAWd,GAOc,SAAtCK,aAAaC,QAAQ,cAAiE,UAAtCD,aAAaC,QAAQ,cACrEC,QAAQC,IAAI,0DACZH,aAAaI,QAAQ,YAAaR,GAClCC,EAAaa,UAAYd,GAIzBC,EAAaa,UAAYV,aAAaC,QAAQ,kBAIlDC,QAAQS,KAAK,mEACbd,EAAaQ,kBA1D2B,IA2DxCR,EAAaY,SAAWd,EACxBE,EAAaa,UAAYd,ECuL9B,IAA6BU,EDrL5BT,EAAae,QAAS,IAnD9B,6CAgEQ,OAHKf,EAAae,QACdf,EAAagB,OAEVhB,EAAaQ,oBAhE5B,2CAyEuCA,GAC/BR,EAAaQ,kBAAoBA,EAC7BR,EAAaC,kBACbE,aAAaI,QAAQ,oBAAqBC,KA5EtD,oCA0FQ,OAHKR,EAAae,QACdf,EAAagB,OAEVhB,EAAaY,WA1F5B,kCAmG8BA,GACtBZ,EAAaY,SAAWA,EACpBZ,EAAaC,kBACbE,aAAaI,QAAQ,WAAYK,KAtG7C,qCAoHQ,OAHKZ,EAAae,QACdf,EAAagB,OAEiB,SAA3BhB,EAAaa,YApH5B,mCA6H+BA,GACvBb,EAAaa,UAAYI,OAAOJ,GAC5Bb,EAAaC,kBACbE,aAAaI,QAAQ,YAAaU,OAAOJ,QAhIrD,KAAab,EAEMe,QAAkB,EAFxBf,EAGMC,iBAAgD,qBAAbiB,QAHzClB,EAKMQ,uB,EALNR,EAMMY,c,EANNZ,EAOMa,e,EEbnB,IAmHaM,EAAkB,CAC3BC,KAAM,KAENC,eAAgB,CACZC,YAAa,8BACbC,eAAgB,uBAChBC,cAAe,kCACfC,cAAe,sCAEfC,gBAAiB,gCACjBC,cAAe,+BACfC,eAAgB,iCAGpBC,WAjIkC,CAClCC,gCACI,CAAC,+FACLC,wBACI,CAAC,yEAAsF,KAC3FC,iCACI,CAAC,wFACLC,gCACI,CAAC,sFAELC,iBACI,CAAC,gCAA8C,sCAAoD,KAEvGC,4BACI,CAAC,uDAAoE,KAEzEC,2BACI,CAAC,iDAA8D,KACnEC,gCACI,CAAC,iEAA8E,KACnFC,iCACI,CAAC,iEAA8E,MA8GnFC,eAxG0C,CAC1CC,8BAA+B,CAAC,aAA8B,qDAE9DC,yBAA0B,CAAC,wBAAwC,yBAAyC,MAC5GC,iCACI,CAAC,qBAAkC,UAAyB,aAA+B,sCAC/FC,mCACI,CAAC,+BAA8C,uDAAuE,MAC1HC,yCACI,CAAC,+BAA8C,8DAClC,4GACjBC,gCAAiC,CAAC,qCAAoD,4CACtFC,4BAA6B,CAAC,8CAA6D,2CAC3FC,4BAA6B,CAAC,qCAAoD,gDAClFC,+BAAgC,CAAC,qDAEjCC,4BAA6B,CAAC,WAA0B,0CAA0D,MAyFlHC,cAAe,mBAEfC,aArFsC,CACtCC,4BAA6B,CAAC,oDAC9BC,yCAA0C,CAAC,SAA2B,wCACtEC,0BAA2B,CAAC,oBAAiC,uBAC7DC,6BAA8B,CAAC,oCAAiD,mCAChE,kCAA+C,IAC/DC,6BAA8B,CAAC,8DAC/BC,8BAA+B,CAAC,uDAChCC,wBAAyB,CAAC,mDAAgE,KAC1FC,sBAAuB,CAAC,iDAA4D,KACpFC,iCAAkC,CAAC,aAA8B,qBAAsC,MACvGC,8BAA+B,CAAC,aAA8B,2BAA0C,MACxGC,gCAAiC,CAAC,aAA8B,gCAChEC,4BAA6B,CAAC,mBAAiC,4BAA4C,MAC3GC,6BAA8B,CAAC,mBAAiC,gCAChEC,6BAA8B,CAAC,oBAAkC,4BAA4C,MAC7GC,8BAA+B,CAAC,oBAAmC,gCACnEC,gCAAiC,CAAC,uCAAwD,MAC1FC,6BAA8B,CAAC,6CAA2D,MAC1FC,+BAAgC,CAAC,kDACjCC,8BAA+B,CAAC,8CAA6D,MAC7FC,+BAAgC,CAAC,kDAEjCC,uBAAwB,CAAC,sCACzBC,4BAA6B,CAAC,0DAC9BC,2BAA4B,CAAC,oBAAiC,wBAC9DC,sCAAuC,CAAC,qDACxCC,sCAAuC,CAAC,qDACxCC,8BAA+B,CAAC,2CAChCC,yBAA0B,CAAC,iCAA+C,MAC1EC,uBAAwB,CAAC,+BAA2C,MACpEC,gCAAiC,CAAC,YAA4B,oBAAqC,MACnGC,kCAAmC,CAAC,YAA4B,gCAAgD,MAChHC,gCAAiC,CAAC,YAA4B,gCAC9DC,kCAAmC,CAAC,wBAAuC,oBAAqC,MAChHC,oCAAqC,CAAC,wBAAuC,gCAAgD,MAC7HC,kCAAmC,CAAC,wBAAuC,gCAC3EC,4BAA6B,CAAC,yBAAqC,oBAAqC,MACxGC,8BAA+B,CAAC,yBAAqC,gCAAgD,MACrHC,4BAA6B,CAAC,yBAAqC,gCACnEC,gCAAiC,CAAC,oBAAmC,4BAA4C,MACjHC,+BAAgC,CAAC,oBAAmC,gCACpEC,gCAAiC,CAAC,sCAAsD,MACxFC,kCAAmC,CAAC,kDAAiE,MACrGC,gCAAiC,CAAC,kDAClCC,iCAAkC,CAAC,8CAA6D,MAChGC,gCAAiC,CAAC,kDAElCC,+BAAgC,CAAC,YAAgC,oBAAwC,MACzGC,yBAA0B,CAAC,aAA0B,gBAErDC,wBAAyB,CAAC,sFAC1BC,0BAA2B,CAAC,gCACxB,mHACJC,0BAA2B,CAAC,gCAA6C,2CACzEC,qCAAsC,CAAC,yCAAsD,MAE7FC,+BAAgC,CAAC,qCAAsD,gCAA4C,KACnIC,+BAAgC,CAAC,sCAAuD,gCAA4C,KAEpIC,sCAAuC,CAAC,eAAgC,2BAAwC,QAAoB,KACpIC,uCAAwC,CAAC,eAAgC,oCAAiD,QAAoB,KAC9IC,oCAAqC,CAAC,8BAA+C,2BAAwC,KAC7HC,qCAAsC,CAAC,+BAAgD,2BAAwC,MAuB/HC,YAAa,iBAEbC,aAAc,CACVC,uBAAwB,wDACxBC,yBAA0B,oCAC1BC,gBAAiB,kCACjBC,oBAAqB,CAAwB,qCAA8D,wBAC3GC,sBAAuB,sBAEvBC,kBAAmB,mBACnBC,mBAAoB,4BACpBC,gBAAiB,CAAwB,sBAA+C,mBAExFC,oBAAqB,qBACrBC,qBAAsB,8BACtBC,kBAAmB,CAA6B,4BAAmD,WAC/D,yBAAwD,qBAGhGC,WAAY,CACRC,UAAW,YACXC,WAAY,aACZC,OAAQ,SACRC,MAAO,QACPC,aAAc,eACdC,WAAY,aACZC,YAAa,eACbC,iBAAkB,oBAClBC,aAAc,gBACdC,cAAe,iBACfC,aAAc,gBACdC,cAAe,iBACfC,UAAW,aACXC,kBAAmB,sBACnBC,mBAAoB,uBACpBC,cAAe,kBACfC,cAAe,kBACfC,eAAgB,mBAChBC,SAAU,YAGdC,kBAAmB,CACfC,YAAa,QACbC,WAAY,OACZC,WAAY,OACZC,cAAe,UACfC,iBAAkB,kBAClBC,eAAgB,WAChBC,mBAAoB,cACpBC,0BAA2B,UAC3BC,4BAA6B,YAC7BC,qBAAsB,gBACtBC,8BAA+B,YAC/BC,0BAA2B,QAC3BC,cAAe,QACfC,mBAAoB,QACpBC,kBAAmB,OACnBC,iBAAkB,WAClBC,YAAa,SAGjBC,gBAAiB,CACbC,sBAAuB,YACvBC,cAAe,WACfC,qBAAsB,gDACtBC,mBAAoB,gBACpBC,0BAA2B,6CAC3BC,aAAc,SACdC,oBAAqB,gCACrBC,aAAc,SACdC,oBAAqB,sCACrBzB,WAAY,OACZ0B,kBAAmB,mDACnBC,aAAc,SACdC,aAAc,SACdC,oBAAqB,gCACrBC,aAAc,SACdC,oBAAqB,0DAGzBC,kBAAmB,CACfC,wBAAyB,cAEzBX,aAAc,SACdC,oBAAqB,mCACrBC,aAAc,SACdC,oBAAqB,8BAErBS,eAAgB,WAChBC,sBAAuB,oCACvBR,aAAc,SACdC,aAAc,SACdC,oBAAqB,kCAErBO,8BAA+B,8CAE/BC,YAAa,eACbC,aAAc,iBAGlBC,cAAe,CACXC,oBAAqB,SAErBC,qBAAsB,SACtBC,4BAA6B,wCAC7BC,cAAe,qBAEfC,oBAAqB,kBACrBC,0BAA2B,wBAC3BC,UAAW,MACXC,iBAAkB,kDAClBC,qBAAsB,SACtBC,4BAA6B,0CDlOxBtL,EAAwE,CAAC,KAAM,MA6MtFuL,EAAmD,IAAIC,IAAoC,CAC7F,CAAC,KAAM/K,GACP,CAAC,KE7I0B,CAC3BC,KAAM,KAENC,eAAgB,CACZC,YAAa,yDACbC,eAAgB,iCAChBC,cAAe,oEACfC,cAAe,yCAEfC,gBAAiB,sCACjBC,cAAe,kDACfC,eAAgB,6CAGpBC,WAAYV,EAAGU,WAEfU,eAvG0C,CAC1CC,8BAA+B,CAAC,WAAa,6DAE7CC,yBAA0B,CAAC,yBAAuB,sCAA6B,MAC/EC,iCAAkC,CAAC,sBAAqB,QAAW,SAAW,+CAC9EC,mCACI,CAAC,yCAAkC,qEAAuD,MAC9FC,yCACI,CAAC,yCAAkC,gFACnC,wFACJC,gCAAiC,CAAC,mDAAuC,sCACzEC,4BAA6B,CAAC,oEAAkD,sDAChFC,4BAA6B,CAAC,mCAAkC,qDAChEC,+BAAgC,CAAC,4FAEjCC,4BAA6B,CAAC,YAAc,0CAAyC,MAyFrFC,cAAe,2BAEfC,aArFsC,CACtCC,4BAA6B,CAAC,gEAC9BC,yCAA0C,CAAC,YAAa,0DACxDC,0BAA2B,CAAC,kCAAoB,qBAChDC,6BAA8B,CAAC,qDAA0C,uCACrE,8CAAoC,IACxCC,6BAA8B,CAAC,0EAC/BC,8BAA+B,CAAC,iDAChCC,wBAAyB,CAAC,mDAA+B,KACzDC,sBAAuB,CAAC,+CAA8B,KACtDC,iCAAkC,CAAC,WAAa,gBAAmB,MACnEC,8BAA+B,CAAC,WAAa,oCAA8B,MAC3EC,gCAAiC,CAAC,WAAa,oCAC/CC,4BAA6B,CAAC,6BAAsB,qCAA+B,MACnFC,6BAA8B,CAAC,6BAAsB,oCACrDC,6BAA8B,CAAC,8BAAuB,qCAA+B,MACrFC,8BAA+B,CAAC,8BAAuB,oCACvDC,gCAAiC,CAAC,yCAAkC,MACpEC,6BAA8B,CAAC,6DAA6C,MAC5EC,+BAAgC,CAAC,6DACjCC,8BAA+B,CAAC,8DAA8C,MAC9EC,+BAAgC,CAAC,6DAEjCC,uBAAwB,CAAC,6EACzBC,4BAA6B,CAAC,iFAC9BC,2BAA4B,CAAC,kCAAoB,mBACjDC,sCAAuC,CAAC,iEACxCC,sCAAuC,CAAC,iEACxCC,8BAA+B,CAAC,yCAChCC,yBAA0B,CAAC,iDAA8B,MACzDC,uBAAwB,CAAC,6CAA6B,MACtDC,gCAAiC,CAAC,cAAgB,wBAAsB,MACxEC,kCAAmC,CAAC,cAAgB,2BAA8B,MAClFC,gCAAiC,CAAC,cAAgB,oCAClDC,kCAAmC,CAAC,sBAAwB,wBAAsB,MAClFC,oCAAqC,CAAC,sBAAwB,2BAA8B,MAC5FC,kCAAmC,CAAC,sBAAwB,oCAC5DC,4BAA6B,CAAC,sBAAqB,wBAAsB,MACzEC,8BAA+B,CAAC,sBAAqB,2BAA8B,MACnFC,4BAA6B,CAAC,sBAAqB,oCACnDC,gCAAiC,CAAC,8BAAuB,qCAA+B,MACxFC,+BAAgC,CAAC,8BAAuB,oCACxDC,gCAAiC,CAAC,iDAAqC,MACvEC,kCAAmC,CAAC,oDAA6C,MACjFC,gCAAiC,CAAC,6DAClCC,iCAAkC,CAAC,8DAA8C,MACjFC,gCAAiC,CAAC,6DAElCC,+BAAgC,CAAC,yBAAe,sBAAiB,MACjEC,yBAA0B,CAAC,8BAAqB,gBAEhDC,wBAAyB,CAAC,sIAC1BC,0BAA2B,CAAC,yCACxB,8JACJC,0BAA2B,CAAC,yCAA6B,yEACzDC,qCAAsC,CAAC,yDAAuC,MAE9EC,+BAAgC,CAAC,qCAAgC,yBAAuB,KACxFC,+BAAgC,CAAC,yCAAoC,yBAAuB,KAE5FC,sCAAuC,CAAC,eAAiB,mCAA+B,MAAO,KAC/FC,uCAAwC,CAAC,eAAiB,+BAAyB,MAAO,KAC1FC,oCAAqC,CAAC,4CAAqC,0BAAyB,KACpGC,qCAAsC,CAAC,6CAAsC,0BAAyB,MAuBtGC,YAAa,yBAEbC,aAAc,CACVC,uBAAwB,gEACxBC,yBAA0B,kDAC1BC,gBAAiB,iCACjBC,oBAAqB,CAAwB,sCAAyD,+CACtGC,sBAAuB,0BAEvBC,kBAAmB,uBACnBC,mBAAoB,sCACpBC,gBAAiB,CAAC,0BAAqB,uCAEvCC,oBAAqB,qCACrBC,qBAAsB,2CACtBC,kBAAmB,CAA6B,gCAA4C,kBACpD,yCAAsD,yCAGlGC,WAAY,CACRC,UAAW,UACXC,WAAY,WACZC,OAAQ,0BACRC,MAAO,gBACPC,aAAc,cACdC,WAAY,YACZC,YAAa,+BACbC,iBAAkB,8BAClBC,aAAc,qCACdC,cAAe,sCACfC,aAAc,mBACdC,cAAe,oBACfC,UAAW,mBACXC,kBAAmB,2BACnBC,mBAAoB,4BACpBC,cAAe,yCACfC,cAAe,yCACfC,eAAgB,0CAChBC,SAAU,kBAGdC,kBAAmB,CACfC,YAAa,QACbC,WAAY,YACZC,WAAY,cACZC,cAAe,YACfC,iBAAkB,yCAClBC,eAAgB,eAChBC,mBAAoB,eACpBC,0BAA2B,WAC3BC,4BAA6B,iBAC7BC,qBAAsB,0BACtBC,8BAA+B,mBAC/BC,0BAA2B,gBAC3BC,cAAe,aACfC,mBAAoB,iBACpBC,kBAAmB,WACnBC,iBAAkB,QAClBC,YAAa,cAGjBC,gBAAiB,CACbC,sBAAuB,SACvBC,cAAe,yBACfC,qBAAsB,uDACtBC,mBAAoB,qBACpBC,0BAA2B,oDAC3BC,aAAc,SACdC,oBAAqB,yCACrBC,aAAc,SACdC,oBAAqB,gDACrBzB,WAAY,YACZ0B,kBAAmB,6BACnBC,aAAc,mBACdC,aAAc,YACdC,oBAAqB,8BACrBC,aAAc,UACdC,oBAAqB,wDAGzBC,kBAAmB,CACfC,wBAAyB,YAEzBX,aAAc,SACdC,oBAAqB,uCACrBC,aAAc,SACdC,oBAAqB,iCAErBS,eAAgB,aAChBC,sBAAuB,mDACvBR,aAAc,mBACdC,aAAc,YACdC,oBAAqB,kDAErBO,8BAA+B,yDAE/BC,YAAa,sCACbC,aAAc,+BAGlBC,cAAe,CACXC,oBAAqB,cAErBC,qBAAsB,SACtBC,4BAA6B,wDAC7BC,cAAe,8BAEfC,oBAAqB,wBACrBC,0BAA2B,4BAC3BC,UAAW,cACXC,iBAAkB,kDAClBC,qBAAsB,SACtBC,4BAA6B,4CF6B9B,SAASpL,IACZ,IAAMuL,EAAOF,EAAYG,IAAIpM,EAAaqM,eAC1C,YAAatN,IAAToN,EACOhL,EAEJgL,EG5HJ,IAAMG,EAAb,kDAQI,WAAY7M,EAAaC,GAAkC,IAAD,6BACtD,cAAMkB,IAAWgG,YAAcnH,EAAKC,GAChCC,MAAM4M,mBACN5M,MAAM4M,kBAAN,eAA8BD,GAElC,EAAKE,KAAO,gBAL0C,EAR9D,UAAmChN,GC/FtBiN,EAAb,kDAQI,WAAYhN,EAAaC,GAAkC,IAAD,6BACtD,cAAMkB,IAAWsC,cAAgBzD,EAAKC,GAClCC,MAAM4M,mBACN5M,MAAM4M,kBAAN,eAA8BE,GAElC,EAAKD,KAAO,kBAL0C,EAR9D,UAAqChN,G,MCjC9B,SAASkN,EAAoBC,EAAoBC,GACpD,IAAM9N,EAAe,uFACf+N,EAAMC,SAASC,cAAc,OACnCF,EAAIG,aAAa,QAAjB,uBAA0CL,EAA1C,wBAAoEC,EAApE,+CACAC,EAAII,UAAYnO,EAChBgO,SAASI,gBAAgBC,YAAYN,GACrC,IAAMO,EAAmBP,EAAIQ,YACvBC,EAAoBT,EAAIU,aAE9B,OADAV,EAAIW,SACG,CAAEC,UAAWL,EAAWtO,EAAK4O,OAAQC,WAAYL,GCTrD,SAASM,EAA0BC,EAAaC,GAGnD,IAFA,IAAMC,EAAqBF,EAAIG,MAAM,EAAGF,GACpCG,EAAYF,EAAWL,OAAS,IACvB,CAET,IAAKK,EAAWG,OAAOD,GAAGE,MAAM,MAAO,GACjCF,EACF,MAEJ,GAAU,IAANA,EACA,QAEFA,EAEN,OAAOA,EC+MX,IAAMG,EAAoCC,iBAAiBvB,SAASwB,cAAc,UAE5E1B,EAAmBwB,EAAaG,iBAAiB,0BACjD5B,EAAqByB,EAAaG,iBAAiB,4BAClDd,EAAaf,EAAoBC,EAAYC,GAA7Ca,UACDe,EAAqBC,OAAOL,EAAaG,iBAAiB,6BAC1DG,EAA8BN,EAAaG,iBAAiB,mBAC5DI,EAA6BP,EAAaG,iBAAiB,kBAC3DK,EAAyBR,EAAaG,iBAAiB,sBACvDM,EAAwBT,EAAaG,iBAAiB,qBAU/CO,EAAb,4MAEYC,cAFZ,+DAUQ,MAAO,CAACC,MAAOtQ,KAAKqQ,SAASE,eAAgBC,IAAKxQ,KAAKqQ,SAASI,gBAVxE,mCAoBwBH,EAAeE,GAC/BxQ,KAAKqQ,SAASK,kBAAkBJ,EAAOE,GAAYF,KArB3D,kCA8BQ,OAAkC,OAA3BlC,SAASuC,eAA0BvC,SAASuC,cAAcC,KAAO5Q,KAAKC,MAAM2Q,GAAK,QA9BhG,8BAsCQ5Q,KAAKqQ,SAASQ,UAtCtB,qCA8C0BC,GAClB9Q,KAAKqQ,SAASS,YAAcA,IA/CpC,0CAqDyB,IAAD,OACV7Q,EAAkCD,KAAKC,MAEvCkO,EAAsBC,SAAS2C,eAAe9Q,EAAM2Q,IAGpDI,EAAQ5C,SAASC,cAAc,SACrC2C,EAAM1C,aAAa,cAAc,KACjC0C,EAAM1C,aAAa,cAAc,KACjC0C,EAAMC,UAAUC,IAAI,oBACpB,IAAMC,EAAK/C,SAASC,cAAc,MAC5B+C,EAAMhD,SAASC,cAAc,MACnC+C,EAAI9C,aAAa,KAAMrO,EAAM2Q,GAAK,QAClCQ,EAAIH,UAAUC,IAAI,wBAClB,IAAMG,EAAMjD,SAASC,cAAc,MACnCgD,EAAIJ,UAAUC,IAAI,wBAClBC,EAAG1C,YAAY2C,GACfD,EAAG1C,YAAY4C,GACfL,EAAMvC,YAAY0C,GAIlB,IAAMG,EAA2BlD,SAASC,cAAc,YACxDiD,EAAGhD,aAAa,KAAMrO,EAAM2Q,GAAK,OACjCU,EAAGhD,aAAa,aAAc,SAC9BgD,EAAGC,aAAc,EACjBD,EAAGhD,aAAa,cAAetO,KAAKC,MAAM6Q,aAC1CQ,EAAGL,UAAUC,IAAI,aAAc,uBAC/BI,EAAGE,MAAQvR,EAAMG,KAGjB,IAAMqR,EAASrD,SAASC,cAAc,UACtCoD,EAAOC,MAAQC,GACfF,EAAOR,UAAUC,IAAI,qBACrBI,EAAGM,YAAcH,EACjBL,EAAI3C,YAAYgD,GAChBJ,EAAI5C,YAAY6C,GAChBnD,EAAIM,YAAYuC,GAIhB,IAAMa,EAAyBzD,SAASC,cAAc,OACtDwD,EAAWZ,UAAUC,IAAI,eACzBW,EAAWC,SAAU,EACrBD,EAAWE,eAAiB,EAC5BF,EAAWG,eAAiB,SAAUC,GAClCjS,KAAKkS,YAAYlS,KAAK+R,cAAgBE,IAE1CJ,EAAWK,YAAc,SAAUC,GCrVpC,IAAaC,EAAWC,EDsVfrS,KAAKsS,kBAAoB,IAErBtS,KAAK+R,eAAiB,GAAK/R,KAAK+R,cAAgB/R,KAAKsS,mBACrDtS,KAAKuS,SAASvS,KAAK+R,eAAed,UAAUnC,OAAO,oBAGvD9O,KAAK+R,eC5VDK,ED4VqBD,EC5VVE,ED4VoBrS,KAAKsS,mBC3V3CF,EAAIC,EAAKA,GAAKA,GD6VXrS,KAAKuS,SAASvS,KAAK+R,eAAed,UAAUC,IAAI,sBAGxDW,EAAWW,mBAAqB,WAC5B,GAAIxS,KAAK+R,eAAiB,GAAK/R,KAAKsS,kBAAoB,EAEpD,OAAOtS,KAAKuS,SAASvS,KAAK+R,eAAexD,WAIjD+C,EAAGO,WAAaA,EAChBR,EAAI5C,YAAYoD,GAIhBP,EAAGmB,iBAAmB,SAAStQ,GAC3B,IACI,IAAMsP,EAASzR,KAAK4R,YAChBH,EAAOiB,SAAW1S,KAAK6O,eACvB4C,EAAOiB,OAAS1S,KAAK6O,cAGzB,IAAM8D,EAAgClB,EAAOmB,WAAW,MACxDD,EAAIE,UAAY1Q,EAAY8N,EAAqBD,EACjD2C,EAAIG,SAAS,EAAG,EAAGnB,GAAiB3R,KAAK+S,aAAe,GACxDJ,EAAIE,UAAY1Q,EAAYgO,EAAgBD,EAC5CyC,EAAIK,KAAO9E,EAAW,IAAMD,EAC5B,IAAK,IAAIsB,EAAI,EAAGA,EAAIvP,KAAKiT,WAAY1D,IAAK,CACtC,IAAMnP,EAAO,IAAMmP,EAAI,GACvBoD,EAAIO,SAAS9S,EApJL,GAoJuC,EAAdA,EAAK4O,OAAa,GAAMO,EAAIO,IAGrE,MAAMqD,GACFxR,QAAQC,IAAI,qCAAuCuR,KAI3D7B,EAAG8B,OAAS,SAAU5B,EAAerP,GACjCnC,KAAKwR,MAAQA,EAGb,IADA,IAAI6B,EAAgB,EACX9D,EAAI,EAAGA,EAAIiC,EAAMxC,SAAUO,EACR,OAApBiC,EAAMhC,OAAOD,MACX8D,EAGVrT,KAAKiT,WAAaI,EAElBrT,KAAKG,MAAMuS,OAAUW,EAAQvD,EAAa,EAAK,KAE3C9P,KAAK+S,aAAe/S,KAAK6O,eACzB7O,KAAKG,MAAMuS,OAAU1S,KAAK+S,aAAejD,EAAa,GAAM,MAEhE9P,KAAKyS,iBAAiBtQ,GACtBnC,KAAKsT,qBAGThC,EAAGiC,cAAgB,SAAUC,GAA2B,IAAD,OAC3B,IAApBA,EAASxE,OACThP,KAAKyT,eAGLzT,KAAK6R,WAAW6B,UAAY,GAC5BF,EAASG,SAAQ,SAACC,EAASrE,GACvB,IAAMpB,EAAMC,SAASC,cAAc,OACnCF,EAAIuF,UAAYE,EAChBzF,EAAI0F,QAAU,SAAArT,GACV,EAAKqQ,QACL,EAAKgB,WAAWK,YAAY3C,GAC5B/O,EAAMC,mBAEV0N,EAAI2F,WAAa,SAAAtT,GACb,EAAKqQ,QACL,EAAKkD,+BACL,EAAKC,oBAAqB,EAC1BxT,EAAMC,mBAEV,EAAKoR,WAAWpD,YAAYN,MAGhCnO,KAAK6R,WAAWK,YAAY,GAE5BlS,KAAK6R,WAAWC,SAAU,EAE1B9R,KAAKiU,gBAIb3C,EAAG2C,YAAc,WAEb,GAAIjU,KAAK6R,WAAWC,QAAS,CAEzB,IAAMoC,EAAsBC,EAAyBnU,KAAKwR,MAAOxR,KAAKyQ,cAEhE2D,GAAwCF,EAAoBG,KAAO,GAAKvE,EACxEwE,EAAwCJ,EAAoBK,OAASxF,EACrEyF,EAAeJ,EAA+BpU,KAAKyU,UACnDC,EAAeJ,EAAgCtU,KAAK2U,WAAa,EAEnE,GAAKH,GAAQA,EAAOxU,KAAK6O,cAAgB,GAAK6F,GAAQA,EAAO1U,KAAK2O,YAE9D3O,KAAK4U,wBAAwBC,EAAIL,GAAQM,OAAOC,YAAc,EAC9D/U,KAAK6R,WAAWvD,aAAa,QAA7B,+BAA8DkG,EAAO,EAArE,qBAAmFE,EAAnF,QAIA1U,KAAK6R,WAAWvD,aAAa,QAA7B,kCAC+BtO,KAAK4U,wBAAwBlC,OAAS8B,EAAO1E,EAD5E,qBACmG4E,EADnG,QAMJ1U,KAAK6R,WAAWvD,aAAa,QAA7B,oBAKZgD,EAAGmC,YAAc,WAEbzT,KAAK6R,WAAWvD,aAAa,QAAS,kBACtCtO,KAAK6R,WAAWC,SAAU,GAG9BR,EAAGyC,6BAA+B,WAC9B,IAAMiB,EAAkChV,KAAK6R,WAAWW,qBACxD,QAAoBnS,IAAhB2U,EAA2B,CAC3B,IAAMzF,EAAYL,EAA0BlP,KAAKwR,MAAOxR,KAAKyQ,cACvDwE,EAAoBjV,KAAKwR,MAAMlC,MAAM,EAAGC,GACxC2F,EAAmBlV,KAAKwR,MAAMlC,MAAMtP,KAAKyQ,cACzC0E,EAAuB5F,EAAIyF,EAAYhG,OAC7C/O,EAAMmV,SAASH,EAAYD,EAAcE,EAAUC,GACnDnV,KAAK0Q,kBAAkByE,EAAcA,GACrCnV,KAAKyT,gBAIbnC,EAAG0C,oBAAqB,EAGxB1C,EAAG+D,UAAY,GAEf/D,EAAGgE,WAAa,WAAa,IAAD,OACxBtV,KAAKqV,UAAU1B,SAAQ,SAAA4B,GAEnB,IAAMf,GAAgBe,EAAUC,UAAY,GAAK1F,EAAa,EAAI,EAAK2E,UAEvE,GAAI,EAAID,GAAQA,EAAO,EAAK3F,aAAc,CACtC,IAAI6C,EAAgB6D,EAAUE,YAAc1G,EACxC2F,EAAea,EAAUG,YAAc3G,EAAY,EAAI,EAAK4F,WAE5DD,EAAO,EAAK/F,aAAe+F,EAAOhD,EAAQ,EAC1C6D,EAAUjH,aAAa,QAAvB,mBAIIoG,EAAO,IACPhD,GAASgD,EAAO,EAChBA,EAAO,GAGPA,EAAOhD,EAAQ,EAAK/C,cACpB+C,EAAQ,EAAK/C,YAAc+F,GAG3B,EAAKE,wBAAwBe,EAAIjB,GAAQI,OAAOc,WAAa,GAC7DL,EAAUM,YAAYvH,aAAa,QAAnC,4BAEJiH,EAAUjH,aAAa,QAAvB,+BAAwDkG,EAAxD,qBAAyEE,EAAzE,sBAA2FhD,EAA3F,aAKJ6D,EAAUjH,aAAa,QAAvB,sBAKZgD,EAAGwE,aAAe,SAAUC,GAAyB,IAAD,OAEhD/V,KAAKqV,UAAU1B,SAAQ,SAAA4B,GACnBA,EAAUzG,YAEd9O,KAAKqV,UAAY,GAGjB,IAAMW,EAAgB,SAACT,GAEnB,EAAKU,cAAcxH,YAAY8G,GAC/B,EAAKF,UAAUa,KAAKX,IAGxBQ,EAAOpC,SAAQ,SAAA3S,GAEX,IAAMsP,EAAQ6D,EAAyB,EAAK3C,MAAOxQ,EAAMsP,OACnDE,EAAM2D,EAAyB,EAAK3C,MAAOxQ,EAAMwP,KAEvD,GAAIF,EAAM+D,OAAS7D,EAAI6D,KACnB2B,EAAcG,EAAmB7F,EAAM+D,KAAM/D,EAAMiE,OAAQ/D,EAAI+D,OAASjE,EAAMiE,OAC1EvT,EAAMD,IAAK,QAGd,CAEDiV,EAAcG,EAAmB7F,EAAM+D,KAAM/D,EAAMiE,OAC/C6B,EAAc,EAAK5E,MAAOlB,EAAM+D,MAAQ/D,EAAMiE,OAAQvT,EAAMD,IAAK,IAErE,IAAK,IAAIsT,EAAO/D,EAAM+D,KAAO,EAAGA,EAAO7D,EAAI6D,OAAQA,EAC/C2B,EAAcG,EAAmB9B,EAAM,EAAG+B,EAAc,EAAK5E,MAAO6C,GAChErT,EAAMD,IAAK,IAGnBiV,EAAcG,EAAmB3F,EAAI6D,KAAM,EAAG7D,EAAI+D,OAAQvT,EAAMD,IAAK,QAK7Ef,KAAKsV,cAGThE,EAAG+E,YAAc,GACjB/E,EAAGgF,gBAAkB,GAErBhF,EAAGgC,kBAAoB,WAKnB,GAJAhC,EAAGgF,gBAAgB3C,SAAQ,SAAAxF,GACvBA,EAAIW,YAERwC,EAAGgF,gBAAkB,GACjBhF,EAAGf,iBAAmBe,EAAGb,aAAc,CACvC,IAAM8F,EAAKjF,EAAGf,eACRiG,EAAKD,EAAK,EACVE,EAASnF,EAAG+E,YAAYK,QAAO,SAAAC,GAAC,OAAIA,EAAErG,QAAUiG,GAAMI,EAAErG,QAAUkG,GAAMG,EAAEnG,MAAQ+F,GAAMI,EAAEnG,MAAQgG,KAEpGI,GAAQ,EACZH,EAAO9C,SAAQ,SAAA0C,GAEX,IAAM/F,EAAQ6D,EAAyB7C,EAAGE,MAAO6E,EAAY/F,OACvDE,EAAM2D,EAAyB7C,EAAGE,MAAO6E,EAAY7F,KACrDqG,EAAOC,EAAqBxG,EAAM+D,KAAM/D,EAAMiE,OAAQjD,GACtDyF,EAAOD,EAAqBtG,EAAI6D,KAAM7D,EAAI+D,OAAQjD,GAExDA,EAAG2E,cAAcxH,YAAYoI,GAE7BvF,EAAG2E,cAAcxH,YAAYsI,GAC7BzF,EAAGgF,gBAAgBJ,KAAKW,GACxBvF,EAAGgF,gBAAgBJ,KAAKa,GAExBF,EAAK5F,UAAU+F,OAAO,aAAcJ,GACpCC,EAAK5F,UAAU+F,OAAO,eAAgBJ,GACtCG,EAAK9F,UAAU+F,OAAO,aAAcJ,GACpCG,EAAK9F,UAAU+F,OAAO,eAAgBJ,GACtCA,GAAQ,KAEZtF,EAAG2F,oBAIX3F,EAAG2F,gBAAkB,WAAa,IAAD,OAC7B3F,EAAGgF,gBAAgB3C,SAAQ,SAAAxF,GAEvB,IAAMqG,GAAgBrG,EAAIqH,UAAY,GAAK1F,EAAa,EAAI,EAAK2E,UAEjE,GAAI,EAAID,GAAQA,EAAO,EAAK3F,aAAc,CACtC,IAAI6C,EAAgB3C,EAChB2F,EAAevG,EAAIuH,YAAc3G,EAAY,EAAI,EAAK4F,WAEtDD,EAAO,EAAK/F,aAAe+F,EAAOhD,EAAQ,EAC1CvD,EAAIG,aAAa,QAAjB,mBAIIoG,EAAO,IACPhD,GAASgD,EAAO,EAChBA,EAAO,GAGPA,EAAOhD,EAAQ,EAAK/C,cACpB+C,EAAQ,EAAK/C,YAAc+F,GAE/BvG,EAAIG,aAAa,QAAjB,+BAAkDkG,EAAlD,qBAAmEE,EAAnE,sBAAqFhD,EAArF,aAKJvD,EAAIG,aAAa,QAAjB,sBAKZgD,EAAG4F,iBAAmB,SAAUN,EAAeO,GAC3C,IAAMC,EAAiB9F,EAAGE,MAAMlC,MAAM,EAAGtP,KAAKuQ,gBACxC8G,EAAkB/F,EAAGE,MAAMlC,MAAMtP,KAAKuQ,eAAgBvQ,KAAKyQ,cAC3D6G,EAAgBhG,EAAGE,MAAMlC,MAAMtP,KAAKyQ,cACpC0E,EAAuB7D,EAAGb,aAAe,EAC/CxQ,EAAMmV,SAASgC,EAASR,EAAQS,EAAUF,EAASG,EAAOnC,GAC1DnV,KAAK0Q,kBAAkByE,EAAcA,GACrCnV,KAAKyT,eAGTnC,EAAGiG,sBAAwB,WAEvB,GAAIjG,EAAGf,iBAAmBe,EAAGb,aAAc,CACvC,IAAM+G,EAAQlG,EAAGf,eAAiB,EAC5BkH,EAAQnG,EAAGf,eACjB,GAAI,GAAKiH,GAASC,EAAQnG,EAAGE,MAAMxC,OAAQ,CACvC,IAAM0I,EAAO1X,KAAKwR,MAAMhC,OAAOgI,GACzBG,EAAO3X,KAAKwR,MAAMhC,OAAOiI,GAE/B,GAAc,MAATC,GAAyB,MAATC,GAA2B,MAATD,GAAyB,MAATC,GAC3C,MAATD,GAAyB,MAATC,GAAiD,OAAjC3X,KAAKwR,MAAMhC,OAAOgI,EAAQ,GAAc,CACvE,IAAMJ,EAAiB9F,EAAGE,MAAMlC,MAAM,EAAGkI,GACnCF,EAAgBhG,EAAGE,MAAMlC,MAAMmI,EAAQ,GAG7C,OAFAxX,EAAMmV,SAASgC,EAASE,EAAOE,GAC/BxX,KAAK0Q,kBAAkB8G,EAAOA,IACvB,IAInB,OAAO,GAIX1C,OAAO8C,iBAAiB,UAAU,kBAAMtG,EAAG2C,iBAC3Ca,OAAO8C,iBAAiB,UAAU,WAC9BtG,EAAG2C,cACH3C,EAAGgE,aACHhE,EAAG2F,qBAEPnC,OAAO8C,iBAAiB,SAAS,kBAAMtG,EAAGmC,iBAC1CnC,EAAGuG,SAAe,WACdvG,EAAGmB,iBAAiB,EAAKxS,MAAMkC,WAC/BmP,EAAG2C,cACH3C,EAAGgE,aACHhE,EAAG2F,mBAEP3F,EAAGwG,YAAe,SAAAtX,GACd8Q,EAAGC,aAAc,EACjBwG,WAAWzG,EAAGgC,kBAAmB,GACjC9S,EAAMC,mBAEV6Q,EAAG0G,UAAe,WACd1G,EAAGC,aAAc,EACjBD,EAAGmB,iBAAiB,EAAKxS,MAAMkC,WAC/B4V,WAAWzG,EAAGgC,kBAAmB,IAErChC,EAAG2G,YAAe,WACV3G,EAAGC,aAAaD,EAAGmB,iBAAiB,EAAKxS,MAAMkC,YAEvDmP,EAAG4G,QAAe,SAACC,GAEf,EAAKlY,MAAMmV,SAAS+C,EAAGC,OAAO5G,MAAO2G,EAAGC,OAAO7H,iBAGnDe,EAAG+G,UAAe,SAACF,GACf,GAAI7G,EAAGO,WAAWC,QAAS,CAuCvB,GAtCe,cAAXqG,EAAGG,MACHhH,EAAGO,WAAWG,eAAe,GAC7BmG,EAAGzX,kBAEQ,YAAXyX,EAAGG,MACHhH,EAAGO,WAAWG,gBAAgB,GAC9BmG,EAAGzX,kBAEQ,aAAXyX,EAAGG,MAEHhH,EAAGO,WAAWK,aAAa,GAC3BiG,EAAGzX,kBAEQ,WAAXyX,EAAGG,MAEHhH,EAAGO,WAAWK,YAAY,GAC1BiG,EAAGzX,kBAEQ,QAAXyX,EAAGG,KAA4B,SAAXH,EAAGG,KACvBhH,EAAGmC,cAGQ,WAAX0E,EAAGG,KAA+B,QAAXH,EAAGG,MAC1BhH,EAAGmC,cACH0E,EAAGzX,kBAEQ,UAAXyX,EAAGG,KAAoBH,EAAGI,UAC1BjH,EAAGyC,+BACHoE,EAAGzX,kBAEQ,UAAXyX,EAAGG,KAAmBH,EAAGI,UACzBjH,EAAGmC,cACH0E,EAAGzX,kBAEQ,QAAXyX,EAAGG,MACHhH,EAAGyC,+BACHoE,EAAGzX,kBAEQ,cAAXyX,EAAGG,IAAqB,CACxB,IAAME,EAAgC,IAAtBlH,EAAGf,eAAwB,EAAKe,EAAGf,eAAiB,EAEpE,EAAKtQ,MAAMmV,SAAS9D,EAAGE,MAAOgH,GAGlC,GAAe,eAAXL,EAAGG,IAAsB,CACzB,IAAME,EAAUlH,EAAGf,iBAAmBe,EAAGE,MAAMxC,OAAUsC,EAAGf,eAAiBe,EAAGf,eAAiB,EAEjG,EAAKtQ,MAAMmV,SAAS9D,EAAGE,MAAOgH,IAIvB,UAAXL,EAAGG,KAA8B,QAAXH,EAAGG,MAEzBhH,EAAG0C,oBAAqB,GAEb,cAAXmE,EAAGG,KAAwBhH,EAAGO,WAAWC,UAEzCR,EAAG0C,oBAAqB,GAExBmE,EAAGI,UACY,MAAXJ,EAAGG,MACChH,EAAGO,WAAWC,QACdR,EAAGmC,cAGH,EAAKxT,MAAMmV,SAAS9D,EAAGE,MAAOF,EAAGf,iBAGzC,EAAKtQ,MAAMwY,YAAYN,IAEZ,cAAXA,EAAGG,KAAkC,eAAXH,EAAGG,KAAmC,YAAXH,EAAGG,KAAgC,cAAXH,EAAGG,KACrE,SAAXH,EAAGG,KAA6B,QAAXH,EAAGG,KAA4B,WAAXH,EAAGG,KAA+B,aAAXH,EAAGG,KACnEP,WAAWzG,EAAGgC,kBAAmB,GAEtB,MAAX6E,EAAGG,MACHhH,EAAG4F,iBAAiB,IAAK,KACzBiB,EAAGzX,kBAEQ,MAAXyX,EAAGG,MACHhH,EAAG4F,iBAAiB,IAAK,KACzBiB,EAAGzX,kBAEQ,MAAXyX,EAAGG,KAA0D,OAA3ChH,EAAGE,MAAMhC,OAAO8B,EAAGf,eAAiB,KACtDe,EAAG4F,iBAAiB,IAAK,KACzBiB,EAAGzX,kBAGQ,cAAXyX,EAAGG,KAAuBhH,EAAGiG,yBAC7BY,EAAGzX,kBAKX4Q,EAAG8B,OAAOpT,KAAKC,MAAMG,KAAMJ,KAAKC,MAAMkC,WAEtCmP,EAAGwE,aAAa9V,KAAKC,MAAMyY,QAC3B1Y,KAAKqQ,SAAWiB,IAhjBxB,yCAsjBuBqH,GACf3Y,KAAKqQ,SAAS+C,OAAOpT,KAAKC,MAAMG,KAAMJ,KAAKC,MAAMkC,WAC7CwW,EAAUxW,YAAcnC,KAAKC,MAAMkC,WACnCnC,KAAKqQ,SAASoC,iBAAiBzS,KAAKC,MAAMkC,WAG1CnC,KAAKC,MAAMuT,WAAamF,EAAUnF,WAC9BxT,KAAKqQ,SAAS2D,mBACdhU,KAAKqQ,SAAS2D,oBAAqB,EAGnChU,KAAKqQ,SAASkD,cAAcvT,KAAKC,MAAMuT,gBAIrBnT,IAAtBL,KAAKC,MAAMyY,OACX1Y,KAAKqQ,SAASyF,aAAa9V,KAAKC,MAAMyY,QAGjC1Y,KAAKC,MAAMyY,SAAWC,EAAUD,QACrC1Y,KAAKqQ,SAASY,UAAUnC,OAAO,kBAG/B9O,KAAKC,MAAMoW,cAAgBsC,EAAUtC,cACrCrW,KAAKqQ,SAASgG,YAAcrW,KAAKC,MAAMoW,YACvCrW,KAAKqQ,SAASiD,uBA/kB1B,+BAulBQ,OAAO,yBAAK1C,GAAI5Q,KAAKC,MAAM2Q,GAAI7Q,UAAU,uBAvlBjD,GAA+Ba,IAAMC,WA8lBrC,SAASsT,EAAyB/T,EAAcwY,GAC5C,IAAMC,EAA2BzY,EAAKkP,MAAM,EAAGsJ,GACzCvE,GAAgBwE,EAAiBpJ,MAAM,QAAU,IAAIT,OACrD8J,EAAsBD,EAAiBE,YAAY,MAEzD,MAAO,CAAC1E,OAAME,OADSsE,EAAiB7J,OAAS8J,EAAc,GAOnE,SAAS1C,EAAchW,EAAciU,GAIjC,IAHA,IAAI2E,EAAgB,EAChBC,EAAY,EACZC,EAAU,EACL3J,EAAI,EAAGA,EAAInP,EAAK4O,SAAUO,EAC/B,GAAuB,OAAnBnP,EAAKoP,OAAOD,GAEZ,KADEyJ,IACoB3E,EAClB4E,EAAY1J,OAEX,GAAIyJ,IAAkB3E,EAAO,EAAG,CACjC6E,EAAU3J,EACV,MAOZ,OAHgB,IAAZ2J,IACAA,EAAU9Y,EAAK4O,QAEZkK,EAAUD,EAMrB,SAAS9C,EAAmBX,EAAmBE,EAAqBD,EAAqB1U,EAC7DsP,GAExB,IAAMkF,EAAsBnH,SAASC,cAAc,OACnDkH,EAAUtE,UAAUC,IAAI,wBACxBqE,EAAUC,UAAYA,EACtBD,EAAUG,YAAcA,EACxBH,EAAUE,YAAcA,EAExBF,EAAU1B,QAAU,SAACsE,GACjB,IAAMgB,EAAuB,IAAIC,WAAWjB,EAAGkB,KAAlB,eAA4BlB,IACzD9H,EAASiJ,cAAcH,GACvBhB,EAAG1X,mBAEP,IAAM8Y,EAAwBnL,SAASC,cAAc,QAKrD,OAJAkL,EAAKtI,UAAUC,IAAI,qBACnBqI,EAAKhL,UAAYxN,EACjBwU,EAAUM,YAAc0D,EACxBhE,EAAU9G,YAAY8K,GACfhE,EAMX,SAASuB,EAAqBtB,EAAmBE,EAAqBrF,GAElE,IAAMlC,EAAsBC,SAASC,cAAc,OAUnD,OATAF,EAAI8C,UAAUC,IAAI,0BAClB/C,EAAIqH,UAAYA,EAChBrH,EAAIuH,YAAcA,EAElBvH,EAAI0F,QAAU,SAACsE,GACX,IAAMgB,EAAuB,IAAIC,WAAWjB,EAAGkB,KAAlB,eAA4BlB,IACzD9H,EAASiJ,cAAcH,GACvBhB,EAAG1X,mBAEA0N,E,WEr5BEqL,EAAb,WAcI,WAAY1L,GAAe,yBAZXA,UAYU,OAXlB2L,QAAU,IAAIjM,IAWI,KAVlBkM,YAAwB,GAUN,KATlBC,KAAc,GASI,KARlBC,gBAAiB,EASrB5Z,KAAK8N,KAAOA,EAfpB,sDAyBQ,OAAO9N,KAAK8N,OAzBpB,0CAmCQ,OAAO9N,KAAK4Z,iBAnCpB,qCA2CQ5Z,KAAK4Z,gBAAiB,IA3C9B,gCAsDqB9L,EAAcuL,GAC3B,OAAKrZ,KAAK6Z,UAAU/L,KAAU9N,KAAK8Z,sBAC/B9Z,KAAKyZ,QAAQM,IAAIjM,EAAMuL,GACvBrZ,KAAK0Z,YAAYxD,KAAKpI,IACf,KA1DnB,gCAuEqBA,GACb,OAAO9N,KAAK0Z,YAAYM,MAAK,SAAAC,GAAE,OAAIA,IAAOnM,OAxElD,mCAkFQ,OAAO9N,KAAKyZ,UAlFpB,oCA2FyBS,GACjB,OAAOla,KAAKyZ,QAAQ9F,QAAQuG,KA5FpC,uCAsGQ,OAAOla,KAAK0Z,cAtGpB,wCAgHQ,OAAO1Z,KAAK0Z,YAAY1K,SAhHhC,6BA6HkBmL,GACV,QAAIC,kBAAQD,EAAIE,WAAYra,KAAKyZ,WAC7BzZ,KAAKsa,eACLH,EAAII,SACCva,KAAK2Z,KAAKK,MAAK,SAAAQ,GAAC,OAAIA,EAAEC,OAAON,OAC9Bna,KAAK2Z,KAAKzD,KAAKiE,IAEZ,KApInB,gCAgJQ,OAAOna,KAAK2Z,OAhJpB,qCA0JQ,OAAO3Z,KAAK2Z,KAAK3K,SA1JzB,wCAqKQ,OAAOhP,KAAK8N,KAAO,IAAM,YAAI9N,KAAKyZ,SAASiB,KAAI,SAAAC,GAAC,OAAIA,EAAE,GAAK,KAAOA,EAAE,MAAIC,KAAK,MAAQ,MArK7F,6CA+KQ,OAAO5a,KAAK8N,KAAO,IAAM9N,KAAK0Z,YAAYkB,KAAK,MAAQ,MA/K/D,sCAwLoC,IAAD,OAErBC,EAAqC7a,KAAK0Z,YAAYgB,KAAI,SAAA5M,GAAI,OAAI,EAAK2L,QAAQ/L,IAAII,MACnF6L,EAAO,YAAI3Z,KAAK2Z,MAAMe,KAAI,SAAAP,GAAG,OAAIA,EAAIW,sBAAsB,EAAKpB,gBAEhEqB,EAAU/a,KAAK0Z,YAAYgB,KAAI,SAAAtI,GAAC,OAAIA,EAAEpD,UAC5C6L,EAAYlH,SAAQ,SAAC0F,EAAM9J,GACnB8J,EAAKrK,OAAS+L,EAAQxL,KACtBwL,EAAQxL,GAAK8J,EAAKrK,WAG1B2K,EAAKhG,SAAQ,SAAA6G,GACTA,EAAE7G,SAAQ,SAACqH,EAAGzL,GACNwL,EAAQxL,GAAKyL,EAAEhM,SACf+L,EAAQxL,GAAKyL,EAAEhM,cAK3B,IAAMiM,EAAM,SAACC,GAAD,OAAkBA,EAAGR,KAAI,SAACC,EAAGpL,GAAJ,OAAUoL,EAAEQ,OAAOJ,EAAQxL,GAAI,QAAMqL,KAAK,QAC/E,OAAOK,EAAIjb,KAAK0Z,aAAe,KAC3BuB,EAAIJ,GAAe,KACnBE,EAAQL,KAAI,SAAAtI,GAAC,MAAI,IAAIgJ,OAAOhJ,MAAIwI,KAAK,OAAS,KAC9CjB,EAAKe,KAAI,SAAAF,GAAC,OAAIS,EAAIT,MAAII,KAAK,QA/MvC,6BAyNkBS,GACV,OAAIA,aAAiB7B,IACVxZ,KAAK8N,OAASuN,EAAMvN,MACvBsM,kBAAQpa,KAAKyZ,QAAS4B,EAAM5B,UAC5BW,kBAAQ,IAAIkB,IAAItb,KAAK2Z,MAAO,IAAI2B,IAAID,EAAM1B,YA7N1D,KC0Ba4B,EAAb,kDAOI,WAAYxa,GAAc,IAAD,6BACrB,cAAMA,GACFE,MAAM4M,mBACN5M,MAAM4M,kBAAN,eAA8B0N,GAElC,EAAKzN,KAAO,YALS,EAP7B,sBAA+B7M,QC1BlBua,EAAb,uGAS4Bza,GAAgD,IAAD,uBAA7B0a,EAA6B,iCAA7BA,EAA6B,kBAEnE,OADAC,EAAkB3a,EAAIiO,OAAS,EAAGyM,GAC3B,IAAIF,EAAUI,EAAiB5a,EAAK0a,MAXnD,oCAsBgC1a,EAAeC,GAAwE,IAAD,uBAAnCya,EAAmC,iCAAnCA,EAAmC,kBAE9G,OADAC,EAAkB3a,EAAIiO,OAAS,EAAGyM,GAC3B,IAAI1N,EAAgB4N,EAAiB5a,EAAK0a,GAASza,KAxBlE,kCAmC8BD,EAAeC,GAAsE,IAAD,uBAAjCya,EAAiC,iCAAjCA,EAAiC,kBAE1G,OADAC,EAAkB3a,EAAIiO,OAAS,EAAGyM,GAC3B,IAAI7N,EAAc+N,EAAiB5a,EAAK0a,GAASza,OArChE,KA6CO,SAAS0a,EAAkBE,EAAuBH,GACrD,GAAIA,EAAOzM,SAAW4M,EAElB,IADAja,QAAQC,IAAI,qCAAuCga,EAAgB,WAAaH,EAAOzM,QAChFyM,EAAOzM,OAAS4M,GACnBH,EAAOvF,KAAK,IAYjB,SAASyF,EAAiBE,EAAaC,GAG1C,IAHgE,IAAD,EACzDC,EAAeF,EAAE7M,OACjBgN,EAAqBC,MAAc,EAAIF,EAAO,GAC3CxM,EAAI,EAAGA,EAAIwM,EAAMxM,IACtByM,EAAS,EAAIzM,EAAI,GAAKuM,EAAEvM,EAAI,GAC5ByM,EAAS,EAAIzM,EAAI,GAAKsM,EAAEtM,GAE5B,OAAO,EAAAsM,EAAE,IAAGK,OAAL,QAAeF,GCvEnB,IAAeG,EAAtB,WACI,WAAsChN,EAAoCkK,GAAe,yBAAnDlK,MAAkD,KAAdkK,OAD9E,uDAOQ,OAAOrZ,KAAKmP,IAAIiN,eAPxB,KAcsBC,EAAtB,4HAA+CF,GAElCG,EAAb,kDACI,WAAmBnN,GAAqB,uCAC9BA,EAAK,sBAFnB,UAAwCkN,GAM3BE,EAAb,kDACI,WAAmBpN,GAAqB,uCAC9BA,EAAK,sBAFnB,UAAwCkN,GAS3BG,EAAb,kDACI,WAAmB1O,GAAsB,uCAC/BA,EAAM,iBAFpB,UAAmCqO,GAStBM,GAAb,kDAcI,WAAoBtN,EAAoBkK,GAAuB,uCACrDlK,EAAKkK,GAfnB,2DAE4BrQ,GACpB,OAAO,IAAIyT,EAAmBzT,EAAW,eAHjD,iCAM6BC,GACrB,OAAO,IAAIwT,EAAmBxT,EAAY,gBAPlD,6BAUyBC,GACjB,OAAO,IAAIuT,EAAmBvT,EAAQ,cAX9C,GAAwCiT,GA0C3BO,GAAb,kDAkEI,WAAoBvN,EAAoCwN,EAAoBtD,GAAwB,IAAD,8BAC/F,cAAMlK,EAAKkK,IADyCsD,aAA2C,EAlEvG,6DAEuBxN,GACf,OAAO,IAAIuN,EAAoBvN,EArBLyN,GAqB6B,kBAH/D,uCAM4BzN,GACpB,OAAO,IAAIuN,EAAoBvN,EA1BHyN,GA0B6B,uBAPjE,4BAUiBzN,GACT,OAAO,IAAIuN,EAAoBvN,EAlBN0N,EAkB4B,WAX7D,mCAcwB1N,GAChB,OAAO,IAAIuN,EAAoBvN,EAzBNyN,EAyBmC,kBAfpE,iCAkBsBzN,GACd,OAAO,IAAIuN,EAAoBvN,EA1BN0N,EA0BiC,gBAnBlE,mCAsBwB1N,GAChB,OAAO,IAAIuN,EAAoBvN,EAvCRyN,GAuC6B,mBAvB5D,oCA0ByBzN,GACjB,OAAO,IAAIuN,EAAoBvN,EA3CRyN,GA2C6B,oBA3B5D,mCA8BwBzN,GAChB,OAAO,IAAIuN,EAAoBvN,EA9CRyN,GA8C6B,mBA/B5D,oCAkCyBzN,GACjB,OAAO,IAAIuN,EAAoBvN,EAlDRyN,GAkD6B,oBAnC5D,gCAsCqBzN,GACb,OAAO,IAAIuN,EAAoBvN,EAxDPyN,GAwD6B,gBAvC7D,wCA0C6BzN,GACrB,OAAO,IAAIuN,EAAoBvN,EAzDHyN,GAyD6B,yBA3CjE,yCA8C8BzN,GACtB,OAAO,IAAIuN,EAAoBvN,EA7DHyN,GA6D6B,0BA/CjE,oCAkDyBzN,GACjB,OAAO,IAAIuN,EAAoBvN,EAhEPyN,GAgE6B,qBAnD7D,oCAsDyBzN,GACjB,OAAO,IAAIuN,EAAoBvN,EApEPyN,GAoE6B,qBAvD7D,qCA0D0BzN,GAClB,OAAO,IAAIuN,EAAoBvN,EAxEPyN,GAwE6B,sBA3D7D,+BA8DoBzN,GACZ,OAAO,IAAIuN,EAAoBvN,EA3EJyN,GA2E6B,gBA/DhE,GAAyCT,GChF5BW,GAAb,oGASyB3N,GACjB,OAAOA,EAAIH,OAAS,GAAKG,EAAI4N,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIH,EAAYI,SAASD,QAV/E,6BAsByB9N,GACjB,OAAmB,IAAfA,EAAIH,YAGH8N,EAAYI,SAAS/N,EAAIK,OAAO,KAAyB,MAAlBL,EAAIK,OAAO,KAGhDL,EAAI4N,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIH,EAAYK,WAAWF,SA7B/D,wCAuCoC9N,GAC5B,IACMiO,EADQ,MACIC,KAAKlO,GACvB,OAAe,OAARiO,GAAuBA,EAAI,KAAOjO,IA1CjD,+BAoD2B8N,GACnB,OAAoB,IAAbA,EAAEjO,QAAgBiO,EAAEK,gBAAkBL,EAAEM,gBArDvD,iCA+D6BN,GACrB,OAAOH,EAAYI,SAASD,IAAMH,EAAYU,QAAQP,IAAY,MAANA,IAhEpE,8BA0E0BA,GAClB,OAAoB,IAAbA,EAAEjO,QAAkC,OAAlBiO,EAAExN,MAAM,QA3EzC,+BAqF2BN,GACnB,MAAO,yBAAyBsO,KAAKtO,KAtF7C,+BAiG2BA,GACnB,GAAY,KAARA,EACA,MAAO,CAAEyH,MAAO,GAAIO,OAAQ,IAGhC,IADA,IAAI5H,EAAY,EACTA,EAAIJ,EAAIH,QAAQ,CACnB,IAAK8N,EAAYI,SAAS/N,EAAIK,OAAOD,IACjC,MAAO,CAAEqH,MAAOzH,EAAIuO,UAAU,EAAGnO,GAAI4H,OAAQhI,EAAIuO,UAAUnO,MAE7DA,EAEN,MAAO,CAAEqH,MAAOzH,EAAKgI,OAAQ,MA5GrC,+BAwH2BhI,GACnB,GAAY,KAARA,EACA,MAAO,CAAEyH,MAAO,GAAIO,OAAQ,IAEhC,IAAK2F,EAAYI,SAAS/N,EAAIK,OAAO,KAAyB,MAAlBL,EAAIK,OAAO,GACnD,MAAO,CAAEoH,MAAO,GAAIO,OAAQhI,GAGhC,IADA,IAAII,EAAY,EACTA,EAAIJ,EAAIH,QAAQ,CACnB,IAAM2O,EAAexO,EAAIK,OAAOD,GAChC,IAAKuN,EAAYI,SAASS,KAAUb,EAAYU,QAAQG,IAAkB,MAATA,EAC7D,MAAO,CAAE/G,MAAOzH,EAAIuO,UAAU,EAAGnO,GAAI4H,OAAQhI,EAAIuO,UAAUnO,MAE7DA,EAEN,MAAO,CAAEqH,MAAOzH,EAAKgI,OAAQ,MAvIrC,4CAiJwChI,GAChC,GAAY,KAARA,EACA,MAAO,CAAEyH,MAAO,GAAIO,OAAQ,IAGhC,IADA,IAAI5H,EAAY,EACTA,EAAIJ,EAAIH,QAAQ,CACnB,GAAIG,EAAIK,OAAOD,GAAGE,MAAM,MACpB,MAAO,CAAEmH,MAAOzH,EAAIuO,UAAU,EAAGnO,GAAI4H,OAAQhI,EAAIuO,UAAUnO,MAE7DA,EAEN,MAAO,CAAEqH,MAAOzH,EAAKgI,OAAQ,MA5JrC,iCAuKsBhI,GACd,GAAY,KAARA,EACA,MAAO,CAAEyH,MAAO,GAAIO,OAAQ,IAEhC,IAAI5H,EAAY,EAEhB,GAAsB,MAAlBJ,EAAIK,OAAO,GAAY,CAEvB,KAAIL,EAAIH,OAAS,GAAK8N,EAAYU,QAAQrO,EAAIK,OAAO,KAKjD,MAAO,CAAEoH,MAAO,GAAIO,OAAQhI,GAJ5BI,EAAI,EASZ,IAFA,IAAIqO,GAAsB,EACtBC,GAAoB,EACjBtO,EAAIJ,EAAIH,QACX,GAAI8N,EAAYU,QAAQrO,EAAIK,OAAOD,IAC/BqO,GAAa,IACXrO,MAED,IAAsB,MAAlBJ,EAAIK,OAAOD,GAWhB,MATA,GAAIsO,IAAaD,EACb,MAGAC,GAAW,IACTtO,EASd,MAAO,CAAEqH,MAFMzH,EAAIuO,UAAU,EAAGnO,GAER4H,OADXhI,EAAIuO,UAAUnO,MA7MnC,uCA4N4BJ,GAIpB,IAHA,IAAII,EAAY,EAEZuO,EAAsB,EACnBvO,EAAIJ,EAAIH,QAAQ,CACnB,IAAM+O,EAAU5O,EAAIK,OAAOD,GAG3B,KADEA,EACc,MAAZwO,GAAoBD,EAAc,IAAO,EACzC,MAAO,CAAElH,MAAOzH,EAAIG,MAAM,EAAGC,GAAI4H,OAAQhI,EAAIG,MAAMC,GAAIyO,WAAO3d,GAGlE,GAAgB,OAAZ0d,EACA,MAAO,CACHnH,MAAOzH,EAAIG,MAAM,EAAGC,GACpB4H,OAAQhI,EAAIG,MAAMC,GAClByO,MAAOxC,EAAatT,YAAYhG,IAAWuC,aAAa6C,oCACpDjH,EAAW,IAAK,MAIZ,OAAZ0d,IACED,EAGFA,EAAc,EAGtB,MAAO,CACHlH,MAAOzH,EACPgI,OAAQ,GACR6G,MAAOxC,EAAatT,YAAYhG,IAAWuC,aAAa6C,oCACpDjH,EAAW,IAAK,QA5PhC,uCAgR4B8O,EAAamB,EAAeE,GAWhD,IAXmG,IAAtCyN,EAAqC,uDAApB,KAC1EC,EAAgB,EAChB3O,EAAY,EAEZ4O,GAAoB,EAElBC,EAAkC,IAAf5N,EAAIxB,OAEzB8O,EAAsB,EAEtBO,EAAsB,EACnB9O,EAAIJ,EAAIH,QAAQ,CACnB,IAAM+O,EAAU5O,EAAIK,OAAOD,GA6B3B,GA3BIiB,EAAI8N,QAAQP,IAAY,GAAMM,EAAc,IAAO,IAAMF,IACvDD,EAGGH,IAAYzN,GAAU+N,EAAc,IAAO,GAAKD,IAAYD,IAC/DD,EAGe,MAAZH,GAAoBD,EAAc,IAAO,IAC9CK,GAAYA,GAGZJ,IAAYE,IACVI,EAGFA,EAAc,EAGF,OAAZN,IACED,EAGFA,EAAc,IAGhBvO,EACY,IAAV2O,EACA,MAAO,CAAEtH,MAAOzH,EAAIG,MAAM,EAAGC,GAAI4H,OAAQhI,EAAIG,MAAMC,IAG3D,MAAMiM,EAAatT,YAAYhG,IAAWuC,aAAa6C,oCAAgCjH,EACnFmQ,EAAIuM,MAAM,IAAInC,KAAK,SAAUtK,KA9TzC,6CA0UyCnB,EAAawO,GAG9C,IAFA,IAAIY,GAAqB,EACrBhP,EAAY,EACTA,EAAIJ,EAAIH,QACX,GAAIG,EAAIK,OAAOD,GAAGE,MAAM,QAClBF,MAED,IAAIJ,EAAIK,OAAOD,KAAOoO,GAASY,EAKhC,MAJAA,GAAY,IACVhP,EAMV,IAAKgP,EACD,MAAM/C,EAAatT,YAAYhG,IAAWuC,aAAa8C,8BAA0BlH,EAAWsd,GAEhG,OAAOxO,EAAIuO,UAAUnO,OA5V7B,KCwBsBiP,GAAtB,WAII,aAAyB,yBAFfC,oBAEc,EAJ5B,0DAgCQ,YAA+Bpe,IAAxBL,KAAKye,iBAhCpB,kCA8CQ,YAJ4Bpe,IAAxBL,KAAKye,gBACLze,KAAK0e,OAGF1e,KAAKye,mBA9CpB,KCzBaE,GAAb,kDAQI,WAAmBC,GAAqB,IAAD,8BACnC,gBACKH,eAAiBG,EAFa,EAR3C,qFAgCoBC,GAGZ,MAAO,CAACC,OADmB9e,KAAKye,eACNjL,SAAU,GAAIkF,OAAQ,MAnCxD,oCA8CQ,OAAO1Y,KAAKye,eAAeM,YA9CnC,yCA0DQ,OAAO/e,KAAKye,eAAeM,YA1DnC,2CAqEQ,MAAO,OArEf,GAAkCP,ICDrBQ,GAAb,WA6CI,WAAqC7P,EAA8B8P,GAAuB,yBAArD9P,MAAoD,KAAtB8P,QA7CvE,qDAcsB9P,GAAqD,IAAxC+P,EAAuC,uDAAlB,EAChD,OAAO,IAAIF,EAAc7P,EAAKA,EAAI4N,MAAM,IAAIrC,KAAI,SAACiD,EAAMvO,GAAW,MAAO,CAACuO,KAAMA,EAAMvO,MAAOA,EAAQ8P,SAf7G,8BAyBQ,OAAO,IAAIF,EAAc,GAAI,MAzBrC,mCAmC+BG,GACvB,OAAO,IAAIH,EAAcG,EAAIzE,KAAI,SAAA0E,GAAE,OAAIA,EAAGzB,QAAM/C,KAAK,IAAKuE,OApClE,gDAsDQ,OAAOnf,KAAKmP,MAtDpB,+BAgEQ,OAAOnP,KAAKmP,IAAIH,SAhExB,gCA0EQ,OAAyB,IAAlBhP,KAAKgP,WA1EpB,iCAqFQ,OAAOhP,KAAKif,QArFpB,sCA+FQ,OAAIjf,KAAKqf,UACEC,IAEJtf,KAAKif,MAAM,GAAG7P,QAlG7B,qCA4GQ,OAAIpP,KAAKqf,UACEC,IAEJtf,KAAKif,MAAMjf,KAAKgP,SAAW,GAAGI,QA/G7C,iCAyHQ,IAAIpP,KAAKqf,UAGT,MAAO,CAAE/O,MAAOtQ,KAAKif,MAAM,GAAG7P,MAAOoB,IAAKxQ,KAAKif,MAAMjf,KAAKgP,SAAW,GAAGI,SA5HhF,6BAuIkBA,GACV,GAAIA,EAAQ,GAAKA,GAASpP,KAAKgP,SAC3B,MAAM,IAAIuQ,WAEd,OAAOvf,KAAKif,MAAM7P,GAAOuO,OA3IjC,8BAsJmBvO,GACX,GAAIA,EAAQ,GAAKA,GAASpP,KAAKgP,SAC3B,MAAM,IAAIuQ,WAEd,OAAOvf,KAAKif,MAAM7P,GAAOA,QA1JjC,4BAqKiBoQ,GAAqC,IAAD,OAC7C,GAAIxf,KAAKqf,UACL,MAAkB,KAAdG,EACO,GAEJ,CAACR,EAAcS,SAE1B,IAAMC,EAAiBF,EAAUxQ,OAC3B2Q,EAAqB3f,KAAKmP,IAAI4N,MAAMyC,GACpCI,EAAsB3D,MAAc0D,EAAS3Q,QACnD4Q,EAAU,GAAK,EACf,IAAK,IAAIrQ,EAAI,EAAGA,EAAIoQ,EAAS3Q,OAAQO,IACjCqQ,EAAUrQ,GAAKqQ,EAAUrQ,EAAI,GAAKoQ,EAASpQ,EAAI,GAAGP,OAAS0Q,EAG/D,OAAOC,EAASjF,KAAI,SAACiF,EAAUvQ,GAC3B,OAAO,IAAI4P,EAAcW,EAAU,EAAKV,MAAM3P,MAAMsQ,EAAUxQ,GAAQwQ,EAAUxQ,GAASuQ,EAAS3Q,cArL9G,4BAmMiBsB,EAAeE,GACxB,IAAMqP,EAASvP,EAAQ,EAAItQ,KAAKgP,SAAWsB,EAAQA,EAC7CwP,OAAezf,IAARmQ,EAAqBA,EAAM,EAAIxQ,KAAKgP,SAAWwB,EAAMA,EAAOxQ,KAAKgP,SAC9E,GAAI6Q,EAASC,GAAQD,EAAS,GAAKC,EAAO9f,KAAKgP,SAC3C,MAAM,IAAIuQ,WAEd,OAAOP,EAAce,aAAa/f,KAAKif,MAAM3P,MAAMuQ,EAAQC,MAzMnE,6BAmNQ,IAAME,EAAkBhgB,KAAKmP,IAAI8Q,OACjC,GAAgB,KAAZD,EACA,OAAO,IAAIhB,EAAc,GAAI,IAEjC,IAAM1O,EAAgBtQ,KAAKmP,IAAImP,QAAQ0B,EAAQxQ,OAAO,IACtD,OAAOwP,EAAce,aAAa/f,KAAKif,MAAM3P,MAAMgB,EAAOA,EAAQ0P,EAAQhR,WAxNlF,+BAkO8D,IAAC,IAAD,qBAAzCkR,EAAyC,yBAAzCA,EAAyC,gBACtD,OAAOlB,EAAce,cAAa,EAAA/f,KAAKif,OAAM/C,OAAX,oBAAqBgE,EAAQxF,KAAI,SAAAyF,GAAE,OAAIA,EAAGlB,cAnOpF,iCA+OsBmB,EAAsBxH,GACpC,OAAO5Y,KAAKmP,IAAIkR,WAAWD,EAAcxH,KAhPjD,+BA4PoBwH,EAAsBE,GAClC,OAAOtgB,KAAKmP,IAAIoR,SAASH,EAAcE,KA7P/C,8BAyQmBE,EAA8BC,GACzC,OAAOzgB,KAAKmP,IAAIuR,QAAQF,EAAaC,KA1Q7C,6BAoRQ,OAAO,IAAIzB,EAAchf,KAAKmP,IAAKnP,KAAKif,MAAMvE,KAAI,SAAA0E,GAAO,MAAO,CAACzB,KAAMyB,EAAGzB,KAAMvO,MAAOgQ,EAAGhQ,aApRlG,kCA8RuB6P,GACf,IAAK,IAAI1P,EAAI,EAAGA,EAAI0P,EAAMjQ,SAAUO,EAChC,GAAIvP,KAAKmP,IAAImP,QAAQW,EAAM1P,KAAO,EAC9B,OAAO,EAGf,OAAO,MApSf,KCKaoR,GAAb,oGASyBxR,GACjB,OAAO2N,GAAY8D,OAAOzR,EAAI0R,cAVtC,6BAsByB1R,GACjB,OAAO2N,GAAYgE,OAAO3R,EAAI0R,cAvBtC,wCAiCoC1R,GAC5B,OAAO2N,GAAYiE,kBAAkB5R,EAAI0R,cAlCjD,+BA4C2B5D,GACnB,OAAOH,GAAYI,SAASD,EAAE4D,cA7CtC,iCAuD6B5D,GACrB,OAAOH,GAAYK,WAAWF,EAAE4D,cAxDxC,8BAkE0B5D,GAClB,OAAOH,GAAYU,QAAQP,EAAE4D,cAnErC,+BA6E2B1R,GACnB,OAAO2N,GAAYkE,SAAS7R,EAAI0R,cA9ExC,+BAyF2B1R,GACnB,IAAM8R,EAAyBnE,GAAYoE,SAAS/R,EAAI0R,YACxD,MAAO,CAAEjK,MAAOzH,EAAIG,MAAM,EAAG2R,EAASrK,MAAM5H,QAASmI,OAAQhI,EAAIG,MAAM2R,EAASrK,MAAM5H,WA3F9F,+BAuG2BG,GACnB,IAAM8R,EAAyBnE,GAAYqE,SAAShS,EAAI0R,YACxD,MAAO,CAAEjK,MAAOzH,EAAIG,MAAM,EAAG2R,EAASrK,MAAM5H,QAASmI,OAAQhI,EAAIG,MAAM2R,EAASrK,MAAM5H,WAzG9F,4CAoHwCG,GAChC,IAAM8R,EAAyBnE,GAAYsE,sBAAsBjS,EAAI0R,YACrE,MAAO,CAAEjK,MAAOzH,EAAIG,MAAM,EAAG2R,EAASrK,MAAM5H,QAASmI,OAAQhI,EAAIG,MAAM2R,EAASrK,MAAM5H,WAtH9F,iCAiIsBG,GACd,IAAM8R,EAAyBnE,GAAYuE,WAAWlS,EAAI0R,YAC1D,MAAO,CAAEjK,MAAOzH,EAAIG,MAAM,EAAG2R,EAASrK,MAAM5H,QAASmI,OAAQhI,EAAIG,MAAM2R,EAASrK,MAAM5H,WAnI9F,uCAiJ4BG,GACpB,IAAM8R,EAAgFnE,GAAYwE,iBAAiBnS,EAAI0R,YACvH,MAAO,CACHjK,MAAOzH,EAAIG,MAAM,EAAG2R,EAASrK,MAAM5H,QACnCmI,OAAQhI,EAAIG,MAAM2R,EAASrK,MAAM5H,QACjCgP,MAAO9c,EAAuB+f,EAASjD,MAAO,CAAC1N,MAAOnB,EAAIoS,gBAAiB/Q,IAAKrB,EAAIoS,qBAtJhG,uCA0K4BpS,EAAoBmB,EAAeE,GAA0D,IAA7CyN,EAA4C,uDAA3B,KACrF,IACI,IAAMgD,EAAyBnE,GAAY0E,iBAAiBrS,EAAI0R,WAAYvQ,EAAOE,EAAKyN,GACxF,MAAO,CAAErH,MAAOzH,EAAIG,MAAM,EAAG2R,EAASrK,MAAM5H,QAASmI,OAAQhI,EAAIG,MAAM2R,EAASrK,MAAM5H,SAE1F,MAAO7N,GACH,MAAMD,EAAuBC,EAAK,CAACmP,MAAOnB,EAAIoS,gBAAiB/Q,IAAKrB,EAAIoS,qBAhLpF,wCA8LoCpS,GAQ5B,IAPA,IAAM8P,EAAQ9P,EAAIsS,OAAOC,WAErBvD,GAAoB,EACpBwD,GAAyB,EACzBC,GAA6B,EAC7B9D,EAAsB,EAEjBvO,EAAI,EAAGA,EAAI0P,EAAMjQ,SAAUO,EAAG,CACnC,IAAMwO,EAAUkB,EAAM1P,GAAGoO,KAET,MAAZI,GAAoBD,EAAc,IAAO,GAAM6D,IAAwC,IAAvBC,EAI/C,MAAZ7D,GAAmBxO,EAAI,EAAI0P,EAAMjQ,QAAgC,MAAtBiQ,EAAM1P,EAAI,GAAGoO,OAAiBQ,IAAawD,IAAwC,IAAvBC,GAC5GD,GAAgB,EAChB1C,EAAM1P,GAAGoO,KAAO,OACdpO,GAGe,OAAZwO,EACL4D,GAAgB,EAGC,MAAZ5D,GAAmBxO,EAAI,EAAI0P,EAAMjQ,QAAgC,MAAtBiQ,EAAM1P,EAAI,GAAGoO,OAAiBQ,IAAawD,IAAwC,IAAvBC,GAC5GA,EAAoBrS,EACpB0P,EAAM1P,GAAGoO,KAAO,KAEhBsB,IADE1P,GACOoO,KAAO,KAGC,MAAZI,GAAmBxO,EAAI,EAAI0P,EAAMjQ,QAAgC,MAAtBiQ,EAAM1P,EAAI,GAAGoO,OAAuC,IAAvBiE,IAC7EA,GAAqB,EACrB3C,EAAM1P,GAAGoO,KAAO,KAEhBsB,IADE1P,GACOoO,KAAO,KAxBhBQ,GAAYA,EA2BA,OAAZJ,IACED,EAGFA,EAAc,GAEd6D,IAAwC,IAAvBC,KACjB3C,EAAM1P,GAAGoO,KAAO,MAGxB,IAAIxc,OAAMd,EACV,IAA2B,IAAvBuhB,EAA0B,CAC1B,IAAMC,EAAW5C,EAAM2C,GAAmBxS,MAC1CjO,EAAMqa,EAAatT,YAAYhG,IAAWuC,aAAa6C,+BACrD,CAACgJ,MAAOuR,EAAUrR,IAAKqR,EAAW,GAAI,KAAM,MAGlD,MAAO,CAAC1S,IAAK6P,GAAce,aAAad,EAAMvI,QAAO,SAAAuG,GAAC,MAAe,OAAXA,EAAEU,SAAiBxc,IAAKA,KAtP1F,6CAkQyCgO,EAAoBwO,GACrD,IACI,IAAMmE,EAAqBhF,GAAYiF,uBAAuB5S,EAAI0R,WAAYlD,GAC9E,OAAOxO,EAAIG,MAAMH,EAAIH,SAAW8S,EAAW9S,QAE/C,MAAO7N,GACH,MAAMD,EAAuBC,EAAKgO,EAAIiN,iBAxQlD,KCEsB4F,GAAtB,kDAUI,WAAsBC,GAAsB,IAAD,8BACvC,gBATMA,aAQiC,EAEvC,EAAKA,QAAUA,EAFwB,EAV/C,yDAsBQ,OAAOjiB,KAAKiiB,YAtBpB,GAAwCzD,ICJ3B0D,GAAb,WAcI,WAAmBzI,GAA4C,IAAD,gCAZ7C0I,MAAQ,IAAI3U,IAYiC,KAXtD4U,OAAS,IAAI5U,IAWyC,KAVtD6U,cAUsD,EAE1D5I,EAAQ9F,SAAQ,SAACnC,EAAO1D,GACpB,EAAKsU,OAAOrI,IAAIjM,EAAM,SAE1B9N,KAAKmiB,MAAQ1I,EACbzZ,KAAKqiB,UAAW,EApBxB,yDA8BQ,OAAOriB,KAAKqiB,WA9BpB,+BAsCQriB,KAAKqiB,UAAW,IAtCxB,uCAgDQ,OAAOriB,KAAKmiB,MAAMG,SAhD1B,+BA4DoBxU,EAAc0D,GAE1B,QAAIxR,KAAKqiB,WAAariB,KAAKmiB,MAAMI,IAAIzU,OAKvB,OAAV0D,UAFmBA,IAEaxR,KAAKmiB,MAAMzU,IAAII,MAGnD9N,KAAKoiB,OAAOrI,IAAIjM,EAAM0D,IACf,MAvEf,+BAiFoB1D,GACZ,OAAO9N,KAAKoiB,OAAO1U,IAAII,KAlF/B,8BA4FmBA,GACX,OAAO9N,KAAKmiB,MAAMzU,IAAII,KA7F9B,iCAuGQ,OAAO9N,KAAKmiB,QAvGpB,kCAiHQ,OAAOniB,KAAKoiB,SAjHpB,4CA6HiCI,GAAqC,IAAD,OACzDC,EAAgB,GAgBpB,OAfAD,EAAe7O,SAAQ,SAAAY,GACnB,IAAM/C,EAAQ,EAAK4Q,OAAO1U,IAAI6G,GACxB8E,EAAO,EAAK8I,MAAMzU,IAAI6G,GAE5B,QAAclU,IAAVmR,QAAgCnR,IAATgZ,EACvB,MAAMmC,EAAakH,UAAUxgB,IAAWiB,WAAWK,iBAAkB+Q,EAAQ,YAAI,EAAK4N,MAAMC,UAAUxH,KAAK,OAE/G,GAAa,WAATvB,EAAmB,CACnB,IAAMlK,EAAM5M,OAAOiP,GAAOkP,QAAQ,OAAQ,KAAKA,QAAQ,QAAS,MAChE+B,EAAIvM,KAAK/G,QAGTsT,EAAIvM,KAAK3T,OAAOiP,OAGjBiR,IA9If,6BAwJkBpH,GACV,OAAIA,aAAiB6G,IACV9H,kBAAQpa,KAAKmiB,MAAO9G,EAAM8G,QAAU/H,kBAAQpa,KAAKoiB,OAAQ/G,EAAM+G,aA1JlF,KCIaO,GAAb,kDAaI,WAAY1Z,EAA2BgZ,GAAsB,IAAD,8BACxD,cAAMA,IAZOhZ,gBAW2C,IAV3C2Z,iBAU2C,EAExD,EAAK3Z,WAAaA,EAElB,EAAK2Z,YAAc3Z,EAAWmT,WAJ0B,EAbhE,8DA4BQ,IAJA,IAAMqG,EAAM,IAAInH,IACZnM,EAAcnP,KAAKiJ,WAAW4X,WAAWH,QAAQ,KAAM,KACrDmC,EAAoB7iB,KAAK4iB,YAAYtS,MACvCA,EAAgB,EACXf,EAAI,EAAGA,EAAIvP,KAAKiJ,WAAW+F,WAAYO,EAC5C,GAAsB,MAAlBJ,EAAIK,OAAOD,GAAY,CACvB,IAAMvO,EAASsP,IAAUf,EAAK,CAACe,MAAOuS,EAAYvS,EAAQ,EAAGE,IAAKqS,EAAYtT,EAAI,GAChF,CAACe,MAAOuS,EAAYvS,EAAOE,IAAKqS,EAAYtT,EAAI,GAClDkT,EAAIvR,IAAI,CAAC/B,IAAKA,EAAIG,MAAMgB,EAAOf,GAAG0Q,OAAQjf,UAC1CsP,EAAQf,EAAI,EAGpB,OAAOkT,IApCf,6BA8CQ,IAAIziB,KAAK8iB,cAAT,CAIA,GAA8D,IAA1D9iB,KAAKiJ,WAAW4X,WAAWvR,MAAM,GAAI,GAAG2Q,OAAOjR,OAC/C,MAAMwM,EAAahX,cAActC,IAAW2B,eAAeS,+BAAgCtE,KAAK4iB,aAEpG,IAAMG,EAAmB/iB,KAAKiiB,QAAQe,YAChCC,EAAsD,YAAOjjB,KAAKkjB,mBAExED,EAAiBtP,SAAQ,SAAAwP,GACrB,IAAKJ,EAAOlJ,UAAUsJ,EAAKhU,KACvB,MAAMqM,EAAahX,cAActC,IAAW2B,eAAeQ,4BAA6B8e,EAAKniB,MAAOmiB,EAAKhU,QAIjH,IAAMiU,EAAsBH,EAAiBvI,KAAI,SAAA/D,GAAC,OAAIA,EAAExH,OAClD2P,EAAmB,IAAItF,EAASuJ,EAAOhE,UAAY,SAEzDgE,EAAOM,eAAc,SAAChK,EAAMvL,GACpBsV,EAAU9E,QAAQxQ,IAAS,GAC3BgR,EAAOwE,UAAUxV,EAAMuL,MAI/B0J,EAAOQ,UAAU5P,SAAQ,SAAAwG,GACpB,IAAIqJ,EAAc,IAAItB,GAAIpD,EAAO2E,cACjCtJ,EAAIuJ,YAAY/P,SAAQ,SAACnC,EAAO1D,GACxBsV,EAAU9E,QAAQxQ,IAAS,GAC3B0V,EAAOG,SAAS7V,EAAM0D,MAG9BsN,EAAO8E,OAAOJ,MAEnBxjB,KAAKye,eAAiBK,KAhF9B,+BAgGoBD,GACZ,IAAIkE,EAAS/iB,KAAKiiB,QAAQ4B,SAAShF,GAE/BrL,EAAWuP,EAAOvP,cACGnT,IAArBL,KAAK4iB,aAA6B5iB,KAAK4iB,YAAYtS,MAAQuO,GAAeA,GAAe7e,KAAK4iB,YAAYpS,MAC1GgD,EAAWuP,EAAOjE,OAAOgF,kBAG7B,IAAMpL,EAASqK,EAAOrK,OAEhBoG,EAAmB,IAAItF,EAASuJ,EAAOjE,OAAOhR,KAAO,SAE3D,GAA8D,IAA1D9N,KAAKiJ,WAAW4X,WAAWvR,MAAM,GAAI,GAAG2Q,OAAOjR,OAE/C,OADA0J,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeS,+BAAgCtE,KAAK4iB,cAC/F,CAAC9D,SAAQtL,WAAUkF,UAE9B,IAAM0K,EAAqDpjB,KAAKkjB,kBAE1Da,EAA+C,GAcrD,OAbAX,EAAUzP,SAAQ,SAAAwP,GACd,IAAMa,EAAUb,EAAKhU,IACjB4T,EAAOjE,OAAOjF,UAAUmK,GAExBlF,EAAOwE,UAAUU,EAASjB,EAAOjE,OAAO2E,aAAa/V,IAAIsW,IAGzDD,EAAO7N,KAAKiN,MAGpBY,EAAOpQ,SAAQ,SAAAwP,GACXzK,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeQ,4BAA6B8e,EAAKniB,MAAOmiB,EAAKhU,SAE5G,CAAC2P,SAAQtL,WAAUkF,YAhIlC,oCA0IQ,OAAO1Y,KAAKiiB,QAAQgC,cAAgBjkB,KAAKkkB,uBA1IjD,yCAqJQ,OAAOhiB,IAAW6G,WAAWE,aArJrC,2CAgKQ,OAAOjJ,KAAKiJ,WAAWyX,QAAQ,OAAQ,SAhK/C,GAAoCsB,I,SCP9BmC,GAAiC,CAAC,OAAQ,OAAQ,QAAS,IAO3DC,GAAmC,CAAC,IAAK,IAAK,IAAK,IAqClD,SAASC,GAAsBlV,GAClC,OAAOgV,GAAqB7F,QAAQnP,EAAI0R,WAAWvD,gBAAkB,ECzClE,ICAKgH,GDACC,GAAb,iDACY7J,IAA6B,IAAIlN,IAD7C,gDAUe8K,GACP,IAAMkM,EAAWxkB,KAAK0a,IAAIhN,IAAI4K,EAAIuI,YAClC,YAAoBxgB,IAAbmkB,OAAyBnkB,EAAYmkB,EAAShT,QAZ7D,0BAsBe8G,EAAoB9G,GAC3BxR,KAAK0a,IAAIX,IAAIzB,EAAIuI,WAAY,CAACvI,MAAK9G,YAvB3C,6BAiCkB8G,GACV,OAAOtY,KAAK0a,IAAI+J,OAAOnM,EAAIuI,cAlCnC,0BA4CevI,GACP,OAAOtY,KAAK0a,IAAI6H,IAAIjK,EAAIuI,cA7ChC,8BAqDQ7gB,KAAK0a,IAAIgK,UArDjB,6BA+DQ,OAAO1kB,KAAK0a,IAAIiK,OA/DxB,8BAwEmBzK,GACX,YAAIla,KAAK0a,IAAI0H,UAAUzO,SAAQ,SAAC6Q,EAAUpV,GAAX,OAAqB8K,EAAEsK,EAAShT,MAAOgT,EAASlM,IAAKlJ,UAzE5F,KEQawV,GAAb,kDAaI,WAAmB1b,EAAuB+Y,GAAsB,IAAD,8BAC3D,cAAMA,IAZO/Y,YAW8C,IAV9C0Z,iBAU8C,EAE3D,EAAK1Z,OAASA,EACd,EAAK0Z,YAAc1Z,EAAOkT,WAHiC,EAbnE,yDAmByByI,GAAiE,IAAD,EAA9CnM,EAA8C,uDAAf,GAC5DoM,EAAc,SAAC9G,GACjB,GAAI6G,EACA,MAAM7G,EAENtF,EAAOxC,KAAK8H,IAGd+G,EAAyB/kB,KAAKkJ,OAAOoG,MAAM,GAAI,GAAGyN,MAAM,KACxD0F,EAAiB,IAAI8B,GATsD,eAUhEQ,GAVgE,IAUjF,2BAAwB,CAAC,IAAhBC,EAAe,QAEhBC,EAAyBD,EAAKjI,MAAM,MAAMrC,KAAI,SAAAwK,GAAC,OAAIA,EAAEjF,UACrDkF,GAAc,EACdC,GAAa,EACjB,GAAqB,IAAjBH,EAAMjW,OAAc,CACpB,IAAIhO,EAAQgkB,EAAK5I,WACb4I,EAAK3F,gBAAkChf,IAArBL,KAAK4iB,cACvB5hB,EAAQ,CAACsP,MAAOtQ,KAAK4iB,YAAYtS,MAAOE,IAAKxQ,KAAK4iB,YAAYtS,QAElEwU,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa+C,wBAAyBxG,IACtFmkB,GAAc,EACdC,GAAa,GAEZD,GAAe1C,EAAIF,IAAI0C,EAAM,MAC9BH,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAakD,qCACzDsd,EAAM,GAAG7I,WAAY6I,EAAM,GAAGpE,aAClCsE,GAAc,GAEbC,GAAetI,GAAYgE,OAAOmE,EAAM,GAAGpE,cAC5CiE,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAagD,0BACzDwd,EAAM,GAAG7I,WAAY6I,EAAM,GAAGpE,aAClCuE,GAAa,IAEZA,GAAcf,GAAsBY,EAAM,MAC3CH,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAaiD,0BACzDud,EAAM,GAAG7I,WAAY6I,EAAM,GAAGpE,aAClCuE,GAAa,GAGZD,GAAgBC,EAIXD,EAIAC,GACN3C,EAAI1I,IAAIiF,GAAcS,QAASwF,EAAM,IAJrCxC,EAAI1I,IAAIkL,EAAM,GAAIA,EAAM,IAJxBxC,EAAI1I,IAAIkL,EAAM,GAAIA,EAAM,KAzCiD,8BAqDjF,OAAOxC,IAxEf,6BAkFyB,IAAD,OAChB,IAAIziB,KAAK8iB,cAAT,CAGA,IAAMuC,EAAqBrlB,KAAKslB,cAAa,GACvCvC,EAAmB/iB,KAAKiiB,QAAQe,YAEtCqC,EAAQ1R,SAAQ,SAACnC,EAAO8G,GACnB,IAAyD,IAArDyK,EAAOe,iBAAiBxF,QAAQhG,EAAIuI,YACpC,MAAMrF,EAAahX,cAActC,IAAW2B,eAAeM,gCACvDmU,EAAI8D,WAAY9D,EAAIuI,eAIjC,IAAM/B,EAAmB,IAAItF,EAASuJ,EAAOhE,UAAY,SACnDwG,EAA6C,IAAI/X,IAEvDuV,EAAOM,eAAc,SAAChK,EAAMvL,GACpBuX,EAAQ9C,IAAIzU,GACZyX,EAASxL,IAAIjM,EAAMuL,GAGnByF,EAAOwE,UAAUxV,EAAMuL,MAI/BkM,EAAS5R,SAAQ,SAAC0F,EAAMvL,GAEpB,IAAKgR,EAAOwE,UAAU+B,EAAQ3X,IAAII,GAAM+S,WAAYxH,GAAO,CACvD,IAAMmM,EAAUH,EAAQ3X,IAAII,GAC5B,MAAM0N,EAAahX,cAActC,IAAW2B,eAAeO,4BACvD,EAAK8E,OAAOkT,WAAYoJ,EAAUA,EAAQ3E,WAAa,QAInEkC,EAAOQ,UAAU5P,SAAQ,SAAAwG,GACrB,IAAMqJ,EAAc,IAAItB,GAAIpD,EAAO2E,cACnCtJ,EAAIuJ,YAAY/P,SAAQ,SAACnC,EAAO1D,GAC5B,IAAM2X,EAAWJ,EAAQ3X,IAAII,GACL,qBAAb2X,EACPjC,EAAOG,SAAS7V,EAAM0D,GAGtBgS,EAAOG,SAAS8B,EAAS5E,WAAYrP,MAG7CsN,EAAO8E,OAAOJ,MAElBxjB,KAAKye,eAAiBK,KAlI9B,+BAoJoBD,GACZ,IAAMkE,EAAS/iB,KAAKiiB,QAAQ4B,SAAShF,GAEjCrL,EAAWuP,EAAOvP,cACGnT,IAArBL,KAAK4iB,aAA6B5iB,KAAK4iB,YAAYtS,MAAQuO,GAAeA,GAAe7e,KAAK4iB,YAAYpS,MAC1GgD,EAAWuP,EAAOjE,OAAOgF,kBAG7B,IAAMpL,EAASqK,EAAOrK,OAChB2M,EAAqBrlB,KAAKslB,cAAa,EAAO5M,GAE9CoG,EAAmB,IAAItF,EAASuJ,EAAOjE,OAAOC,UAAY,SAEhEgE,EAAOjE,OAAOuE,eAAc,SAAChK,EAAMvL,GAC1BuX,EAAQ9C,IAAIzU,IACbgR,EAAOwE,UAAUxV,EAAMuL,MAI/B,IAAM0K,EAA0B,GAC1B2B,EAA4B,GAoBlC,OAnBAL,EAAQ1R,SAAQ,SAAC2D,EAAOF,GACpB,IAAMuO,EAAYvO,EAAOyJ,WACnB+E,EAAWtO,EAAMuJ,WAClBkC,EAAOjE,OAAOjF,UAAU8L,IAAevO,EAAOiI,UAI1CP,EAAOwE,UAAUsC,EAAU7C,EAAOjE,OAAO2E,aAAa/V,IAAIiY,KAC/DD,EAASxP,KAAKoB,GAJdyM,EAAO7N,KAAKkB,MAOpB2M,EAAOpQ,SAAQ,SAAAY,GACXmE,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeM,gCAC7DoQ,EAAO6H,WAAY7H,EAAOsM,gBAElC6E,EAAS/R,SAAQ,SAAAY,GACbmE,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeO,4BAC7DmQ,EAAO6H,WAAY7H,EAAOsM,gBAE3B,CAAC/B,SAAQtL,WAAUkF,YA5LlC,oCAsMQ,OAAO1Y,KAAKiiB,QAAQgC,cAAgBjkB,KAAKkkB,uBAtMjD,yCAiNQ,OAAOhiB,IAAW6G,WAAWG,SAjNrC,2CA4NQ,OAAOlJ,KAAKkJ,OAAOwX,QAAQ,OAAQ,SA5N3C,GAAgCsB,ICQV6D,GAAtB,mC,SFhBYvB,O,iBAAAA,I,uBAAAA,I,eAAAA,I,eAAAA,I,6BAAAA,I,8BAAAA,Q,KAeL,IGhBFwB,GHgBQC,GAAb,kDAyFI,WAAoC1M,EAA8C2M,EAC9CC,EAAmCC,GAAoB,IAAD,8BACtF,gBAFgC7M,OACsD,EADR2M,WACQ,EAAtDC,OAAsD,EAAnBC,QAAmB,EA1F9F,uDAWwBF,EAAyBC,EAAkBC,GAC3D,OAAO,IAAIH,EAAkBzB,GAAsB6B,MAAOH,EAAUC,EAAMC,KAZlF,+BAwB2BF,EAAyBC,EAAkBC,GAC9D,OAAO,IAAIH,EAAkBzB,GAAsB8B,SAAUJ,EAAUC,EAAMC,KAzBrF,2BAqCuBF,EAAyBC,EAAkBC,GAC1D,OAAO,IAAIH,EAAkBzB,GAAsB+B,KAAML,EAAUC,EAAMC,KAtCjF,2BAkDuBF,EAAyBC,EAAkBC,GAC1D,OAAO,IAAIH,EAAkBzB,GAAsBgC,KAAMN,EAAUC,EAAMC,KAnDjF,kCA+D8BF,EAAyBC,EAAkBC,GACjE,OAAO,IAAIH,EAAkBzB,GAAsBiC,YAAaP,EAAUC,EAAMC,KAhExF,kCA4E8BF,EAAyBC,EAAkBC,GACjE,OAAO,IAAIH,EAAkBzB,GAAsBkC,YAAaR,EAAUC,EAAMC,OA7ExF,0CAwGgBnD,GACR,IAAM0D,EAAuBzmB,KAAKimB,KAAKvH,KAAKqE,GACtC2D,EAAwB1mB,KAAKkmB,MAAMxH,KAAKqE,GAE9C,GAAwB,SAApB0D,EAAWpN,MAAwC,SAArBqN,EAAYrN,MAAmBoN,EAAWpN,OAASqN,EAAYrN,KAC7F,MAAMmC,EAAatT,YAAYhG,IAAWuC,aAAaqD,sCACnD9H,KAAKgmB,SAAS5J,WAAYpc,KAAKgmB,SAASnF,WAAY4F,EAAWpN,KAAMqN,EAAYrN,MAIzF,OAAyB,OAArBoN,EAAWjV,OAAwC,OAAtBkV,EAAYlV,OAAsC,SAApBiV,EAAWpN,MAAwC,SAArBqN,EAAYrN,KAC9F,CAAC7H,OAAO,EAAO6H,KAAM,WAE5BrZ,KAAKqZ,OAASiL,GAAsB6B,MAC7B,CAAC3U,MAAOiV,EAAWjV,QAAUkV,EAAYlV,MAAO6H,KAAM,WAE7DrZ,KAAKqZ,OAASiL,GAAsB8B,SAEV,OAArBK,EAAWjV,OAAsC,SAApBiV,EAAWpN,MAA2C,OAAtBqN,EAAYlV,OAAuC,SAArBkV,EAAYrN,KACjG,CAAC7H,OAAO,EAAO6H,KAAM,WAEzB,CAAC7H,MAAOiV,EAAWjV,QAAUkV,EAAYlV,MAAO6H,KAAM,WAE7DrZ,KAAKqZ,OAASiL,GAAsB+B,KACX,OAArBI,EAAWjV,OAAwC,OAAtBkV,EAAYlV,MAClC,CAACA,OAAO,EAAO6H,KAAM,WAEzB,CAAC7H,MAAOiV,EAAWjV,MAAQkV,EAAYlV,MAAO6H,KAAM,WAE3DrZ,KAAKqZ,OAASiL,GAAsBgC,KACX,OAArBG,EAAWjV,OAAwC,OAAtBkV,EAAYlV,MAClC,CAACA,OAAO,EAAO6H,KAAM,WAEzB,CAAC7H,MAAOiV,EAAWjV,MAAQkV,EAAYlV,MAAO6H,KAAM,WAE3DrZ,KAAKqZ,OAASiL,GAAsBiC,YACX,OAArBE,EAAWjV,OAAwC,OAAtBkV,EAAYlV,MAClC,CAACA,OAAO,EAAO6H,KAAM,WAEzB,CAAC7H,MAAOiV,EAAWjV,OAASkV,EAAYlV,MAAO6H,KAAM,WAGvC,OAArBoN,EAAWjV,OAAwC,OAAtBkV,EAAYlV,MAClC,CAACA,OAAO,EAAO6H,KAAM,WAEzB,CAAC7H,MAAOiV,EAAWjV,OAASkV,EAAYlV,MAAO6H,KAAM,aArJpE,iCA+JQ,MAAO,IAAMrZ,KAAKimB,KAAKpF,WAAa,IAAM7gB,KAAKgmB,SAASnF,WAAa,IAAM7gB,KAAKkmB,MAAMrF,WAAa,QA/J3G,GAAuCgF,K,SGhBlCC,O,aAAAA,I,WAAAA,I,cAAAA,Q,KAYE,ICZFa,GDYQC,GAAb,kDAwCI,WAAqCvN,EAA4C2M,EAC5CC,EAAmCC,GAAqB,IAAD,8BACxF,gBAFiC7M,OACuD,EADX2M,WACW,EAAvDC,OAAuD,EAApBC,QAAoB,EAzChG,qDAWsBF,EAAyBC,EAAkBC,GACzD,OAAO,IAAIU,EAAgBd,GAAoBe,IAAKb,EAAUC,EAAMC,KAZ5E,yBAwBqBF,EAAyBC,EAAkBC,GACxD,OAAO,IAAIU,EAAgBd,GAAoBgB,GAAId,EAAUC,EAAMC,KAzB3E,0BAoCsBF,EAAyB/D,GACvC,OAAO,IAAI2E,EAAgBd,GAAoBiB,IAAKf,EAAU/D,OArCtE,0CAqDgBc,GACR,IAAM0D,EAAuBzmB,KAAKimB,KAAKvH,KAAKqE,GAC5C,GAAwB,YAApB0D,EAAWpN,KACX,MAAMmC,EAAatT,YAAYhG,IAAWuC,aAAauD,oCACnDhI,KAAKgmB,SAAS5J,WAAYpc,KAAKgmB,SAASnF,WAAY4F,EAAWpN,MAGvE,GAAIrZ,KAAKqZ,OAASyM,GAAoBiB,IAClC,OAAyB,OAArBN,EAAWjV,MACJ,CAAEA,OAAO,EAAO6H,KAAM,WAE1B,CAAE7H,OAAQiV,EAAWjV,MAAO6H,KAAM,WAIzC,IAAMqN,EAAwB1mB,KAAKkmB,MAAMxH,KAAKqE,GAC9C,GAAyB,YAArB2D,EAAYrN,KACZ,MAAMmC,EAAatT,YAAYhG,IAAWuC,aAAawD,qCACnDjI,KAAKgmB,SAAS5J,WAAYpc,KAAKgmB,SAASnF,WAAY6F,EAAYrN,MAGxE,OAAIrZ,KAAKqZ,OAASyM,GAAoBe,IACT,OAArBJ,EAAWjV,OAAwC,OAAtBkV,EAAYlV,MAClC,CAAEA,OAAO,EAAO6H,KAAM,WAG1B,CAAE7H,MAAOiV,EAAWjV,OAASkV,EAAYlV,MAAO6H,KAAM,WAGpC,OAArBoN,EAAWjV,OAAwC,OAAtBkV,EAAYlV,MAClC,CAAEA,OAAO,EAAO6H,KAAM,WAER,OAArBoN,EAAWjV,MAEJ,CAAEA,MAAOkV,EAAYlV,MAAO6H,KAAM,WAEnB,OAAtBqN,EAAYlV,MAEL,CAAEA,MAAOiV,EAAWjV,MAAO6H,KAAM,WAGrC,CAAE7H,MAAOiV,EAAWjV,OAASkV,EAAYlV,MAAO6H,KAAM,aA9F7E,iCA0GQ,OAAIrZ,KAAKqZ,OAASyM,GAAoBiB,IAC3B/mB,KAAKgmB,SAASnF,WAAa,IAAM7gB,KAAKimB,KAAKpF,WAAa,IAG5D,IAAM7gB,KAAKimB,KAAKpF,WAAa,IAAM7gB,KAAKgmB,SAASnF,WAAa,IAAM7gB,KAAKkmB,MAAMrF,WAAa,QA9G3G,GAAqCgF,IEbxBmB,GAAb,kDAQI,WAAoCxV,EAAuC6H,GAAqC,IAAD,8BAC3G,gBADgC7H,QAA2E,EAApC6H,OAAoC,EARnH,iDAmBgB0J,GACR,MAAO,CAAEvR,MAAOxR,KAAKwR,MAAO6H,KAAMrZ,KAAKqZ,QApB/C,iCA8BQ,OAAmB,OAAfrZ,KAAKwR,MACE,OAEJxR,KAAKwR,MAAMqP,eAjC1B,GAAkCgF,ICGrBoB,GAAb,kDAQI,WAAoCC,GAA4B,IAAD,8BAC3D,gBADgCA,aAA2B,EARnE,iDAmBgBnE,GACR,IAAMvR,EAAmCuR,EAAOoE,SAASnnB,KAAKknB,WAAWrG,YACnExH,EAAwC0J,EAAOqE,QAAQpnB,KAAKknB,WAAWrG,YAC7E,QAAcxgB,IAAVmR,QAAgCnR,IAATgZ,EACvB,MAAMmC,EAAahX,cAActC,IAAW2B,eAAeU,4BACvDvE,KAAKknB,WAAW9K,WAAYpc,KAAKknB,WAAWrG,WAAY,YAAIkC,EAAOe,kBAAkBlJ,KAAK,OAElG,MAAO,CAAEpJ,MAAOA,EAAO6H,KAAMA,KA1BrC,iCAoCQ,OAAOrZ,KAAKknB,WAAWrG,eApC/B,GAAoCgF,K,SFF/Bc,K,SAAAA,E,UAAAA,E,mBAAAA,E,cAAAA,Q,KAaE,IAAMU,GAAb,kDAsDI,WAAqChO,EAA8C4M,EAC9CC,EAAoCllB,GAAkC,IAAD,8BACtG,gBAFiCqY,OACqE,EADvB4M,OACuB,EAArEC,QAAqE,EAAjCllB,QAAiC,EAvD9G,qDAWsBilB,EAAkBC,EAAmBllB,GACnD,OAAO,IAAIqmB,EAAkBV,GAAsBW,KAAMrB,EAAMC,EAAOllB,KAZ9E,6BAwByBilB,EAAkBC,EAAmBllB,GACtD,OAAO,IAAIqmB,EAAkBV,GAAsBY,MAAOtB,EAAMC,EAAOllB,KAzB/E,+BAqC2BilB,EAAkBC,EAAmBllB,GACxD,OAAO,IAAIqmB,EAAkBV,GAAsBa,eAAgBvB,EAAMC,EAAOllB,KAtCxF,6BAkDyBilB,EAAkBC,EAAmBllB,GACtD,OAAO,IAAIqmB,EAAkBV,GAAsBzc,SAAU+b,EAAMC,EAAOllB,OAnDlF,0CAmEgB+hB,GACR,IAAM0D,EAAuBzmB,KAAKimB,KAAKvH,KAAKqE,GACtC2D,EAAwB1mB,KAAKkmB,MAAMxH,KAAKqE,GAE9C,GAAwB,WAApB0D,EAAWpN,MAA0C,WAArBqN,EAAYrN,KAC5C,MAAMmC,EAAatT,YAAYhG,IAAWuC,aAAasD,uCAAwC/H,KAAKgB,MAChGhB,KAAKqZ,KAAMoN,EAAWpN,KAAMqN,EAAYrN,MAGhD,GAAyB,OAArBoN,EAAWjV,OAAwC,OAAtBkV,EAAYlV,MACzC,MAAO,CAAEA,MAAO,KAAM6H,KAAM,UAGhC,OAAQrZ,KAAKqZ,MACT,KAAKsN,GAAsBW,KAEvB,MAAO,CAAE9V,MAAOiV,EAAWjV,MAAQkV,EAAYlV,MAAO6H,KAAM,UAChE,KAAKsN,GAAsBY,MAEvB,MAAO,CAAE/V,MAAOiV,EAAWjV,MAAQkV,EAAYlV,MAAO6H,KAAM,UAChE,KAAKsN,GAAsBa,eAEvB,MAAO,CAAEhW,MAAOiV,EAAWjV,MAAQkV,EAAYlV,MAAO6H,KAAM,UAChE,KAAKsN,GAAsBzc,SAEvB,MAAO,CAAEsH,MAAOiV,EAAWjV,MAAQkV,EAAYlV,MAAO6H,KAAM,aA5F5E,iCAuGQ,MAAO,IAAMrZ,KAAKimB,KAAKpF,WAAa,IAAM7gB,KAAKqZ,KAAO,IAAMrZ,KAAKkmB,MAAMrF,WAAa,QAvG5F,GAAuCgF,IGNjB4B,GAAtB,WACI,WAAsCtY,GAAqB,yBAArBA,MAD1C,uDAOQ,OAAOnP,KAAKmP,IAAIiN,eAPxB,KAWsBsL,GAAtB,kDACI,WAAsBvY,EAA6BwN,GAAqB,IAAD,8BACnE,cAAMxN,IADyCwN,aAAoB,EAD3E,UAA4C8K,IAM/BE,GAAb,kDACI,WAAY3B,GAA0B,uCAC5BA,EA7BgB,IA2B9B,UAAqC0B,IAMxBE,GAAb,kDACI,WAAY5B,GAA0B,uCAC5BA,EA/BgB,IA6B9B,UAAqC0B,IAMxBG,GAAb,kDACI,WAAY7B,GAA0B,uCAC5BA,EApCe,GAkC7B,UAAoC0B,IAMvBI,GAAb,kDACI,WAAY9B,GAA0B,uCAC5BA,EA9CmB,IA4CjC,UAAkD0B,IAMrCK,GAAb,kDACI,WAAY/B,GAA0B,uCAC5BA,EApDmB,IAkDjC,UAA4C0B,IAM/BM,GAAb,kDACI,WAAYhC,GAA0B,uCAC5BA,EAzDsB,IAuDpC,UAAwC0B,IAM3BO,GAAb,kDACI,WAAYjC,GAA0B,uCAC5BA,EA/DsB,IA6DpC,UAAyC0B,IAM5BQ,GAAb,kDACI,WAAqB7O,EAA6B2M,GAA0B,IAAD,8BACvE,cAAMA,EApEuB,KAmEZ3M,OAAsD,EAD/E,UAAoCqO,IAMdrL,GAAtB,kDACI,WAAsB2J,GAA0B,uCACtCA,GAFd,UAA+CyB,IAMlCU,GAAb,kDAEI,WAAYnC,GAA0B,uCAC5BA,GAHd,UAAwC3J,IAO3B+L,GAAb,kDAEI,WAAYpC,GAA0B,uCAC5BA,GAHd,UAAwC3J,IAO3BgM,GAAb,kDACI,WAAYlZ,EAA6BqC,EAA+B6H,GAAqC,IAAD,8BACxG,cAAMlK,IAD+BqC,QAAmE,EAApC6H,OAAoC,EADhH,UAAkCoO,IAMrBa,GAAb,kDAEI,WAAYpB,GAA4B,uCAC9BA,GAHd,UAAoCO,ICzEvBc,GAAb,mGAkBwBpZ,EAAoBqZ,GACpC,IAAIC,EAAuBF,EAAYG,YAAYvZ,EAAKqZ,GAAmB,GAC3ExoB,KAAK2oB,uBAAuBF,GAAQ,GACpCA,EAASzoB,KAAK4oB,SAASH,GACvB,IACI,IAAMI,EAAoBN,EAAYO,MAAML,GAC5C,OAAOF,EAAYQ,YAAYF,GAEnC,MAAO1nB,GACH,MAAMD,EAAuBC,EAAKgO,EAAIiN,eA3BlD,gCAyC4BjN,EAAoBqZ,EAA4B/O,GACpE,IAAMf,EAA+B,GACjC+P,EAAuBF,EAAYG,YAAYvZ,EAAKqZ,GAAmB,EAAO9P,GAQlF,OAPA+P,EAAO9U,SAAQ,SAAAqV,GACPA,aAAiBV,KAA6D,IAA3C7O,EAAQ6E,QAAQ0K,EAAM7Z,IAAI0R,aAC7DnI,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeU,4BAC7DykB,EAAM7Z,IAAIiN,WAAY4M,EAAM7Z,IAAI0R,WAAYpH,EAAQmB,KAAK,WAGrE5a,KAAK2oB,uBAAuBF,GAAQ,EAAO/P,GACpCA,IAnDf,kCAiE8BvJ,EAAoBqZ,EAA4B3D,GACE,IAAlDnM,EAAiD,uDAAlB,GAC/CoM,EAAc,SAAC9G,GACjB,GAAI6G,EACA,MAAM7G,EAGNtF,EAAOxC,KAAK8H,IAGhBiL,EAAsB9Z,EAAI8Q,OAC1BgJ,EAAK5J,WACLyF,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAaqB,4BAAwBzF,IAGzF,IADA,IAAMooB,EAAuB,IACrBQ,EAAK5J,WAAW,CAEpB,GAAI4J,EAAK5I,WAAW,KAChBoI,EAAOvS,KAAK,IAAIiS,GAAmBc,EAAK3Z,MAAM,EAAG,KACjD2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,KACrBoI,EAAOvS,KAAK,IAAIkS,GAAmBa,EAAK3Z,MAAM,EAAG,KACjD2Z,EAAOA,EAAK3Z,MAAM,QAGjB,GAAI2Z,EAAK5I,WAAW,KACrBoI,EAAOvS,KAAK,IAAI8R,GAAmBiB,EAAK3Z,MAAM,EAAG,KACjD2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,KACrBoI,EAAOvS,KAAK,IAAI+R,GAAoBgB,EAAK3Z,MAAM,EAAG,KAClD2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,KACrBoI,EAAOvS,KAAK,IAAI4R,GAA6BmB,EAAK3Z,MAAM,EAAG,KAC3D2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,KACrBoI,EAAOvS,KAAK,IAAI6R,GAAuBkB,EAAK3Z,MAAM,EAAG,KACrD2Z,EAAOA,EAAK3Z,MAAM,QAGjB,GAAI2Z,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAK,IAAIgS,GAAe5D,GAAsB6B,MAAO8C,EAAK3Z,MAAM,EAAG,KAC1E2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,KACrBoI,EAAOvS,KAAK,IAAIgS,GAAe5D,GAAsB6B,MAAO8C,EAAK3Z,MAAM,EAAG,KAC1E2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAK,IAAIgS,GAAe5D,GAAsB8B,SAAU6C,EAAK3Z,MAAM,EAAG,KAC7E2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAK,IAAIgS,GAAe5D,GAAsB8B,SAAU6C,EAAK3Z,MAAM,EAAG,KAC7E2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAK,IAAIgS,GAAe5D,GAAsBiC,YAAa0C,EAAK3Z,MAAM,EAAG,KAChF2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAK,IAAIgS,GAAe5D,GAAsBkC,YAAayC,EAAK3Z,MAAM,EAAG,KAChF2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,KACrBoI,EAAOvS,KAAK,IAAIgS,GAAe5D,GAAsB+B,KAAM4C,EAAK3Z,MAAM,EAAG,KACzE2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,KACrBoI,EAAOvS,KAAK,IAAIgS,GAAe5D,GAAsBgC,KAAM2C,EAAK3Z,MAAM,EAAG,KACzE2Z,EAAOA,EAAK3Z,MAAM,QAGjB,GAAI2Z,EAAK5I,WAAW,MAAQ4I,EAAK5I,WAAW,MAC1C4I,EAAK5I,WAAW,QACnBoI,EAAOvS,KAAK,IAAIyR,GAAgBsB,EAAK3Z,MAAM,EAAG,KAC9C2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAK,IAAI0R,GAAgBqB,EAAK3Z,MAAM,EAAG,KAC9C2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,MAAQ4I,EAAK5I,WAAW,UAC7CoI,EAAOvS,KAAK,IAAI0R,GAAgBqB,EAAK3Z,MAAM,EAAG,KAC9C2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAK,IAAI2R,GAAeoB,EAAK3Z,MAAM,EAAG,KAC7C2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,MAAQ4I,EAAK5I,WAAW,UAC7CoI,EAAOvS,KAAK,IAAI2R,GAAeoB,EAAK3Z,MAAM,EAAG,KAC7C2Z,EAAOA,EAAK3Z,MAAM,QAGjB,GAAI2Z,EAAK5I,WAAW,KAAM,CAC3B,IAAMtD,EAAQ4D,GAAmBW,iBAAiB2H,QAC9B5oB,IAAhB0c,EAAMiB,OACN8G,EAAY/H,EAAMiB,OAEtB,IAAMxN,EAAMuM,EAAMnG,MAAM5H,SAAW,GAAK,OAAI3O,EACtC8O,EAAM4N,EAAMnG,MAAMtH,MAAM,EAAGkB,GACjCiY,EAAOvS,KAAK,IAAImS,GAAalZ,EAAKA,EAAI0R,WAAY,WAClDoI,EAAOlM,EAAM5F,YAEZ,GAAI2F,GAAYU,QAAQyL,EAAKzZ,OAAO,IAAK,CAC1C,IAAIuN,EAAQ4D,GAAmBU,WAAW4H,GAC1CR,EAAOvS,KAAK,IAAImS,GAAatL,EAAMnG,MAAO7G,OAAOgN,EAAMnG,MAAMiK,YAAa,WAC1EoI,EAAOlM,EAAM5F,YAEZ,GAAI8R,EAAK5I,WAAW,QAChBmI,GACD1D,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAasB,4BACzDkjB,EAAK3Z,MAAM,EAAG,GAAG8M,aAEzBqM,EAAOvS,KAAK,IAAImS,GAAaY,EAAK3Z,MAAM,EAAG,GAAI,KAAM,SACrD2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,SAAW4I,EAAK5I,WAAW,SAAW4I,EAAK5I,WAAW,QAC3EoI,EAAOvS,KAAK,IAAImS,GAAaY,EAAK3Z,MAAM,EAAG,IAAI,EAAM,YACrD2Z,EAAOA,EAAK3Z,MAAM,QAEjB,GAAI2Z,EAAK5I,WAAW,UAAY4I,EAAK5I,WAAW,UAAY4I,EAAK5I,WAAW,SAC7EoI,EAAOvS,KAAK,IAAImS,GAAaY,EAAK3Z,MAAM,EAAG,IAAI,EAAO,YACtD2Z,EAAOA,EAAK3Z,MAAM,QAGjB,GAAIwN,GAAYI,SAAS+L,EAAKzZ,OAAO,KAA0B,MAAnByZ,EAAKzZ,OAAO,GAAY,CACrE,IAAIuN,EAAQ4D,GAAmBQ,SAAS8H,GACxCR,EAAOvS,KAAK,IAAIoS,GAAevL,EAAMnG,QACrCqS,EAAOlM,EAAM5F,WAGZ,CACD,IAAM4F,EAAQ4D,GAAmBS,sBAAsB6H,GACvDnE,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAauB,2BACzD+W,EAAMnG,MAAMwF,WAAYW,EAAMnG,MAAMiK,aACxCoI,EAAOA,EAAK3Z,MAAMyN,EAAMnG,MAAM5H,UAElCia,EAAOA,EAAKhJ,OAEhB,OAAOwI,IAjNf,6CAyNyCA,EAAsB5D,GAAsD,IAApCnM,EAAmC,uDAAJ,GACxG,GAAsB,IAAlB+P,EAAOzZ,OAAX,CAIA,IAAM8V,EAAc,SAAC9G,GACjB,GAAI6G,EACA,MAAM7G,EAGNtF,EAAOxC,KAAK8H,KAMfyK,EAAO,aAAcL,IAAyBK,EAAO,aAAcf,MAAoBe,EAAO,aAAcd,MAC7G7C,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa2B,yBACzDqiB,EAAO,GAAGrM,WAAYqM,EAAO,GAAGtZ,IAAI0R,cAIvC4H,EAAOA,EAAOzZ,OAAS,aAAcmZ,IAAwBM,EAAOA,EAAOzZ,OAAS,aAAc0Y,KACnG5C,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa4B,uBACzDoiB,EAAOA,EAAOzZ,OAAS,GAAGoN,WAAYqM,EAAOA,EAAOzZ,OAAS,GAAGG,IAAI0R,aAI5E,IADA,IAAIqI,EAAa,EACVA,EAAKT,EAAOzZ,QAAQ,CACvB,IAAMma,EAAqBV,EAAOS,EAAK,GACjCE,EAAqBX,EAAOS,KAChCA,EAIEE,aAAkBf,IACdc,aAAkBd,IAClBvD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa6B,gCACzD8iB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,aAEzDsI,aAAkBb,IAClBxD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa8B,kCACzD6iB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,aAEzDsI,aAAkBf,IAClBtD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa+B,gCACzD4iB,EAAOhN,WAAYgN,EAAOja,IAAI0R,cAKjCuI,aAAkBd,IACnBa,aAAkBd,IAClBvD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAagC,kCACzD2iB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,aAEzDsI,aAAkBb,IAClBxD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAaiC,oCACzD0iB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,aAEzDsI,aAAkBf,IAClBtD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAakC,kCACzDyiB,EAAOhN,WAAYgN,EAAOja,IAAI0R,cAKjCuI,aAAkBzB,IACnBwB,aAAkBd,IAClBvD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAamC,4BACzDwiB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,aAEzDsI,aAAkBb,IAClBxD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAaoC,8BACzDuiB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,aAEzDsI,aAAkBf,IAClBtD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAaqC,4BACzDsiB,EAAOhN,WAAYgN,EAAOja,IAAI0R,cAKjCuI,aAAkB1B,IACnByB,aAAkBzB,IAClB5C,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAasC,gCACzDqiB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,aAEzDsI,aAAkBhB,IAClBrD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAauC,+BACzDoiB,EAAOhN,WAAYgN,EAAOja,IAAI0R,cAKjCuI,aAAkBjB,IACnBgB,aAAkBd,IAClBvD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAawC,gCACzDmiB,EAAOhN,WAAY+M,EAAOha,IAAI0R,aAElCsI,aAAkBb,IAClBxD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAayC,kCACzDkiB,EAAOhN,WAAY+M,EAAOha,IAAI0R,aAElCsI,aAAkBf,IAClBtD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa0C,gCACzDiiB,EAAOhN,cAKVgN,aAAkBhB,KACnBe,aAAkBzB,IAClB5C,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa2C,iCACzDgiB,EAAOhN,WAAY+M,EAAOha,IAAI0R,aAElCsI,aAAkBhB,IAClBrD,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAa4C,gCACzD+hB,EAAOhN,kBA/U/B,+BA2V2BqM,GACnB,IAAMY,EAAuB,GACvBC,EAA+B,IAAIhO,IAEzCmN,EAAO9U,SAAQ,SAACqV,EAAOzZ,GACfyZ,aAAiBrB,IACjB0B,EAAWnT,KAAK3G,MAGxB,IAAK,IAAIA,EAAI,EAAGA,EAAI8Z,EAAWra,SAAUO,EAEjC8Z,EAAW9Z,EAAI,GAAK,IAAM8Z,EAAW9Z,KACrC+Z,EAAgBpY,IAAImY,EAAW9Z,EAAI,IACnC+Z,EAAgBpY,IAAImY,EAAW9Z,IAC/B8Z,EAAW9Z,GAAK+P,KAGxB,OAA6B,IAAzBgK,EAAgB3E,KACT8D,EAEJA,EAAO/R,QAAO,SAAC6S,EAAGha,GAAJ,OAAW+Z,EAAgB/G,IAAIhT,QA/W5D,4BAwXwBkZ,GAChB,IAAMe,EAAyB,GACzBC,EAA0D,GAsChE,IArCAhB,EAAO9U,SAAQ,SAAAqV,GACX,GAAIA,aAAiBX,IAAgBW,aAAiBV,GAClDkB,EAAStT,KAAK8S,QAEb,GAAIA,aAAiBtB,GAAe,CACrC,KAAO+B,EAAeza,OAAS,GAAKya,EAAeA,EAAeza,OAAS,aAAc0Y,IAAe,CAEpG,IAAIrM,EAAuBoO,EAAeA,EAAeza,OAAS,GAElE,KAAIga,EAAMrM,YAActB,EAAMsB,YAK1B,MAHA6M,EAAStT,KAAKuT,EAAeC,OAMrCD,EAAevT,KAAK8S,QAEnB,GAAIA,aAAiBb,GACtBsB,EAAevT,KAAK8S,QAEnB,GAAIA,aAAiBZ,GACtB,OAAa,CACT,GAA8B,IAA1BqB,EAAeza,OACf,MAAMwM,EAAatT,YAAYhG,IAAWuC,aAAawB,2CACnD5F,GAER,GAAIopB,EAAeA,EAAeza,OAAS,aAAcmZ,GAAoB,CACzEsB,EAAeC,MACf,MAGJF,EAAStT,KAAKuT,EAAeC,WAIlCD,EAAeza,OAAS,GAAG,CAE9B,IAAM2a,EAAuBF,EAAeC,MAC5C,GAAIC,aAAoBxB,GACpB,MAAM3M,EAAatT,YAAYhG,IAAWuC,aAAayB,2CACnD7F,GAGJmpB,EAAStT,KAAKyT,GAGtB,OAAOH,IA3af,kCAqb8Bf,GACtB,IAAMhG,EAAkBziB,KAAK4pB,qBAAqBnB,GAElD,GAAIA,EAAOzZ,OAAS,EAChB,MAAMwM,EAAatT,YAAYhG,IAAWuC,aAAa0B,mCAA+B9F,GAE1F,OAAOoiB,IA3bf,2CAocuCgG,GAC/B,GAAsB,IAAlBA,EAAOzZ,OACP,MAAMwM,EAAatT,YAAYhG,IAAWuC,aAAa0B,mCAA+B9F,GAG1F,IAAM2oB,EAAoBP,EAAOiB,MACjC,GAAIV,aAAiBrB,GAAiB,CAClC,IAAM1F,EAAsBsG,EAAYqB,qBAAqBnB,GAC7D,OAAO7B,GAAgBG,IAAIiC,EAAM7Z,IAAK8S,GAE1C,GAAI+G,aAAiBpB,GAAiB,CAClC,IAAM1B,EAAoBqC,EAAYqB,qBAAqBnB,GACrDxC,EAAmBsC,EAAYqB,qBAAqBnB,GAC1D,OAAO7B,GAAgBC,IAAImC,EAAM7Z,IAAK8W,EAAMC,GAEhD,GAAI8C,aAAiBnB,GAAgB,CACjC,IAAM3B,EAAoBqC,EAAYqB,qBAAqBnB,GACrDxC,EAAmBsC,EAAYqB,qBAAqBnB,GAC1D,OAAO7B,GAAgBE,GAAGkC,EAAM7Z,IAAK8W,EAAMC,GAE/C,GAAI8C,aAAiBd,GAAgB,CACjC,IAAMhC,EAAoBqC,EAAYqB,qBAAqBnB,GACrDxC,EAAmBsC,EAAYqB,qBAAqBnB,GAC1D,OAAO,IAAI1C,GAAkBiD,EAAM3P,KAAM2P,EAAM7Z,IAAK8W,EAAMC,GAE9D,GAAI8C,aAAiBX,GACjB,OAAO,IAAIrB,GAAagC,EAAMxX,MAAOwX,EAAM3P,MAE/C,GAAI2P,aAAiBV,GACjB,OAAO,IAAIrB,GAAe+B,EAAM7Z,KAEpC,GAAI6Z,aAAiBhB,GAAoB,CACrC,IAAM9B,EAAoBqC,EAAYqB,qBAAqBnB,GACrDxC,EAAmBsC,EAAYqB,qBAAqBnB,GAC1D,OAAOpB,GAAkBnW,IAAI+U,EAAMC,EAAO8C,EAAM5M,YAEpD,GAAI4M,aAAiBf,GAAqB,CACtC,IAAM/B,EAAoBqC,EAAYqB,qBAAqBnB,GACrDxC,EAAmBsC,EAAYqB,qBAAqBnB,GAC1D,OAAOpB,GAAkBwC,OAAO5D,EAAMC,EAAO8C,EAAM5M,YAEvD,GAAI4M,aAAiBlB,GAA8B,CAC/C,IAAM5B,EAAoBqC,EAAYqB,qBAAqBnB,GACrDxC,EAAmBsC,EAAYqB,qBAAqBnB,GAC1D,OAAOpB,GAAkByC,SAAS7D,EAAMC,EAAO8C,EAAM5M,YAEzD,GAAI4M,aAAiBjB,GAAwB,CACzC,IAAM7B,EAAoBqC,EAAYqB,qBAAqBnB,GACrDxC,EAAmBsC,EAAYqB,qBAAqBnB,GAC1D,OAAOpB,GAAkB0C,OAAO9D,EAAMC,EAAO8C,EAAM5M,YAGvD,MAAMZ,EAAakH,UAAUxgB,IAAWiB,WAAWM,4BAA6BumB,KAAKC,UAAUjB,QAxfvG,KClBsBkB,GAAtB,kDAYI,WAAsBjE,EAAkBC,GAAoB,IAAD,8BACvD,gBAXMiE,iBAUiD,IATjDC,kBASiD,EAEvD,EAAKD,YAAclE,EACnB,EAAKmE,aAAelE,EAHmC,EAZ/D,6DAwBQ,OAAOlmB,KAAKmqB,cAxBpB,wCAiCQ,OAAOnqB,KAAKoqB,eAjCpB,qCAgD6BvL,EAAqBxF,GAAuD,IAAD,EAE1F4M,EAAOjmB,KAAKmqB,YAAYtG,SAAShF,GACjCqH,EAAQlmB,KAAKoqB,aAAavG,SAAShF,GAEnCC,EAAmB,IAAItF,EAAS,UAQtC,MAPa,SAATH,GAA4B,UAATA,GACnB4M,EAAKnH,OAAOuE,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAExD,UAATA,GAA6B,UAATA,GACpB6M,EAAMpH,OAAOuE,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,OAEtE,EAAA4M,EAAKvN,QAAOxC,KAAZ,oBAAoBgQ,EAAMxN,SACnB,CACHoG,SACAtL,SAAmC,IAAzByS,EAAKzS,SAASxE,OAAeiX,EAAKzS,SAAW0S,EAAM1S,SAC7DkF,OAAQuN,EAAKvN,YAhEzB,GAAyC8F,ICHlC,SAAS6L,GAAYC,EAAkBlb,GAC1C,IAAIG,EAAY,EAoBhB,OAnBwB,SAAlBgb,EAAmBC,GAErB,GAAIjb,IAAMH,EACN,OAAOob,EAGX,GADAjb,IACIib,aAAgBxI,GAChB,OAAOuI,EAAgBC,EAAKC,cAEhC,GAAID,aAAgBN,GAAY,CAC5B,IAAMQ,EAAaH,EAAgBC,EAAKG,kBACxC,OAAmB,OAAfD,EACOH,EAAgBC,EAAKI,mBAEzBF,EAGX,OAAO,KAEJH,CAAgBD,GAWpB,SAASO,GAAaP,GACzB,GAAIA,aAAgBJ,GAAY,CAC5B,IAAMjE,EAAe4E,GAAaP,EAAKK,kBACjCzE,EAAgB2E,GAAaP,EAAKM,mBACxC,OAAOE,KAAKC,IAAI9E,EAAMC,GAAS,EAEnC,OAAIoE,aAAgBtI,GACT6I,GAAaP,EAAKG,cAAgB,EAEtC,EAgBJ,SAASO,GAAwBxS,EAAgBxX,EAAiCmO,GACrF,QAAc9O,IAAVW,GAAuBA,EAAMsP,MAAQkI,GAAUA,GAAUxX,EAAMwP,IAAK,CAMpE,IALA,IAAMya,EAAMjqB,EAAMwP,IAAMxP,EAAMsP,MACxBqK,EAAIxL,EAAI0R,WACRqK,EAAmB1S,EAASxX,EAAMsP,MACpC6a,GAAwB,EACxBrN,EAAsB,EACjBvO,EAAI,EAAGA,EAAI0b,IAAO1b,EAAG,CAC1B,IAAMwO,EAAUpD,EAAEnL,OAAOD,GAWzB,GATgB,MAAZwO,GAAoBD,EAAc,IAAO,IACzCqN,GAAgBA,GAEhBA,GAA4B,OAAZpN,IACdD,EAGFA,EAAc,EAEdvO,IAAM2b,EAAmB,EAEzB,OAAQC,GAAgBhc,EAAIuS,WAAW1H,MAAK,SAAAiD,GAAC,OAAIA,EAAE7N,QAAUoJ,EAAS,KAG9E7W,QAAQS,KAAK,yCAEjB,OAAO,EChFJ,ICNKgpB,GDMCC,GAAb,kDAeI,WAAmBriB,EAA0BiZ,EAAqBuG,GAA6B,IAAD,8BAC1F,cAAMvG,IAdOjZ,eAa6E,IAZ7E4Z,iBAY6E,IAX7E4F,uBAW6E,EAE1F,EAAKxf,UAAYA,EACjB,EAAK4Z,YAAc5Z,EAAUoT,WAC7B,EAAKoM,kBAAoBA,EAJiE,EAflG,mDA4ByB,IAAD,OAChB,IAAIxoB,KAAK8iB,cAAT,CAIA,IAAIwI,EACJ,IACIA,EAAW/C,GAAYgD,MAAMvrB,KAAKgJ,UAAUsG,MAAM,GAAI,GAAItP,KAAKwoB,mBAEnE,MAAOrV,GACH,MAAMjS,EAAuBiS,EAAGnT,KAAK4iB,aAGzC,IAAMG,EAAmB/iB,KAAKiiB,QAAQe,YAChClE,EAAmB,IAAItF,EAASuJ,EAAOjV,KAAO,SACpDiV,EAAOM,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAE5D0J,EAAOQ,UAAU5P,SAAQ,SAAAwG,GACrB,IAAIqR,EAAiBF,EAAS5M,KAAKvE,GACnC,GAAkB,YAAdqR,EAAKnS,KACL,MAAMmC,EAAatT,YAAYhG,IAAWuC,aAAamD,+BACnD,EAAKgb,YAAa,EAAK5Z,UAAU0X,QAAQ,OAAQ,KAAM8K,EAAKnS,MAEhEmS,EAAKha,OACLsN,EAAO8E,OAAOzJ,MAGtBna,KAAKye,eAAiBK,KAvD9B,+BAwEoBD,GAAsB,IAAD,EACA7e,KAAKiiB,QAAQ4B,SAAShF,GAAlDC,EAD4B,EAC5BA,OAAQtL,EADoB,EACpBA,SAAUkF,EADU,EACVA,OACjB+S,EAAY,IAAIjS,EAASsF,EAAOC,UAAY,SAkBlD,OAjBAD,EAAOuE,eAAc,SAAChK,EAAMvL,GACxB2d,EAAUnI,UAAUxV,EAAMuL,MAE9ByF,EAAS2M,EAELT,GAAwBnM,EAAa7e,KAAK4iB,YAAa5iB,KAAKgJ,aAC5DwK,EAAWsL,EAAOgF,kBAGwC,IAA1D9jB,KAAKgJ,UAAU6X,WAAWvR,MAAM,GAAI,GAAG2Q,OAAOjR,OAC9C0J,EAAOxC,KAAKsF,EAAatT,YAAYhG,IAAWuC,aAAaqB,uBAAwB9F,KAAK4iB,cAI1FlK,EAAOxC,KAAP,MAAAwC,EAAM,YAAS6P,GAAYmD,UAAU1rB,KAAKgJ,UAAUsG,MAAM,GAAI,GAAItP,KAAKwoB,kBAAmB1J,EAAOgF,oBAG9F,CAAChF,SAAQtL,WAAUkF,YA5FlC,oCAsGQ,OAAO1Y,KAAKiiB,QAAQgC,cAAgBjkB,KAAKkkB,uBAtGjD,yCAiHQ,OAAOhiB,IAAW6G,WAAWC,YAjHrC,2CA4HQ,OAAOhJ,KAAKgJ,UAAU0X,QAAQ,OAAQ,SA5H9C,GAAmCsB,K,SCNvBoJ,K,cAAAA,E,gBAAAA,Q,KAWL,ICXKO,GDWCC,GAAb,kDAYI,WAAmB5F,EAAwBmE,EAAyBC,GAA2B,IAAD,8BAC1F,cAAMD,EAAaC,IAXN/Q,UAU6E,EAE1F,EAAKA,KAAO2M,EAF8E,EAZlG,mDAuBQ,IAAIhmB,KAAK8iB,cAAT,CAGA,IAII+I,EACAC,EALEC,EAAuB/rB,KAAKmqB,YAAYnH,YACxCgJ,EAAwBhsB,KAAKoqB,aAAapH,YAE1CiJ,EAA0BF,EAAWjI,iBAAiBpN,QAAO,SAAAwV,GAAE,OAAIF,EAAYnS,UAAUqS,MAIzFpN,EAAmB,IAAItF,EAAS,IAAMuS,EAAWhN,UAAY/e,KAAKqZ,KAAO2S,EAAYjN,UAAY,KACnG/e,KAAKqZ,OAAS+R,GAAanF,MAC3B8F,EAAW1I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAChEwS,EAAaE,EAAWxI,UACxBuI,EAAaE,EAAYzI,YAGzByI,EAAY3I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MACjEwS,EAAaG,EAAYzI,UACzBuI,EAAaC,EAAWxI,WAG5BsI,EAAWlY,SAAQ,SAAAwY,GAKf,IAJyBL,EAAW9R,MAAK,SAAAoS,GAErC,OAAOH,EAAcjP,OAAM,SAAAC,GAAC,OAAIkP,EAAQhF,SAASlK,KAAOmP,EAAQjF,SAASlK,SAE7D,CACZ,IAAIuG,EAAc,IAAItB,GAAIpD,EAAO2E,cACjC0I,EAAQzI,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MACnEsN,EAAO8E,OAAOJ,OAGtBxjB,KAAKye,eAAiBK,KAxD9B,+BAwEoBD,GACZ,IAAMxF,EAAOrZ,KAAKqZ,OAAS+R,GAAanF,KAAO,OAAS,QACxD,OAAOjmB,KAAKqsB,eAAexN,EAAaxF,KA1EhD,oCAoFQ,MAAO,IAAMrZ,KAAKmqB,YAAYlG,cAAgBjkB,KAAKkkB,qBAAuBlkB,KAAKoqB,aAAanG,cAAgB,MApFpH,yCA+FQ,IAAMxW,EAAOvL,IAAW6G,WACxB,OAAO/I,KAAKqZ,OAAS+R,GAAanF,KAAOxY,EAAK/D,aAAe+D,EAAK9D,gBAhG1E,2CA2GQ,OAAO3J,KAAKqZ,SA3GpB,GAAkC6Q,IETrBoC,GAAb,kDAUI,WAAmBnC,EAAyBC,EAAkCxH,GAAwC,IAAD,8BACjH,cAAMuH,EAAaC,IADuDxH,cAAuC,EAVzH,mDAmByB,IAAD,OAChB,IAAI5iB,KAAK8iB,cAAT,CAGA,IAAMiJ,EAAuB/rB,KAAKmqB,YAAYnH,YACxCgJ,EAAwBhsB,KAAKoqB,aAAapH,YAE1ClE,EAAmB,IAAItF,EAAS,IAAMuS,EAAWhN,UAAY,SAAWiN,EAAYjN,UAAY,KACtGgN,EAAW1I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAChE2S,EAAY3I,eAAc,SAAChK,EAAMvL,GAC7B,IAAKgR,EAAOwE,UAAUxV,EAAMuL,GACxB,MAAMmC,EAAahX,cAActC,IAAW2B,eAAeE,yBACvD,EAAK6e,YAAa,oBAAqB9U,MAInDie,EAAWxI,UAAU5P,SAAQ,SAAA4Y,GACzBP,EAAYzI,UAAU5P,SAAQ,SAAA6Y,GAC1B,IAAIhJ,EAAc,IAAItB,GAAIpD,EAAO2E,cACjC8I,EAAQ7I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MACnEgb,EAAS9I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MACpEsN,EAAO8E,OAAOJ,SAGtBxjB,KAAKye,eAAiBK,KA3C9B,+BA2DoBD,GAAsB,IAAD,EAE3BoH,EAAOjmB,KAAKmqB,YAAYtG,SAAShF,GACjCqH,EAAQlmB,KAAKoqB,aAAavG,SAAShF,GAEnCC,EAAmB,IAAItF,EAAS,IACtCyM,EAAKnH,OAAOuE,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MACjE6M,EAAMpH,OAAOuE,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,OAElE,EAAA4M,EAAKvN,QAAOxC,KAAZ,oBAAoBgQ,EAAMxN,SAC1B,IAAMuT,EAA0B,GAUhC,OATAhG,EAAKnH,OAAOgF,iBAAiBnQ,SAAQ,SAAA8Y,GAC7BvG,EAAMpH,OAAOjF,UAAU4S,IACvBR,EAAc/V,KAAKuW,MAGvBR,EAAcjd,OAAS,GACvBiX,EAAKvN,OAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeE,yBAClE/D,KAAK4iB,YAAa,oBAAqBqJ,EAAcrR,KAAK,UAE3D,CACHkE,SACAtL,SAAmC,IAAzByS,EAAKzS,SAASxE,OAAeiX,EAAKzS,SAAW0S,EAAM1S,SAC7DkF,OAAQuN,EAAKvN,UAlFzB,oCA6FQ,MAAO,IAAM1Y,KAAKmqB,YAAYlG,cAAgBjkB,KAAKkkB,qBAAuBlkB,KAAKoqB,aAAanG,cAAgB,MA7FpH,yCAwGQ,OAAO/hB,IAAW6G,WAAWQ,mBAxGrC,2CAmHQ,MAAO,aAnHf,GAA0C2gB,I,SCC7BwC,GAAb,kDAUI,WAAmBvC,EAAyBC,EAAkCxH,GAAwC,IAAD,8BACjH,cAAMuH,EAAaC,IADuDxH,cAAuC,EAVzH,mDAmBQ,IAAI5iB,KAAK8iB,cAAT,CAGA,IAAMiJ,EAAuB/rB,KAAKmqB,YAAYnH,YACxCgJ,EAAwBhsB,KAAKoqB,aAAapH,YAC1C2J,EAAgDZ,EAAWtI,aAC3DmJ,EAAiDZ,EAAYvI,aAEnE,IAAK,YAAImJ,GAAc5P,OAAM,SAAAxL,GAAK,OAAImb,EAAYpK,IAAI/Q,EAAM,KAAOmb,EAAYjf,IAAI8D,EAAM,MAAQA,EAAM,MACnG,MAAMgK,EAAahX,cAActC,IAAW2B,eAAeI,mCACvDjE,KAAK4iB,YAAaoJ,EAAYa,kBAAmBd,EAAWc,mBAIpE,IAAMC,EAAkD,IAAItf,IAO5D,GANAmf,EAAYhZ,SAAQ,SAAC0F,EAAMvL,GACnB8e,EAAarK,IAAIzU,IAClBgf,EAAc/S,IAAIjM,EAAMuL,MAIJ,IAAvByT,EAAcnI,KACd,MAAMnJ,EAAahX,cAActC,IAAW2B,eAAeK,yCACvDlE,KAAK4iB,YAAaoJ,EAAYe,uBAAwBhB,EAAWgB,wBAIzE,IAAMjO,EAAmB,IAAItF,EAAS,IAAMuS,EAAWhN,UAAY,OAAWiN,EAAYjN,UAAY,KACtG+N,EAAcnZ,SAAQ,SAAC0F,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAE7D,IAAM2T,EAAkBjB,EAAWxI,UAC7B0J,EAAmBjB,EAAYzI,UACrCyJ,EAASrZ,SAAQ,SAAA4Y,GACd,GAAIU,EAAUjQ,OAAM,SAAAwP,GAEhB,IAAIU,EAAe,IAAIhL,GAAIyK,GAO3B,OAJAG,EAAcnZ,SAAQ,SAAC0F,EAAMvL,GAAP,OAAgBof,EAAQvJ,SAAS7V,EAAMye,EAAQpF,SAASrZ,OAE9E0e,EAAS9I,YAAY/P,SAAQ,SAAC0F,EAAMvL,GAAP,OAAgBof,EAAQvJ,SAAS7V,EAAMuL,MAE7D,YAAI2T,GAAUhT,MAAK,SAAAmT,GAAE,OAAIA,EAAG1S,OAAOyS,SAC1C,CACA,IAAI1J,EAAc,IAAItB,GAAIpD,EAAO2E,cAEjCqJ,EAAcnZ,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAMye,EAAQpF,SAASrZ,OAC9EgR,EAAO8E,OAAOJ,OAGrBxjB,KAAKye,eAAiBK,KArE9B,+BAsFoBD,GACZ,IAAMoH,EAAOjmB,KAAKmqB,YAAYtG,SAAShF,GACjCqH,EAAQlmB,KAAKoqB,aAAavG,SAAShF,GACnC8N,EAAc1G,EAAKnH,OAAO2E,aAC1BmJ,EAAe1G,EAAMpH,OAAO2E,aAE5BqJ,EAAgB,IAAItf,IAAI,YAAImf,EAAYS,WAAW1W,QAAO,oCAAE4B,EAAF,iBAAesU,EAAarK,IAAIjK,OAC1FwG,EAAS,IAAItF,EAAS,IAAMyM,EAAKnH,OAAOC,UAAY,OAAWmH,EAAMpH,OAAOC,UAAY,KAC9F+N,EAAcnZ,SAAQ,SAAC0F,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAE7D,IAAMX,EAASuN,EAAKvN,OAWpB,OAVAA,EAAOxC,KAAP,MAAAwC,EAAM,YAASwN,EAAMxN,SAChB,YAAIkU,GAAc5P,OAAM,SAAAxL,GAAK,OAAImb,EAAYpK,IAAI/Q,EAAM,KAAOmb,EAAYjf,IAAI8D,EAAM,MAAQA,EAAM,OACtE,KAA1ByU,EAAKnH,OAAOC,UAIa,IAAvB+N,EAAcnI,MAAwC,KAA1BsB,EAAKnH,OAAOC,WAC7CrG,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeK,yCAC7DlE,KAAK4iB,YAAasD,EAAMpH,OAAOiO,uBAAwB9G,EAAKnH,OAAOiO,yBALvErU,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeI,mCAC7DjE,KAAK4iB,YAAasD,EAAMpH,OAAO+N,kBAAmB5G,EAAKnH,OAAO+N,oBAM/D,CACH/N,SACAtL,SAAmC,IAAzByS,EAAKzS,SAASxE,OAAeiX,EAAKzS,SAAW0S,EAAM1S,SAC7DkF,OAAQuN,EAAKvN,UA9GzB,oCAyHQ,MAAO,IAAM1Y,KAAKmqB,YAAYlG,cAAgBjkB,KAAKkkB,qBAAuBlkB,KAAKoqB,aAAanG,cAAgB,MAzHpH,yCAoIQ,OAAO/hB,IAAW6G,WAAWmB,WApIrC,2CA+IQ,MAAO,WA/If,GAAkCggB,K,SFHtByB,K,WAAAA,E,YAAAA,E,YAAAA,Q,KAYL,IGZK0B,GHYCC,GAAb,kDAYI,WAAmBtH,EAAyBmE,EAAyBC,GAA2B,IAAD,8BAC3F,cAAMD,EAAaC,IAXN/Q,UAU8E,EAE3F,EAAKA,KAAO2M,EAF+E,EAZnG,mDAsBQ,IAAIhmB,KAAK8iB,cAAT,CAGA,IAAMiJ,EAAuB/rB,KAAKmqB,YAAYnH,YACxCgJ,EAAwBhsB,KAAKoqB,aAAapH,YAE1ClE,EAAmB,IAAItF,EAAS,IAAMuS,EAAWhN,UAAY/e,KAAKqZ,KAAO2S,EAAYjN,UAAY,KACvGgN,EAAW1I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAChE2S,EAAY3I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAEjE,IAAM2T,EAAkBjB,EAAWxI,UAC7B0J,EAAmBjB,EAAYzI,UAE/B0I,EAA0BF,EAAWjI,iBAAiBpN,QAAO,SAAAwV,GAAE,OAAIF,EAAYnS,UAAUqS,MAE/Fc,EAASrZ,SAAQ,SAAA4Y,GACbU,EAAUtZ,SAAQ,SAAA6Y,GAEd,GAAIP,EAAcjP,OAAM,SAAAC,GAAC,OAAIsP,EAAQpF,SAASlK,KAAOuP,EAASrF,SAASlK,MAAK,CACxE,IAAIuG,EAAc,IAAItB,GAAIpD,EAAO2E,cACjC8I,EAAQ7I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MACnEgb,EAAS9I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MACpEsN,EAAO8E,OAAOJ,UAKtBxjB,KAAKqZ,OAASsS,GAAc1F,MAAQjmB,KAAKqZ,OAASsS,GAAc4B,MAChEP,EAASrZ,SAAQ,SAAA4Y,GAKb,IAJyBU,EAAUjT,MAAK,SAAAwS,GAEpC,OAAOP,EAAcjP,OAAM,SAAAC,GAAC,OAAIsP,EAAQpF,SAASlK,KAAOuP,EAASrF,SAASlK,SAE9D,CACZ,IAAIuG,EAAc,IAAItB,GAAIpD,EAAO2E,cACjC8I,EAAQ7I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MACnEsN,EAAO8E,OAAOJ,OAKtBxjB,KAAKqZ,OAASsS,GAAczF,OAASlmB,KAAKqZ,OAASsS,GAAc4B,MACjEN,EAAUtZ,SAAQ,SAAA6Y,GAKd,IAJyBQ,EAAShT,MAAK,SAAAuS,GAEnC,OAAON,EAAcjP,OAAM,SAAAC,GAAC,OAAIsP,EAAQpF,SAASlK,KAAOuP,EAASrF,SAASlK,SAE9D,CACZ,IAAIuG,EAAc,IAAItB,GAAIpD,EAAO2E,cACjC+I,EAAS9I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MACpEsN,EAAO8E,OAAOJ,OAI1BxjB,KAAKye,eAAiBK,KA5E9B,+BA2FoBD,GACZ,OAAO7e,KAAKqsB,eAAexN,EAAa,WA5FhD,oCAsGQ,MAAO,IAAM7e,KAAKmqB,YAAYlG,cAAgBjkB,KAAKkkB,qBAAuBlkB,KAAKoqB,aAAanG,cAAgB,MAtGpH,yCAiHQ,IAAMxW,EAAOvL,IAAW6G,WACxB,OAAI/I,KAAKqZ,OAASsS,GAAc1F,KACrBxY,EAAKzD,cAEPhK,KAAKqZ,OAASsS,GAAczF,MAC1BzY,EAAKxD,eAGLwD,EAAK1D,gBAzHxB,2CAqIQ,OAAO/J,KAAKqZ,SArIpB,GAAmC6Q,K,SGZvBmD,K,YAAAA,E,cAAAA,E,gBAAAA,Q,KAYL,ICTKG,GDSCC,GAAb,kDAYI,WAAmBzH,EAA2BmE,EAAyBC,GAA2B,IAAD,8BAC7F,cAAMD,EAAaC,IAXN/Q,UAUgF,EAE7F,EAAKA,KAAO2M,EAFiF,EAZrG,mDAsByB,IAAD,OAChB,IAAIhmB,KAAK8iB,cAAT,CAGA,IAAMiJ,EAAuB/rB,KAAKmqB,YAAYnH,YACxCgJ,EAAwBhsB,KAAKoqB,aAAapH,YAE1CiJ,EAA0BF,EAAWjI,iBAAiBpN,QAAO,SAAAwV,GAAE,OAAIF,EAAYnS,UAAUqS,MAEzFpN,EAAmB,IAAItF,EAAS,IAAMuS,EAAWhN,UAAY/e,KAAKqZ,KAAO2S,EAAYjN,UAAY,KACnG/e,KAAKqZ,OAASgU,GAAgBK,UAAY1tB,KAAKqZ,OAASgU,GAAgBM,SACxE5B,EAAW1I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAEhErZ,KAAKqZ,OAASgU,GAAgBO,WAAa5tB,KAAKqZ,OAASgU,GAAgBM,SACzE3B,EAAY3I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAGrE0S,EAAWxI,UAAU5P,SAAQ,SAAA4Y,GACzBP,EAAYzI,UAAU5P,SAAQ,SAAA6Y,GAE1B,GAAI,YAAIP,GAAejP,OAAM,SAAAC,GAAC,OAAIsP,EAAQpF,SAASlK,KAAOuP,EAASrF,SAASlK,MAAK,CAC7E,IAAIuG,EAAc,IAAItB,GAAIpD,EAAO2E,cAC7B,EAAKpK,OAASgU,GAAgBK,UAAY,EAAKrU,OAASgU,GAAgBM,SACxEpB,EAAQ7I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MAEnE,EAAK6H,OAASgU,GAAgBO,WAAa,EAAKvU,OAASgU,GAAgBM,SACzEnB,EAAS9I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MAExEsN,EAAO8E,OAAOJ,UAI1BxjB,KAAKye,eAAiBK,KAtD9B,+BAqEoBD,GACZ,IAAIxF,EAAmC,QAOvC,OANIrZ,KAAKqZ,OAASgU,GAAgBK,SAC9BrU,EAAO,OAEFrZ,KAAKqZ,OAASgU,GAAgBO,YACnCvU,EAAO,SAEJrZ,KAAKqsB,eAAexN,EAAaxF,KA7EhD,oCAuFQ,MAAO,IAAMrZ,KAAKmqB,YAAYlG,cAAgBjkB,KAAKkkB,qBAAuBlkB,KAAKoqB,aAAanG,cAAgB,MAvFpH,yCAkGQ,IAAMxW,EAAOvL,IAAW6G,WACxB,OAAI/I,KAAKqZ,OAASgU,GAAgBK,SACvBjgB,EAAKjE,aAEPxJ,KAAKqZ,OAASgU,GAAgBO,UAC5BngB,EAAKhE,cAGLgE,EAAKnE,cA1GxB,2CAsHQ,MAAO,MAtHf,gCAgIQ,OAAOtJ,KAAKqZ,SAhIpB,GAAqC6Q,K,SCTzBsD,K,eAAAA,E,sBAAAA,E,iBAAAA,Q,KAYL,ICPKK,GDOCC,GAAb,kDAaI,WAAmB9H,EAA4BmE,EAAyBC,EAC7CxH,GAAwC,IAAD,8BAC9D,cAAMuH,EAAaC,IADIxH,cAAuC,EAZjDvJ,UAYiD,EAE9D,EAAKA,KAAO2M,EAFkD,EAdtE,mDAwBQ,IAAIhmB,KAAK8iB,cAAT,CAGA,IAAMiJ,EAAuB/rB,KAAKmqB,YAAYnH,YACxCgJ,EAAwBhsB,KAAKoqB,aAAapH,YAEhD,IAAK5I,kBAAQ2R,EAAWtI,aAAcuI,EAAYvI,cAAe,CAC7D,IAAIsK,EAAkB/tB,KAAKguB,mBAAmB1Q,cAC9C,MAAM9B,EAAahX,cAActC,IAAW2B,eAAeG,iCACvDhE,KAAK4iB,YAAamJ,EAAWc,kBAAmBb,EAAYa,kBAAmBkB,GAGvF,IAAMjP,EAAmB,IAAItF,EAAS,IAAMuS,EAAWhN,UAAY/e,KAAKqZ,KAAO2S,EAAYjN,UAAY,KACvGgN,EAAW1I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAGhE,IAAM2T,EAAkBjB,EAAWxI,UAC7B0J,EAAmBjB,EAAYzI,WACjCvjB,KAAKqZ,OAASmU,GAAiBrkB,MACrB,sBAAO6jB,GAAP,YAAoBC,IAEzBjtB,KAAKqZ,OAASmU,GAAiBpkB,aACvB,YAAI4jB,GAAUtW,QAAO,SAAAyW,GAAE,OAAI,YAAIF,GAAWjT,MAAK,SAAAiU,GAAE,OAAId,EAAG1S,OAAOwT,SAG/D,YAAIjB,GAAUtW,QAAO,SAAAyW,GAAE,OAAK,YAAIF,GAAWjT,MAAK,SAAAiU,GAAE,OAAId,EAAG1S,OAAOwT,UAEtEta,SAAQ,SAAAwG,GAAG,OAAI2E,EAAO8E,OAAOzJ,MACxCna,KAAKye,eAAiBK,KApD9B,+BAoEoBD,GACZ,IAAMoH,EAAOjmB,KAAKmqB,YAAYtG,SAAShF,GACjCqH,EAAQlmB,KAAKoqB,aAAavG,SAAShF,GAEnCC,EAAmB,IAAItF,EAAS,IAAMyM,EAAKnH,OAAOC,UAAY/e,KAAKqZ,KAAO6M,EAAMpH,OAAOC,UAAY,KACzGkH,EAAKnH,OAAOuE,eAAc,SAAChK,EAAMvL,GACzBoY,EAAMpH,OAAOjF,UAAU/L,IACvBgR,EAAOwE,UAAUxV,EAAMuL,MAI/B,IAAMX,EAASuN,EAAKvN,OAEpB,GADAA,EAAOxC,KAAP,MAAAwC,EAAM,YAASwN,EAAMxN,UAChB0B,kBAAQ6L,EAAKnH,OAAO2E,aAAcyC,EAAMpH,OAAO2E,eAA2C,KAA1BwC,EAAKnH,OAAOC,WAA+C,KAA3BmH,EAAMpH,OAAOC,UAAkB,CAChI,IAAIgP,EAAkB/tB,KAAKguB,mBAAmB1Q,cAC9C5E,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeG,iCAC7DhE,KAAK4iB,YAAaqD,EAAKnH,OAAO+N,kBAAmB3G,EAAMpH,OAAO+N,kBAAmBkB,IAEzF,MAAO,CACHjP,SACAtL,SAAmC,IAAzByS,EAAKzS,SAASxE,OAAeiX,EAAKzS,SAAW0S,EAAM1S,SAC7DkF,OAAQuN,EAAKvN,UAzFzB,oCAoGQ,MAAO,IAAM1Y,KAAKmqB,YAAYlG,cAAgBjkB,KAAKkkB,qBAAuBlkB,KAAKoqB,aAAanG,cAAgB,MApGpH,yCA+GQ,IAAMxW,EAAOvL,IAAW6G,WACxB,OAAI/I,KAAKqZ,OAASmU,GAAiBrkB,MACxBsE,EAAKtE,MAEPnJ,KAAKqZ,OAASmU,GAAiBpkB,aAC7BqE,EAAKrE,aAGLqE,EAAKpE,aAvHxB,2CAmIQ,OAAOrJ,KAAKqZ,SAnIpB,GAAsC6Q,K,SCP1B2D,K,UAAAA,E,eAAAA,E,iBAAAA,Q,KAYL,IAAMK,GAAb,kDAmBI,WAAmB7U,EAAqB8U,EACrBhE,EAAyBC,EAA0B5B,GAA6B,IAAD,8BAC9F,cAAM2B,EAAaC,IAnBN/Q,UAkBiF,IAjBjF8U,eAiBiF,IAhBjFvL,iBAgBiF,IAfjF4F,uBAeiF,EAE9F,EAAK2F,UAAYA,EACjB,EAAKvL,YAAcuL,EAAU/R,WAC7B,EAAKoM,kBAAoBA,EACzB,EAAKnP,KAAOA,EALkF,EApBtG,mDAkCyB,IAAD,OAChB,IAAIrZ,KAAK8iB,cAAT,CAIA,IAAIwI,EACJ,IACIA,EAAW/C,GAAYgD,MAAMvrB,KAAKmuB,UAAU7e,MAAM,GAAI,GAAItP,KAAKwoB,mBAEnE,MAAOrV,GACH,MAAMjS,EAAuBiS,EAAGnT,KAAK4iB,aAGzC,IAAMmJ,EAAuB/rB,KAAKmqB,YAAYnH,YACxCgJ,EAAwBhsB,KAAKoqB,aAAapH,YAEhD+I,EAAWjI,iBAAiBnQ,SAAQ,SAAA8Y,GAChC,GAAIT,EAAYnS,UAAU4S,GACtB,MAAMjR,EAAahX,cAActC,IAAW2B,eAAeE,yBAA0B,EAAK6e,YACtF,EAAKoL,mBAAmB1Q,cAAemP,MAInD,IAAM3N,EAAmB,IAAItF,EAAS,IAAMuS,EAAWhN,UAAY/e,KAAKqZ,KAAK7J,OAAO,GAAK,MAAQxP,KAAKqZ,KAAK7J,OAAO,GAAKwc,EAAYjN,UAAY,KAC3I/e,KAAKqZ,OAASwU,GAAc5H,MAAQjmB,KAAKqZ,OAASwU,GAAcN,MAChExB,EAAW1I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAEhErZ,KAAKqZ,OAASwU,GAAc3H,OAASlmB,KAAKqZ,OAASwU,GAAcN,MACjEvB,EAAY3I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAGrE,IAAM+U,EAAsD,IAAI5gB,IAAiCue,EAAWtI,cAC5GuI,EAAY3I,eAAc,SAAChK,EAAMvL,GAAP,OAAgBsgB,EAAkBrU,IAAIjM,EAAMuL,MAEtE0S,EAAWxI,UAAU5P,SAAQ,SAAA4Y,GACzBP,EAAYzI,UAAU5P,SAAQ,SAAA6Y,GAC1B,IAAMU,EAAe,IAAIhL,GAAIkM,GAC7B7B,EAAQ7I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiBof,EAAQvJ,SAAS7V,EAAM0D,MACpEgb,EAAS9I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiBof,EAAQvJ,SAAS7V,EAAM0D,MAErE,IAAI6c,EAA0B/C,EAAS5M,KAAKwO,GAC5C,GAA2B,YAAvBmB,EAAchV,KACd,MAAMmC,EAAatT,YAAYhG,IAAWuC,aAAaoD,+BACnD,EAAK+a,YAAa,EAAKuL,UAAUzN,QAAQ,OAAQ,KAAM2N,EAAchV,MAE7E,GAAIgV,EAAc7c,MAAO,CACrB,IAAMgS,EAAc,IAAItB,GAAIpD,EAAO2E,cAC/B,EAAKpK,OAASwU,GAAc5H,MAAQ,EAAK5M,OAASwU,GAAcN,MAChEhB,EAAQ7I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MAEnE,EAAK6H,OAASwU,GAAc3H,OAAS,EAAK7M,OAASwU,GAAcN,MACjEf,EAAS9I,YAAY/P,SAAQ,SAACnC,EAAO1D,GAAR,OAAiB0V,EAAOG,SAAS7V,EAAM0D,MAExEsN,EAAO8E,OAAOJ,UAI1BxjB,KAAKye,eAAiBK,KA3F9B,+BA4GoBD,GACZ,IAAMoH,EAAOjmB,KAAKmqB,YAAYtG,SAAShF,GACjCqH,EAAQlmB,KAAKoqB,aAAavG,SAAShF,GACnCyP,EAA0B,GAChCA,EAAcpY,KAAd,MAAAoY,EAAa,YAASrI,EAAKnH,OAAOgF,mBAClCwK,EAAcpY,KAAd,MAAAoY,EAAa,YAASpI,EAAMpH,OAAOgF,mBAEnC,IAAMhF,EAAmB,IAAItF,EAASxZ,KAAKqZ,MACvCrZ,KAAKqZ,OAASwU,GAAc5H,MAAQjmB,KAAKqZ,OAASwU,GAAcN,MAChEtH,EAAKnH,OAAOuE,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAEjErZ,KAAKqZ,OAASwU,GAAc3H,OAASlmB,KAAKqZ,OAASwU,GAAcN,MACjErH,EAAMpH,OAAOuE,eAAc,SAAChK,EAAMvL,GAAP,OAAgBgR,EAAOwE,UAAUxV,EAAMuL,MAGtE,IAAI7F,EAAoC,IAAzByS,EAAKzS,SAASxE,OAAeiX,EAAKzS,SAAW0S,EAAM1S,SAC9DwX,GAAwBnM,EAAa7e,KAAK4iB,YAAa5iB,KAAKmuB,aAC5D3a,EAAW8a,GAGf,IAAM5V,EAASuN,EAAKvN,OACpBA,EAAOxC,KAAP,MAAAwC,EAAM,YAASwN,EAAMxN,SACrB,IAAMuT,EAA0B,GAkBhC,OAjBAhG,EAAKnH,OAAOgF,iBAAiBnQ,SAAQ,SAAA8Y,GAC7BvG,EAAMpH,OAAOjF,UAAU4S,IACvBR,EAAc/V,KAAKuW,MAGvBR,EAAcjd,OAAS,QAA0B3O,IAArBL,KAAK4iB,aACjClK,EAAOxC,KAAKsF,EAAahX,cAActC,IAAW2B,eAAeE,yBAC7D,CAACuM,MAAOtQ,KAAK4iB,YAAYtS,MAAOE,IAAKxQ,KAAK4iB,YAAYtS,OACtDtQ,KAAKguB,mBAAmB1Q,cAAe2O,EAAcrR,KAAK,UAGJ,IAA1D5a,KAAKmuB,UAAUtN,WAAWvR,MAAM,GAAI,GAAG2Q,OAAOjR,OAC9C0J,EAAOxC,KAAKsF,EAAatT,YAAYhG,IAAWuC,aAAaqB,uBAAwB9F,KAAK4iB,cAG1FlK,EAAOxC,KAAP,MAAAwC,EAAM,YAAS6P,GAAYmD,UAAU1rB,KAAKmuB,UAAU7e,MAAM,GAAI,GAAItP,KAAKwoB,kBAAmB8F,KAEvF,CAACxP,SAAQtL,WAAUkF,YApJlC,oCA8JQ,MAAO,IAAM1Y,KAAKmqB,YAAYlG,cAAgBjkB,KAAKkkB,qBAAuBlkB,KAAKoqB,aAAanG,cAAgB,MA9JpH,yCAyKQ,IAAMxW,EAAOvL,IAAW6G,WACxB,OAAI/I,KAAKqZ,OAASwU,GAAc5H,KACrBxY,EAAK5D,kBAEP7J,KAAKqZ,OAASwU,GAAc3H,MAC1BzY,EAAK3D,mBAGL2D,EAAK7D,YAjLxB,2CA6LQ,OAAO5J,KAAKmuB,UAAUzN,QAAQ,OAAQ,OA7L9C,gCAuMQ,OAAO1gB,KAAKqZ,SAvMpB,GAAmC6Q,ICZtBqE,GAAb,yGAY8BC,EAA4BvM,EAC5BuG,EAA4BiG,GAClD,OAAQD,GACJ,IAAK,aACD,OAAO,IAAI7L,GAAe8L,EAAMxM,GACpC,IAAK,SACD,OAAO,IAAI2C,GAAW6J,EAAMxM,GAChC,IAAK,YACD,OAAO,IAAIoJ,GAAcoD,EAAMxM,EAASuG,MApBxD,mCAmC+BkG,EAA8BzI,EAAkBC,EAChDsC,EAA4BiG,GACnD,OAAQC,GACJ,IAAK,gBACD,OAAO,IAAI9C,GAAaR,GAAanF,KAAMA,EAAMC,GACrD,IAAK,iBACD,OAAO,IAAI0F,GAAaR,GAAalF,MAAOD,EAAMC,GACtD,IAAK,oBACD,OAAO,IAAIoG,GAAqBrG,EAAMC,EAAOuI,EAAKrS,YACtD,IAAK,WACD,OAAO,IAAIsQ,GAAazG,EAAMC,EAAOuI,EAAKrS,YAC9C,IAAK,eACD,OAAO,IAAIqR,GAAgBJ,GAAgBM,QAAS1H,EAAMC,GAC9D,IAAK,kBACD,OAAO,IAAIoH,GAAc3B,GAAc1F,KAAMA,EAAMC,GACvD,IAAK,mBACD,OAAO,IAAIoH,GAAc3B,GAAczF,MAAOD,EAAMC,GACxD,IAAK,kBACD,OAAO,IAAIoH,GAAc3B,GAAc4B,KAAMtH,EAAMC,GACvD,IAAK,gBACD,OAAO,IAAIuH,GAAgBJ,GAAgBK,SAAUzH,EAAMC,GAC/D,IAAK,iBACD,OAAO,IAAIuH,GAAgBJ,GAAgBO,UAAW3H,EAAMC,GAChE,IAAK,QACD,OAAO,IAAI4H,GAAiBN,GAAiBrkB,MAAO8c,EAAMC,EAAOuI,EAAKrS,YAC1E,IAAK,eACD,OAAO,IAAI0R,GAAiBN,GAAiBpkB,aAAc6c,EAAMC,EAAOuI,EAAKrS,YACjF,IAAK,aACD,OAAO,IAAI0R,GAAiBN,GAAiBnkB,WAAY4c,EAAMC,EAAOuI,EAAKrS,YAC/E,IAAK,aACD,OAAO,IAAI8R,GAAcL,GAAcN,KAAMkB,EAAMxI,EAAMC,EAAOsC,GACpE,IAAK,sBACD,OAAO,IAAI0F,GAAcL,GAAc5H,KAAMwI,EAAMxI,EAAMC,EAAOsC,GACpE,IAAK,uBACD,OAAO,IAAI0F,GAAcL,GAAc3H,MAAOuI,EAAMxI,EAAMC,EAAOsC,QArEjF,KCgCamG,GAAb,WASI,WAA4BC,EAA2CpG,GAA6B,yBAAxEoG,YAAuE,KAA5BpG,oBAT3E,kDAwCiBiG,GAA2B,IAAD,EAChB9N,GAAmBkO,kBAAkB7P,GAAc8P,IAAIL,IAAnEtf,EAD4B,EAC5BA,IAAKhO,EADuB,EACvBA,IACZ,QAAYd,IAARc,EACA,MAAMA,EAHyB,IAK5BsnB,EAAUzoB,KAAK0oB,YAAYvZ,GAA3BsZ,OACP,GAAsB,IAAlBA,EAAOzZ,OACP,MAAMwM,EAAatT,YAAYhG,IAAWuC,aAAaC,iCAA6BrE,GAExFL,KAAK2oB,uBAAuBF,GAC5B,IAAMI,EAAmB7oB,KAAK8oB,MAAML,GACpC,OAAOzoB,KAAK+uB,YAAYlG,KAnDhC,gCAmEqB4F,EAAc5P,GAC3B,GAAoB,KAAhB4P,EAAKxO,OACL,MAAO,CAACzM,SAAS,YAAKxT,KAAK4uB,UAAUtM,QAAS5J,OAAQ,GAAIrC,YAAa,IAFN,MAIlDsK,GAAmBkO,kBAAkB7P,GAAc8P,IAAIL,IAAnEtf,EAJ8D,EAI9DA,IAAKhO,EAJyD,EAIzDA,IAJyD,EAKrBnB,KAAK0oB,YAAYvZ,GAAK,EAAO0P,GAAtErL,EAL8D,EAK9DA,SAAUiV,EALoD,EAKpDA,OAAQ/P,EAL4C,EAK5CA,OAAQrC,EALoC,EAKpCA,YAKjC,QAJYhW,IAARc,GACAuX,EAAOxC,KAAK/U,GAGM,IAAlBsnB,EAAOzZ,OACP,MAAO,CAACwE,SAAUA,EAAUkF,OAAQA,EAAQrC,YAAaA,GAG7DrW,KAAK2oB,uBAAuBF,GAAQ,EAAO/P,GAC3C,IAAMmQ,EAAmB7oB,KAAK8oB,MAAML,GAG9BuG,EAFqBhvB,KAAK+uB,YAAYlG,GAAK,EAAOnQ,GAEuBmL,SAAShF,GAGxF,OAFAnG,EAAOxC,KAAP,MAAAwC,EAAM,YAASsW,EAAYtW,SAEvBsW,EAAYxb,SAASxE,OAAS,EACvB,CAACwE,SAAUwb,EAAYxb,SAAUkF,OAAQA,EAAQrC,YAAaA,GAGlE,CAAC7C,SAAUA,EAAUkF,OAAQA,EAAQrC,YAAaA,KA5FjE,kCAwGuBoY,GACyF,IADpE5J,IACmE,yDAD1ChG,EAC0C,uDADpBS,IAGnF,GAAImP,EAAKpP,UACL,MAAO,CAACoJ,OAAQ,GAAIjV,SAAS,YAAKxT,KAAK4uB,UAAUtM,QAAS5J,OAAQ,GAAIrC,YAAa,IAuBvF,IApBA,IAAIoS,EAAsB,GACtBjV,EAAqC,IAAhBqL,EAAA,YAAwB7e,KAAK4uB,UAAUtM,QAAU,GACtE5J,EAA+B,GAC/BrC,EAA8B,GAG5ByO,EAAc,SAAC3jB,GACjB,GAAI0jB,EACA,MAAM1jB,EAEVuX,EAAOxC,KAAK/U,IAIV8tB,EAAkB,SAAC9f,GACrBkH,EAAYH,KAAK,CAAC5F,MAAOnB,EAAIoS,gBAAiB/Q,IAAKrB,EAAI+f,kBAGvDC,GAA6B,EAC7BlG,EAAsBwF,GAClBxF,EAAK5J,WAAW,CAEpB,IAAM+P,EAAyBnG,EAAK1H,gBAMpC,GALI6N,IAAmBvQ,IACnBrL,EAAQ,YAAOxT,KAAK4uB,UAAUtM,SAI9B2G,EAAK5I,WAAW,KAAM,CACtB,IAAItD,OAAoD,EACxD,IACIA,EAAQ4D,GAAmBa,iBAAiByH,EAAM,IAAK,KAG3D,MAAO9nB,GAMH,GAJIA,aAAeL,GACfgkB,EAAY3jB,GAGZguB,EAEA1G,EAAOvS,KAAKuG,GAAmBzT,UAAUigB,EAAK/M,OAAO8C,GAAc8P,IAAI,IAAK7F,EAAKiG,eAAiB,UAEjG,CAEDzG,EAAOvS,KAAK,IAAIoG,EAAmB2M,EAAK3Z,MAAM,EAAG,KAEjD,IAE2B,EAFrB+f,EAAkBrvB,KAAK0oB,YAAYO,EAAK3Z,MAAM,GAAIuV,EAAShG,GAEjE,GADAnG,EAAOxC,KAAP,MAAAwC,EAAM,YAAS2W,EAAgB3W,SACP,IAApBlF,EAASxE,QACT,EAAAwE,GAAS0C,KAAT,oBAAiBmZ,EAAgB7b,WAErCiV,EAAOvS,KAAP,MAAAuS,EAAM,YAAS4G,EAAgB5G,SAC/BpS,EAAYH,KAAZ,MAAAG,EAAW,YAASgZ,EAAgBhZ,cAEpCoS,EAAOvS,KAAK,IAAIqG,EAAmByC,GAAc8P,IAAI,IAAKxP,OAG9D,MAOJ,GAHA2P,EAAgBlS,EAAMnG,OAGlBuY,EACA1G,EAAOvS,KAAKuG,GAAmBzT,UAAU+T,EAAMnG,YAG9C,CACD6R,EAAOvS,KAAK,IAAIoG,EAAmBS,EAAMnG,MAAMtH,MAAM,EAAG,KACxD,IAE2B,EAFrB+f,EAAkBrvB,KAAK0oB,YAAY3L,EAAMnG,MAAMtH,MAAM,GAAI,GAAIuV,EAAShG,GAE5E,GADAnG,EAAOxC,KAAP,MAAAwC,EAAM,YAAS2W,EAAgB3W,SACP,IAApBlF,EAASxE,QACT,EAAAwE,GAAS0C,KAAT,oBAAiBmZ,EAAgB7b,WAErCiV,EAAOvS,KAAP,MAAAuS,EAAM,YAAS4G,EAAgB5G,SAC/BpS,EAAYH,KAAZ,MAAAG,EAAW,YAASgZ,EAAgBhZ,cACpCoS,EAAOvS,KAAK,IAAIqG,EAAmBQ,EAAMnG,MAAMtH,OAAO,KACtD6f,GAAoB,EAExBlG,EAAOlM,EAAM5F,YAGZ,GAAI8R,EAAK5I,WAAW,KAAM,CAC3B,IAAItD,OAAoD,EACpDiB,GAAiB,EACrB,IACIjB,EAAQ4D,GAAmBa,iBAAiByH,EAAM,IAAK,WAG3D,MAAO9nB,GACH6c,GAAQ,EAEJ7c,aAAeL,GACfgkB,EAAY3jB,GAGhB4b,EAAQ,CAACnG,MAAOqS,EAAK/M,OAAO8C,GAAc8P,IAAI,IAAK7F,EAAKiG,eAAiB,IAAK/X,OAAQ6H,GAAcS,SAIxGwP,EAAgBlS,EAAMnG,OAGjBoH,GAASjB,EAAMnG,MAAMsY,iBAAmBrQ,EAAc,IACvDrL,EAAQ,YAAOxT,KAAK4uB,UAAUtM,SAI9BvF,EAAMnG,MAAM2J,SAAS,WACrBkI,EAAOvS,KAAKwG,GAAoB4S,mBAAmBvS,EAAMnG,QACzDuY,GAAoB,EACpBlG,EAAOlM,EAAM5F,QAGR4F,EAAMnG,MAAM2Y,YAAY,kBAC7B9G,EAAOvS,KAAKwG,GAAoB9S,UAAUmT,EAAMnG,QAChDuY,GAAoB,EACpBlG,EAAOlM,EAAM5F,SAIbsR,EAAOvS,KAAKuG,GAAmBxT,WAAW8T,EAAMnG,QAChDuY,GAAoB,EACpBlG,EAAOlM,EAAM5F,aAIhB,GAAI8R,EAAK5I,WAAW,QAAU4I,EAAK5I,WAAW,QAAU4I,EAAK5I,WAAW,OAAQ,CACjF,IAAM2F,EAA0BiD,EAAK3Z,MAAM,EAAG,GAE1C0W,EAASkJ,iBAAmBrQ,EAAc,IAC1CrL,EAAQ,YAAOxT,KAAK4uB,UAAUtM,SAG9B2G,EAAK5I,WAAW,MAChBoI,EAAOvS,KAAKwG,GAAoB3S,cAAcic,IAEzCiD,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAKwG,GAAoB1S,cAAcgc,IAG9CyC,EAAOvS,KAAKwG,GAAoBzS,eAAe+b,IAEnDiD,EAAOA,EAAK3Z,MAAM,GAClB6f,GAAoB,OAGnB,GAAIlG,EAAK5I,WAAW,OAAS4I,EAAK5I,WAAW,MAAO,CACrD,IAAM2F,EAA0BiD,EAAK3Z,MAAM,EAAG,GAE1C0W,EAASkJ,iBAAmBrQ,EAAc,IAC1CrL,EAAQ,YAAOxT,KAAK4uB,UAAUtM,SAG9B2G,EAAK5I,WAAW,MAChBoI,EAAOvS,KAAKwG,GAAoB8S,aAAaxJ,IAG7CyC,EAAOvS,KAAKwG,GAAoB+S,cAAczJ,IAElDiD,EAAOA,EAAK3Z,MAAM,GAClB6f,GAAoB,OAGnB,GAAI,wCAA0C7Q,QAAQ2K,EAAKzZ,OAAO,KAAO,EAAG,CAC7E,IAAMwW,EAA0BiD,EAAK3Z,MAAM,EAAG,GAE1C0W,EAASkJ,iBAAmBrQ,EAAc,IAC1CrL,EAAQ,YAAOxT,KAAK4uB,UAAUtM,SAG9B2G,EAAK5I,WAAW,KAChBoI,EAAOvS,KAAKwG,GAAoBpT,YAAY0c,IAEvCiD,EAAK5I,WAAW,UACrBoI,EAAOvS,KAAKwG,GAAoBnT,iBAAiByc,IAE5CiD,EAAK5I,WAAW,UACrBoI,EAAOvS,KAAKwG,GAAoBvT,MAAM6c,IAEjCiD,EAAK5I,WAAW,UACrBoI,EAAOvS,KAAKwG,GAAoBtT,aAAa4c,IAExCiD,EAAK5I,WAAW,MACrBoI,EAAOvS,KAAKwG,GAAoBrT,WAAW2c,IAEtCiD,EAAK5I,WAAW,UACrBoI,EAAOvS,KAAKwG,GAAoBhT,aAAasc,IAExCiD,EAAK5I,WAAW,UACrBoI,EAAOvS,KAAKwG,GAAoB/S,cAAcqc,IAEzCiD,EAAK5I,WAAW,SACrBoI,EAAOvS,KAAKwG,GAAoBxS,SAAS8b,IAE7CiD,EAAOA,EAAK3Z,MAAM,GAClB6f,GAAoB,OAGnB,GAAIlG,EAAK5I,WAAW,KACrB,IACI,IAAMtD,EAAQ4D,GAAmBa,iBAAiByH,EAAM,IAAK,IAAK,KAElEgG,EAAgBlS,EAAMnG,OAElBmG,EAAMnG,MAAMsY,iBAAmBrQ,EAAc,IAC7CrL,EAAQ,YAAOxT,KAAK4uB,UAAUtM,SAElCmG,EAAOvS,KAAKuG,GAAmBvT,OAAO6T,EAAMnG,QAC5CuY,GAAoB,EACpBlG,EAAOlM,EAAM5F,OAGjB,MAAOhW,GAECA,aAAeL,GACfgkB,EAAY3jB,GAGhBsnB,EAAOvS,KAAKuG,GAAmBvT,OAAO+f,EAAK/M,OAAO8C,GAAc8P,IAAI,IAAK7F,EAAKiG,eAAiB,MAE/F,WAIH,GAAIjG,EAAK5I,WAAW,UACrB,IACI,IAAMtD,EAAQ4D,GAAmBa,iBAAiByH,EAAM,SAAU,KAElEgG,EAAgBlS,EAAMnG,OAElBmG,EAAMnG,MAAMsY,iBAAmBrQ,EAAc,IAC7CrL,EAAQ,YAAOxT,KAAK4uB,UAAUtM,SAElCmG,EAAOvS,KAAKwG,GAAoBgT,kBAAkB3S,EAAMnG,QACxDuY,GAAoB,EACpBlG,EAAOlM,EAAM5F,OAGjB,MAAOhW,GAECA,aAAeL,GACfgkB,EAAY3jB,GAGhBsnB,EAAOvS,KAAKwG,GAAoBgT,kBAAkBzG,EAAK/M,OAAO8C,GAAc8P,IAAI,IAAK7F,EAAKiG,eAAiB,MAE3G,WAIH,GAAIpS,GAAYI,SAAS+L,EAAKzZ,OAAO,KAA0B,MAAnByZ,EAAKzZ,OAAO,GAAY,CACrE,IAAMuN,EAAQ4D,GAAmBQ,SAAS8H,GAGtClM,EAAMnG,MAAM2K,iBAAmB1C,EAAc,GAAKA,EAAc,GAAK9B,EAAMnG,MAAMsY,iBACjF1b,EAAQ,YAAOxT,KAAK4uB,UAAUtM,SAGlCmG,EAAOvS,KAAK,IAAIsG,EAAcO,EAAMnG,QACpCqS,EAAOlM,EAAM5F,OACbgY,GAAoB,OAGnB,GAAIlG,EAAKzZ,OAAO,GAAGC,MAAM,MAAO,CAEjC,IADA,IAAIF,EAAI,EACDA,EAAI0Z,EAAKja,UAAYia,EAAKzZ,OAAOD,GAAGE,MAAM,OACzCwZ,EAAK0G,QAAQpgB,KAAOsP,EAAc,IAClCrL,EAAQ,YAAOxT,KAAK4uB,UAAUtM,WAEhC/S,EAEN0Z,EAAOA,EAAK3Z,MAAMC,OAGjB,CACD,IAAMwN,EAAQ4D,GAAmBS,sBAAsB6H,GACvDnE,EAAYtJ,EAAatT,YAAYhG,IAAWuC,aAAaG,0BACzDmY,EAAMnG,MAAMwF,WAAYW,EAAMnG,MAAMiK,aAExCoI,EAAOA,EAAK3Z,MAAMyN,EAAMnG,MAAM5H,WAGtC,MAAO,CAAEyZ,SAAQjV,WAAUkF,SAAQrC,iBA7Y3C,6CA0ZkCoS,GAAwF,IAAnE5D,IAAkE,yDAAzCnM,EAAyC,uDAAV,GAMjGoM,EAAc,SAAC1V,EAAewgB,EACf7uB,EAAeC,GAA0D,IAAD,uBAArBya,EAAqB,iCAArBA,EAAqB,kBACzF,IAAMuC,EAAQxC,EAAatT,YAAb,MAAAsT,EAAY,CAAaza,EAAKC,GAAlB,OAA4Bya,IACtD,GAAIoJ,EACA,MAAM7G,EAEW,WAAZ4R,GACLlX,EAAOxC,KAAK8H,GACZyK,EAAOoH,OAAOzgB,EAAO,EAAGsN,GAAoBpT,YAAY0V,GAAc8P,IAAI,SAG1EpW,EAAOxC,KAAK8H,GACZyK,EAAOoH,OAAOzgB,EAAO,EAAG,IAAIoN,EAAcwC,GAAc8P,IAAI,SAKhErG,EAAO,aAAchM,IAAsBgM,EAAO,aAAc/L,IAAuB+L,EAAO,aAAclM,IAC5GuI,EAAY,EAAG,WAAY5iB,IAAWuC,aAAaO,wBAC/CyjB,EAAO,GAAGrM,WAAYqM,EAAO,GAAGtZ,IAAI0R,aAIxC4H,EAAOA,EAAOzZ,OAAS,aAAcsN,GAAsBmM,EAAOA,EAAOzZ,OAAS,aAAc0N,KAChGoI,EAAY2D,EAAOzZ,OAAQ,WAAY9M,IAAWuC,aAAaQ,sBAC3DwjB,EAAOA,EAAOzZ,OAAS,GAAGoN,WAAYqM,EAAOA,EAAOzZ,OAAS,GAAGG,IAAI0R,YAK5E,IADA,IAAIqI,EAAa,EACVA,EAAKT,EAAOzZ,QAAQ,CACvB,IAAMma,EAAoBV,EAAOS,EAAK,GAChCE,EAAoBX,EAAOS,GAGjC,GAAIE,aAAkB5M,EACd2M,aAAkB3M,GAClBsI,EAAYoE,EAAI,SAAUhnB,IAAWuC,aAAaS,iCAC9CkkB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,YAEzDsI,aAAkB1M,IAClBqI,EAAYoE,EAAI,SAAUhnB,IAAWuC,aAAaU,8BAC9CikB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,YAEzDsI,aAAkB5M,GAClBuI,EAAYoE,EAAI,SAAUhnB,IAAWuC,aAAaW,gCAC9CgkB,EAAOhN,WAAYgN,EAAOja,IAAI0R,iBAIrC,GAAIuI,aAAkB3M,GACnB0M,aAAkBzM,IAClBoI,EAAYoE,EAAI,WAAYhnB,IAAWuC,aAAaY,4BAChD+jB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,YAEzDsI,aAAkB7M,GAClBwI,EAAYoE,EAAI,WAAYhnB,IAAWuC,aAAaa,6BAChD8jB,EAAOhN,WAAYgN,EAAOja,IAAI0R,iBAIrC,GAAIuI,aAAkB1M,GACnByM,aAAkBzM,IAClBoI,EAAYoE,EAAI,WAAYhnB,IAAWuC,aAAac,6BAChD6jB,EAAOhN,WAAYgN,EAAOja,IAAI0R,WAAYsI,EAAOha,IAAI0R,YAEzDsI,aAAkB7M,GAClBwI,EAAYoE,EAAI,WAAYhnB,IAAWuC,aAAae,8BAChD4jB,EAAOhN,WAAYgN,EAAOja,IAAI0R,iBAIrC,GAAIuI,aAAkB9M,EACnB6M,aAAkB3M,GAClBsI,EAAYoE,EAAI,SAAUhnB,IAAWuC,aAAagB,gCAC9C2jB,EAAOhN,WAAY+M,EAAOha,IAAI0R,YAElCsI,aAAkB1M,IAClBqI,EAAYoE,EAAI,SAAUhnB,IAAWuC,aAAaiB,6BAC9C0jB,EAAOhN,WAAY+M,EAAOha,IAAI0R,YAElCsI,aAAkB5M,GAClBuI,EAAYoE,EAAI,SAAUhnB,IAAWuC,aAAakB,+BAC9CyjB,EAAOhN,gBAId,MAAIgN,aAAkB7M,GAWvB,MAAMf,EAAakH,UAAUxgB,IAAWiB,WAAWO,2BAA4BsmB,KAAKC,UAAUb,IAV1FD,aAAkBzM,IAClBoI,EAAYoE,EAAI,WAAYhnB,IAAWuC,aAAamB,8BAChDwjB,EAAOhN,WAAY+M,EAAOha,IAAI0R,YAElCsI,aAAkB7M,GAClBwI,EAAYoE,EAAI,WAAYhnB,IAAWuC,aAAaoB,+BAChDujB,EAAOhN,cAMjB8M,KApgBd,4BA+gBiBT,GACT,IAAMe,EAAwB,GACxBC,EAAgE,GAsCtE,IArCAhB,EAAO9U,SAAQ,SAAAqV,GACX,GAAIA,aAAiBxM,GAAiBwM,aAAiBvM,GACnD+M,EAAStT,KAAK8S,QAEb,GAAIA,aAAiBtM,GAAqB,CAC3C,KAAO+M,EAAeza,OAAS,GAAKya,EAAeA,EAAeza,OAAS,aAAc0N,IAAqB,CAE1G,IAAIrB,EAA6BoO,EAAeA,EAAeza,OAAS,GAExE,KAAIga,EAAMrM,YAActB,EAAMsB,YAK1B,MAHA6M,EAAStT,KAAKuT,EAAeC,OAMrCD,EAAevT,KAAK8S,QAEnB,GAAIA,aAAiB1M,EACtBmN,EAAevT,KAAK8S,QAEnB,GAAIA,aAAiBzM,EACtB,OAAa,CACT,GAA8B,IAA1BkN,EAAeza,OACf,MAAMwM,EAAatT,YAAYhG,IAAWuC,aAAaM,mCACnD1E,GAER,GAAIopB,EAAeA,EAAeza,OAAS,aAAcsN,EAAoB,CACzEmN,EAAeC,MACf,MAGJF,EAAStT,KAAKuT,EAAeC,WAIlCD,EAAeza,OAAS,GAAG,CAE9B,IAAM2a,EAAsBF,EAAeC,MAC3C,GAAIC,aAAoBrN,EACpB,MAAMd,EAAatT,YAAYhG,IAAWuC,aAAaM,mCACnD1E,GAGJmpB,EAAStT,KAAKyT,GAGtB,OAAOH,IAlkBf,kCAmlBuBf,GAA8F,IAAzE5D,IAAwE,yDAA/CnM,EAA+C,uDAAhB,GACtF+J,EAAkBziB,KAAK8vB,qBAAqBrH,EAAQ5D,EAASnM,GAEnE,GAAI+P,EAAOzZ,OAAS,EAAG,CACnB,GAAI6V,EACA,MAAMrJ,EAAatT,YAAYhG,IAAWuC,aAAaK,kCAA8BzE,GAGrF,OAAO,IAAIse,GAAa,IAAInF,EAAS,KAG7C,OAAOiJ,IA9lBf,2CAomBgCgG,EAAqB5D,EAAkBnM,GAC/D,GAAsB,IAAlB+P,EAAOzZ,OACP,MAAMwM,EAAatT,YAAYhG,IAAWuC,aAAaK,kCAA8BzE,GAGzF,IAAM2oB,EAAmBP,EAAOiB,MAEhC,GAAIV,aAAiBxM,EAAe,CAChC,IAAMoC,EAAiC5e,KAAK4uB,UAAUlhB,IAAIsb,EAAM7Z,IAAI0R,YAEpE,QAAiBxgB,IAAbue,EAAwB,CACxB,IAAMZ,EAAQxC,EAAahX,cAActC,IAAW2B,eAAeC,8BAC/DklB,EAAM5M,WAAY4M,EAAM7Z,IAAI0R,YAChC,GAAIgE,EACA,MAAM7G,EAIN,OADAtF,EAAOxC,KAAK8H,GACL,IAAIW,GAAa,IAAInF,EAAS,KAG7C,OAAO,IAAImF,GAAaC,GAG5B,GAAIoK,aAAiBvM,GAAoB,CACrC,IAAMwF,EAAsBjiB,KAAK8vB,qBAAqBrH,EAAQ5D,EAASnM,GAEvE,OAAO6V,GAAcwB,YAAY/G,EAAM3P,KAAM4I,EAASjiB,KAAKwoB,kBAAmBQ,EAAM7Z,KAGxF,GAAI6Z,aAAiBtM,GAAqB,CACtC,IAAMwJ,EAAoBlmB,KAAK8vB,qBAAqBrH,EAAQ5D,EAASnM,GAC/DuN,EAAmBjmB,KAAK8vB,qBAAqBrH,EAAQ5D,EAASnM,GAEpE,OAAO6V,GAAcyB,aAAahH,EAAM3P,KAAM4M,EAAMC,EAAOlmB,KAAKwoB,kBAAmBQ,EAAM7Z,KAG7F,MAAMqM,EAAakH,UAAUxgB,IAAWiB,WAAWO,2BAA4BsmB,KAAKC,UAAUjB,QAzoBtG,KCAaiH,GAAb,kDAII,WAAYhwB,GAAwB,IAAD,8BAC/B,cAAMA,IAHOiwB,cAEkB,IAe3BC,aAAe,SAAC3e,GACpBA,EAAQA,EAAMkP,QAAQ,MAAO,QAC7B,IAAM0P,EAAmB,EAAKnwB,MAAMowB,UAAU7e,GAC9C,EAAK8e,SAAS,CACV9e,MAAOA,EACP+e,cAAeH,KApBY,EAwB3BI,cAAgB,SAAChwB,GACH,UAAdA,EAAM8X,IACD,EAAKmY,MAAMF,eACZ,EAAKG,eAGU,WAAdlwB,EAAM8X,KAAkC,QAAd9X,EAAM8X,KACP,OAA1B,EAAK4X,SAASS,SACd,EAAKT,SAASS,QAAQC,QAhCC,EAqC3BF,aAAe,WACnB,EAAKzwB,MAAM4wB,SAAS,EAAKJ,MAAMjf,QApC/B,EAAKif,MAAQ,CACTjf,MAAO,EAAKvR,MAAMuR,MAClB+e,cAAe,EAAKtwB,MAAMowB,UAAU,EAAKpwB,MAAMuR,QAEnD,EAAK0e,SAAWtvB,IAAMkwB,YANS,EAJvC,+DAauBnY,GACXA,EAAUnH,QAAUxR,KAAKC,MAAMuR,OAC/BxR,KAAKswB,SAAS,CAAC9e,MAAOxR,KAAKC,MAAMuR,UAf7C,+BA6CqB,IAAD,OACZ,OACI,oCACI,2BACIuf,IAAK/wB,KAAKkwB,SACV7W,KAAK,OACLzI,GAAI5Q,KAAKC,MAAM2Q,GACfogB,YAAY,EACZC,aAAc,MACdzf,MAAOxR,KAAKywB,MAAMjf,MAClB4D,SAAU,SAAA5U,GAAK,OAAI,EAAK2vB,aAAa3vB,EAAM4X,OAAO5G,QAClD0f,UAAWlxB,KAAKwwB,cAChBzwB,UAAW,eAEf,4BACIG,QAASF,KAAK0wB,aACdS,SAAUnxB,KAAKywB,MAAMF,eACvBvwB,KAAKC,MAAMmxB,iBA9D7B,GAA+BxwB,IAAMC,WCjD/B6O,I,MAAoCC,iBAAiBvB,SAASwB,cAAc,WAC5EyhB,GAAoBthB,OAAOL,GAAaG,iBAAiB,6BAOlDyhB,GAAb,oGAQQ,IAAMC,EAAMnjB,SAASC,cAAc,OACnCkjB,EAAItgB,UAAUC,IAAI,eAClBqgB,EAAIpxB,MAAMqxB,WAAa,SACvBD,EAAIE,aAAe,WACfH,EAAWI,oBAEfH,EAAII,aAAe,WACfL,EAAWM,kBAGf,IAAMC,EAAYzjB,SAASC,cAAc,KACzCkjB,EAAI9iB,YAAYojB,GAEhB,IAAMC,EAAS1jB,SAASC,cAAc,UAYtC,OAXAyjB,EAAOvjB,UAAY,SACnBujB,EAAOje,QAAU,WACbyd,EAAWS,WAEfR,EAAI9iB,YAAYqjB,GAEhBhd,OAAO8C,iBAAiB,UAAU,WAC9B0Z,EAAWU,aAGf5jB,SAAS6jB,KAAKxjB,YAAY8iB,GACnBA,IAjCf,8BAwD2BxwB,EAAaid,GAChC,IAAMuT,EAAMD,EAAWC,IAEvBA,EAAIW,kBAAkB3jB,UAAYxN,EAClCwwB,EAAIpxB,MAAMqxB,WAAa,UACvBD,EAAItgB,UAAU+F,OAAO,uBAAwBgH,GAC7CuT,EAAItgB,UAAU+F,OAAO,oBAAqBgH,GAC1CsT,EAAWU,UACXV,EAAWM,mBAhEnB,8BAwE0B7wB,GAClBuwB,EAAWa,QAAQpxB,GAAK,KAzEhC,4BAiFwBA,GAChBuwB,EAAWa,QAAQpxB,GAAK,OAlFhC,KAAauwB,GAEec,YAAsB,IAFrCd,GAIMC,IAAsBD,GAAWhvB,OAJvCgvB,GAKMe,oB,EALNf,GAoCMM,eAAiB,WAE5BN,GAAWI,mBACXJ,GAAWe,eAAiBta,WAAWuZ,GAAWS,QAAST,GAAWc,cAvCjEd,GA0CMI,iBAAmB,WAC9BY,aAAahB,GAAWe,iBA3CnBf,GA8CMS,QAAU,WACrBT,GAAWC,IAAIpxB,MAAMqxB,WAAa,UA/C7BF,GAkDMU,QAAU,WACmB,YAApCV,GAAWC,IAAIpxB,MAAMqxB,aACrBF,GAAWC,IAAIpxB,MAAMuR,MAAStD,SAAS6jB,KAAKtjB,YAAc,EAAI0iB,GAAa,OC+DvF,IAQakB,GAAb,kDAWI,WAAYtyB,GAAgC,IAAD,8BACvC,cAAMA,IATOuyB,iBAQ0B,IANnCC,WAAqB,EAMc,EAJnCC,2BAAqC,EAIF,EAF1BC,4BAAsC,IAEZ,EA0BpCC,2BAA6B,WAChC,IAAMxyB,EAAO,EAAKyyB,aAAazyB,KADO,EAEP,IAAIuuB,GAAW,EAAK1uB,MAAM2uB,UAAW,EAAK3uB,MAAMuoB,mBACpCkD,UAAUtrB,EAAM,EAAKqwB,MAAM5R,aAA9DnG,EAH8B,EAG9BA,OAAQrC,EAHsB,EAGtBA,YAChB,EAAKia,SAAS,CACV5X,OAAQA,EAAOhC,QAAO,SAAAvV,GAAG,YAAkBd,IAAdc,EAAIH,QAAwB8xB,MAAM3xB,EAAIH,MAAMsP,SAAWwiB,MAAM3xB,EAAIH,MAAMwP,QAE/FkK,KAAI,SAAAvZ,GAAQ,MAAO,CAACmP,MAAOnP,EAAIH,MAAMsP,MAAOE,IAAKrP,EAAIH,MAAMwP,IAAM,EAAGzP,IAAKI,EAAI4xB,YAClF1c,YAAaA,EAAYK,QAAO,SAAAC,GAAC,OAAKmc,MAAMnc,EAAErG,SAAWwiB,MAAMnc,EAAEnG,WAlC9B,EA8CnCwiB,SAAW,WACf,IACI,IACMC,EADyB,IAAItE,GAAW,EAAK1uB,MAAM2uB,UAAW,EAAK3uB,MAAMuoB,mBACvD+C,MAAM,EAAKtrB,MAAMizB,YAAY,EAAKjzB,MAAMkzB,wBAAwB/yB,MACxF6yB,EAAKvU,OACL,EAAK4R,SAAS,CAAC5X,OAAQ,KACvB,EAAKzY,MAAMmzB,OAAOH,GAEtB,MAAO9xB,GACCA,aAAeL,QACGT,IAAdc,EAAIH,QAEJG,EAAIH,MAAMwP,KAAO,EACjB,EAAK8f,UAAS,SAAAG,GACV,IAAM4C,EAAc5C,EAAM/X,OAK1B,OAHI2a,EAAYrW,OAAM,SAAAsW,GAAE,OAAIA,EAAGhjB,QAAUnP,EAAIH,MAAMsP,OAASgjB,EAAG9iB,MAAQrP,EAAIH,MAAMwP,QAC7E6iB,EAAYnd,KAAZ,2BAAqB/U,EAAIH,OAAzB,IAAgCD,IAAKI,EAAI4xB,WAEtC,CAACra,OAAQ2a,OAI5B,EAAKE,UAAUpyB,KArEoB,EAyEnCqyB,cAAgB,WACpB,EAAKvzB,MAAMwzB,mBA1E4B,EA6EnCC,iBAAmB,WACvB,EAAKzzB,MAAM0zB,mBAAmB,EAAKf,6BA9EI,EAiFnCgB,kBAAoB,WACxB,EAAK3zB,MAAM4zB,oBAAoBvC,GAAWyB,UAlFH,EAqFnCe,kBAAoB,WACxB,EAAK7zB,MAAM8zB,qBAAoB,SAAChzB,GAC5BuwB,GAAWyB,QAAQhyB,GACnB,EAAK6xB,iCAxF8B,EAkGnCoB,iBAAmB,SAAC7kB,EAAa8kB,GAAwB,MAExC,EAAKzB,YAAY7B,QAAQuD,eAAvC5jB,EAFsD,EAEtDA,MAAOE,EAF+C,EAE/CA,IACR2jB,EAAoB,EAAKtB,aAAazyB,KAAKsd,UAAU,EAAGpN,GACxD8jB,EAAqB,EAAKvB,aAAazyB,KAAKsd,UAAUlN,GACtD6jB,EAAsBF,EAAUnlB,OAASG,EAAIH,OAASilB,EACtDK,EAAiBH,EAAYhlB,EAAMilB,EAEzC,EAAKG,iBAAiBD,EAAQD,GAAa,WAEvC,EAAK7B,YAAY7B,QAAQ6D,aAAaH,GAEtC,EAAK7B,YAAY7B,QAAQ9f,YA9GU,EAyHnC0jB,iBAAmB,SAACn0B,EAAcye,GAA8D,IAAzC4V,EAAwC,uDAAnB,aAChF,EAAKx0B,MAAMmV,SAAS,EAAKyd,aAAa/kB,KAAM1N,GAC5C,EAAKkwB,SAAS,CAACzR,YAAaA,GAAc4V,GAC1C,EAAKhC,WAAaiC,KAAKC,OA5HgB,EAkInCC,gBAAkB,SAACzc,GACR,UAAXA,EAAGG,KACH,EAAK0a,YApI8B,EA2InC6B,wBAA0B,WAC9B,IAAMC,EAAW,EAAKtC,YAAY7B,QAClC,GAAiB,OAAbmE,GAAqBA,EAASC,aAAe,EAAKtC,WAAa,EAAKC,2BAA4B,CAChG,IAAMtyB,EAAO,EAAKyyB,aAAazyB,KAEzB40B,EADyB,IAAIrG,GAAW,EAAK1uB,MAAM2uB,UAAW,EAAK3uB,MAAMuoB,mBAC5CkD,UAAUtrB,EAAM,EAAKqwB,MAAM5R,aACxDoW,EAA2B70B,EAAKkP,MAAMJ,EAA0B9O,EAAM,EAAKqwB,MAAM5R,aAAc,EAAK4R,MAAM5R,aAC1GrL,ExC/PX,SAAsBA,EAAoByhB,GAE7C,IAGMC,EAAqD1hB,EAASkH,KAAI,SAAA9G,GACpE,IAAIuhB,EAAa,EACXC,EAAYxhB,EAAQ0J,cAAcgB,QAAQ2W,EAAiB3X,eACjE,GAAI8X,GAAa,EAAG,CAChBD,GAA4B,IAAdC,EAPS,EACF,EAOrB,IAAMC,EAAUD,EAAYH,EAAiBjmB,OAC7C4E,EAAUA,EAAQtE,MAAM,EAAG8lB,GAAa,sCACpCxhB,EAAQtE,MAAM8lB,EAAWC,GAAW,UAAYzhB,EAAQtE,MAAM+lB,GAKtE,OAHmB,IAAfF,IACAvhB,EAAU,uCAAyCA,EAAU,WAE1D,CAACA,UAASuhB,iBAKrB,MAHyB,KAArBF,GACAC,EAAUI,MAAK,SAAC3f,EAAGd,GAAJ,OAAUA,EAAEsgB,WAAaxf,EAAEwf,cAEvCD,EAAUxa,KAAI,SAAA6a,GAAI,OAAIA,EAAK3hB,WwCyOT4hB,CAAaR,EAAgBxhB,SAAUyhB,GACxD,EAAK3E,SAAS,CACV9c,SAAUA,EACVkF,OAAQsc,EAAgBtc,OAAOhC,QAAO,SAAAvV,GAAG,YAAkBd,IAAdc,EAAIH,QAAwB8xB,MAAM3xB,EAAIH,MAAMsP,SAAWwiB,MAAM3xB,EAAIH,MAAMwP,QAE/GkK,KAAI,SAAAvZ,GAAQ,MAAO,CAACmP,MAAOnP,EAAIH,MAAMsP,MAAOE,IAAKrP,EAAIH,MAAMwP,IAAM,EAAGzP,IAAKI,EAAI4xB,YAClF1c,YAAa2e,EAAgB3e,YAAYK,QAAO,SAAAC,GAAC,OAAKmc,MAAMnc,EAAErG,SAAWwiB,MAAMnc,EAAEnG,UAErF,EAAKkiB,2BAA6BgC,KAAKC,QA1JJ,EA8JnCc,qBAAuB,SAAC3nB,GAC5B,EAAK7N,MAAMmV,SAAStH,EAAM,EAAK+kB,aAAazyB,OA/JL,EAwKnCmzB,UAAY,SAACpyB,GAEbA,aAAeyM,GAAiBzM,aAAe4M,EAC/CujB,GAAWtT,MAAM7c,EAAI4xB,UAGrB,EAAK9yB,MAAMy1B,kBAAkBv0B,GAC7BmwB,GAAWtT,MAAM,qBAAuB7c,EAAI4xB,QAA3B,gEA/KkB,EAwLnC4C,eAAiB,SAACxiB,EAA8B5D,GACpD4D,EAAEzS,iBACF,IAAMk1B,EAAOziB,EAAE0iB,aAAaC,QAAQ,cAC9BC,EAAYhmB,OAAO6lB,EAAKtmB,MAAM,IA9MtB,MA+MVsmB,EAAKpmB,OAAO,IAAiBsjB,MAAMiD,IACnC,EAAK91B,MAAM+1B,iBAAiBD,EAAWxmB,IA3L3C,EAAKkhB,MAAQ,CACTwF,gBAAgB,EAChBziB,SAAU,GACVkF,OAAQ,GACRrC,YAAa,GACbwI,YAAa,GAEjB,EAAK2T,YAAc5xB,IAAMkwB,YACzBoF,aAAY,kBAAM,EAAKrB,4BAA2B,EAAKlC,6BAVhB,EAX/C,+DAwBuBha,GACf,GAAI3Y,KAAKC,MAAMiC,WAAayW,EAAUzW,SAAU,CAC5C,IAAMmO,EAAWrQ,KAAKwyB,YAAY7B,QACjB,OAAbtgB,GACAA,EAAS8lB,eAAen2B,KAAKC,MAAMiC,SAASmK,kBAAkBI,kCA5B9E,mCAkDQ,OAAOzM,KAAKC,MAAMizB,YAAYlzB,KAAKC,MAAMkzB,0BAlDjD,sDAqD4C/jB,GACpCpP,KAAKC,MAAMm2B,4BAA4BhnB,KAtD/C,+BA4Mc,IAAD,OACC3B,EAAOzN,KAAKC,MAAMiC,SAASmK,kBAC3BgqB,EAAMr2B,KAAKC,MAAMiC,SAAS6G,WAiB1ButB,EAAe,SAACl2B,EAAcF,EAAqBS,EAAiBR,GACtE,OAAQ,kBAAC,EAAD,CACJmY,IAAKlY,EACLA,KAAMA,EACNF,QAASA,EACTC,MAAOA,EACPQ,QAASA,KAIX41B,EAAiB,SAACje,EAAaqF,EAAcvd,EAAcO,EAAiBszB,GAAoD,IAArC9zB,EAAoC,uDAAP,GAC1H,OAAQ,kBAAC,EAAD,CACJmY,IAAKA,EACLlY,KAAMA,EACNF,QAAS,kBAAM,EAAK8zB,iBAAiBrW,EAAMsW,IAC3CtzB,QAASA,EACTR,MAAOA,KAGTq2B,EAAoB,CAACC,YAAa,QAExC,OACI,6BAAS12B,UAAU,gBACf,gCACI,4BAAK0N,EAAKnB,yBACTgqB,EAAa7oB,EAAK9B,aAAc3L,KAAK8zB,kBAAmBrmB,EAAK7B,qBAC7D0qB,EAAa7oB,EAAK5B,aAAc7L,KAAK4zB,kBAAmBnmB,EAAK3B,sBAGlE,0BAAM/L,UAAU,yBA3Cb,EAAKE,MAAMizB,YAAYxY,KAAI,SAAC+T,EAAMlf,GACrC,IAAMxP,EAAqB,EAAKE,MAAMkzB,yBAA2B5jB,EAAI,iBAAmB,GACxF,OAAQ,4BACJ+I,IAAK/I,EACLrP,QAAS,kBAAM,EAAKw2B,gCAAgCnnB,IACpDxP,UAAWA,EACX42B,WAAW,EACXC,YAAa,SAAAzjB,GAAC,OAAIA,EAAE0iB,aAAagB,QAAQ,aAhOvC,IAgO6Dt0B,OAAOgN,KACtEunB,WAAY,SAAA3jB,GAAC,OAAIA,EAAEzS,kBACnBq2B,OAAQ,SAAA5jB,GAAC,OAAI,EAAKwiB,eAAexiB,EAAG5D,KACtCkf,EAAK3gB,SAmCH,4BAAQ5N,QAASF,KAAKwzB,cAClBrzB,MAAO,CAAC62B,SAAU,IAAKC,WAAY,OAAQC,QAAS,oBACpD,uCAIR,kBAAC,EAAD,CACInG,IAAK/wB,KAAKwyB,YACV5hB,GAAG,8BACHxQ,KAAMJ,KAAK6yB,aAAazyB,KACxB0Q,YAAarD,EAAKhB,8BAClBiM,OAAQ1Y,KAAKywB,MAAM/X,OACnBlF,SAAUxT,KAAKywB,MAAMjd,SACrB6C,YAAarW,KAAKywB,MAAMpa,YAExBjB,SAAUpV,KAAKu0B,iBACf9b,YAAazY,KAAK40B,gBAElBzyB,UAAWnC,KAAKC,MAAMkC,YAG1B,0BAAMpC,UAAU,8BACXw2B,EAAe,UAAW,KAAM,KAAMF,EAAIrtB,UAAW,GACrDutB,EAAe,UAAW,KAAM,KAAMF,EAAIptB,WAAY,GACtDstB,EAAe,UAAW,SAAU,KAAMF,EAAIntB,OAAQ,EAAGstB,GAEzDD,EAAe,QAAS,SAAU,SAAUF,EAAIltB,MAAO,GACvDotB,EAAe,QAAS,SAAU,SAAUF,EAAIjtB,aAAc,GAC9DmtB,EAAe,QAAS,KAAM,KAAMF,EAAIhtB,WAAY,EAAGmtB,GAEvDD,EAAe,UAAW,IAAK,IAAKF,EAAI/sB,YAAa,GACrDitB,EAAe,UAAW,SAAU,SAAUF,EAAI9sB,iBAAkB,GACpEgtB,EAAe,UAAW,KAAM,KAAMF,EAAI7sB,aAAc,GACxD+sB,EAAe,UAAW,KAAM,KAAMF,EAAI5sB,cAAe,GACzD8sB,EAAe,UAAW,SAAU,SAAUF,EAAI3sB,aAAc,GAChE6sB,EAAe,UAAW,SAAU,SAAUF,EAAI1sB,cAAe,GACjE4sB,EAAe,UAAW,KAAM,KAAMF,EAAIzsB,UAAW,GACrD2sB,EAAe,UAAW,UAAW,UAAWF,EAAIxsB,kBAAmB,GACvE0sB,EAAe,UAAW,UAAW,UAAWF,EAAIvsB,mBAAoB,EAAG0sB,GAE3Ex2B,KAAKC,MAAMuoB,mBAAqB+N,EAAe,UAAW,MAAO,MAAOF,EAAItsB,cAAe,GAC3F/J,KAAKC,MAAMuoB,mBAAqB+N,EAAe,UAAW,MAAO,MAAOF,EAAIrsB,cAAe,GAC3FhK,KAAKC,MAAMuoB,mBAAqB+N,EAAe,UAAW,MAAO,MAAOF,EAAIpsB,eAAgB,EAAGusB,GAE/FD,EAAe,WAAY,OAAU,OAAUF,EAAInsB,SAAU,EAAGssB,GAEhED,EAAe,eAAgB,KAAM,KAAM9oB,EAAKf,YAAa,GAC7D6pB,EAAe,gBAAiB,OAAQ,KAAM9oB,EAAKd,aAAc,IAGtE,0BAAM5M,UAAU,gCACZ,kBAAC,EAAD,CACIK,KAAMqN,EAAKlB,eACXrM,QAASF,KAAKgzB,SACdjzB,UAAW,gBACXI,MAAO,CAACs2B,YAAa,QACrB91B,QAAS8M,EAAKjB,wBAElB,kBAAC,GAAD,CACIgF,MAAOxR,KAAK6yB,aAAa/kB,KACzBsjB,WAAY3jB,EAAKzB,aACjB6kB,SAAU7wB,KAAKy1B,qBACfpF,UAAW,kBAAM,GACjBzf,GAAG,0BAEN0lB,EAAa7oB,EAAKxB,aAAcjM,KAAK0zB,iBAAkBjmB,EAAKvB,2BA/TjF,GAAuCtL,IAAMC,W,oBCpGhCs2B,I,MAAb,kDAEI,WAAYl3B,GAA4B,IAAD,8BACnC,cAAMA,IAqCFm3B,eAAiB,WACrB,OAA+B,IAAxB,EAAK3G,MAAM4G,SAAiB,UAAO,WArC1C,EAAK5G,MAAQ,CACT6G,SAAU,EACVD,SAAU,GAJqB,EAF3C,+DAUuB1e,EAAyC4e,EAAyCC,GAC7F7e,EAAUiG,WAAa5e,KAAKC,MAAM2e,UAClC5e,KAAKswB,SAAS,CACV+G,SAAU,EACVC,SAAU,MAd1B,oCAuB0BA,GAClBt3B,KAAKswB,UAAS,SAAAG,GACV,OAAIA,EAAM6G,UAAYA,EACX,CACHD,UAAW5G,EAAM4G,SACjBC,QAASA,GAIN,CACHD,SAAU,EACVC,QAASA,QAlC7B,sCAiD4B7d,GAAoB,IAAD,OACvC,OACI,4BACI,wBAAI1Z,UAAU,kBACb0Z,EAAQiB,KAAI,SAACwM,EAAY9X,GACtB,IAAMhP,EAAe,EAAKqwB,MAAM6G,UAAYloB,EACvC8X,EAAa,EAAKkQ,iBAAoBlQ,EAC3C,OAAO,wBAAI5O,IAAKlJ,EAAOlP,QAAS,kBAAM,EAAKu3B,cAAcroB,KAAShP,SAxDtF,iCAmEuBqZ,GAAoB,IAAD,OAElC,GAA2C,IAAvCzZ,KAAKC,MAAM2e,SAAS8Y,eACpB,OACI,wBAAIpf,IAAI,KACJ,wBAAIvY,UAAU,kBACd,wBAAIuY,IAAI,IAAIqf,QAASle,EAAQzK,QAAS,gBAIlD,IAAM2K,EAAc3Z,KAAKC,MAAM2e,SAAS2E,UAExC,GAAIvjB,KAAKywB,MAAM6G,SAAW,GAAKt3B,KAAKywB,MAAM6G,QAAU7d,EAAQzK,OAAQ,CAChE,IAAM4oB,EAAkBne,EAAQzZ,KAAKywB,MAAM6G,SAG9B,WADiC3d,EAAK,GAAGyN,QAAQwQ,GAE1Dje,EAAK2b,MAAK,SAACzZ,EAAGC,GAEV,IAAI+b,EAAwBhc,EAAEsL,SAASyQ,GAEnCE,EAAwBhc,EAAEqL,SAASyQ,GAEvC,OAAe,OAAXC,GAA8B,OAAXC,EACZ,EAAKrH,MAAM4G,SAAWtnB,OAAOgoB,iBAGzB,OAAXF,GAA8B,OAAXC,EACZ,EAAKrH,MAAM4G,SAAWtnB,OAAOioB,iBAGzB,OAAXH,GAA8B,OAAXC,EAEZ,EAAKrH,MAAM4G,UAAYxb,EAAEsL,SAASyQ,GAAW9b,EAAEqL,SAASyQ,IAG5D,KAIXje,EAAK2b,MAAK,SAACzZ,EAAGC,GAEV,IAAI+b,EAAkChc,EAAEsL,SAASyQ,GAE7CE,EAAkChc,EAAEqL,SAASyQ,GAEjD,OAAe,OAAXC,GAA8B,OAAXC,EACZ,EAAKrH,MAAM4G,SAAWtnB,OAAOgoB,iBAGzB,OAAXF,GAA8B,OAAXC,EACZ,EAAKrH,MAAM4G,SAAWtnB,OAAOioB,iBAGzB,OAAXH,GAA8B,OAAXC,EACZ,EAAKrH,MAAM4G,SAAW90B,OAAOsZ,EAAEsL,SAASyQ,IAAUK,cAAc11B,OAAOuZ,EAAEqL,SAASyQ,KAGtF,KAKnB,OAAOje,EAAKe,KAAI,SAACP,EAAK/K,GAAN,OACZ,wBAAIkJ,IAAKlJ,GACL,wBAAIrP,UAAU,iBAAiBqP,EAAQ,GACtC+K,EAAIW,sBAAsBrB,GAASiB,KAAI,SAAClJ,EAAOpC,GAAR,OACpC,wBAAIkJ,IAAKlJ,GAAQoC,YAtIrC,+BA8IQ,IAAMiI,EAAoBzZ,KAAKC,MAAM2e,SAASkF,iBACxCoU,EAAYl4B,KAAKm4B,gBAAgB1e,GACjCE,EAAO3Z,KAAKo4B,WAAW3e,GAE7B,OACI,yBAAK1Z,UAAU,8CACX,2BAAOA,UAAU,gBACb,+BACCm4B,GAED,+BACCve,SAzJrB,GAAyC/Y,IAAMC,Y,iEC0BlCw3B,I,MAAb,uKACc,IAAD,OACL,OACI,kBAAC,KAAD,MAAa,gBAAG3mB,EAAH,EAAGA,MAAH,OACT,kBAAC4mB,GAAD,CACIC,OAAQ,EAAKt4B,MAAMgzB,KACnBuF,SAAU,EAAKv4B,MAAMu4B,SACrB9mB,MAAOA,EACPxR,QAAS,EAAKD,MAAMC,QACpBiC,UAAW,EAAKlC,MAAMkC,mBAT1C,GAAoCvB,IAAMC,YAiBpC6O,GAAoCC,iBAAiBvB,SAASwB,cAAc,UAE5E1B,GAAmBwB,GAAaG,iBAAiB,yBACjD5B,GAAqByB,GAAaG,iBAAiB,2B,GACzB7B,EAAoBC,GAAYC,IAAzDa,G,GAAAA,UAAWE,G,GAAAA,WAEZwpB,GAAa,EAAIxpB,GADO,GAIxBypB,GAAuBhpB,GAAaG,iBAAiB,mBACrD8oB,GAAsBjpB,GAAaG,iBAAiB,kBACpD+oB,GAAiBlpB,GAAaG,iBAAiB,sBAC/CgpB,GAAgBnpB,GAAaG,iBAAiB,qBAC9CipB,GAAyBppB,GAAaG,iBAAiB,mBACvDkpB,GAA2BrpB,GAAaG,iBAAiB,mBACzDmpB,GAAwBtpB,GAAaG,iBAAiB,kBACtDopB,GAA0BvpB,GAAaG,iBAAiB,kBAmE9D,SAASqpB,GAAT,GACkJ,IADrH1O,EACoH,EADpHA,KAAMgO,EAC8G,EAD9GA,SAAUt4B,EACoG,EADpGA,QAASiC,EAC2F,EAD3FA,UAC2F,EAKzIg3B,eAHAC,EAFyI,EAEzIA,YACAC,EAHyI,EAGzIA,YACAC,EAJyI,EAIzIA,YAQAC,EAAYzO,KAAKC,IAAIP,EAAKoL,KAAK4D,MAAMxqB,OAAQwb,EAAKoL,KAAK6D,OAAOzqB,QAAUD,GA3FlD,GAgG1B,OAJIwqB,EAAYd,KACZc,EAAYd,IAKZ,kBAACiB,GAAA,EAAD,CAAOC,IAAKnP,EAAK3V,EAAGoR,KAAMuE,EAAK7U,GAC3B,0BACIjD,OAAQ+lB,GAAY/mB,MAAO6nB,EAC3B1kB,GAAI4jB,GAAa,EAAG9iB,GAAI4jB,EAAY,EAAGK,GAAI,EAC3CC,KAAM13B,EACDq2B,GAAoCY,EAAzBJ,GAA+DC,GAC1ET,GAAqCY,EAA1BN,GAAiEC,GACjF74B,QAAS,WACLA,EAAQsqB,EAAKoL,KAAKxmB,QAEtBoJ,OAAO,UACPshB,YAvBY,WACpBT,EAAY,CAAEU,YAAa,EAAGC,WAAY,KAuBlCC,WAAYX,IAEhB,0BACIzkB,EAAE,OACFqlB,GAAG,OACHhsB,SAAUA,GACVD,WAAYA,GACZksB,WAAW,SACXh6B,MAAO,CAAEi6B,cAAe,QACxBP,KAAM13B,EAAY02B,GAAgBD,IAEZ,KAArBpO,EAAKoL,KAAK6D,OACP,2BAAO9jB,EAAE,IAAIukB,GAAG,QAAQ1P,EAAKoL,KAAK4D,OACjC,oCACG,2BAAO7jB,EAAE,IAAIukB,GAAG,KAAK1P,EAAKoL,KAAK4D,OAC/B,2BAAO7jB,EAAE,IAAIukB,GAAG,SAAS1P,EAAKoL,KAAK6D,WAiB3D,SAASnB,GAAT,GAC8I,IADtHC,EACqH,EADrHA,OAAQC,EAC6G,EAD7GA,SAAU9mB,EACmG,EADnGA,MAAOxR,EAC4F,EAD5FA,QAASiC,EACmF,EADnFA,UAEhDk4B,EAAoBxP,GAAa0N,GAEjC7lB,GAAU2nB,EAAY,GAAK5B,GAAa4B,EAAY5B,GAAa,EAAIA,GACrE6B,EAAS,CAAEX,IAAKlB,GAAYxS,KAAM,EAAOC,MAAO,EAAOqU,OAAQ9B,IAC/D+B,EAAO9nB,EAAS4nB,EAAOX,IAAMW,EAAOC,OACpCE,EAAO/oB,EAAQ4oB,EAAOrU,KAAOqU,EAAOpU,MAEpC+M,EA1HV,SAA6BA,GACzB,IAAIyH,EAAU,EAoCd,OAnCA,SAASC,EAA0BnQ,GAC/B,IAAIiP,EAAiBjP,EAAKtG,qBAK1B,OAJIuV,EAAOzqB,OA/BO,KAgCdyqB,EAASA,EAAOnqB,MAAM,EAAGsrB,IAAyB,MAAQnB,EAAOjqB,OAAOiqB,EAAOzqB,OAAS,IAGxFwb,aAAgBxI,GACT,CACHwX,MAAOhP,EAAKwD,mBACZyL,OAAQA,EACRrqB,MAAOsrB,IACPnoB,SAAU,CACNooB,EAA0BnQ,EAAKC,gBAIlCD,aAAgBN,GACd,CACHsP,MAAOhP,EAAKwD,mBACZyL,OAAQA,EACRrqB,MAAOsrB,IACPnoB,SAAU,CACNooB,EAA0BnQ,EAAKG,kBAC/BgQ,EAA0BnQ,EAAKI,qBAKhC,CACH4O,MAAOhP,EAAKwD,mBACZyL,OAAQA,EACRrqB,MAAOsrB,KAIZC,CAA0B1H,GAqFH4H,CAAoBtC,GAC5C3C,EAAOkF,aAA2B7H,GAExC,OAAOvhB,EAAQ,GAAK,KAChB,yBAAKd,GAAG,gBAAgBc,MAAOA,EAAOgB,OAAQA,GAC1C,0BAAMhB,MAAOA,EAAOgB,OAAQA,EAAQknB,GAAI,GAAIC,KAAM13B,EAAYw2B,GAAsBD,KACpF,kBAACqC,GAAA,EAAD,CAAuBzQ,KAAMsL,EAAMjR,KAAM,CAAC8V,EAAMD,KAC3C,SAAAvH,GAAI,OACD,kBAACyG,GAAA,EAAD,CAAOC,IAAKW,EAAOX,IAAK1T,KAAMqU,EAAOrU,MAChCgN,EAAK+H,QAAQtgB,KAAI,SAACugB,EAAM1rB,GAAP,OACd,kBAAC2rB,GAAA,EAAD,CACI5iB,IAAG,uBAAkB/I,GACrBqmB,KAAMqF,EACNE,OAAQh5B,EAAY02B,GAAgBD,GACpCwC,YAAY,IACZC,cAAe,EACfxB,KAAK,YAGZ5G,EAAKqI,cAAc5gB,KAAI,SAAC8P,GAAD,OACpB,kBAAC0O,GAAD,CACI5gB,IAAG,eAAUkS,EAAKoL,KAAKxmB,OACvBob,KAAMA,EACNgO,SAAUhO,EAAKoL,KAAKxmB,QAAUopB,EAC9Bt4B,QAASA,EACTiC,UAAWA,YCzOpC,IAAMo5B,GAAb,wGASiE,IAAtCC,EAAqC,uDAApB,IACpC,OAAO,IAAIC,SAAc,SAAAC,GACrB,IAAIC,EAAUvtB,SAASC,cAAc,OACrCstB,EAAQjoB,UAAR,oCAAiD8nB,EAAjD,KACA,IAAII,EAAYD,EAAQE,WAExBD,EAAUhkB,iBAAiB,UAAU,WAEjC,IAAIkkB,EAAOF,EAAUG,MAAM,GACvBC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WAEZR,EAAQ,CAAC5tB,KAAMguB,EAAKhuB,KAAM1N,KAAM47B,EAAOld,UAE3Ckd,EAAOG,WAAWL,MAGtBF,EAAUQ,aA1BtB,kCAqCoE,IAAxCZ,EAAuC,uDAAtB,IACrC,OAAO,IAAIC,SAAgB,SAAAC,GACvBH,EAAWc,gBAAgBX,EAASF,QAvChD,sCAkDmCE,EAAkCF,GAC7D,IAAIG,EAAUvtB,SAASC,cAAc,OACrCstB,EAAQjoB,UAAR,oCAAiD8nB,EAAjD,cAEA,IAAII,EAA8BD,EAAQE,WACpCS,EAAkD,GACxDV,EAAUhkB,iBAAiB,UAAU,WAEjC,IAAMmkB,EAAkBH,EAAUG,OAClC,SAASQ,EAASntB,GACd,GAAIA,IAAU2sB,EAAM/sB,OAChB,OAAO0sB,EAAQY,GAEnB,IAAMR,EAAOC,EAAM3sB,GACb4sB,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAS/oB,GAErBmpB,EAASpmB,KAAK,CAACpI,KAAMguB,EAAKhuB,KAAM1N,KAAM+S,EAAEiF,OAAO0G,SAC/Cyd,EAASntB,EAAM,GACfzN,QAAQC,IAAI,SAAWwN,EAAM,GAAK,IAAM2sB,EAAM/sB,OAAS,YAE3DgtB,EAAOG,WAAWL,GAEtBS,CAAS,MAEbX,EAAUQ,YA3ElB,KCgCO,SAASI,GAAanoB,EAAcmL,GAEvCnL,GAAQmL,EAKR,IAJA,IAAMiD,EAAgB,GAClBtE,GAAoB,EACpBse,EAAoB,EACpBltB,EAAY,EACTA,EAAI8E,EAAKrF,QAAQ,CACpB,IAAMiO,EAAI5I,EAAK7E,OAAOD,GAEtB,GAAU,MAAN0N,EAAW,CAEX,GAAKkB,EAIA,CACD,IAAM3H,EAAKnC,EAAK7E,OAAOD,EAAI,GAC3B,GAAIiH,IAAOgJ,EACPiD,EAAIvM,KAAK7B,EAAK/E,MAAMmtB,EAAY,EAAGltB,GAAGmR,QAAQ,MAAO,MACrDvC,GAAW,EACXse,EAAYltB,EAAI,OAGf,GAAW,MAAPiH,EACL,MAAM,IAAIvV,MAEdsO,GAAK,EACL,SAfA4O,GAAW,EACXse,EAAYltB,OAiBX0N,IAAMuC,GAAcrB,IACzBsE,EAAIvM,KAAK7B,EAAK/E,MAAMmtB,EAAWltB,GAAGmR,QAAQ,KAAM,MAChD+b,EAAYltB,EAAI,KAElBA,EAEN,OAAOkT,ECxFJ,IAAMia,GAAb,iDACYhiB,IAA2B,IAAIlN,IAD3C,gDAWe2M,EAAsB5F,GAC7B,OAAOvU,KAAK0a,IAAIhN,IAAIyM,EAAM,IAAM5F,KAZxC,0BAuBe4F,EAAsB5F,EAAgB/C,GAC7CxR,KAAK0a,IAAIX,IAAII,EAAM,IAAM5F,EAAQ/C,KAxBzC,6BAmCkB2I,EAAsB5F,GAChC,OAAOvU,KAAK0a,IAAI+J,OAAOtK,EAAM,IAAM5F,KApC3C,8BA4CQvU,KAAK0a,IAAIgK,UA5CjB,6BAsDQ,OAAO1kB,KAAK0a,IAAIiK,OAtDxB,8BA+DmBzK,GACX,YAAIla,KAAK0a,IAAI0S,WACR1S,KAAI,SAACiiB,GAAW,MAAO,CAACnrB,MAAOmrB,EAAM,GAAIrkB,IAAKokB,EAASE,SAASD,EAAM,QACtEhpB,SAAQ,SAACgpB,EAAOvtB,GAAR,OAAkB8K,EAAEyiB,EAAMnrB,MAAOmrB,EAAMrkB,IAAI6B,IAAKwiB,EAAMrkB,IAAI/D,OAAQnF,SAlEvF,gCAqE4BkJ,GACpB,IAAMyE,EAAQzE,EAAIyE,MAAM,KACxB,MAAO,CAAC5C,IAAKpK,OAAOgN,EAAM,IAAKxI,OAAQxE,OAAOgN,EAAM,SAvE5D,KC0CO,IAAM8f,GAAb,WAwHI,WAAY/uB,EAAc4L,EAAuBmB,EAC7BlB,EAAkB6O,GAA6B,yBAtB3D1a,UAsB0D,OArBlE4L,iBAqBkE,OApBlEmB,iBAoBkE,OAnBlElB,UAmBkE,OAlB1DmjB,iBAkB0D,OAjB1DC,cAiB0D,OAhBjDrkB,YAgBiD,OAf1D8P,uBAe0D,OAd1DwU,YAc0D,OAb1DC,iBAa0D,EAC9Dj9B,KAAK8N,KAAOA,EACZ9N,KAAK0Z,YAAcA,EACnB1Z,KAAK6a,YAAcA,EACnB7a,KAAK2Z,KAAOA,EACZ3Z,KAAK88B,YAAcpjB,EAAY1K,OAC/BhP,KAAK+8B,SAAWpjB,EAAK3K,OACrBhP,KAAK0Y,OAAS,IAAIgkB,GAClB18B,KAAKwoB,kBAAoBA,EACzBxoB,KAAKg9B,QAAS,EACdh9B,KAAKi9B,YAAcj9B,KAAKk9B,eACxBl9B,KAAKm9B,kBApIb,qDAUsBrvB,EAAc0a,GAC5B,OAAO,IAAIqU,EAAe/uB,EAAM,CAAC,WAAY,CAAC,UAAW,GAAI0a,KAXrE,+BAuB2BoN,EAAWpN,GAC9B,GAAI4U,GAAqBxH,GAAO,CAC5B,IAAM5a,EAAwB4a,EAC9B,OAAO,IAAIiH,EAAe7hB,EAAElN,KAAMkN,EAAEtB,YAAasB,EAAEH,YAAaG,EAAErB,KAAM6O,GAE5E,MAAM,IAAIvnB,MAAM,2CA5BxB,mCAwC+B6M,EAAc8Q,EAAoB4J,GACzD,IAAM9O,EAAwB,GACxBmB,EAAqC,GAC3C+D,EAAS6E,aAAa9P,SAAQ,SAAC0F,EAAMvL,GACjC4L,EAAYxD,KAAKpI,GACjB+M,EAAY3E,KAAKmD,MAErB,IAAMM,EAAmBiF,EAAS2E,UAAU7I,KAAI,SAAAP,GAC5C,OAAOA,EAAIW,sBAAsBpB,MAErC,OAAO,IAAImjB,EAAe/uB,EAAM4L,EAAamB,EAAalB,EAAM6O,KAlDxE,2BA4DuB5J,GAMf,OAAO,IAAIie,EALEje,EAAS9Q,KACL,YAAO8Q,EAASlF,aAChB,YAAOkF,EAAS/D,aACpB+D,EAASjF,KAAKe,KAAI,SAAAP,GAAG,mBAAQA,MAChByE,EAAS4J,qBAjE3C,6BA4EyB6U,GAEjB,IAAMtiB,EAAUsiB,EAAI3jB,YAAYgB,KAAI,SAAAtI,GAAC,OAAIA,EAAEpD,UAC3CquB,EAAIxiB,YAAYlH,SAAQ,SAAC4V,EAAGha,GACpBwL,EAAQxL,GAAKga,EAAEva,SACf+L,EAAQxL,GAAKga,EAAEva,WAGvBquB,EAAI1jB,KAAKhG,SAAQ,SAAA6G,GACbA,EAAE7G,SAAQ,SAACqH,EAAGzL,GACNwL,EAAQxL,GAAKyL,EAAEhM,SACf+L,EAAQxL,GAAKyL,EAAEhM,cAK3B,IAAMiM,EAAM,SAACC,GAAD,OAAkBA,EAAGR,KAAI,SAACC,EAAGpL,GAAJ,OAAUoL,EAAEQ,OAAOJ,EAAQxL,GAAI,QAAMqL,KAAK,QAC/E,OAAOK,EAAIoiB,EAAI3jB,aAAe,KAC1BuB,EAAIoiB,EAAIxiB,aAAe,KACvBE,EAAQL,KAAI,SAAAtI,GAAC,MAAI,IAAIgJ,OAAOhJ,MAAIwI,KAAK,OAAS,KAC9CyiB,EAAI1jB,KAAKe,KAAI,SAAAF,GAAC,OAAIS,EAAIT,MAAII,KAAK,MAAQ,WAhGnD,uDA2IoC,IAAD,OAC3B5a,KAAK0Y,OAAOgM,QACZ1kB,KAAKs9B,mBACL,IAH2B,eAGlBrgB,GACL,YAAI,IAAIhB,MAAM,EAAK8gB,UAAUza,QAAQ3O,SAAQ,SAAA6G,GAAC,OAAI,EAAK+iB,cAActgB,EAAGzC,OADnEyC,EAAI,EAAGA,EAAIjd,KAAK88B,cAAe7f,EAAI,EAAnCA,KA9IjB,yCAwJQ,IAF8B,IAAD,OACvBxP,EAAOvL,IAAWS,eADK,WAEpB66B,GACL,IAAMtW,EAAqB,EAAKxN,YAAY8jB,GAAavd,OACzD,MAAmB,KAAfiH,GACA,EAAKxO,OAAOqB,IAAI,OAAQyjB,EAAa/vB,EAAK7K,aAC1C,YAEsB,EAAK8W,YAAY+jB,QAAO,SAACC,EAAK5vB,GACpD,OAAQA,IAASoZ,EAAewW,EAAM,EAAKA,IAC5C,GACa,GACZ,EAAKhlB,OAAOqB,IAAI,OAAQyjB,EAAa/vB,EAAK5K,gBAC1C,YAEAwhB,GAAsB6C,IACtB,EAAKxO,OAAOqB,IAAI,OAAQyjB,EAAa/vB,EAAK3K,eAC1C,YAECga,GAAYgE,OAAOoG,QAIxB,EAAKxO,OAAO+L,OAAO,OAAQ+Y,IAHvB,EAAK9kB,OAAOqB,IAAI,OAAQyjB,EAAa/vB,EAAK1K,eAC1C,aAnBCy6B,EAAc,EAAGA,EAAcx9B,KAAK88B,cAAeU,EAAa,EAAhEA,KAxJjB,oCAoL0BA,EAAqBG,GACvC,IAAMlwB,EAAOvL,IAAWS,eACxB3C,KAAK0Y,OAAO+L,OAAOkZ,EAAUH,GAC7B,IAAMI,EAAgB59B,KAAK2Z,KAAKgkB,GAAUH,GAAavd,OAEvD,GAAc,SAAV2d,GAA+B,KAAVA,GAAkD,WAAlC59B,KAAK6a,YAAY2iB,GACjDx9B,KAAKwoB,mBACNxoB,KAAK0Y,OAAOqB,IAAI4jB,EAAUH,EAAa/vB,EAAKzK,sBAG/C,GAAsC,WAAlChD,KAAK6a,YAAY2iB,GACjB1gB,GAAYkE,SAAS4c,EAAMld,QAAQ,MAAO,MAC3C1gB,KAAK0Y,OAAOqB,IAAI4jB,EAAUH,EAAa/vB,EAAKxK,oBAG/C,GAAsC,YAAlCjD,KAAK6a,YAAY2iB,GAA4B,CAClD,IAAMK,EAAQD,EAAMtgB,cACN,SAAVugB,GAA8B,MAAVA,GAA2B,UAAVA,GAA+B,MAAVA,GAC1D79B,KAAK0Y,OAAOqB,IAAI4jB,EAAUH,EAAa/vB,EAAKvK,mBAtM5D,uCA+M6Bs6B,GAA4B,IAAD,OAChDx9B,KAAK2Z,KAAKhG,SAAQ,SAACmqB,EAAGvuB,GAAJ,OAAU,EAAKguB,cAAcC,EAAajuB,QAhNpE,uCA4NQ,IAF+B,IAAD,OACxBqP,EAAqB,IAAIpF,EAASxZ,KAAK8N,MACpCmP,EAAI,EAAGA,EAAIjd,KAAK88B,cAAe7f,EACpC2B,EAAS0E,UAAUtjB,KAAK0Z,YAAYuD,GAAIjd,KAAK6a,YAAYoC,IA6B7D,OA3BAjd,KAAK2Z,KAAKhG,SAAQ,SAAAoqB,GACd,IAAM5jB,EAAW,IAAI+H,GAAItD,EAAS6E,cAClCsa,EAASpqB,SAAQ,SAACiqB,EAAO3gB,GAErB,GAAc,UADd2gB,EAAQA,EAAM3d,QAEV9F,EAAIwJ,SAAS,EAAKjK,YAAYuD,GAAI,WAEjC,GAA4B,WAAxB,EAAKpC,YAAYoC,GAGtB2gB,EAAQA,EAAMld,QAAQ,MAAO,QAAQA,QAAQ,KAAM,OACnDvG,EAAIwJ,SAAS,EAAKjK,YAAYuD,GAAI2gB,QAEjC,GAAc,KAAVA,EACLzjB,EAAIwJ,SAAS,EAAKjK,YAAYuD,GAAI,WAEjC,GAA4B,WAAxB,EAAKpC,YAAYoC,GACtB9C,EAAIwJ,SAAS,EAAKjK,YAAYuD,GAAIlN,OAAO6tB,EAAMld,QAAQ,MAAO,UAErB,CACzC,IAAMmd,EAAQD,EAAMtgB,cACpBnD,EAAIwJ,SAAS,EAAKjK,YAAYuD,GAAc,MAAV4gB,GAA2B,SAAVA,OAG3Djf,EAASgF,OAAOzJ,MAEpByE,EAAStE,eACFsE,IA1Pf,qCAoQQ,MAAO,CACH9Q,KAAM9N,KAAK8N,KACX4L,YAAY,YAAK1Z,KAAK0Z,aACtBmB,YAAY,YAAK7a,KAAK6a,aACtBlB,KAAM3Z,KAAK2Z,KAAKe,KAAI,SAAAP,GAAG,mBAAQA,MAC/B2iB,YAAa98B,KAAK88B,YAClBC,SAAU/8B,KAAK+8B,YA1Q3B,kCAqRQ,OAAO/8B,KAAK0Y,SArRpB,gCA+RQ,OAA8B,IAAvB1Y,KAAK0Y,OAAOiM,SA/R3B,2CAwSgC6D,GACpBA,IAAsBxoB,KAAKwoB,oBAC3BxoB,KAAKwoB,kBAAoBA,EACzBxoB,KAAKm9B,qBA3SjB,qCAsTQ,IAFA,IAAI5tB,EAAKvP,KAAK0Z,YAAY1K,OAAS,EAC/BlB,EAAO,SAAWyB,EACfvP,KAAK0Z,YAAY4E,QAAQxQ,IAAS,GACrCA,EAAO,YAAayB,EAExBvP,KAAK0Z,YAAYxD,KAAKpI,GACtB9N,KAAK6a,YAAY3E,KAAK,UAClBlW,KAAKwoB,kBACLxoB,KAAK2Z,KAAKhG,SAAQ,SAAA6G,GAAC,OAAIA,EAAEtE,KAAK,OAG9BlW,KAAK2Z,KAAKhG,SAAQ,SAAA6G,GAAC,OAAIA,EAAEtE,KAAK,UAEhClW,KAAK88B,YACP98B,KAAKs9B,mBACLt9B,KAAKg9B,QAAS,IAnUtB,kCA0U8B,IAAD,OACjBh9B,KAAKwoB,kBACLxoB,KAAK2Z,KAAKzD,KAAK,YAAI,IAAI+F,MAAMjc,KAAK88B,aAAaxa,QAAQ5H,KAAI,SAAAojB,GAAC,MAAI,OAGhE99B,KAAK2Z,KAAKzD,KAAK,YAAI,IAAI+F,MAAMjc,KAAK88B,aAAaxa,QAAQ5H,KAAI,SAAAnL,GACvD,MAA4B,WAAxB,EAAKsL,YAAYtL,GACV,IAEsB,YAAxB,EAAKsL,YAAYtL,GACf,QAEJ,SAGbvP,KAAK+8B,SACP/8B,KAAKg9B,QAAS,IA1VtB,mCAoWwBQ,GAA4B,IAAD,OAC3Cx9B,KAAK0Z,YAAYmW,OAAO2N,EAAa,GACrCx9B,KAAK6a,YAAYgV,OAAO2N,EAAa,GACrCx9B,KAAK2Z,KAAKhG,SAAQ,SAAAwG,GAAG,OAAIA,EAAI0V,OAAO2N,EAAa,QAC/Cx9B,KAAK88B,YAEkB,IAArB98B,KAAK88B,cACL98B,KAAK2Z,KAAO,GACZ3Z,KAAKg+B,gBAETh+B,KAAK0Y,OAAO/E,SAAQ,SAACnC,EAAO2I,EAAK5F,GAEzBA,IAAWipB,EACX,EAAK9kB,OAAO+L,OAAOtK,EAAK5F,GAGnBA,EAASipB,IACd,EAAK9kB,OAAO+L,OAAOtK,EAAK5F,GACxB,EAAKmE,OAAOqB,IAAII,EAAK5F,EAAQ/C,OAGrCxR,KAAKg9B,QAAS,IAzXtB,gCAkYqBW,GAAyB,IAAD,OACrC39B,KAAK2Z,KAAKkW,OAAO8N,EAAU,KACzB39B,KAAK+8B,SACP/8B,KAAK0Y,OAAO/E,SAAQ,SAACnC,EAAO2I,EAAK5F,GAEzB4F,IAAQwjB,EACR,EAAKjlB,OAAO+L,OAAOtK,EAAK5F,GAGJ,kBAAR4F,GAAoBA,EAAMwjB,IACtC,EAAKjlB,OAAO+L,OAAOtK,EAAK5F,GACxB,EAAKmE,OAAOqB,IAAII,EAAM,EAAG5F,EAAQ/C,OAGzCxR,KAAKg9B,QAAS,IAhZtB,oCA0ZQ,OAAOh9B,KAAK+8B,WA1ZpB,uCAoaQ,OAAO/8B,KAAK88B,cApapB,8BA6amBhvB,GACX9N,KAAK8N,KAAOA,EACZ9N,KAAKg9B,QAAS,IA/atB,gCAybQ,OAAOh9B,KAAK8N,OAzbpB,uCAmcQ,OAAO9N,KAAK0Z,cAncpB,oCA6cyBwN,EAAoBsW,GACrCx9B,KAAK0Z,YAAY8jB,GAAetW,EAChClnB,KAAKs9B,mBACLt9B,KAAKg9B,QAAS,IAhdtB,uCA0dQ,OAAOh9B,KAAK6a,cA1dpB,oCAoeyBojB,EAAiCT,GAClDx9B,KAAK6a,YAAY2iB,GAAeS,EAChCj+B,KAAKk+B,iBAAiBV,GACtBx9B,KAAKg9B,QAAS,IAvetB,gCAifQ,OAAOh9B,KAAK2Z,OAjfpB,kCA4fuBikB,EAAeD,EAAkBH,GAChDx9B,KAAK2Z,KAAKgkB,GAAUH,GAAeI,EACnC59B,KAAKu9B,cAAcC,EAAaG,GAChC39B,KAAKg9B,QAAS,IA/ftB,iCA0gBQ,OAAOh9B,KAAKg9B,SA1gBpB,gCAohBqBA,GACbh9B,KAAKg9B,OAASA,EACVA,IACAh9B,KAAKi9B,YAAcj9B,KAAKk9B,kBAvhBpC,sCAkiBQ,YAAyB78B,IAArBL,KAAKi9B,YACEj9B,KAAKi9B,YAAYnvB,KAGjB,KAtiBnB,oCAgjBiCzN,IAArBL,KAAKi9B,cACLj9B,KAAK8N,KAAO9N,KAAKi9B,YAAYnvB,KAC7B9N,KAAK0Z,YAAL,YAAuB1Z,KAAKi9B,YAAYvjB,aACxC1Z,KAAK6a,YAAL,YAAuB7a,KAAKi9B,YAAYpiB,aACxC7a,KAAK2Z,KAAO3Z,KAAKi9B,YAAYtjB,KAAKe,KAAI,SAAAP,GAAG,mBAAQA,MACjDna,KAAK88B,YAAc98B,KAAKi9B,YAAYH,YACpC98B,KAAK+8B,SAAW/8B,KAAKi9B,YAAYF,SACjC/8B,KAAKg9B,QAAS,EACdh9B,KAAKm9B,uBAxjBjB,KAokBO,SAASC,GAAqBe,GACjC,MAAmB,kBAARA,IAGL,SAAUA,GAA4B,kBAAbA,EAAIrwB,OAG7B,gBAAiBqwB,GAAmC,kBAApBA,EAAIrB,eAA4BqB,EAAIrB,YAAc,KAGlF,aAAcqB,GAAgC,kBAAjBA,EAAIpB,eAGjC,gBAAiBoB,KAASliB,MAAMmiB,QAAQD,EAAIzkB,cAAgBykB,EAAIzkB,YAAY1K,SAAWmvB,EAAIrB,aAC7FqB,EAAIzkB,YAAYM,MAAK,SAACqkB,GAAD,MAAyB,kBAANA,YAGtC,gBAAiBF,KAASliB,MAAMmiB,QAAQD,EAAItjB,cAAgBsjB,EAAItjB,YAAY7L,SAAWmvB,EAAIrB,aAC7FqB,EAAItjB,YAAYb,MAAK,SAACqkB,GAAD,OC3mBtB,SAA+BF,GAClC,MAAmB,kBAARA,IAGI,WAARA,GAA4B,WAARA,GAA4B,YAARA,GDumBTG,CAAsBD,SAGpD,SAAUF,GAAOliB,MAAMmiB,QAAQD,EAAIxkB,OAASwkB,EAAIxkB,KAAKqD,OAAM,SAACqhB,GAChE,OAAOpiB,MAAMmiB,QAAQC,IAAMA,EAAErvB,SAAWmvB,EAAIrB,aAAeuB,EAAErhB,OAAM,SAAChC,GAAD,MAAyB,kBAANA,c,gCE7nBjFujB,GAAb,kGAUuB/V,GAAsF,IAAD,OACpG,OAAO,IAAIiT,SAAwD,SAAAC,GAC/DH,GAAWiD,UAAU,QAAQC,MAAK,SAAA1C,GAC9B,IAAInN,EAA8B,GAC9B8P,EAAkB,EACtB3C,EAAMpoB,SAAQ,SAAAmoB,GACV,GAAIA,EAAKhuB,KAAK2B,MAAM,UAChB,IACImf,EAAU1Y,KAAK,EAAKyoB,cAAcJ,EAAqBK,gBAAgB9C,EAAKhuB,KAAKwB,MAAM,GAAI,IACvFwsB,EAAK17B,KAAMooB,IAEnB,MAAOrnB,GACHQ,QAAQC,IAAI,QAAUk6B,EAAKhuB,KAAO,kCAClC4wB,GAAW,OAIf/8B,QAAQC,IAAI,yBAA2Bk6B,EAAKhuB,MAC5C4wB,GAAW,KAGnBhD,EAAQ,CAAC9M,UAAWA,EAAW8P,QAASA,YA/BxD,2BA4CuB9P,EAA6BiQ,EAAkBC,GAA0C,IAAD,OACvG,GAAyB,IAArBlQ,EAAU5f,OAGd,GAAyB,IAArB4f,EAAU5f,OAAd,CAKA,IAAM+vB,EAAaC,OACnBpQ,EAAUjb,SAAQ,SAAAiL,GACdmgB,EAAIjD,KAAKld,EAASG,UAAY,OAAQ,EAAKkgB,cAAcrgB,EAAUkgB,OAEvEC,EAAIG,cAAc,CAAC7lB,KAAM,SAASolB,MAAK,SAAAU,GACnCC,kBAAOD,EAASN,EAAW,WAC5BQ,OAAM,SAAAl+B,GACL,MAAMA,SAZV,CACI,IAAMm+B,EAAO,IAAIC,KAAK,CAACv/B,KAAKi/B,cAAcrQ,EAAU,GAAIkQ,IAAkB,CAACzlB,KAAM,6BACjF+lB,kBAAOE,EAAM1Q,EAAU,GAAG7P,UAAY,WAlDlD,oCAuEiCjR,EAAc1N,EAAqBooB,GAC5D,GAAa,OAATpoB,GAA0B,KAATA,EAEjB,MADAuB,QAAQC,IAAI,uCAAyCkM,GAC/C7M,QAMV,IAAMoS,GAHNjT,EAAOA,EAAK6f,OAAOS,QAAQ,QAAS,MAC/BA,QAAQ,MAAO,MAAMA,QAAQ,MAAO,SAEZ3D,MAAM,MAEnC,GAAI1J,EAAMrE,OAAS,EAEf,MADArN,QAAQC,IAAI,QAAUkM,EAAO,sBACvB,IAAI7M,MAGdoS,EAAM,GAAKA,EAAM,GAAGqN,QAAQ,MAAO,IACnCrN,EAAM,GAAKA,EAAM,GAAGqN,QAAQ,MAAO,IAEnC,IAAIlB,EJzFL,SAA4BrQ,GAE/B,IADA,IAAIgP,GAAoB,EACf5O,EAAI,EAAGA,EAAIJ,EAAIH,SAAUO,EAAG,CACjC,IAAMoO,EAAexO,EAAIK,OAAOD,GAEhC,GAAa,MAAToO,EACA,GAAKQ,EAGA,CACD,IAAM3H,EAAKrH,EAAIK,OAAOD,EAAI,GAC1B,GAAW,MAAPiH,GAAqB,MAAPA,EACd,OAAOA,EAGN,GAAW,MAAPA,EAML,SAJEjH,OAVN4O,GAAW,EAkBnB,IAAKA,IAAsB,MAATR,GAAyB,MAATA,GAC9B,OAAOA,GI+DK6hB,CAAmBnsB,EAAM,SAGvBhT,IAAdmf,IACAA,EAAY,KAGhB,IAAM9F,EAAwB8iB,GAAanpB,EAAM,GAAImM,GAC/C3E,EAAqC2hB,GAAanpB,EAAM,GAAImM,GAAW9E,KAAI,SAAAvL,GAC7E,IAAM0uB,EAAQ1uB,EAAImO,cAClB,MAAc,WAAVugB,GAAgC,QAAVA,GAA6B,MAAVA,EAClC,SAEQ,WAAVA,GAAgC,QAAVA,GAA6B,MAAVA,EACvC,SAEJ,aAGLlkB,EAAmBtG,EAAM/D,MAAM,GAAGoL,KAAI,SAAArG,GAAI,OAAImoB,GAAanoB,EAAMmL,MAGjEsd,EAAcpjB,EAAY1K,OAChC,GAAI6L,EAAY7L,SAAW8tB,GAAenjB,EAAKK,MAAK,SAAAG,GAAG,OAAIA,EAAInL,SAAW8tB,KAEtE,MADAn7B,QAAQC,IAAI,gBAAkBkM,EAAO,2CAC/B,IAAI7M,MAGd,OAAO,IAAI47B,GAAe/uB,EAAM4L,EAAamB,EAAalB,EAAM6O,KAtHxE,sCA4HmC1a,GAE3B,MAAa,MADbA,EAAOA,EAAKiP,MAAM,IAAIrG,QAAO,SAAAiH,GAAI,OAAIb,GAAYK,WAAWQ,MAAO/C,KAAK,KAE7D,WAEJ9M,IAjIf,oCAuIiC8Q,EAA0BkgB,GACnD,IAAMW,EAAgB7gB,EAASkF,iBAAiBpJ,KAC5C,SAAAtI,GAAC,MAAI,IAAMA,EAAEsO,QAAQ,KAAM,MAAQ,OACrC9F,KAAKkkB,GACD3c,EAAgBvD,EAAS8gB,iBAAiB9kB,KAAKkkB,GAC/CnlB,EAAiBiF,EAAS2E,UAAU7I,KAAI,SAAAP,GAAG,OAAIA,EAAIO,KACrD,SAAAkb,GAAI,MAAI,IAAMA,EAAKlV,QAAQ,KAAM,MAAQ,OAC3C9F,KAAKkkB,MACP,MAAO,CAACW,EAAOtd,GAAR,mBAAkBxI,IAAMiB,KAAK,UA/I5C,KCgEa+kB,I,MAAb,kDAKI,WAAY1/B,GAA4B,IAAD,8BACnC,cAAMA,IAHO2/B,gBAEsB,IAiB/BC,mBAAqB,WACzB,IAAIC,EAAiCzV,GAAY,EAAKpqB,MAAM8/B,mBAAoB,EAAKtP,MAAM1e,eAC3F,GAAoB,OAAhB+tB,GAEoB,QADpBA,EAAczV,GAAY,EAAKpqB,MAAM8/B,mBAAoB,IAGrD,OADA,EAAK9/B,MAAMy1B,kBAAkBla,EAAakH,UAAUxgB,IAAWiB,WAAWC,kCACnE,KAGf,IACI,OAAO08B,EAAY9c,YAEvB,MAAO7hB,GAGH,OADA,EAAKlB,MAAMy1B,kBAAkBla,EAAakH,UAAUxgB,IAAWiB,WAAWE,wBAAyBlC,EAAI4xB,UAChG,OAhCwB,EAoC/BiN,yBAA2B,SAAC5wB,GAChC,EAAKkhB,SAAS,CAACve,cAAe3C,KArCK,EA2C/B6wB,oBAAsB,WAC1B,IAAMC,EAAM9xB,SAAS2C,eP1GQ,iBO2G7B,GAAY,OAARmvB,EAAc,CACd,IAAMC,EAAOD,EAAItrB,wBACXwrB,EAAU,CACZ1uB,MAAoB,EAAbyuB,EAAKzuB,MACZgB,OAAsB,EAAdytB,EAAKztB,OACbwtB,IAAKA,EACLrB,SAAU,EAAK5+B,MAAMogC,eAAiB,0BAE1CC,KAAYF,KArDmB,EA4D/BG,eAAiB,WACrB,GAAkC,OAA9B,EAAKV,qBAIT,IACItB,GAAqBiC,KACjB,CAAC3D,GAAe4D,aAAa,gBAAiB,EAAKZ,sBAAkC,IACrF,gBAAiB,EAAK5/B,MAAM6B,mBAEpC,MAAOX,GACHQ,QAAQS,KAAK,iBAAmBjB,GAAK,QATrC,EAAKlB,MAAMy1B,kBAAkBla,EAAakH,UAAUxgB,IAAWiB,WAAWG,oCA9D3C,EA8E/Bo9B,YAAc,WACgB,OAA9B,EAAKb,qBAOT,EAAK5/B,MAAM0gC,YAAY,EAAKd,sBANxB,EAAK5/B,MAAMy1B,kBACPla,EAAakH,UAAUxgB,IAAWiB,WAAWI,mCA/ErD,EAAKktB,MAAQ,CACT1e,cAAe,GAEnB,EAAK6tB,WAAah/B,IAAMkwB,YALW,EAL3C,+DAauBnY,GACXA,EAAUonB,qBAAuB//B,KAAKC,MAAM8/B,oBAC5C//B,KAAKswB,SAAS,CAACve,cAAe,MAf1C,+BA+FQ,IAAM6M,EAAW5e,KAAK6/B,qBAEtB,GAAiB,OAAbjhB,EACA,OAAO,KAEX,IAAMnR,EAAOzN,KAAKC,MAAMiC,SAAS0K,cAE3Bg0B,EAAoD,IAA7B5gC,KAAKywB,MAAM1e,cAAsBtE,EAAKR,oBAAsBQ,EAAKP,0BACxF2zB,EAAkCxW,GAAYrqB,KAAKC,MAAM8/B,mBAAoB//B,KAAKywB,MAAM1e,eACxF+uB,EAA6C,OAAjBD,EAAwB,KAAOA,EAAa5c,cAE9E,OACI,6BACI8M,IAAK/wB,KAAK4/B,WACV7/B,UAAU,+BACV,gCACI,4BAAK0N,EAAKZ,qBACV,kBAAC,EAAD,CACIzM,KAAMqN,EAAKX,qBACX5M,QAASF,KAAKigC,oBACdt/B,QAAS8M,EAAKV,+BAItB,uBAAGhN,UAAU,WACT,gCAAS0N,EAAKT,cAAgB,IAAMhN,KAAKC,MAAM8/B,mBAAmB9b,cAAgB,MAGtF,kBAAC,GAAD,CACIgP,KAAMjzB,KAAKC,MAAM8/B,mBACjBvH,SAAUx4B,KAAKywB,MAAM1e,cACrB7R,QAASF,KAAKggC,yBACd79B,UAAWnC,KAAKC,MAAMkC,YAG1B,uBAAGpC,UAAU,WAAU,gCAAS6gC,EAAT,IAAwBE,EAAxB,MAEvB,0BAAM/gC,UAAU,yBACZ,kBAAC,EAAD,CACIK,KAAMqN,EAAKN,UACXjN,QAASF,KAAK0gC,YACd//B,QAAS8M,EAAKL,mBAElB,kBAAC,EAAD,CACIhN,KAAMqN,EAAKJ,qBACXnN,QAASF,KAAKugC,eACd5/B,QAAS8M,EAAKH,+BAItB,kBAAC,GAAD,CAAqBsR,SAAUA,SAjJ/C,GAAmChe,IAAMC,YCpC5BkgC,GAAb,oGAUuD,IAAD,OAC9C,OAAO,IAAItF,SAA4B,SAAAC,GACnCH,GAAWiD,UAAU,QAAQC,MAAK,SAAA1C,GAC9B,IAAI7I,EAA4B,GAC5B8N,EAA6B,EAC7BC,EAAsB,EACtBC,EAAuB,EAC3BnF,EAAMpoB,SAAQ,SAAAmoB,GACQ,OAAdA,EAAK17B,MACLuB,QAAQC,IAAI,uBAAyBk6B,EAAKhuB,MAC1CozB,GAAgB,GAEXpF,EAAKhuB,KAAK2B,MAAM,WAErBqsB,EAAK17B,KAAO07B,EAAK17B,KAAKsgB,QAAQ,QAAS,MAClCA,QAAQ,MAAO,MAAMA,QAAQ,MAAO,QAExC,KAAKxE,OAAO4f,EAAK17B,MAAO2c,MAAM,UAAUpJ,SAAQ,SAAAqR,GAC7C,IAC+B,IAAvBA,EAAK/E,OAAOjR,QACZkkB,EAAYhd,KAAK,EAAKirB,2BAA2Bnc,IAGzD,MAAO7jB,GACH6/B,GAAsB,MAG9BC,GAAe,IAGft/B,QAAQC,IAAI,yBAA2Bk6B,EAAKhuB,MAC5CozB,GAAgB,MAGxBxF,EAAQ,CAACxI,cAAa8N,qBAAoBC,cAAaC,yBA5CvE,iDAiD8CzS,GACtC,IAAM2S,EAA4B3S,EAAKnQ,QAAQ,MAC/C,IAA2B,IAAvB8iB,EAEA,MADAz/B,QAAQC,IAAI,gDACNX,QAEV,IAAMogC,EAAmB5S,EAAKnf,MAAM,EAAG8xB,GAAmBnhB,OAC1D,IAAKohB,EAAS9gB,SAAS,QAEnB,MADA5e,QAAQC,IAAI,oDACNX,QAIV,MAAO,CAAC6M,KAFauzB,EAAS/xB,MAAM,GAAI,GAEpBlP,KADCquB,EAAKnf,MAAM8xB,GAAmBnhB,UA7D3D,2BAwEuBiT,EAA2B2L,GAC1C,IAAMyC,EAAsBpO,EAAYxY,KAAI,SAAAvH,GACxC,MAAO,OAASA,EAAErF,KAAO,WAAaqF,EAAE/S,QACzCwa,KAAK,QACF0kB,EAAO,IAAIC,KAAK,CAAC+B,GAAc,CAACjoB,KAAM,6BAC5C+lB,kBAAOE,EAAMT,EAAW,YA7EhC,KCnBM0C,I,MAA2B,CAE7B,CACIzzB,KAAM,uBACN0zB,QAAS,CACL5S,UAAW,CACP,CACI9gB,KAAM,MACN4L,YAAa,CAAC,KAAM,QAAS,QAAS,WAAY,UAClDmB,YAAa,CAAC,SAAU,SAAU,SAAU,UAAW,UACvDlB,KAAM,CACF,CAAC,IAAK,IAAK,OAAQ,OAAQ,QAC3B,CAAC,IAAK,IAAK,QAAS,QAAS,SAC7B,CAAC,IAAK,IAAK,OAAQ,IAAK,UACxB,CAAC,IAAK,IAAK,QAAS,IAAK,kBAE7BmjB,YAAa,EACbC,SAAU,GAEd,CACIjvB,KAAM,QACN4L,YAAa,CAAC,KAAM,QACpBmB,YAAa,CAAC,SAAU,UACxBlB,KAAM,CACF,CAAC,IAAK,gBACN,CAAC,IAAK,6BACN,CAAC,IAAK,mBACN,CAAC,aAAc,kBACf,CAAC,YAAa,iBAElBmjB,YAAa,EACbC,SAAU,IAGlB7J,YAAa,CACT,CACIplB,KAAM,gBACN1N,KACI,8OASR,CACI0N,KAAM,iBACN1N,KACI,2LAOR,CACI0N,KAAM,kBACN1N,KACI,gIAMR,CACI0N,KAAM,UACN1N,KACI,gVASR,CACI0N,KAAM,UACN1N,KACI,uRAQR,CACI0N,KAAM,iBACN1N,KACI,8KAYZooB,mBAAmB,IAI3B,CACI1a,KAAM,0BACN0zB,QAAS,CACL5S,UAAW,CACP,CACI9gB,KAAM,OACN4L,YAAa,CAAC,KAAM,UAAW,QAAS,UAAW,WACnDmB,YAAa,CAAC,SAAU,SAAU,SAAU,UAAW,UACvDlB,KAAM,CACF,CAAC,IAAK,IAAK,WAAS,OAAQ,QAC5B,CAAC,IAAK,IAAK,YAAU,QAAS,SAC9B,CAAC,IAAK,IAAK,WAAS,IAAK,UACzB,CAAC,IAAK,IAAK,gBAAS,IAAK,kBAE7BmjB,YAAa,EACbC,SAAU,GAEd,CACIjvB,KAAM,UACN4L,YAAa,CAAC,KAAM,YACpBmB,YAAa,CAAC,SAAU,UACxBlB,KAAM,CACF,CAAC,IAAK,kBACN,CAAC,IAAK,wCACN,CAAC,IAAK,0BACN,CAAC,2BAAiB,eAClB,CAAC,oBAAgB,4BAErBmjB,YAAa,EACbC,SAAU,IAGlB7J,YAAa,CACT,CACIplB,KAAM,eACN1N,KACI,+QASR,CACI0N,KAAM,2BACN1N,KACI,uOAOR,CACI0N,KAAM,4BACN1N,KACI,6KAMR,CACI0N,KAAM,UACN1N,KACI,2dASR,CACI0N,KAAM,kBACN1N,KACI,oVAQR,CACI0N,KAAM,+BACN1N,KACI,+NAYZooB,mBAAmB,MAYxB,SAASiZ,KACZ,OAAOF,GCpJJ,IAAMG,GAAb,kDAEI,WAAYzhC,GAAgC,IAAD,8BACvC,cAAMA,IACDwwB,MAAQ,CACTwF,gBAAgB,GAHmB,EAF/C,qDASc,IAAD,OACCxoB,EAAOzN,KAAKC,MAAMiC,SAASiI,kBAmHjC,OACI,4BAAQpK,UAAU,sBACd,sCAlHI,4BAAQG,QAAS,EAAKD,MAAM0hC,SAAUl0B,EAAKrD,aAG3C,4BAAQlK,QAAS,EAAKD,MAAM2hC,eAAiBn0B,EAAKpD,YAGlD,4BAAQnK,QAAS,EAAKD,MAAM4hC,eAAiBp0B,EAAKnD,YAiFlC,WACxB,IAAMw3B,EACN,wBAAI/hC,UAAU,aACT0N,EAAKjD,iBACLi3B,KAAa/mB,KAAI,SAACqnB,EAAQxyB,GACvB,OACI,wBAAI+I,IAAK/I,GACL,4BAAQrP,QAAS,kBAAM,EAAKD,MAAM+hC,aAAaD,EAAOP,WAAWO,EAAOj0B,WAMxF,OAAQ,yBAAK/N,UAAW,eAAiB0N,EAAKlD,cAAeu3B,GAkBxDG,GA9GoB,WACzB,IAAMC,EACF,wBAAIniC,UAAU,aACV,4BACI,8BAAO0N,EAAK/C,mBAAZ,KACA,2BACI2O,KAAK,QACLvL,KAAK,sBACL0D,MAAM,UACNZ,GAAG,8BACHuxB,QAAS,EAAKliC,MAAMuoB,kBACpBpT,SAAU,kBAAM,EAAKnV,MAAMmiC,2BAA0B,MACzD,2BAAOC,QAAQ,+BAA+B50B,EAAK9C,2BACnD,2BACI0O,KAAK,QACLvL,KAAK,sBACL0D,MAAM,YACNZ,GAAG,6BACHuxB,SAAU,EAAKliC,MAAMuoB,kBACrBpT,SAAU,kBAAM,EAAKnV,MAAMmiC,2BAA0B,MACzD,2BAAOC,QAAQ,8BAA8B50B,EAAK7C,8BAEtD,4BACI,8BAAO6C,EAAK5C,qBAAZ,KACA,2BACIwO,KAAK,QACLvL,KAAK,kBACL0D,MAAM,YACNZ,GAAG,uBACHuxB,QAA0C,MAAjC,EAAKliC,MAAM6B,kBACpBsT,SAAU,kBAAM,EAAKnV,MAAMqiC,0BAA0B,QACzD,2BAAOD,QAAQ,wBAAwB50B,EAAK3C,+BAC5C,2BACIuO,KAAK,QACLvL,KAAK,kBACL0D,MAAM,QACNZ,GAAG,wBACHuxB,QAA0C,MAAjC,EAAKliC,MAAM6B,kBACpBsT,SAAU,kBAAM,EAAKnV,MAAMqiC,0BAA0B,QACzD,2BAAOD,QAAQ,yBAAyB50B,EAAK1C,4BAEjD,4BACI,8BAAO0C,EAAKzC,cAAZ,KACA,2BACIqO,KAAK,QACLvL,KAAK,YACL0D,MAAM,KACNZ,GAAG,eACHuxB,SAAU,EAAKliC,MAAMkC,UACrBiT,SAAU,kBAAM,EAAKnV,MAAMsiC,mBAAkB,MACjD,2BAAOF,QAAQ,gBAAgB50B,EAAKxC,oBACpC,2BACIoO,KAAK,QACLvL,KAAK,YACL0D,MAAM,MACNZ,GAAG,gBACHuxB,QAAS,EAAKliC,MAAMkC,UACpBiT,SAAU,kBAAM,EAAKnV,MAAMsiC,mBAAkB,MACjD,2BAAOF,QAAQ,iBAAiB50B,EAAKvC,oBAEzC,4BACI,8BAAOuC,EAAKtC,iBAAZ,KACCnJ,EAAsB0Y,KAAI,SAAAjN,GACvB,OAAQ,yBAAK6K,IAAK7K,EAAMtN,MAAO,CAACgyB,QAAS,WACrC,2BACI9Y,KAAK,QACLvL,KAAK,WACL0D,MAAO/D,EACPmD,GAAI,YAAcnD,EAClB00B,QAAS,EAAKliC,MAAMiC,SAASQ,OAAS+K,EACtC2H,SAAU,kBAAM,EAAKnV,MAAMuiC,iBAAiB/0B,MAChD,2BAAO40B,QAAS,YAAc50B,GAAOA,SAMzD,OAAQ,yBAAK1N,UAAW,eAAgB0N,EAAKhD,eAAgBy3B,GAkCxDO,GAfD,uBAAIC,KAAK,qCACLtqB,OAAO,SACPilB,IAAI,aACJt9B,UAAW,eACb0N,EAAKrC,kBAzHvB,GAAuCxK,IAAMC,WCzDtC,SAAS8hC,GAAgBxE,GAC5B,MAAmB,kBAARA,EACA,0CAEL,cAAeA,GAASliB,MAAMmiB,QAAQD,EAAIvP,YAAuC,IAAzBuP,EAAIvP,UAAU5f,SACxEmvB,EAAIvP,UAAU5U,MAAK,SAACqkB,GAAD,OAAajB,GAAqBiB,MAGnD,gBAAiBF,GAASliB,MAAMmiB,QAAQD,EAAIjL,cAA2C,IAA3BiL,EAAIjL,YAAYlkB,SAC9EmvB,EAAIjL,YAAYlZ,MAAK,SAACqkB,GAAD,OCrBtB,SAAsBF,GACzB,MAAmB,kBAARA,GAGH,SAAUA,GAA6B,kBAAbA,EAAIrwB,MAAuB,SAAUqwB,GAA6B,kBAAbA,EAAI/9B,KDiBrDwiC,CAAavE,MAG7C,sBAAuBF,GAAyC,mBAA1BA,EAAI3V,kBAGzC,KAFI,+DAHA,qFAJA,2FAoBR,SAASqa,GAAY1f,GACxB,MAAO,CACHyL,UAAWzL,EAAKyL,UAAUlU,KAAI,SAAA2iB,GAAG,MPpC9B,CACHvvB,MAF+B8nB,EOqC6ByH,GPnCjDvvB,KACX4L,YAAY,YAAKkc,EAAKlc,aACtBmB,YAAY,YAAK+a,EAAK/a,aACtBlB,KAAMic,EAAKjc,KAAKe,KAAI,SAAAP,GAAG,mBAAQA,MAC/B2iB,YAAalH,EAAKkH,YAClBC,SAAUnH,EAAKmH,UAPhB,IAAgCnH,KOsC/B1C,YAAa/P,EAAK+P,YAAYxY,KAAI,SAAA+T,GAAI,MCzBnC,CAAC3gB,MADmBg1B,ED0BkCrU,GCzB3C3gB,KAAM1N,KAAM0iC,EAAI1iC,MAD/B,IAAwB0iC,KD2BvBta,kBAAmBrF,EAAKqF,mBE7DzB,IAAMua,GAAb,oGAWQ,OAAO,IAAItH,SAAiB,SAACC,EAASsH,GAClCzH,GAAW0H,SAAS,WAAWxE,MAAK,SAAA3C,GAChC,GAAkB,OAAdA,EAAK17B,KACL4iC,EAAO,sCAAwClH,EAAKhuB,KAAO,iBAE1D,GAAIguB,EAAKhuB,KAAK2B,MAAM,aAAc,CAEnCqsB,EAAK17B,KAAO07B,EAAK17B,KAAKsgB,QAAQ,QAAS,MAAMA,QAAQ,MAAO,MACvDA,QAAQ,MAAO,QACpB,IAAIyd,EAAMnU,KAAKuB,MAAMuQ,EAAK17B,MACpB0e,EAAiB6jB,GAAgBxE,GACvC,GAAe,OAAXrf,EAEA4c,EADyByC,QAIzB6E,EAAO,uCAAyClkB,QAIpDkkB,EAAO,sEA/B3B,2BA4CuBxB,EAAkB3C,GACjC,IAAMS,EAAO,IAAIC,KAAK,CAACvV,KAAKC,UAAUuX,IAAW,CAACnoB,KAAM,6BACxD+lB,kBAAOE,EAAMT,EAAW,eA9ChC,KCoBO,IAAMqE,GAAb,qGAS0BrE,GAClBtD,GAAWiD,UAAU,WAAWC,MAAK,SAAA1C,GACjCp6B,QAAQC,IAAIm6B,EAAM/sB,OAAS,mCAC3BrN,QAAQwhC,KAAK,kBAEb,IAAIC,EAA0C,GAC1CC,EAAoB,EACpB3E,EAAkB,EAuChB4E,EAAkB,WACpB,IAAMvE,EAAaC,OACnBoE,EAAQzvB,SAAQ,SAAA4vB,GACZxE,EAAIjD,KAAKyH,EAAOz1B,KAAMy1B,EAAOnjC,SAEjC2+B,EAAIG,cAAc,CAAC7lB,KAAM,SAASolB,MAAK,SAAAU,GACnCC,kBAAOD,EAASN,EAAW,QAC3Bl9B,QAAQC,IAAI,mBAAqByhC,EAAY,qBAAuB3E,EAAU,aAC9EpN,GAAWyB,QAAQ,mBAAqBsQ,EAAY,qBAAuB3E,EAAU,gBACtFW,OAAM,SAAAl+B,GACLmwB,GAAWtT,MAAM,+BAAiC7c,EAAI4xB,YAE1DpxB,QAAQ6hC,QAAQ,oBA7CA,SAAdC,EAAel0B,GACjB,GAAIA,GAAKwsB,EAAM/sB,OACX,OAAOs0B,IAEX,IAAMxH,EAAOC,EAAMxsB,GACD,OAAdusB,EAAK17B,MACLgjC,EAAQltB,KAAK,CACTpI,KAAMguB,EAAKhuB,KAAO,mBAClB1N,KAAM,yCAEVs+B,GAAW,EACX/8B,QAAQS,KAAK,kBAAoB05B,EAAKhuB,OAEjCguB,EAAKhuB,KAAK2B,MAAM,cAErB2zB,EAAQltB,KAAKgtB,EAAeQ,YAAY5H,IACxCuH,GAAa,IAGbD,EAAQltB,KAAK,CACTpI,KAAMguB,EAAKhuB,KAAO,mBAClB1N,KAAM,kDAAoD07B,EAAKhuB,OAEnE4wB,GAAW,EACX/8B,QAAQS,KAAK,yBAA2B05B,EAAKhuB,OAEjDwjB,GAAWyB,QAAQ,yBAA2BsQ,EAAY3E,GAAW,IAAM3C,EAAM/sB,QACjF+I,YAAW,kBAAM0rB,EAAYl0B,EAAI,KAAI,GAqBzCk0B,CAAY,QAtExB,qCAyGkCE,EAAkCnb,GAC5D,IAAM9N,EAA6B,IAAIlN,IAUvC,OATAm2B,EAAWhwB,SAAQ,SAAAiiB,GACf,IACI,IAAMgO,EAAiC/G,GAAegH,SAASjO,EAAMpN,GACjEob,EAAeE,WACfppB,EAAIX,IAAI6pB,EAAe7kB,UAAW6kB,EAAeG,kBAGzD,MAAOC,QAEJtpB,MApHf,KAAawoB,GA+EMQ,YAAc,SAAC5H,GAC1B,IAAM0F,EAAmBxX,KAAKuB,MAAMuQ,EAAK17B,MACnC6jC,EAAStB,GAAgBnB,GAC/B,GAAe,OAAXyC,EACA,MAAO,CAACn2B,KAAMguB,EAAKhuB,KAAKwB,MAAM,GAAI,GAAK,mBAAoBlP,KAAM,sBAAwB6jC,GAE7F,IAAMrV,EAAmCsU,GAAegB,eAAe1C,EAAQ5S,UAAW4S,EAAQhZ,mBAC5F2b,EAAyB,IAAIxV,GAAWC,EAAW4S,EAAQhZ,mBAE3D4b,EAAoB5C,EAAQtO,YAAYlkB,OACxCo0B,EAAU5B,EAAQtO,YAAYxY,KAAI,SAAAvH,GAAC,OAAI+vB,GAAemB,kBAAkBlxB,EAAGgxB,MAC3E9N,EAAuBiO,GAAa,WAAb,cAAiBlB,EAAQ1oB,KAAI,SAAAF,GAAC,OAAIA,EAAE+pB,YAC3D7rB,EAAiB0qB,EAAQ3F,QAAO,SAACC,EAAK6F,GAAN,OAAiB7F,EAAM6F,EAAOvlB,QAAO,GAE3E,MAAO,CACHlQ,KAAMguB,EAAKhuB,KAAKwB,MAAM,GAAI,GAAK,mBAC/BlP,KAAM8iC,GAAesB,aAAaJ,EAAW1rB,EAAQ2d,EAAKmL,EAAQhZ,mBAC5D0a,GAAeuB,gBAAgBjD,EAAQ5S,WACvC8V,GAAc,gBAAkBN,EAAY,QAC5ChB,EAAQ1oB,KAAI,SAAAF,GAAC,OAAIA,EAAEpa,QAAMwa,KAAK,MAlGnCsoB,GA2HMmB,kBAAoB,SAAC5V,EAAkBkW,GAClD,IACI,IAAMC,EAAiBD,EAAOpZ,MAAMkD,EAAKruB,MACnCmkC,EAA0BM,GAAiBD,GAC3ChmB,EAAqBgmB,EAAe5hB,YAC1C,MAAO,CACH5iB,KAAM0kC,GAAc,KAAOrW,EAAK3gB,KAAO,OAAS2gB,EAAKruB,KAAO,OAASwe,EAASmmB,gBAAkB,SAChGR,OAAQA,EACRvmB,MAAO,GAGf,MAAO7c,GACH,MAAO,CACHf,KAAM0kC,GAAc,KAAOrW,EAAK3gB,KAAO,OAAS2gB,EAAKruB,KAAO,cAAgBe,EAAI4xB,QAAU,SAC1FwR,OAAQS,KACRhnB,MAAO,KA1IVklB,GAwJMsB,aAAe,SAACtR,EAAqBxa,EAAgB3P,EAA6Byf,GAC7F,IAoFiB6V,EClQE4G,ED8KbC,EAqFHC,GADc9G,EApFqBt1B,GAqFbq8B,GAAgB/G,GApFnCgH,EAAiBF,GAAiBp8B,GAClCu8B,EAAgBF,GAAgBr8B,GACtC,OAAO27B,GAAc,mCCjLFO,EDiLiD,IAAIvQ,KChLrEnyB,OAAO0iC,EAAKM,WAAWC,SAAS,EAAG,KAAO,IAAMjjC,OAAO0iC,EAAKQ,WAAa,GAAGD,SAAS,EAAG,KAAO,IAClGjjC,OAAO0iC,EAAKS,eAAiB,IAC7BnjC,OAAO0iC,EAAKU,YAAYH,SAAS,EAAG,KAAO,IAAMjjC,OAAO0iC,EAAKW,cAAcJ,SAAS,EAAG,KD8KL,QAASd,GAApFA,oBACexR,EAAc,eAAiBxa,EAD9CgsB,wBAEmBQ,EAAQ,cAAgBG,EAAS,YAAcC,EAFlEZ,4BAGiB37B,EAAWC,UAH5B07B,qBAIkB37B,EAAWE,WAJ7By7B,iBAKc37B,EAAWG,OALzBw7B,2BAMsB37B,EAAW88B,aANjCnB,yBAOoB37B,EAAW4kB,QAP/B+W,4BAQyB37B,EAAW+8B,UARpCpB,mBASgB37B,EAAWg9B,SAT3BrB,mBAUgB37B,EAAWi9B,SAV3BtB,qBAWkB37B,EAAWa,UAX7B86B,yBAYsB37B,EAAWk9B,cAZjCvB,uBAakB37B,EAAWm9B,UAb7BxB,qBAcgB37B,EAAWmB,SAd3Bw6B,oBAeelc,EAAoB,eAAiB,mBA3KtD0a,GAiLMuB,gBAAkB,SAACd,GAC9B,IAAMwC,EAAUxC,EAAWjpB,KAAI,SAAAkb,GAC3B,OAAOA,EAAK9nB,KAAO,IAAM8nB,EAAKlc,YAAYkB,KAAK,MAAQ,SACxDA,KAAK,IACR,OAAO8pB,GAAc,eAAiBf,EAAW30B,OAAS,QAAUm3B,EAAU,KAC1ExC,EAAWjpB,KAAI,SAAAkb,GAAI,OAAIkP,GAAc,KAAOlP,EAAK9nB,KAAO,OAAS+uB,GAAeuJ,OAAOxQ,MAAOhb,KAAK,KAI/G,IAAM8pB,GAAsB,mFACtBI,GAAsB,mFAuB5B,SAASE,KACL,OAAOV,KAMX,SAASA,KAA8D,IAAD,uBAA5CC,EAA4C,yBAA5CA,EAA4C,gBAClE,MAAO,CACHyB,SAAUzB,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAML,WAAU,GAC9DF,UAAWvB,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMP,YAAW,GAChE57B,SAAUq6B,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMn8B,WAAU,GAC9DyjB,QAAS4W,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAM1Y,UAAS,GAC5DuY,UAAW3B,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMH,YAAW,GAChEj9B,WAAYs7B,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMp9B,aAAY,GAClEC,OAAQq7B,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMn9B,SAAQ,GAC1DF,UAAWu7B,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMr9B,YAAW,GAChE+8B,SAAUxB,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMN,WAAU,GAC9DF,aAActB,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMR,eAAc,GACtEj8B,UAAW26B,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMz8B,YAAW,GAChEq8B,cAAe1B,EAAO9G,QAAO,SAACC,EAAK2I,GAAN,OAAgB3I,EAAM2I,EAAMJ,gBAAe,IAchF,SAASd,GAAiB9G,GACtB,OAAOA,EAAE2H,SAAW3H,EAAEyH,UAAYzH,EAAEn0B,SAAWm0B,EAAE1Q,QAAU0Q,EAAE6H,UAAY7H,EAAE0H,SAAW1H,EAAEwH,aAAexH,EAAEz0B,UAAYy0B,EAAE4H,cAM3H,SAASb,GAAgB/G,GACrB,OAAOA,EAAEp1B,WAAao1B,EAAEn1B,OAASm1B,EAAEr1B,UAMvC,SAAS67B,GAAiB5R,GACtB,OAAIA,aAAgBjR,GACTsiB,GAYf,SAA8B9Z,GAC1B,IAAI/H,EAAuBuiB,KAC3B,GAAIxa,aAAgB7H,GAEhB,OADAF,EAAIxZ,WAAa,EACVwZ,EAEX,GAAI+H,aAAgB5F,GAEhB,OADAnC,EAAIvZ,OAAS,EACNuZ,EAEX,GAAI+H,aAAgBa,GAEhB,OADA5I,EAAIzZ,UAAY,EACTyZ,EAEX,OAAOA,EA1BkB6jB,CAAqBrT,GAAO4R,GAAiB5R,EAAKxI,eAEvEwI,aAAgB/I,GACToa,GA6Bf,SAA+B9Z,GAC3B,IAAI/H,EAAuBuiB,KAC3B,GAAIxa,aAAgBoB,GAEhB,OADAnJ,EAAIujB,SAAW,EACRvjB,EAEX,GAAI+H,aAAgB8B,GAEhB,OADA7J,EAAIqjB,UAAY,EACTrjB,EAEX,GAAI+H,aAAgBkC,GAEhB,OADAjK,EAAIvY,SAAW,EACRuY,EAEX,GAAI+H,aAAgB8C,GAEhB,OADA7K,EAAIyjB,UAAY,EACTzjB,EAEX,GAAI+H,aAAgBiD,GAOhB,OANIjD,EAAKpD,YAAciG,GAAgBM,QACnClL,EAAIkL,QAAU,EAGdlL,EAAIsjB,SAAW,EAEZtjB,EAEX,GAAI+H,aAAgBsD,GAEhB,OADArL,EAAIojB,aAAe,EACZpjB,EAEX,GAAI+H,aAAgB0D,GAOhB,OANI1D,EAAKpD,YAAcyG,GAAcN,KACjC9K,EAAI7Y,UAAY,EAGhB6Y,EAAIwjB,cAAgB,EAEjBxjB,EAEX,OAAOA,EArEkB8jB,CAAsBtT,GAAO4R,GAAiB5R,EAAKtI,kBAAmBka,GAAiB5R,EAAKrI,oBAG9Goa,K,UE7NLt1B,GAAoCC,iBAAiBvB,SAASwB,cAAc,UAC5E42B,GAA2Bz2B,OAAOL,GAAaG,iBAAiB,6BAChE42B,GAA2B12B,OAAOL,GAAaG,iBAAiB,6BASzD62B,GAAb,kDAQI,WAAYzmC,GAAgC,IAAD,8BACvC,cAAMA,IAPO0mC,kBAM0B,IAJ1BC,qBAI0B,IAFnCC,aAAyB,GAEU,EA8BnCC,kBAAoB,SAACC,EAA8CxyB,GAEnEwyB,EAAaC,YAAc,EAAKH,aAAatyB,KAC7C,EAAKsyB,aAAatyB,GAAUwyB,EAAaC,cAjCN,EAwCnCC,UAAY,WAChB,OAAO,EAAKhnC,MAAM2e,SAASqoB,aAzCY,EA+CnCC,iBAAmB,SAAC3yB,EAA4B4F,GACpD,EAAKmW,SAAS,CACV6W,eAAgB5yB,EAChB6yB,YAAajtB,KAlDsB,EAyDnCktB,uBAAyB,WAC7B,IAAMF,EAAiB,EAAK1W,MAAM0W,eAC5BC,EAAc,EAAK3W,MAAM2W,iBACR/mC,IAAnB8mC,QAAgD9mC,IAAhB+mC,GAE5BD,EAAiB,EAAKlnC,MAAM2e,SAAS0oB,iBAAmB,GACxD,EAAKhX,SAAS,CAAC6W,eAAgBA,EAAiB,KA/DjB,EAuEnCI,sBAAwB,WAC5B,IAAMJ,EAAiB,EAAK1W,MAAM0W,eAC5BC,EAAc,EAAK3W,MAAM2W,iBACR/mC,IAAnB8mC,QAAgD9mC,IAAhB+mC,GAE5BD,EAAiB,GACjB,EAAK7W,SAAS,CAAC6W,eAAgBA,EAAiB,KA7EjB,EAqFnCK,oBAAsB,WAC1B,IAAML,EAAiB,EAAK1W,MAAM0W,eAC5BC,EAAc,EAAK3W,MAAM2W,iBACR/mC,IAAnB8mC,QAAgD9mC,IAAhB+mC,GAEL,kBAAhBA,IACa,IAAhBA,EACA,EAAK9W,SAAS,CAAC8W,YAAa,UAG5B,EAAK9W,SAAS,CAAC8W,YAAaA,EAAc,MA/Ff,EAwGnCK,sBAAwB,WAC5B,IAAMN,EAAiB,EAAK1W,MAAM0W,eAC5BC,EAAc,EAAK3W,MAAM2W,iBACR/mC,IAAnB8mC,QAAgD9mC,IAAhB+mC,IACZ,UAAhBA,GAA2B,EAAKnnC,MAAM2e,SAAS8oB,cAAgB,GAC/D,EAAKpX,SAAS,CAAC8W,YAAa,IAGL,kBAAhBA,GAA4BA,EAAc,EAAKnnC,MAAM2e,SAAS8oB,cAAgB,GACrF,EAAKpX,SAAS,CAAC8W,YAAaA,EAAc,MAjHX,EAyHnC5W,cAAgB,SAAChwB,GACH,UAAdA,EAAM8X,KAAiC,QAAd9X,EAAM8X,KAA+B,WAAd9X,EAAM8X,IACtD,EAAK4uB,sBAAiB7mC,OAAWA,GAEd,QAAdG,EAAM8X,KAAkB9X,EAAM+X,SAAyB,eAAd/X,EAAM8X,KACpD,EAAK+uB,yBACL7mC,EAAME,kBAEDF,EAAM+X,SAAyB,cAAd/X,EAAM8X,KAC5B,EAAKivB,wBACL/mC,EAAME,kBAEDF,EAAM+X,SAAyB,YAAd/X,EAAM8X,KAC5B,EAAKkvB,sBACLhnC,EAAME,kBAEDF,EAAM+X,SAAyB,cAAd/X,EAAM8X,MAC5B,EAAKmvB,wBACLjnC,EAAME,kBAENF,EAAM+X,SACN,EAAKtY,MAAMwY,YAAYjY,IA9IY,EAuJnC2vB,aAAe,SAAC3e,EAAe+C,EAAgB4F,GACnD3I,EAAQA,EAAMkP,QAAQ,MAAO,QACjB,UAARvG,EACA,EAAKla,MAAM0nC,mBAAmBn2B,EAAO+C,GAExB,UAAR4F,EAEL,EAAKla,MAAM2nC,mBAAmBp2B,EAAO+C,GAGrC,EAAKtU,MAAM4nC,iBAAiBr2B,EAAO+C,EAAQ4F,IAjKR,EAwKnC2tB,gBAAkB,WACtB,EAAK7nC,MAAM8nC,aAAY,WAEnB,EAAKpB,aAAahW,QAAQqX,SAAS,EAAKrB,aAAahW,QAAQhiB,YAAa,EAAKg4B,aAAahW,QAAQlc,eA3KjE,EAkLnCwzB,aAAe,WACnB,EAAKhoC,MAAMioC,UAAS,WAEhB,EAAKvB,aAAahW,QAAQqX,SAAS,EAAKrB,aAAahW,QAAQhc,WAAY,EAAKgyB,aAAahW,QAAQ9hB,kBArLhE,EA4LnCs5B,mBAAqB,SAAC5zB,GAC1B,EAAKtU,MAAMmoC,eAAe7zB,IA7La,EAmMnC8zB,gBAAkB,SAACluB,GACvB,EAAKla,MAAMqoC,YAAYnuB,IApMgB,EA0MnCouB,YAAc,SAAC/2B,EAAe+C,EAAgB4F,GAClD,OACI,2BACId,KAAK,OACLtZ,UAAW,aACXixB,YAAY,EACZxf,MAAOA,EACP4D,SAAU,SAACjC,GACP,EAAKgd,aAAahd,EAAEiF,OAAO5G,MAAO+C,EAAQ4F,GAC1C,EAAK2sB,kBAAkB3zB,EAAEiF,OAAQ7D,IAErCi0B,WAAW,EACXroC,MAAO,CAACuR,MAAO,EAAKm1B,aAAatyB,GAAU,SAtNZ,EAqOnCk0B,mBAAqB,SAACC,GAC1B,OAAQ,4BAAQ3oC,UAAU,8BAA8BG,QAASwoC,GAAzD,WApOR,EAAKjY,MAAQ,CACT0W,oBAAgB9mC,EAChB+mC,iBAAa/mC,GAEjB,EAAKsmC,aAAe/lC,IAAMkwB,YAC1B,EAAK8V,gBAAkBhmC,IAAMkwB,YAPU,EAR/C,gEAkByB,IAAD,OAEhBhc,OAAO8C,iBAAiB,SAAS,WAC7B,EAAKsvB,sBAAiB7mC,OAAWA,MAErCL,KAAK2oC,uBAvBb,2CA2BQ,IAAMC,EAAU5oC,KAAK4mC,gBAAgBjW,QACrC,GAAgB,OAAZiY,EAAkB,CAElB,IAAMC,EAAQ,YAAID,EAAQC,OAAOv5B,MAAM,GAAI,GAC3CtP,KAAK6mC,aAAegC,EAAMnuB,KAAI,SAAAouB,GAAI,OAAIA,EAAKn6B,YAAc,GAAK63B,GAAmBC,UA/B7F,oCAsO0BrmC,EAAcD,GAChC,OAAQ,0BAAMJ,UAAW,UAAWI,MAAOA,GAAQC,KAvO3D,uCAqP8B,IAAD,OACf2oC,EAAU/oC,KAAKC,MAAM2e,SAASkF,iBAAiBpJ,KAAI,SAACwM,EAAYsW,GAClE,IAAI2B,EAAgCjY,EAChC,EAAKuJ,MAAM0W,iBAAmB3J,GAA0C,UAA3B,EAAK/M,MAAM2W,cACxDjI,EAAU,EAAKoJ,YAAYrhB,EAAYsW,EAAa,UAExD,IAAIjkB,EAA2B,KAC3BxZ,EAAoB,UAClBie,EAAQ,EAAKipB,YAAYv5B,IAAI,OAAQ8vB,GAK3C,YAJcn9B,IAAV2d,IACAzE,EAAO,EAAKyvB,cAAchrB,EAAO,CAAC2b,IAAK,MAAOY,OAAQ,SACtDx6B,GAAa,gBAGb,wBAAIuY,IAAKklB,EACLz9B,UAAWA,EACXG,QAAS,SAAAiY,GACL,EAAK+uB,iBAAiB1J,EAAa,SACnCrlB,EAAG1X,oBAET0+B,EAAS5lB,MAUnB,OAPAwvB,EAAQ7yB,KACJ,wBAAIoC,IAAI,aACJ2wB,QAAS,EACT9oC,MAAO,CAACuR,MAAO,OAAQw3B,OAAQ,OAAQhS,QAAS,QAChD,4BAAQh3B,QAASF,KAAK8nC,gBAClB3nC,MAAO,CAACuR,MAAO,OAAQgB,OAAQ,SAAS,wCAGhD,oCAAE,wBAAI3S,UAAU,kBAAkBgpC,KApR9C,uCA4R8B,IAAD,OACfA,EAAU/oC,KAAKC,MAAM2e,SAAS8gB,iBAAiBhlB,KAAI,SAACujB,EAAYT,GAClE,IAAM2B,EACF,4BAAQ3tB,MAAOysB,EACX7oB,SAAU,SAACjC,GAAD,OAAO,EAAKgd,aAAahd,EAAEiF,OAAO5G,MAAOgsB,EAAa,WAChE,0CACA,0CACA,4CAGR,OACI,wBAAIllB,IAAKklB,EACLz9B,UAAU,WACZo/B,EAAS,EAAKsJ,oBAAmB,kBAAM,EAAKN,mBAAmB3K,UAEzE,OACI,oCAAE,wBAAIz9B,UAAU,kBAAkBgpC,KA5S9C,mCAmT0B,IAAD,OAEjB,OAA6C,IAAzC/oC,KAAKC,MAAM2e,SAAS2E,UAAUvU,OACvB,KAEchP,KAAKC,MAAM2e,SAAS2E,UAEjC7I,KAAI,SAACP,EAAKwjB,GAAN,OACZ,wBAAIrlB,IAAKqlB,GACL,wBAAI59B,UAAU,iBACT49B,EAAW,EACX,EAAK8K,oBAAmB,kBAAM,EAAKJ,gBAAgB1K,OAEvDxjB,EAAIO,KAAI,SAAClJ,EAAOgsB,GACb,IAAI2B,EAAgC3tB,EAChC,EAAKif,MAAM0W,iBAAmB3J,GAAe,EAAK/M,MAAM2W,cAAgBzJ,IACxEwB,EAAU,EAAKoJ,YAAY/2B,EAAOgsB,EAAaG,IAEnD,IAAIpkB,EAA2B,KAC3BxZ,EAAoB,GAClBie,EAAQ,EAAKipB,YAAYv5B,IAAIiwB,EAAUH,GAK7C,YAJcn9B,IAAV2d,IACAzE,EAAO,EAAKyvB,cAAchrB,GAC1Bje,EAAY,eAGZ,wBAAIuY,IAAKklB,EACLz9B,UAAWA,EACXG,QAAS,SAAAiY,GACL,EAAK+uB,iBAAiB1J,EAAaG,GACnCxlB,EAAG1X,oBAET0+B,EAAS5lB,YAnVnC,qCA6VQ,OACI,wBAAIjB,IAAI,WACJ,wBAAIA,IAAI,iBACJvY,UAAU,cACV,4BAAQG,QAASF,KAAKioC,cAAc,0CAjWxD,+BA2WQ,OACI,yBACIloC,UALmB,2CAMnBgxB,IAAK/wB,KAAK2mC,aACVzV,UAAWlxB,KAAKwwB,eAChB,2BAAOzwB,UAPc,cAQjB,+BACI,wBAAIgxB,IAAK/wB,KAAK4mC,iBAAkB5mC,KAAKmpC,kBACrC,4BAAKnpC,KAAKopC,mBAEd,+BACKppC,KAAKo4B,aACLp4B,KAAKqpC,sBAvX9B,GAAuCzoC,IAAMC,WCwFhCyoC,GAAb,kDAEI,WAAYrpC,GAA+B,IAAD,8BACtC,cAAMA,IASFspC,UAAY,WAChB,OAAO,EAAKtpC,MAAMupC,gBAAgB,EAAKvpC,MAAMwpC,sBAXP,EAwBlCC,yBAA2B,SAAC57B,GAChC,EAAK7N,MAAM0pC,qBAAqB77B,IAzBM,EA+BlC87B,aAAe,WACf,EAAKL,YAAYzF,UACjB,EAAK7jC,MAAM4pC,eAAevY,GAAWyB,SAGrCzB,GAAWtT,MAAM,iEApCiB,EA2ClC8rB,iBAAmB,WACvB,EAAK7pC,MAAM8pC,mBAAmBzY,GAAWyB,UA5CH,EAkDlCiX,gBAAkB,WACtB,EAAK/pC,MAAMgqC,kBAAkB3Y,GAAWyB,UAnDF,EAyDlCmX,gBAAkB,WACtB,EAAKjqC,MAAMkqC,kBAAkB7Y,GAAWyB,UA1DF,EAgElCqX,eAAiB,WACrB,EAAKnqC,MAAMoqC,0BAjE2B,EAoElCC,eAAiB,WACrB,EAAKrqC,MAAMsqC,oBArE2B,EA2ElCC,YAAc,WAClB,EAAKvqC,MAAMwqC,iBA5E2B,EAkFlCC,sBAAwB,WAC5B,EAAKzqC,MAAM0qC,wBAAwBrZ,GAAWyB,UAnFR,EAyFlC6B,gBAAkB,SAACp0B,GACL,UAAdA,EAAM8X,KACN,EAAKsxB,gBA3F6B,EAkGlCgB,0BAA4B,WAChC,OAAO,EAAK3qC,MAAMupC,gBAAgB9uB,KAAI,SAAC2iB,EAAK9tB,GACxC,IAAMxP,EAAqB,EAAKE,MAAMwpC,sBAAwBl6B,EAAI,iBAAmB,GAC/Es7B,EAAoBxN,EAAIyN,WAAa,GAAK,IAC1C3qC,EAAQk9B,EAAIyG,UAAY,GAAK,CAACoF,OAAQ,qBAC5C,OACI,4BACI5wB,IAAK/I,EACLrP,QAAS,kBAAM,EAAK6qC,8BAA8Bx7B,IAClDxP,UAAWA,EACXI,MAAOA,EACPw2B,WAAW,EACXC,YAAa,SAAAzjB,GAAC,OAAIA,EAAE0iB,aAAagB,QAAQ,aAxHvC,IAwH6Dt0B,OAAOgN,KACtEunB,WAAY,SAAA3jB,GAAC,OAAIA,EAAEzS,kBACnBq2B,OAAQ,SAAA5jB,GAAC,OAAI,EAAKwiB,eAAexiB,EAAG5D,KACtCs7B,EAAYxN,EAAIte,eAjHY,EA0HlC4W,eAAiB,SAACxiB,EAA8B5D,GACpD4D,EAAEzS,iBACF,IAAMk1B,EAAOziB,EAAE0iB,aAAaC,QAAQ,cAC9BC,EAAYhmB,OAAO6lB,EAAKtmB,MAAM,IAvItB,MAwIVsmB,EAAKpmB,OAAO,IAAiBsjB,MAAMiD,IACnC,EAAK91B,MAAM+qC,eAAejV,EAAWxmB,IA7HzC,EAAKkhB,MAAQ,CACTwF,gBAAgB,GAHkB,EAF9C,0EAmB0C7mB,GAClCpP,KAAKC,MAAMgrC,0BAA0B77B,KApB7C,+BAqIqB,IAAD,OACN3B,EAAOzN,KAAKC,MAAMiC,SAASmJ,gBAE3BirB,EAAe,SAACl2B,EAAcF,EAAqBS,EAAiBR,GACtE,OAAQ,kBAAC,EAAD,CACJmY,IAAKlY,EACLA,KAAMA,EACNF,QAASA,EACTC,MAAOA,EACPQ,QAASA,KAKXyjB,EAAmCpkB,KAAKC,MAAMupC,gBAC/C9yB,QAAO,SAACw0B,EAAI37B,GAAL,OAAWA,IAAM,EAAKtP,MAAMwpC,uBACnC/uB,KAAI,SAAAwwB,GAAE,OAAIA,EAAGnsB,aAQlB,OACI,6BAAShf,UAAU,gBACf,gCACI,4BAAK0N,EAAKnC,uBACTgrB,EAAa7oB,EAAKlC,cAAevL,KAAK8pC,iBAAkBr8B,EAAKjC,sBAC7D8qB,EAAa7oB,EAAKhC,mBAAoBzL,KAAK0qC,sBAAuBj9B,EAAK/B,2BACvE4qB,EAAa7oB,EAAK9B,aAAc3L,KAAKkqC,gBAAiBz8B,EAAK7B,qBAC3D0qB,EAAa7oB,EAAK5B,aAAc7L,KAAKgqC,gBAAiBv8B,EAAK3B,sBAGhE,0BAAM/L,UAAU,yBACXC,KAAK4qC,4BACN,4BAAQ1qC,QAASF,KAAKwqC,YAClBrqC,MAAO,CAAC62B,SAAU,IAAKC,WAAY,OAAQC,QAAS,oBACpD,uCAIR,kBAAC,GAAD,CACItY,SAAU5e,KAAKupC,YAEf5B,mBAAoB3nC,KAAKC,MAAM0nC,mBAC/BC,mBAAoB5nC,KAAKC,MAAM2nC,mBAC/BC,iBAAkB7nC,KAAKC,MAAM4nC,iBAC7BK,SAAUloC,KAAKC,MAAMioC,SACrBH,YAAa/nC,KAAKC,MAAM8nC,YACxBO,YAAatoC,KAAKC,MAAMqoC,YACxBF,eAAgBpoC,KAAKC,MAAMmoC,eAE3B3vB,YAAazY,KAAK40B,kBAGtB,0BAAM70B,UAAU,gCACZ,kBAAC,EAAD,CACIK,KAAMqN,EAAKpD,WACXnK,QAASF,KAAK4pC,aACd7pC,UAAW,gBACXI,MAAO,CAACs2B,YAAa,QACrB91B,QAAS8M,EAAK1B,oBAElB,kBAAC,GAAD,CACIyF,MAAOxR,KAAKupC,YAAYxqB,UACxBqS,WAAY3jB,EAAKzB,aACjB6kB,SAAU7wB,KAAK0pC,yBACfrZ,UAnDe,SAACjwB,GAC5B,OAAIgkB,EAAuB9F,QAAQle,IAAS,KAGpC0c,GAAYgE,OAAO1gB,K5CvQC+O,E4CuQgC/O,E5CrQ7DgkB,GAAuB9F,QAAQnP,EAAI0R,aAAe,IAFtD,IAAiC1R,G4CuThByB,GAAG,wBAEN0lB,EAAa7oB,EAAKxB,aAAcjM,KAAKoqC,eAAgB38B,EAAKvB,qBAC1DoqB,EAAa7oB,EAAKtB,aAAcnM,KAAKsqC,eAClC78B,EAAKrB,oBAAsB,KAAOpM,KAAKupC,YAAY4B,gBAAkB,WA9M7F,GAAsCvqC,IAAMC,WCnK/BuqC,GAAb,WAOI,WAAqBC,GAAsB,yBAAtBA,cAPzB,iDAegBC,EAAiBrZ,GACzB,IAAMsZ,EAAoB,CACtBC,aAAcxrC,KAAKqrC,YACnBC,QAASA,EACTlrC,KAAM6xB,GAGJwZ,EAAU,IAAIC,eACpBD,EAAQE,mBAAqB,WACE,IAAvBF,EAAQG,YAAuC,MAAnBH,EAAQxH,QACP,IAAvBwH,EAAQG,YACdjqC,QAAQC,IAAI,gDAAkD6pC,EAAQI,WAI9E,IAAIpwB,EAAS2vB,EAAKU,SAASP,GAC3BE,EAAQM,KAAK,OAAQ,qCAAqC,GAC1DN,EAAQO,iBAAiB,eAAgB,qCACzCP,EAAQQ,KAAKxwB,MAjCrB,gCAoC4Bma,GACpB,OAAOsW,mBAAmB,gBAAkB,IAAMA,mBAAmBtW,EAAK4V,cAAgB,IACtFU,mBAAmB,WAAa,IAAMA,mBAAmBtW,EAAK0V,SAAW,IACrEY,mBAAmB,QAAU,IAAMA,mBAAmBtW,EAAKx1B,UAvC3E,KC4Ca+rC,GAAb,kDAII,WAAYlsC,GAAyB,IAAD,uBAChC,cAAMA,IAHOmsC,0BAEmB,IA4C5BC,sBAAwB,SAAClrC,GAAsB,IAAD,EAC5CmrC,EAAiB,IAAIlB,GCvGU,4BDwGjCnZ,EAAe,oBAAsB9wB,EAAI2M,KAA1B,wCACI3M,EAAI4xB,QACvB,eAAgB,IAAI2B,MAAO7T,WAC3B,qBAAuB1f,EAAIorC,MAE3B,uDACA,YAAI,EAAK9b,MAAM+b,gBAAgBpqB,UAAU1H,KAAI,SAAAkE,GACzC,OAAOA,EAASG,UAAY,KAAOH,EAASmmB,mBAC7CnqB,KAAK,QARO,qFAWsB,EAAK6V,MAAMgc,iBAAmB,GAAK,OACxE,EAAKhc,MAAM+Y,gBAAgB9uB,KAAI,SAAA2iB,GAAG,OAAIR,GAAeuJ,OAAO/I,MAAMziB,KAAK,QAZxD,kFAewB,EAAK6V,MAAMic,mBAAqB,GAAK,OAC5E,EAAKjc,MAAMyC,YAAYxY,KAAI,SAAA+T,GAAI,OAAIA,EAAKruB,QAAMwa,KAAK,eAEnD,0BAlBe,UAkBY,EAAK6V,MAAMsP,0BAlBvB,aAkBY,EAA+B9b,eAlB3C,qEAqBW,EAAKwM,MAAM3uB,kBACrC,wBAA0B,EAAK2uB,MAAMvuB,SACrC,wBAA0B,EAAKuuB,MAAMjI,kBACrC,wBAA0B,EAAKiI,MAAMtuB,UAEzCmqC,EAASL,KAAK,sCAAuCha,GACrDtwB,QAAQqc,MAAM,qBAAuB7c,EAAIorC,QAzET,EAiF5BI,YAAc,SAACnL,GACnB,EAAKlR,SAAS,CACVkc,gBAAiB,IAAIh/B,IACrBg8B,gBAAiBhI,EAAQ5S,UAAUlU,KAAI,SAAAF,GAAC,OAAIqiB,GAAegH,SAASrpB,EAAGgnB,EAAQhZ,sBAC/EikB,iBAAkB,EAClBvZ,YAAasO,EAAQtO,YACrB1K,kBAAmBgZ,EAAQhZ,kBAC3BkkB,mBAAoB,EACpB3M,mBAAoB,KACpB6M,wBAAyB,KAC1B,WACCjrC,QAAQC,IAAI,mBACZ,EAAKirC,8BA7FuB,EAoG5BC,yBAA2B,SAACh/B,GAChC,GAAI,EAAK2iB,MAAM+Y,gBAAgB9uB,KAAI,SAAAwwB,GAAE,OAAIA,EAAGnsB,aAAWT,QAAQxQ,IAAS,EACpE,IAAK,IAAIyB,EAAI,KAAWA,EACpB,IAA8E,IAA1E,EAAKkhB,MAAM+Y,gBAAgB9uB,KAAI,SAAAwwB,GAAE,OAAIA,EAAGnsB,aAAWT,QAAQxQ,EAAOyB,GAAW,CAC7EzB,GAAQyB,EACR,MAIZ,OAAOzB,GA7GyB,EAsH5Bi/B,YAAc,WAClB7J,GAAe8J,QAAQ,wBAvHS,EA6H5BC,kBAAoB,WACxBlK,GAAoBmK,OAAOzO,KAAK,EAAKkO,aAAatN,MAAM19B,QAAQS,OA9HhC,EAoI5B+qC,kBAAoB,WACxB,IACIpK,GAAoBvC,KAAK,CACrB5R,UAAW,EAAK6B,MAAM+Y,gBAAgB9uB,KAAI,SAAAwwB,GAAE,OAAIA,EAAGhO,kBACnDhK,YAAa,EAAKzC,MAAMyC,YACxB1K,kBAAmB,EAAKiI,MAAMjI,mBAC3B,WACP7mB,QAAQC,IAAI,kBAEhB,MAAOT,GACHQ,QAAQS,KAAK,0BAA4BjB,EAAI4xB,WA9IjB,EAqJ5Bqa,wBAA0B,SAACrL,GAC/B,EAAK4K,YAAY9J,GAAYd,KAtJG,EA8J5BsL,8BAAgC,SAAC7kB,GACrC,EAAKiI,MAAM+Y,gBAAgB71B,SAAQ,SAAAu3B,GAAE,OAAIA,EAAGoC,qBAAqB9kB,MAEjE,EAAK8H,SAAS,CAAC9H,kBAAmBA,GAAoB,EAAKqkB,0BAjK3B,EAyK5BU,8BAAgC,SAACzrC,GACrCR,EAAaksC,qBAAqB1rC,GAClC,EAAKwuB,SAAS,CAACxuB,kBAAmBA,KA3KF,EAmL5B2rC,qBAAuB,SAAChgC,GAC5BnM,EAAaosC,YAAYjgC,GAEzB,EAAKgjB,MAAM+Y,gBAAgB71B,SAAQ,SAAA6G,GAAC,OAAIA,EAAE2iB,qBAC1C,EAAK7M,SAAS,CAACpuB,SAAUA,OAvLO,EA+L5ByrC,sBAAwB,SAACxrC,GAC7Bb,EAAassC,aAAazrC,GAC1B,EAAKmuB,SAAS,CAACnuB,UAAWA,IAC1BiM,SAAS6jB,KAAKhhB,UAAU+F,OAAQ,YAAa7U,GAC7CiM,SAAS6jB,KAAKhhB,UAAU+F,OAAQ,cAAe7U,IAnMf,EAwM5BunC,yBAA2B,SAAC57B,GAChC,EAAKwiB,UAAS,SAAAG,GACV,IAAM+Y,EAAkB/Y,EAAM+Y,gBAE9B,OADAA,EAAgB,EAAK/Y,MAAMgc,kBAAkBoB,QAAQ//B,GAC9C,CAAC07B,gBAAiBA,OA5MG,EAgN5BsE,+BAAiC,SAAC5mB,EAAoBsW,GAC1D,EAAKlN,UAAS,SAAAG,GACV,IAAM+Y,EAAkB/Y,EAAM+Y,gBAE9B,OADAA,EAAgB,EAAK/Y,MAAMgc,kBAAkBsB,cAAc7mB,EAAYsW,GAChE,CAACgM,gBAAiBA,OApNG,EAwN5BwE,+BAAiC,SAAC/P,EAAiCT,GACvE,EAAKlN,UAAS,SAAAG,GACV,IAAM+Y,EAAkB/Y,EAAM+Y,gBAE9B,OADAA,EAAgB,EAAK/Y,MAAMgc,kBAAkBwB,cAAchQ,EAAYT,GAChE,CAACgM,gBAAiBA,OA5NG,EAgO5B0E,6BAA+B,SAACtQ,EAAeJ,EAAqBG,GACxE,EAAKrN,UAAS,SAAAG,GACV,IAAM+Y,EAAkB/Y,EAAM+Y,gBAE9B,OADAA,EAAgB,EAAK/Y,MAAMgc,kBAAkB0B,YAAYvQ,EAAOD,EAAUH,GACnE,CAACgM,gBAAiBA,OApOG,EAwO5B4E,qBAAuB,SAAC3Z,GAC5B,EAAKhE,MAAM+Y,gBAAgB,EAAK/Y,MAAMgc,kBAAkB4B,YAExD,EAAK/d,SAAS,GAAImE,IA3Oc,EA8O5B6Z,wBAA0B,SAAC7Z,GAC/B,EAAKhE,MAAM+Y,gBAAgB,EAAK/Y,MAAMgc,kBAAkBzO,eAExD,EAAK1N,SAAS,GAAImE,IAjPc,EAoP5B8Z,wBAA0B,SAAC5Q,GAC/B,EAAKlN,MAAM+Y,gBAAgB,EAAK/Y,MAAMgc,kBAAkB+B,UAAU7Q,GAElE,EAAKrN,SAAS,KAvPkB,EA0P5Bme,2BAA6B,SAACjR,GAClC,EAAK/M,MAAM+Y,gBAAgB,EAAK/Y,MAAMgc,kBAAkBiC,aAAalR,GAErE,EAAKlN,SAAS,KA7PkB,EAmQ5Bya,8BAAgC,SAAC54B,GACrC,EAAKme,SAAS,CAACmc,iBAAkBt6B,KApQD,EA0Q5Bw8B,mBAAqB,SAACC,EAAcC,GAExC,GAAID,EAAOC,EAAI,CACX,IAAMz3B,EAAS,EAAKqZ,MAAM+Y,gBAAgBl6B,MAAM,EAAGu/B,GAC7CC,EAAQ,EAAKre,MAAM+Y,gBAAgBl6B,MAAMu/B,EAAID,GAC7CG,EAAY,EAAKte,MAAM+Y,gBAAgBoF,GACvCt3B,EAAQ,EAAKmZ,MAAM+Y,gBAAgBl6B,MAAMs/B,EAAO,GAChDI,EAAQ,sBAAO53B,GAAP,CAAe23B,GAAf,YAA6BD,GAA7B,YAAuCx3B,IACrD,EAAKgZ,SAAS,CAACkZ,gBAAiBwF,EAAUvC,iBAAkBoC,SAG3D,GAAID,EAAOC,EAAI,CAChB,IAAMz3B,EAAS,EAAKqZ,MAAM+Y,gBAAgBl6B,MAAM,EAAGs/B,GAC7CG,EAAY,EAAKte,MAAM+Y,gBAAgBoF,GACvCE,EAAQ,EAAKre,MAAM+Y,gBAAgBl6B,MAAMs/B,EAAO,EAAGC,EAAK,GACxDv3B,EAAQ,EAAKmZ,MAAM+Y,gBAAgBl6B,MAAMu/B,EAAK,GAC9CG,EAAQ,sBAAO53B,GAAP,YAAkB03B,GAAlB,CAAyBC,GAAzB,YAAuCz3B,IACrD,EAAKgZ,SAAS,CAACkZ,gBAAiBwF,EAAUvC,iBAAkBoC,MA3RhC,EAkS5BI,wBAA0B,WAE9B,IAAM98B,EAAmB,EAAKse,MAAMgc,iBAAmB,EACnD3+B,EAAe,EAAKg/B,yBAAyB,eACjD,EAAKrc,MAAM+Y,gBAAgB3Z,OAAO1d,EAAU,EAAG0qB,GAAe/N,IAAIhhB,EAAM,EAAK2iB,MAAMjI,oBACnF,EAAK8H,SAAS,CAACmc,iBAAkBt6B,KAvSD,EA6S5B+8B,qBAAuB,WAE3B,GAA0C,IAAtC,EAAKze,MAAM+Y,gBAAgBx6B,OAA/B,CAIA,IAAMwpB,EAAmB,EAAK/H,MAAMgc,iBACpC,EAAKhc,MAAM+Y,gBAAgB3Z,OAAO2I,EAAU,GACxCA,IAAa,EAAK/H,MAAM+Y,gBAAgBx6B,OACxC,EAAKshB,SAAS,CAACmc,iBAAkBjU,EAAW,GAAI,EAAKqU,yBAIrD,EAAKvc,SAAS,GAAI,EAAKuc,8BAVvB,EAAKvc,SAAS,CAACkZ,gBAAiB,CAAC3M,GAAe/N,IAAI,WAAY,EAAK2B,MAAMjI,uBAhT/C,EAiU5B2mB,qBAAuB,WAC3B,EAAK7e,UAAS,SAAAG,GACV,IAAM+Y,EAAkB/Y,EAAM+Y,gBAE9B,OADAA,EAAgB,EAAK/Y,MAAMgc,kBAAkB2C,SACtC,CAAC5F,uBArUoB,EA4U5B6F,4BAA8B,SAAC5a,GACnC,IAAMhnB,EAAO,EAAKgjB,MAAMvuB,SAASiG,aAC3BmnC,EAAW,EAAK7e,MAAM+b,gBAAgB7nB,KAC5C,EAAK8L,MAAM+b,gBAAgB9nB,QAC3B,EAAK+L,MAAM+Y,gBAAgB71B,SAAQ,SAAAu3B,GAAE,OAAIA,EAAGqE,WAAU,MACtD9a,EAAO6a,EAAW7hC,EAAKjF,uBAEvB,EAAK8nB,SAAS,GAAI,EAAKuc,0BAnVS,EA2V5B2C,sBAAwB,SAAC/a,GAC7B,IAAMhnB,EAAO,EAAKgjB,MAAMvuB,SAASiG,aACjC,IACIo2B,GAAqBiC,KAAK,EAAK/P,MAAM+Y,gBAAiB,YAAa,EAAK/Y,MAAM3uB,mBAC9E2yB,EAAO,EAAKhE,MAAM+Y,gBAAgBx6B,OAASvB,EAAKhF,mBAEpD,MAAOtH,GACHszB,EAAOhnB,EAAK/E,mBAAqBvH,KAlWL,EA2W5BsuC,sBAAwB,SAAChb,GAC7B,IAAMhnB,EAAO,EAAKgjB,MAAMvuB,SAASiG,aACjCo2B,GAAqB2O,KAAK,EAAKzc,MAAMjI,mBAAmBiW,MAAK,SAAAiR,GACzD,IAAMC,EAAsB,EAAKlf,MAAM+Y,gBAAgBx6B,OAEvD0gC,EAAK9gB,UAAUjb,SAAQ,SAAAiL,GACnB,IAAM9Q,EAAO,EAAKg/B,yBAAyBluB,EAASG,WACpDH,EAASivB,QAAQ//B,GACjB,EAAK2iB,MAAM+Y,gBAAgBtzB,KAAK0I,MAEhC8wB,EAAK9gB,UAAU5f,OAAS,GAExB,EAAKshB,SAAS,CAACmc,iBAAkBkD,IAErClb,EAAOib,EAAK9gB,UAAU5f,OAASvB,EAAK9E,gBAAgB,GAAK+mC,EAAKhR,QAAUjxB,EAAK9E,gBAAgB,QAzXjE,EA6X5BinC,mBAAqB,SAACnb,GAC1B,IAAMhnB,EAAO,EAAKgjB,MAAMvuB,SAASiG,aAC3B0nC,EAA+B,EAAKpf,MAAM+Y,gBAAgB,EAAK/Y,MAAMgc,kBAC3EoD,EAAaN,WAAU,GACvB,EAAK9e,MAAM+b,gBAAgBzyB,IAAI81B,EAAa9wB,UAAW8wB,EAAa9L,kBACpE,IAAM+L,EAAuD,IAApC,EAAKrf,MAAM+b,gBAAgB7nB,KAAalX,EAAKrF,uBAClE,EAAKqoB,MAAM+b,gBAAgB7nB,KAAOlX,EAAKpF,yBAA2B,YAAI,EAAKooB,MAAM+b,gBAAgBlqB,QAAQ1H,KAAK,MAAQ,IAC1H6Z,EAAOhnB,EAAKnF,gBAAkB,KAAOwnC,GAErC,EAAKxf,SAAS,GAAI,EAAKuc,0BAtYS,EAyY5BkD,uBAAyB,SAACtb,GAC9B,IAAMhnB,EAAO,EAAKgjB,MAAMvuB,SAASiG,aAC7B6nC,EAAiB,EACjBtR,EAAkB,EACtB,EAAKjO,MAAM+Y,gBAAgB71B,SAAQ,SAAAu3B,GAC3BA,EAAGpH,WACHoH,EAAGqE,WAAU,GACb,EAAK9e,MAAM+b,gBAAgBzyB,IAAImxB,EAAGnsB,UAAWmsB,EAAGnH,oBAC9CiM,KAGAtR,KAGV,IAAMoR,EAAuD,IAApC,EAAKrf,MAAM+b,gBAAgB7nB,KAAalX,EAAKrF,uBAClE,EAAKqoB,MAAM+b,gBAAgB7nB,KAAOlX,EAAKpF,yBAA2B,YAAI,EAAKooB,MAAM+b,gBAAgBlqB,QAAQ1H,KAAK,MAAQ,IAC1H6Z,EAAOub,EAASviC,EAAKlF,oBAAoB,GAAKm2B,EAAUjxB,EAAKlF,oBAAoB,GAAK,KAAOunC,GAE7F,EAAKxf,SAAS,GAAI,EAAKuc,0BA3ZS,EAga5BA,wBAA0B,WAC9B,IAAMxgC,EAAoB,EAAK+/B,qBAAqBzb,QAC1B,OAAtBtkB,GACAA,EAAkBumB,8BAnaU,EA0a5Bqd,eAAiB,SAAChd,GACtB,EAAK3C,SAAS,CACVyP,mBAAoB9M,EACpB2Z,wBAAyB,EAAKnc,MAAMyC,YAAY,EAAKzC,MAAMic,oBAAoB5+B,QA7anD,EAob5BoiC,qBAAuB,SAACpiC,EAAc1N,GAC1C,EAAKkwB,UAAS,SAAAG,GACV,IAAIyC,EAA4BzC,EAAMyC,YAEtC,OADAA,EAAYzC,EAAMic,oBAAsB,CAAC5+B,KAAMA,EAAM1N,KAAMA,GACpD,CAAE8yB,YAAaA,OAxbM,EA+b5BwD,gCAAkC,SAACvkB,GACvC,EAAKme,SAAS,CAAEoc,mBAAoBv6B,GAAY,EAAK06B,0BAhcrB,EAsc5BsD,qBAAuB,SAACvB,EAAcC,GAE1C,GAAID,EAAOC,EAAI,CACX,IAAMz3B,EAAS,EAAKqZ,MAAMyC,YAAY5jB,MAAM,EAAGu/B,GACzCC,EAAQ,EAAKre,MAAMyC,YAAY5jB,MAAMu/B,EAAID,GACzCG,EAAY,EAAKte,MAAMyC,YAAY0b,GACnCt3B,EAAQ,EAAKmZ,MAAMyC,YAAY5jB,MAAMs/B,EAAO,GAC5CI,EAAQ,sBAAO53B,GAAP,CAAe23B,GAAf,YAA6BD,GAA7B,YAAuCx3B,IACrD,EAAKgZ,SAAS,CAAC4C,YAAa8b,EAAUtC,mBAAoBmC,SAGzD,GAAID,EAAOC,EAAI,CAChB,IAAMz3B,EAAS,EAAKqZ,MAAMyC,YAAY5jB,MAAM,EAAGs/B,GACzCG,EAAY,EAAKte,MAAMyC,YAAY0b,GACnCE,EAAQ,EAAKre,MAAMyC,YAAY5jB,MAAMs/B,EAAO,EAAGC,EAAK,GACpDv3B,EAAQ,EAAKmZ,MAAMyC,YAAY5jB,MAAMu/B,EAAK,GAC1CG,EAAQ,sBAAO53B,GAAP,YAAkB03B,GAAlB,CAAyBC,GAAzB,YAAuCz3B,IACrD,EAAKgZ,SAAS,CAAC4C,YAAa8b,EAAUtC,mBAAoBmC,MAvd9B,EA8d5BuB,0BAA4B,WAEhC,IAAMj+B,EAAmB,EAAKse,MAAMic,mBAAqB,EACzD,EAAKjc,MAAMyC,YAAYrD,OAAO1d,EAAU,EAAG,CAACrE,KAAM,iBAAkB1N,KAAM,KAC1E,EAAKkwB,SAAS,CAACoc,mBAAoBv6B,KAleH,EAwe5Bk+B,uBAAyB,SAAC5b,GAE9B,GAAsC,IAAlC,EAAKhE,MAAMyC,YAAYlkB,OACvB,OAAO,EAAKkhC,qBAAqB,eAAgB,IAErD,IAAM1X,EAAmB,EAAK/H,MAAMic,mBACpC,EAAKjc,MAAMyC,YAAYrD,OAAO2I,EAAU,GACpCA,IAAa,EAAK/H,MAAMyC,YAAYlkB,OACpC,EAAKshB,SAAS,CAACoc,mBAAoBlU,EAAW,GAAI/D,GAIlD,EAAKnE,SAAS,GAAImE,IApfU,EA6f5B6b,wBAA0B,SAAC7b,GAC/B,IAAMhnB,EAAO,EAAKgjB,MAAMvuB,SAASiG,aACjC,IACI44B,GAAuBP,KAAK,EAAK/P,MAAMyC,YAAa,eACpDuB,EAAOhnB,EAAK7E,qBAEhB,MAAOzH,GACHszB,EAAOhnB,EAAK5E,qBAAuB1H,EAAI4xB,WApgBX,EA6gB5Bwd,wBAA0B,SAAC9b,GAC/B,IAAMhnB,EAAO,EAAKgjB,MAAMvuB,SAASiG,aACjC44B,GAAuBmM,OAAOzO,MAAK,SAAAiR,GAAS,IAAD,GACvC,IAAKjf,MAAMyC,aAAYhd,KAAvB,oBAA+Bw5B,EAAKxc,cACpC,EAAK5C,SAAS,IACdmE,EAAOib,EAAKxc,YAAYlkB,OAASvB,EAAK3E,kBAAkB,GAAK4mC,EAAKzO,YAAcxzB,EAAK3E,kBAAkB,KACjG4mC,EAAK1O,mBAAqBvzB,EAAK3E,kBAAkB,GAAK4mC,EAAKxO,aAAezzB,EAAK3E,kBAAkB,QAnhB3E,EA8hB5B0nC,kBAAoB,SAAC5xB,GACzB,IAAM9Q,EAAO,EAAKg/B,yBAAyB,aACrClJ,EAAiB/G,GAAe4D,aAAa3yB,EAAM8Q,EAAU,EAAK6R,MAAMjI,mBAC9E,EAAKiI,MAAM+Y,gBAAgBtzB,KAAK0tB,GAChC,EAAKtT,SAAS,CAACmc,iBAAkB,EAAKhc,MAAM+Y,gBAAgBx6B,OAAS,KA9hBrEZ,SAAS6jB,KAAKhhB,UAAU+F,OAAO,YAAa1V,EAAamvC,gBACzDriC,SAAS6jB,KAAKhhB,UAAU+F,OAAO,cAAe1V,EAAamvC,gBAL3B,OAkBhC,EAAKhgB,MAAQ,CACT8Q,QAASE,KAET+K,gBAAiB,IAAIh/B,IACrBg8B,gBAAiB,CAAE3M,GAAegH,SAfb,CACrB/1B,KAAM,WACN4L,YAAa,CAAC,UAAW,UAAW,WACpCmB,YAAa,CAAC,SAAU,SAAU,WAClClB,KAAM,CACF,CAAC,GAAI,GAAI,KAEbmjB,YAAa,EACbC,SAAU,IAOmD,IAC7D0P,iBAAkB,EAElBvZ,YAAa,CAAE,CAACplB,KAAM,eAAgB1N,KAAM,KAC5CssC,mBAAoB,EAEpB3M,mBAAoB,KACpB6M,wBAAyB,GAEzBpkB,mBAAmB,EACnB1mB,kBAAmBR,EAAaovC,uBAChCxuC,SAAUA,IACVC,UAAWb,EAAamvC,gBAE5B,EAAKrE,qBAAuBxrC,IAAMkwB,YApCF,EAJxC,qDA4iBQ,IAAIlkB,EAAgB,KAiBpB,OAhBsC,OAAlC5M,KAAKywB,MAAMsP,qBACXnzB,EACI,kBAAC,GAAD,CACImzB,mBAAoB//B,KAAKywB,MAAMsP,mBAC/BM,eAAgBrgC,KAAKywB,MAAMmc,wBAE3BjM,YAAa3gC,KAAKwwC,kBAClB9a,kBAAmB11B,KAAKqsC,sBAExBvqC,kBAAmB9B,KAAKywB,MAAM3uB,kBAC9BK,UAAWnC,KAAKywB,MAAMtuB,UACtBD,SAAUlC,KAAKywB,MAAMvuB,YAM7B,8BACI,kBAAC,GAAD,CACIy/B,QAAS3hC,KAAK+sC,YACdnL,cAAe5hC,KAAKitC,kBACpBpL,cAAe7hC,KAAKmtC,kBACpBnL,aAAchiC,KAAKotC,wBAEnBtrC,kBAAmB9B,KAAKywB,MAAM3uB,kBAC9BI,SAAUlC,KAAKywB,MAAMvuB,SACrBsmB,kBAAmBxoB,KAAKywB,MAAMjI,kBAC9BrmB,UAAWnC,KAAKywB,MAAMtuB,UAEtBmgC,0BAA2BtiC,KAAKutC,8BAChC/K,iBAAkBxiC,KAAKytC,qBACvBrL,0BAA2BpiC,KAAKqtC,8BAChC9K,kBAAmBviC,KAAK2tC,wBAG5B,kBAAC,GAAD,CACInE,gBAAiBxpC,KAAKywB,MAAM+Y,gBAC5BC,oBAAqBzpC,KAAKywB,MAAMgc,iBAEhCD,gBAAe,YAAMxsC,KAAKywB,MAAM+b,gBAAgBpqB,UAEhDunB,qBAAsB3pC,KAAK0pC,yBAC3B/B,mBAAoB3nC,KAAK8tC,+BACzBlG,mBAAoB5nC,KAAKguC,+BACzBnG,iBAAkB7nC,KAAKkuC,6BACvBhG,SAAUloC,KAAKouC,qBACfrG,YAAa/nC,KAAKsuC,wBAClBhG,YAAatoC,KAAKuuC,wBAClBnG,eAAgBpoC,KAAKyuC,2BAErBxD,0BAA2BjrC,KAAK+qC,8BAChCC,eAAgBhrC,KAAK2uC,mBACrBlE,cAAezqC,KAAKivC,wBACpBpF,eAAgB7pC,KAAK4vC,mBACrBvF,uBAAwBrqC,KAAKkvC,qBAC7B3E,iBAAkBvqC,KAAKmvC,qBAEvBpF,mBAAoB/pC,KAAK+vC,uBACzBpF,wBAAyB3qC,KAAKqvC,4BAC9BpF,kBAAmBjqC,KAAKwvC,sBACxBrF,kBAAmBnqC,KAAKyvC,sBAExBjnB,kBAAmBxoB,KAAKywB,MAAMjI,kBAC9BtmB,SAAUlC,KAAKywB,MAAMvuB,WAGzB,kBAAC,GAAD,CACI6uB,IAAK/wB,KAAKosC,qBAEVlZ,YAAalzB,KAAKywB,MAAMyC,YACxBC,uBAAwBnzB,KAAKywB,MAAMic,mBACnC9d,UAAW5uB,KAAKywB,MAAM+b,gBAEtBp3B,SAAUpV,KAAKkwC,qBACf9c,OAAQpzB,KAAKiwC,eAEb7Z,4BAA6Bp2B,KAAK02B,gCAClCV,iBAAkBh2B,KAAKmwC,qBACvB1c,gBAAiBzzB,KAAKowC,0BACtBzc,mBAAoB3zB,KAAKqwC,uBACzBxc,oBAAqB7zB,KAAKswC,wBAC1Bvc,oBAAqB/zB,KAAKuwC,wBAE1B7a,kBAAmB11B,KAAKqsC,sBACxB7jB,kBAAmBxoB,KAAKywB,MAAMjI,kBAC9BrmB,UAAWnC,KAAKywB,MAAMtuB,UACtBD,SAAUlC,KAAKywB,MAAMvuB,WAGxB0K,OAtoBjB,GAAgC/L,aEuChC8vC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJziC,SAAS2C,eAAe,SChGtB,kBAAmB+/B,WACrBA,UAAUC,cAAcC,MACrBvS,MAAK,SAAAwS,GACJA,EAAaC,gBAEd7R,OAAM,SAAArhB,GACLrc,QAAQqc,MAAMA,EAAM+U,c","file":"static/js/main.fcb550ff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * Props of TooltipButton component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface TooltipButtonProps {\r\n    /**\r\n     * text on the button\r\n     * @type string\r\n     * @public\r\n     */\r\n    text: string,\r\n    /**\r\n     * handler of the button click\r\n     * @type function\r\n     * @public\r\n     */\r\n    onClick: () => void,\r\n    /**\r\n     * css class of the button\r\n     * @type string?\r\n     * @public\r\n     */\r\n    className?: string,\r\n    /**\r\n     * inline styling for button\r\n     * @type React.CSSProperties?\r\n     * @public\r\n     */\r\n    style?: React.CSSProperties,\r\n    /**\r\n     * text of the tooltip\r\n     * @type string\r\n     * @public\r\n     */\r\n    tooltip: string,\r\n    /**\r\n     * css class of the tooltip (it always has default .tooltip class)\r\n     * @type string?\r\n     * @public\r\n     */\r\n    tooltipClassName?: string,\r\n    /**\r\n     * inline styling for tooltip\r\n     * @type React.CSSProperties?\r\n     * @public\r\n     */\r\n    tooltipStyle?: React.CSSProperties,\r\n}\r\n\r\ninterface TooltipButtonState {\r\n}\r\n\r\n/**\r\n * Button with a tooltip text.\r\n * Accepts {@link TooltipButtonProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class TooltipButton extends React.Component<TooltipButtonProps, TooltipButtonState> {\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                className={this.props.className}\r\n                onClick={this.props.onClick}\r\n                style={this.props.style}\r\n                >{this.props.text}\r\n                <span\r\n                    className={\"tooltip \" + (this.props.tooltipClassName !== undefined ? this.props.tooltipClassName : \"\")}\r\n                    style={this.props.tooltipStyle}\r\n                    onClick={event => {\r\n                        event.stopPropagation();\r\n                        event.preventDefault();\r\n                    }}\r\n                >{this.props.tooltip}</span>\r\n            </button>\r\n        );\r\n    }\r\n}","import {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Error with optional text range of the error.\r\n * @extends Error\r\n * @category Errors\r\n * @public\r\n */\r\nexport class ErrorWithTextRange extends Error {\r\n    /**\r\n     * @param msg error message {@type string}\r\n     * @param range optional text range of the error {@type StartEndPair?}\r\n     * @public\r\n     */\r\n    constructor(msg: string, public range?: StartEndPair | undefined) {\r\n        super(msg);\r\n    }\r\n}\r\n\r\n/**\r\n * If the given error is ErrorWithTextRange instance and has undefined range, sets its range to given value.\r\n * Returns (possibly modified) input error.\r\n *\r\n * @param err error tu be inserted in {@type ErrorWithTextRange}\r\n * @param range inserted range {@type StartEndPair?}\r\n * @category Errors\r\n * @public\r\n */\r\nexport function insertRangeIfUndefined<T>(err: T, range: StartEndPair | undefined): T {\r\n    if (err instanceof ErrorWithTextRange && err.range === undefined) {\r\n        err.range = range;\r\n    }\r\n    return err;\r\n}","import {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {isSupportedLanguage, SupportedLanguage} from \"../language/language\";\r\n\r\nconst defaultCsvValueSeparator: CsvValueSeparator = \";\";\r\nconst defaultLanguage: SupportedLanguage = \"EN\";\r\nconst defaultDarkTheme: string = \"false\";\r\n\r\n/**\r\n * Static class for maintaining the access to local storage of the browser. It handles user settings:\r\n * saving file type, csv value separator, language, light/dark theme of the application.\r\n * If the local storage is not used, it uses the application memory and the default values.\r\n * @category Utils\r\n * @public\r\n */\r\nexport class LocalStorage {\r\n\r\n    private static isInit: boolean = false;\r\n    private static storageSupported: boolean = typeof(Storage) !== \"undefined\";\r\n\r\n    private static csvValueSeparator: CsvValueSeparator;\r\n    private static language: SupportedLanguage;\r\n    private static darkTheme: string;\r\n\r\n    /**\r\n     * Initializes the LocalStorage. If there are the requested values, loads them to application memory.\r\n     * If the local storage is not supported, uses the default values.\r\n     */\r\n    private static init(): void {\r\n        if (LocalStorage.storageSupported) {\r\n            const storedSeparator = localStorage.getItem(\"csvValueSeparator\");\r\n            if (storedSeparator !== \";\" && storedSeparator !== \",\") {\r\n                console.log(\"csvValueSeparator not found in localStorage and set to default\");\r\n                localStorage.setItem(\"csvValueSeparator\", defaultCsvValueSeparator);\r\n                LocalStorage.csvValueSeparator = defaultCsvValueSeparator;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.csvValueSeparator = localStorage.getItem(\"csvValueSeparator\");\r\n            }\r\n            if (!isSupportedLanguage(localStorage.getItem(\"language\"))) {\r\n                console.log(\"language not found in localStorage and set to default\");\r\n                localStorage.setItem(\"language\", defaultLanguage);\r\n                LocalStorage.language = defaultLanguage;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.language = localStorage.getItem(\"language\");\r\n            }\r\n\r\n            if (localStorage.getItem(\"darkTheme\") !== \"true\" && localStorage.getItem(\"darkTheme\") !== \"false\") {\r\n                console.log(\"darkTheme not found in localStorage and set to default\");\r\n                localStorage.setItem(\"darkTheme\", defaultDarkTheme);\r\n                LocalStorage.darkTheme = defaultDarkTheme;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.darkTheme = localStorage.getItem(\"darkTheme\");\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"LocalStorage not supported in the browser. Default values used.\");\r\n            LocalStorage.csvValueSeparator = defaultCsvValueSeparator;\r\n            LocalStorage.language = defaultLanguage;\r\n            LocalStorage.darkTheme = defaultDarkTheme;\r\n        }\r\n        LocalStorage.isInit = true;\r\n    }\r\n\r\n    /**\r\n     * Returns stored CSV value separator.\r\n     *\r\n     * @return stored CSV value separator {@type CsvValueSeparator}\r\n     * @public\r\n     */\r\n    public static getCsvValueSeparator(): CsvValueSeparator {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.csvValueSeparator;\r\n    }\r\n\r\n    /**\r\n     * Stores the given CSV value separator.\r\n     *\r\n     * @param csvValueSeparator CSV value separator to store {@type CsvValueSeparator}\r\n     * @public\r\n     */\r\n    public static setCsvValueSeparator(csvValueSeparator: CsvValueSeparator): void {\r\n        LocalStorage.csvValueSeparator = csvValueSeparator;\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"csvValueSeparator\", csvValueSeparator);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns stored language settings.\r\n     *\r\n     * @return stored language {@type SupportedLanguage}\r\n     * @public\r\n     */\r\n    public static getLanguage(): SupportedLanguage {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.language;\r\n    }\r\n\r\n    /**\r\n     * Stores the given language settings.\r\n     *\r\n     * @param language language settings to store {@type SupportedLanguage}\r\n     * @public\r\n     */\r\n    public static setLanguage(language: SupportedLanguage): void {\r\n        LocalStorage.language = language;\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"language\", language);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns stored theme settings: true if the stored theme is dark, false if light.\r\n     *\r\n     * @return true if the stored theme is dark, false if light {@type boolean}\r\n     * @public\r\n     */\r\n    public static getDarkTheme(): boolean {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.darkTheme === \"true\";\r\n    }\r\n\r\n    /**\r\n     * Stores the given theme settings: true if the stored theme is dark, false if light.\r\n     *\r\n     * @param darkTheme theme settings to store {@type boolean}\r\n     * @public\r\n     */\r\n    public static setDarkTheme(darkTheme: boolean): void {\r\n        LocalStorage.darkTheme = String(darkTheme);\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"darkTheme\", String(darkTheme));\r\n        }\r\n    }\r\n}","import {LocalStorage} from \"../utils/localStorage\";\r\nimport {EN} from \"./en\";\r\nimport {CS} from \"./cs\";\r\nimport {CodeErrorMessages} from \"../error/codeError\";\r\nimport {SemanticErrorMessages} from \"../error/raSemanticError\";\r\nimport {SyntaxErrorMessages} from \"../error/raSyntaxError\";\r\n\r\n/**\r\n * IF YOU WANT TO ADD A NEW LANGUAGE, READ THIS:\r\n *\r\n * Adding a language is simple, follow these steps:\r\n * 1) Copy the \"en.ts\" file in this package and name it as the lowercase new language abbreviation, e.g., \"cs.ts\"\r\n * 2) Rename the language definition object to the uppercase language abbreviation, e.g., \"CS\"\r\n * 3) Translate the messages in the new file. Some messages are split into an array - if you are not sure what to\r\n * write in each part, see its usage or other languages.\r\n * 4) Add the uppercase language abbreviation, e.g., \"CS\", in the allSupportedLanguages array in this file.\r\n * 5) Import your language definition in this file, e.g., \"import {CS} from \"./cs\";\"\r\n * 6) Add the imported language definition into languageMap map in this file, e.g., \"[\"CS\", CS],\"\r\n * 7) (voluntary) Create a project sample in your language in /project/samples.ts - you can translate existing samples.\r\n * 8) Test whether the application works.\r\n */\r\n\r\n/**\r\n * All languages supported in the application.\r\n * NOTE FOR NEW LANGUAGES: If you define a new language file \"lang.ts\", add \"LANG\" to this array.\r\n * @type string[]\r\n * @category Language\r\n * @public\r\n */\r\nexport const allSupportedLanguages: string[] = (<L extends string>(arr: L[]) => arr)([\"EN\", \"CS\"]);\r\n\r\n/**\r\n * Abbreviation of supported languages in the application.\r\n * @category Language\r\n * @public\r\n */\r\nexport type SupportedLanguage = (typeof allSupportedLanguages)[number];\r\n\r\n/**\r\n * Definition of a language for Rachel.\r\n * NOTE FOR NEW LANGUAGES: If you want to define a new language, it must be through this interface in a new file in\r\n * this package (see en.ts file as an example of English language definition).\r\n * @category Language\r\n * @public\r\n */\r\nexport interface LanguageDef {\r\n    /**\r\n     * Abbreviation of the language\r\n     * @public\r\n     */\r\n    abbr: SupportedLanguage,\r\n    /**\r\n     * Description of errors in relation definitions.\r\n     * @public\r\n     */\r\n    relationErrors: {\r\n        emptyColumn: string,\r\n        duplicitColumn: string,\r\n        keywordColumn: string,\r\n        invalidColumn: string,\r\n\r\n        unsupportedNull: string,\r\n        invalidNumber: string,\r\n        invalidBoolean: string,\r\n    },\r\n    /**\r\n     * Description of unexpected errors.\r\n     * @public\r\n     */\r\n    codeErrors: CodeErrorMessages,\r\n    /**\r\n     * Description of semantic errors in expressions.\r\n     * @public\r\n     */\r\n    semanticErrors: SemanticErrorMessages,\r\n    /**\r\n     * Default semantic error message.\r\n     * @public\r\n     */\r\n    semanticError: string,\r\n    /**\r\n     * Description of syntactic errors in expressions.\r\n     * @public\r\n     */\r\n    syntaxErrors: SyntaxErrorMessages,\r\n    /**\r\n     * Default syntax error message.\r\n     * @public\r\n     */\r\n    syntaxError: string,\r\n    /**\r\n     * Info messages for the user in pop-up message box.\r\n     * @public\r\n     */\r\n    userMessages: {\r\n        loadedRelationsTotalNo: string,\r\n        loadedRelationsTotalSome: string,\r\n        loadRelationNew: string,\r\n        // 2 parts expected - see English language as an example\r\n        loadAllRelationsNew: string[],\r\n        deleteLoadedRelations: string,\r\n\r\n        relationsExportOK: string,\r\n        relationsExportErr: string,\r\n        // 2 parts expected - see English language as an example\r\n        relationsImport: string[],\r\n\r\n        expressionsExportOK: string,\r\n        expressionsExportErr: string,\r\n        // 4 parts expected - see English language as an example\r\n        expressionsImport: string[]\r\n    },\r\n    /**\r\n     * Names of RA operations.\r\n     * @public\r\n     */\r\n    operations: {\r\n        selection: string,\r\n        projection: string,\r\n        rename: string,\r\n        union: string,\r\n        intersection: string,\r\n        difference: string,\r\n        naturalJoin: string,\r\n        cartesianProduct: string,\r\n        leftSemiJoin: string,\r\n        rightSemiJoin: string,\r\n        leftAntijoin: string,\r\n        rightAntijoin: string,\r\n        thetaJoin: string,\r\n        leftThetaSemiJoin: string,\r\n        rightThetaSemiJoin: string,\r\n        fullOuterJoin: string,\r\n        leftOuterJoin: string,\r\n        rightOuterJoin: string,\r\n        division: string\r\n    }\r\n    /**\r\n     * Description of elements in management section.\r\n     * @public\r\n     */\r\n    managementSection: {\r\n        batchButton: string,\r\n        loadButton: string,\r\n        saveButton: string,\r\n\r\n        samplesButton: string,\r\n        samplesMenuTitle: string,\r\n\r\n        settingsButton: string,\r\n        settingsNullValues: string,\r\n        settingsNullValuesAllowed: string,\r\n        settingsNullValuesForbidden: string,\r\n        settingsCSVSeparator: string,\r\n        settingsCSVSeparatorSemicolon: string,\r\n        settingsCSVSeparatorComma: string,\r\n        settingsTheme: string,\r\n        settingsThemeLight: string,\r\n        settingsThemeDark: string,\r\n        settingsLanguage: string,\r\n\r\n        aboutButton: string\r\n    },\r\n    /**\r\n     * Description of elements in relation section.\r\n     * @public\r\n     */\r\n    relationSection: {\r\n        relationSectionHeader: string,\r\n\r\n        loadAllButton: string,\r\n        loadAllButtonTooltip: string,\r\n        removeLoadedButton: string,\r\n        removeLoadedButtonTooltip: string,\r\n        importButton: string,\r\n        importButtonTooltip: string,\r\n        exportButton: string,\r\n        exportButtonTooltip: string,\r\n\r\n        loadButton: string,\r\n        loadButtonTooltip: string,\r\n        renameButton: string,\r\n        deleteButton: string,\r\n        deleteButtonTooltip: string,\r\n        revertButton: string,\r\n        revertButtonTooltip: string\r\n    },\r\n    /**\r\n     * Description of elements in expression section.\r\n     * @public\r\n     */\r\n    expressionSection: {\r\n        expressionSectionHeader: string,\r\n\r\n        importButton: string,\r\n        importButtonTooltip: string,\r\n        exportButton: string,\r\n        exportButtonTooltip: string,\r\n\r\n        evaluateButton: string,\r\n        evaluateButtonTooltip: string,\r\n        renameButton: string,\r\n        deleteButton: string,\r\n        deleteButtonTooltip: string,\r\n\r\n        expressionTextareaPlaceholder: string,\r\n\r\n        lineComment: string,\r\n        blockComment: string\r\n    }\r\n    /**\r\n     * Description of elements in result section.\r\n     * @public\r\n     */\r\n    resultSection: {\r\n        resultSectionHeader: string,\r\n\r\n        exportEvalTreeButton: string,\r\n        exportEvalTreeButtonTooltip: string,\r\n        evalTreeTitle: string,\r\n\r\n        resultRelationTitle: string,\r\n        intermediateRelationTitle: string,\r\n        addButton: string,\r\n        addButtonTooltip: string,\r\n        exportRelationButton: string,\r\n        exportRelationButtonTooltip: string,\r\n    }\r\n}\r\n\r\n/**\r\n * Map of supported languages to their definition.\r\n * NOTE FOR NEW LANGUAGES: If you define a new language, add its definition mapping here.\r\n */\r\nconst languageMap: Map<SupportedLanguage, LanguageDef> = new Map<SupportedLanguage, LanguageDef>([\r\n    [\"EN\", EN],\r\n    [\"CS\", CS],\r\n]);\r\n\r\n/**\r\n * Returns true if the given value is a supported language.\r\n * @param lan checked value {@type any}\r\n * @return true if the given value is a supported language {@type boolean}\r\n * @category Language\r\n * @public\r\n */\r\nexport function isSupportedLanguage(lan: any): boolean {\r\n    return allSupportedLanguages.includes(lan);\r\n}\r\n\r\n/**\r\n * Returns definition of the current selected language.\r\n * @return definition of the current selected language {@type LanguageDef}\r\n * @category Language\r\n * @public\r\n */\r\nexport function language(): LanguageDef {\r\n    const lang = languageMap.get(LocalStorage.getLanguage());\r\n    if (lang === undefined) {\r\n        return EN;\r\n    }\r\n    return lang;\r\n}","import {LanguageDef} from \"./language\";\r\nimport {CodeErrorMessages} from \"../error/codeError\";\r\nimport {SemanticErrorMessages} from \"../error/raSemanticError\";\r\nimport {SyntaxErrorMessages} from \"../error/raSyntaxError\";\r\n\r\n/**\r\n * English messages for CodeErrors mapped by their error codes.\r\n */\r\nconst codeErrors: CodeErrorMessages = {\r\n    resultSection_nodeIndexNotFound:\r\n        [\"ResultSection.getCurrentRelation: Selected node index in the evaluation tree was not found.\"],\r\n    resultSection_evalError:\r\n        [\"ResultSection.getCurrentRelation: Evaluation error in result section: \", /* error */ \".\"],\r\n    resultSection_nullRelationToSave:\r\n        [\"ResultSection.saveResultRelation: Resulting relation is null when trying to save it.\"],\r\n    resultSection_nullRelationToAdd:\r\n        [\"ResultSection.handleAddRelation: Resulting relation is null when trying to add it.\"],\r\n\r\n    row_absentColumn:\r\n        [\"Row.getOrderedValues: Column \", /* column */ \" is missing in a row with columns: \", /* column */ \".\"],\r\n\r\n    valueParser_unexpectedToken:\r\n        [\"ValueParser.rpnToVETreeRecursive: Unexpected token: \", /* token */ \".\"],\r\n\r\n    exprParser_unexpectedToken:\r\n        [\"ExprParser.isValidSequence: Unexpected token: \", /* token */ \".\"],\r\n    exprParser_thetaJoinBranchError:\r\n        [\"ExprParser.parseTokensForWhisper: Error in theta join branch: \", /* error */ \".\"],\r\n    exprParser_projectionBranchError:\r\n        [\"ExprParser.parseTokensForWhisper: Error in projection branch: \", /* error */ \".\"]\r\n};\r\n\r\n/**\r\n * English messages for RASemanticErrors mapped by their error codes.\r\n */\r\nconst semanticErrors: SemanticErrorMessages = {\r\n    exprParser_relationNotDefined: [\"Relation \\\"\", /* relation */ \"\\\" is not defined. Check definitions of relations.\"],\r\n\r\n    binaryNode_commonColumns: [\"Source relations for \", /* operator */ \" have common columns \\\"\", /* columns */ \"\\\".\"],\r\n    setOperationNode_notEqualColumns:\r\n        [\"Source relations \\\"\", /* left */ \"\\\" and \\\"\", /* right */ \"\\\" for set \", /* operation */ \" do not have the same column sets.\"],\r\n    divisionNode_rightColumnsNotSubset:\r\n        [\"Right-hand relation schema \\\"\", /* schema */ \"\\\" is not a subset of the left-hand relation schema \\\"\", /* schema */ \"\\\".\"],\r\n    divisionNode_rightColumnsNotProperSubset:\r\n        [\"Right-hand relation schema \\\"\", /* schema */ \"\\\" is not a proper subset of the left-hand relation schema \\\"\",\r\n        /* schema */ \"\\\". There must exist at least one column in the left relation which is not present in the right relation.\"],\r\n    renameNode_absentOriginalColumn: [\"Invalid renaming attempt, column \\\"\", /* column */ \"\\\" does not exist in the source relation.\"],\r\n    renameNode_changeToDuplicit: [\"Invalid renaming attempt, new column name \\\"\", /* column */ \"\\\" is ambiguous in the changed relation.\"],\r\n    projectionNode_absentColumn: [\"Invalid projection of the column \\\"\", /* column */ \"\\\". It does not exist in the source relation.\"],\r\n    projectionNode_emptyProjection: [\"Invalid projection attempt, no column to project.\"],\r\n\r\n    referenceValue_absentColumn: [\"Column \\\"\", /* column */ \"\\\" is missing in a schema with columns: \", /* columns */ \".\"]\r\n};\r\n\r\n/**\r\n * English messages for RASyntaxErrors mapped by their error codes.\r\n */\r\nconst syntaxErrors: SyntaxErrorMessages = {\r\n    exprParser_emptyStringGiven: [\"Cannot parse an expression from an empty string.\"],\r\n    exprParser_outerJoinWhenNullNotSupported: [\"Found \", /* outer join */ \" when null values are not supported.\"],\r\n    exprParser_unexpectedPart: [\"Unexpected part \\\"\", /* part */ \"\\\" in an expression.\"],\r\n    exprParser_bothBranchesError: [\"All combinations throw error in \\\"\", /* part */ \"\\\". When treated as projection:\\n\",\r\n        /* error */ \"\\nWhen treated as theta join:\\n\", /* error */ \"\"],\r\n    exprParser_invalidExpression: [\"Given string is not a valid relational algebra expression.\"],\r\n    exprParser_invalidParentheses: [\"Invalid structure of parentheses in the expression.\"],\r\n    exprParser_invalidStart: [\"Relational algebra expression cannot start with \", /* start */ \".\"],\r\n    exprParser_invalidEnd: [\"Relational algebra expression cannot end with \", /* end */ \".\"],\r\n    exprParser_relationAfterRelation: [\"Relation \\\"\", /* relation */ \"\\\" after relation \\\"\", /* relation */\"\\\".\"],\r\n    exprParser_relationAfterUnary: [\"Relation \\\"\", /* relation */ \"\\\" after unary operator \\\"\", /* unary */ \"\\\".\"],\r\n    exprParser_relationAfterClosing: [\"Relation \\\"\", /* relation */ \"\\\" after closing parenthesis.\"],\r\n    exprParser_unaryAfterBinary: [\"Unary operator \\\"\", /* unary */ \"\\\" after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    exprParser_unaryAfterOpening: [\"Unary operator \\\"\", /* unary */ \"\\\" after opening parenthesis.\"],\r\n    exprParser_binaryAfterBinary: [\"Binary operator \\\"\", /* unary */ \"\\\" after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    exprParser_binaryAfterOpening: [\"Binary operator \\\"\", /* binary */ \"\\\" after opening parenthesis.\"],\r\n    exprParser_openingAfterRelation: [\"Opening parenthesis after relation \\\"\", /* relation */ \"\\\".\"],\r\n    exprParser_openingAfterUnary: [\"Opening parenthesis after unary operator \\\"\", /* unary */ \"\\\".\"],\r\n    exprParser_openingAfterClosing: [\"Opening parenthesis after closing parenthesis.\"],\r\n    exprParser_closingAfterBinary: [\"Closing parenthesis after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    exprParser_closingAfterOpening: [\"Closing parenthesis after opening parenthesis.\"],\r\n\r\n    valueParser_emptyInput: [\"Empty string given as a condition.\"],\r\n    valueParser_unsupportedNull: [\"Null constant used when null values are not supported.\"],\r\n    valueParser_unexpectedPart: [\"Unexpected part \\\"\", /* part */ \"\\\" in the expression.\"],\r\n    valueParser_missingOpeningParenthesis: [\"Missing opening parenthesis '(' in an expression.\"],\r\n    valueParser_missingClosingParenthesis: [\"Missing closing parenthesis ')' in an expression.\"],\r\n    valueParser_invalidExpression: [\"Given string is not a valid expression.\"],\r\n    valueParser_invalidStart: [\"Expression cannot start with \\\"\", /* start */ \"\\\".\"],\r\n    valueParser_invalidEnd: [\"Expression cannot end with \\\"\", /* end */ \"\\\".\"],\r\n    valueParser_literalAfterLiteral: [\"Literal \\\"\", /* literal */ \"\\\" after literal \\\"\", /* literal */ \"\\\".\"],\r\n    valueParser_literalAfterReference: [\"Literal \\\"\", /* literal */ \"\\\" after reference to column \\\"\", /* column */ \"\\\".\"],\r\n    valueParser_literalAfterClosing: [\"Literal \\\"\", /* literal */ \"\\\" after closing parenthesis.\"],\r\n    valueParser_referenceAfterLiteral: [\"Reference to column \\\"\", /* column */ \"\\\" after literal \\\"\", /* literal */ \"\\\".\"],\r\n    valueParser_referenceAfterReference: [\"Reference to column \\\"\", /* column */ \"\\\" after reference to column \\\"\", /* column */ \"\\\".\"],\r\n    valueParser_referenceAfterClosing: [\"Reference to column \\\"\", /* column */ \"\\\" after closing parenthesis.\"],\r\n    valueParser_notAfterLiteral: [\"Logical not operator \\\"\", /* not */ \"\\\" after literal \\\"\", /* literal */ \"\\\".\"],\r\n    valueParser_notAfterReference: [\"Logical not operator \\\"\", /* not */ \"\\\" after reference to column \\\"\", /* column */ \"\\\".\"],\r\n    valueParser_notAfterClosing: [\"Logical not operator \\\"\", /* not */ \"\\\" after closing parenthesis.\"],\r\n    valueParser_binaryAfterOperator: [\"Binary operator \\\"\", /* binary */ \"\\\" after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    valueParser_binaryAfterOpening: [\"Binary operator \\\"\", /* binary */ \"\\\" after opening parenthesis.\"],\r\n    valueParser_openingAfterLiteral: [\"Opening parenthesis after literal \\\"\", /* literal */ \"\\\".\"],\r\n    valueParser_openingAfterReference: [\"Opening parenthesis after reference to column \\\"\", /* column */ \"\\\".\"],\r\n    valueParser_openingAfterClosing: [\"Opening parenthesis after closing parenthesis.\"],\r\n    valueParser_closingAfterOperator: [\"Closing parenthesis after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    valueParser_closingAfterOpening: [\"Closing parenthesis after opening parenthesis.\"],\r\n\r\n    stringUtils_missingClosingChar: [\"Missing '\", /* closing char */ \"' after opening '\", /* opening char */ \"'.\"],\r\n    stringUtils_charNotFound: [\"Expected \\\"\", /* char */ \"\\\" not found.\"],\r\n\r\n    renameNode_missingArrow: [\"Invalid renaming attempt, use the \\\"OldName -> NewName\\\" format separated by commas.\"],\r\n    renameNode_invalidNewName: [\"Invalid renaming attempt to \\\"\", /* name */\r\n        \"\\\". New column name must contain letters, numbers and underscores only and start with a letter or an underscore.\"],\r\n    renameNode_keywordNewName: [\"Invalid renaming attempt to \\\"\", /* name */ \"\\\". New column name cannot be a keyword.\"],\r\n    renameNode_multipleRenameOfTheColumn: [\"Multiple renaming attempts of column \\\"\", /* name */ \"\\\".\"],\r\n\r\n    selectionNode_resultNotBoolean: [\"Result of the selection condition \", /* condition */ \" is not a boolean value, but \", /* type */ \".\"],\r\n    thetaJoinNode_resultNotBoolean: [\"Result of the theta join condition \", /* condition */ \" is not a boolean value, but \", /* type */ \".\"],\r\n\r\n    comparingOperator_differentInputTypes: [\"Inputs for \\\"\", /* operator */ \"\\\"  have different types \", /* type */ \" and \", /* type */ \".\"],\r\n    computingOperator_inputTypesNotNumbers: [\"Inputs for \\\"\", /* operator */ \"\\\" are not both numbers, they are \", /* type */ \" and \", /* type */ \".\"],\r\n    logicalOperator_leftInputNotBoolean: [\"Left-hand input value for \\\"\", /* operator */ \"\\\" is not a boolean, but \", /* type */ \".\"],\r\n    logicalOperator_rightInputNotBoolean: [\"Right-hand input value for \\\"\", /* operator */ \"\\\" is not a boolean, but \", /* type */ \".\"]\r\n};\r\n\r\nexport const EN: LanguageDef = {\r\n    abbr: \"EN\",\r\n\r\n    relationErrors: {\r\n        emptyColumn: \"Column name cannot be empty\",\r\n        duplicitColumn: \"Duplicit column name\",\r\n        keywordColumn: \"Column name cannot be a keyword\",\r\n        invalidColumn: \"Invalid characters in a column name\",\r\n\r\n        unsupportedNull: \"Null values are not supported\",\r\n        invalidNumber: \"Given string is not a number\",\r\n        invalidBoolean: \"Given string is not a boolean\"\r\n    },\r\n\r\n    codeErrors: codeErrors,\r\n\r\n    semanticErrors: semanticErrors,\r\n    semanticError: \"Semantic error: \",\r\n\r\n    syntaxErrors: syntaxErrors,\r\n    syntaxError: \"Syntax error: \",\r\n\r\n    userMessages: {\r\n        loadedRelationsTotalNo: \"No relations loaded in the application at the moment.\",\r\n        loadedRelationsTotalSome: \" relations loaded at the moment: \",\r\n        loadRelationNew: \"Relation loaded to application.\",\r\n        loadAllRelationsNew: [/* number of loaded */ \" relations loaded to application, \", /* number of skipped */ \" skipped for errors.\"],\r\n        deleteLoadedRelations: \" relations deleted.\",\r\n\r\n        relationsExportOK: \"Relations saved.\",\r\n        relationsExportErr: \"Relations saving failed: \",\r\n        relationsImport: [/* number of loaded */ \" relations loaded, \", /* number of skipped */ \" files skipped.\"],\r\n\r\n        expressionsExportOK: \"Expressions saved.\",\r\n        expressionsExportErr: \"Expressions saving failed: \",\r\n        expressionsImport: [/* number of expressions */ \" expressions loaded from \", /* number of files */ \" files (\",\r\n        /* number of skipped expressions */ \" expressions skipped, \", /* number of skipped files */ \" files skipped).\"]\r\n    },\r\n\r\n    operations: {\r\n        selection: \"Selection\",\r\n        projection: \"Projection\",\r\n        rename: \"Rename\",\r\n        union: \"Union\",\r\n        intersection: \"Intersection\",\r\n        difference: \"Difference\",\r\n        naturalJoin: \"Natural join\",\r\n        cartesianProduct: \"Cartesian product\",\r\n        leftSemiJoin: \"Left semijoin\",\r\n        rightSemiJoin: \"Right semijoin\",\r\n        leftAntijoin: \"Left antijoin\",\r\n        rightAntijoin: \"Right antijoin\",\r\n        thetaJoin: \"Theta join\",\r\n        leftThetaSemiJoin: \"Left theta semijoin\",\r\n        rightThetaSemiJoin: \"Right theta semijoin\",\r\n        fullOuterJoin: \"Full outer join\",\r\n        leftOuterJoin: \"Left outer join\",\r\n        rightOuterJoin: \"Right outer join\",\r\n        division: \"Division\"\r\n    },\r\n\r\n    managementSection: {\r\n        batchButton: \"Batch\",\r\n        loadButton: \"Load\",\r\n        saveButton: \"Save\",\r\n        samplesButton: \"Samples\",\r\n        samplesMenuTitle: \"Sample projects\",\r\n        settingsButton: \"Settings\",\r\n        settingsNullValues: \"Null values\",\r\n        settingsNullValuesAllowed: \"allowed\",\r\n        settingsNullValuesForbidden: \"forbidden\",\r\n        settingsCSVSeparator: \"CSV separator\",\r\n        settingsCSVSeparatorSemicolon: \"semicolon\",\r\n        settingsCSVSeparatorComma: \"comma\",\r\n        settingsTheme: \"Theme\",\r\n        settingsThemeLight: \"light\",\r\n        settingsThemeDark: \"dark\",\r\n        settingsLanguage: \"Language\",\r\n        aboutButton: \"About\"\r\n    },\r\n\r\n    relationSection: {\r\n        relationSectionHeader: \"Relations\",\r\n        loadAllButton: \"Load all\",\r\n        loadAllButtonTooltip: \"Loads all valid relation into the application\",\r\n        removeLoadedButton: \"Remove loaded\",\r\n        removeLoadedButtonTooltip: \"Removes all the currently loaded relations\",\r\n        importButton: \"Import\",\r\n        importButtonTooltip: \"Adds new relations from files\",\r\n        exportButton: \"Export\",\r\n        exportButtonTooltip: \"Saves all stored relations to files\",\r\n        loadButton: \"Load\",\r\n        loadButtonTooltip: \"Loads the selected relation into the application\",\r\n        renameButton: \"Rename\",\r\n        deleteButton: \"Delete\",\r\n        deleteButtonTooltip: \"Deletes the selected relation\",\r\n        revertButton: \"Revert\",\r\n        revertButtonTooltip: \"Reverts the selected relation to the last loaded state\"\r\n    },\r\n\r\n    expressionSection: {\r\n        expressionSectionHeader: \"Expressions\",\r\n\r\n        importButton: \"Import\",\r\n        importButtonTooltip: \"Adds new expressions from a file\",\r\n        exportButton: \"Export\",\r\n        exportButtonTooltip: \"Saves expressions to a file\",\r\n\r\n        evaluateButton: \"Evaluate\",\r\n        evaluateButtonTooltip: \"Evaluates the selected expression\",\r\n        renameButton: \"Rename\",\r\n        deleteButton: \"Delete\",\r\n        deleteButtonTooltip: \"Deletes the selected expression\",\r\n\r\n        expressionTextareaPlaceholder: \"Write relational algebra expression here...\",\r\n\r\n        lineComment: \"Line comment\",\r\n        blockComment: \"Block comment\"\r\n    },\r\n\r\n    resultSection: {\r\n        resultSectionHeader: \"Result\",\r\n\r\n        exportEvalTreeButton: \"Export\",\r\n        exportEvalTreeButtonTooltip: \"Saves the evaluation tree as an image\",\r\n        evalTreeTitle: \"Evaluation tree of\",\r\n\r\n        resultRelationTitle: \"Result relation\",\r\n        intermediateRelationTitle: \"Intermediate relation\",\r\n        addButton: \"Add\",\r\n        addButtonTooltip: \"Adds the given relation between the stored ones\",\r\n        exportRelationButton: \"Export\",\r\n        exportRelationButtonTooltip: \"Saves the selected relation to a file\",\r\n    }\r\n}","import {LanguageDef} from \"./language\";\r\nimport {EN} from \"./en\";\r\nimport {SyntaxErrorMessages} from \"../error/raSyntaxError\";\r\nimport {SemanticErrorMessages} from \"../error/raSemanticError\";\r\n\r\n/**\r\n * Czech messages for RASemanticErrors mapped by their error codes.\r\n */\r\nconst semanticErrors: SemanticErrorMessages = {\r\n    exprParser_relationNotDefined: [\"Relace \\\"\", \"\\\" není definována. Zkontrolujte definice relací.\"],\r\n\r\n    binaryNode_commonColumns: [\"Vstupní relace pro \", \" mají společné sloupce \\\"\", \"\\\".\"],\r\n    setOperationNode_notEqualColumns: [\"Vstupní relace \\\"\", \"\\\" a \\\"\", \"\\\" pro \", \" množin nemají stejné schéma.\"],\r\n    divisionNode_rightColumnsNotSubset:\r\n        [\"Schéma pravé vstupní relace \\\"\", \"\\\" není podmnožinou schématu levé vstupní relace \\\"\", \"\\\".\"],\r\n    divisionNode_rightColumnsNotProperSubset:\r\n        [\"Schéma pravé vstupní relace \\\"\", \"\\\" není vlastní podmnožinou schématu levé vstupní relace \\\"\",\r\n        \". V levé relaci musí existovat sloupec, který neexistuje v pravé relaci.\"],\r\n    renameNode_absentOriginalColumn: [\"Nepovolené přejmenování, sloupec \\\"\", \"\\\" neexistuje ve vstupní relaci.\"],\r\n    renameNode_changeToDuplicit: [\"Nepovolené přejmenování, nový název sloupce \\\"\", \"\\\" je duplicitní ve změněné relaci.\"],\r\n    projectionNode_absentColumn: [\"Nepovolená projekce sloupce \\\"\", \"\\\". Tento sloupec neexistuje ve vstupní relaci.\"],\r\n    projectionNode_emptyProjection: [\"Nepovolená projekce, vždy musí být zachován alespoň jeden sloupec.\"],\r\n\r\n    referenceValue_absentColumn: [\"Sloupec \\\"\", \"\\\" neexistuje ve schématu se sloupci \", \".\"]\r\n};\r\n\r\n/**\r\n * Czech messages for RASyntaxErrors mapped by their error codes.\r\n */\r\nconst syntaxErrors: SyntaxErrorMessages = {\r\n    exprParser_emptyStringGiven: [\"Výraz nelze parsovat z prázdného řetězce.\"],\r\n    exprParser_outerJoinWhenNullNotSupported: [\"Nalezeno \", \", přestože null hodnoty jsou zakázány.\"],\r\n    exprParser_unexpectedPart: [\"Nečekaná část \\\"\", \"\\\" v RA výrazu.\"],\r\n    exprParser_bothBranchesError: [\"Všechny kombinace způsobují chybu v \\\"\", \"\\\". Považováno za projekci:\\n\",\r\n        \"\\nPovažováno za theta spojení:\\n\", \"\"],\r\n    exprParser_invalidExpression: [\"Daný výraz není korektní výraz relační algebry.\"],\r\n    exprParser_invalidParentheses: [\"Chybné uzávorkování ve výrazu.\"],\r\n    exprParser_invalidStart: [\"RA výraz nemůže začínat na \", \".\"],\r\n    exprParser_invalidEnd: [\"RA výraz nemůže končit na \", \".\"],\r\n    exprParser_relationAfterRelation: [\"Relace \\\"\", \"\\\" po relaci \\\"\", \"\\\".\"],\r\n    exprParser_relationAfterUnary: [\"Relace \\\"\", \"\\\" po unárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_relationAfterClosing: [\"Relace \\\"\", \"\\\" po uzavírací závorce.\"],\r\n    exprParser_unaryAfterBinary: [\"Unární operátor \\\"\", \"\\\" po binárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_unaryAfterOpening: [\"Unární operátor \\\"\", \"\\\" po otevírací závorce.\"],\r\n    exprParser_binaryAfterBinary: [\"Binární operátor \\\"\", \"\\\" po binárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_binaryAfterOpening: [\"Binární operátor \\\"\", \"\\\" po otevírací závorce.\"],\r\n    exprParser_openingAfterRelation: [\"Otevírací závorka po relaci \\\"\", \"\\\".\"],\r\n    exprParser_openingAfterUnary: [\"Otevírací závorka po unárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_openingAfterClosing: [\"Otevírací závorka po uzavírací závorce.\"],\r\n    exprParser_closingAfterBinary: [\"Uzavírací závorka po binárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_closingAfterOpening: [\"Uzavírací závorka po otevírací závorce.\"],\r\n\r\n    valueParser_emptyInput: [\"Jako podmínka nemůže být prázdný řetězec.\"],\r\n    valueParser_unsupportedNull: [\"Nalezena null konstanta, přestože null hodnoty jsou zakázány.\"],\r\n    valueParser_unexpectedPart: [\"Nečekaná část \\\"\", \"\\\" ve výrazu.\"],\r\n    valueParser_missingOpeningParenthesis: [\"Chybějící otevírací závorka ve výrazu.\"],\r\n    valueParser_missingClosingParenthesis: [\"Chybějící uzavírací závorka ve výrazu.\"],\r\n    valueParser_invalidExpression: [\"Daný výraz není korektní.\"],\r\n    valueParser_invalidStart: [\"Výraz nemůže začínat na \\\"\", \"\\\".\"],\r\n    valueParser_invalidEnd: [\"Výraz nemůže končit na \\\"\", \"\\\".\"],\r\n    valueParser_literalAfterLiteral: [\"Konstanta \\\"\", \"\\\" po konstantě \\\"\", \"\\\".\"],\r\n    valueParser_literalAfterReference: [\"Konstanta \\\"\", \"\\\" po referenci sloupce \\\"\", \"\\\".\"],\r\n    valueParser_literalAfterClosing: [\"Konstanta \\\"\", \"\\\" po uzavírací závorce.\"],\r\n    valueParser_referenceAfterLiteral: [\"Reference sloupce \\\"\", \"\\\" po konstantě \\\"\", \"\\\".\"],\r\n    valueParser_referenceAfterReference: [\"Reference sloupce \\\"\", \"\\\" po referenci sloupce \\\"\", \"\\\".\"],\r\n    valueParser_referenceAfterClosing: [\"Reference sloupce \\\"\", \"\\\" po uzavírací závorce.\"],\r\n    valueParser_notAfterLiteral: [\"Logická negace \\\"\", \"\\\" po konstantě \\\"\", \"\\\".\"],\r\n    valueParser_notAfterReference: [\"Logická negace \\\"\", \"\\\" po referenci sloupce \\\"\", \"\\\".\"],\r\n    valueParser_notAfterClosing: [\"Logická negace \\\"\", \"\\\" po uzavírací závorce.\"],\r\n    valueParser_binaryAfterOperator: [\"Binární operátor \\\"\", \"\\\" po binárním operátoru \\\"\", \"\\\".\"],\r\n    valueParser_binaryAfterOpening: [\"Binární operátor \\\"\", \"\\\" po otevírací závroce.\"],\r\n    valueParser_openingAfterLiteral: [\"Otevírací závorka po konstantě \\\"\", \"\\\".\"],\r\n    valueParser_openingAfterReference: [\"Otevírací závorka po referenci sloupce \\\"\", \"\\\".\"],\r\n    valueParser_openingAfterClosing: [\"Otevírací závorka po uzavírací závorce.\"],\r\n    valueParser_closingAfterOperator: [\"Uzavírací závorka po binárním operátoru \\\"\", \"\\\".\"],\r\n    valueParser_closingAfterOpening: [\"Uzavírací závorka po otevírací závroce.\"],\r\n\r\n    stringUtils_missingClosingChar: [\"Chybějící '\", \"' po úvodní '\", \"'.\"],\r\n    stringUtils_charNotFound: [\"Očekávaný znak \\\"\", \"\\\" nenalezen.\"],\r\n\r\n    renameNode_missingArrow: [\"Chybné přejmenování, použijte formát \\\"StarýNázev -> NovýNázev\\\" oddělený čárkami.\"],\r\n    renameNode_invalidNewName: [\"Chybné přejmenování na \\\"\",\r\n        \"\\\". Nový název sloupce musí obsahovat pouze písmena, čísla a podtržítka a začínat písmenem nebo podtržítkem.\"],\r\n    renameNode_keywordNewName: [\"Chybné přejmenování na \\\"\", \"\\\". Nový název nemůže být klíčové slovo.\"],\r\n    renameNode_multipleRenameOfTheColumn: [\"Vícenásobné přejmenování sloupce \\\"\", \"\\\".\"],\r\n\r\n    selectionNode_resultNotBoolean: [\"Výsledek podmínky v selekci \", \" není boolean, ale \", \".\"],\r\n    thetaJoinNode_resultNotBoolean: [\"Výsledek podmínky v theta joinu \", \" není boolean, ale \", \".\"],\r\n\r\n    comparingOperator_differentInputTypes: [\"Vstupy pro \\\"\", \"\\\" nemají stejné typy, ale \", \" a \", \".\"],\r\n    computingOperator_inputTypesNotNumbers: [\"Vstupy pro \\\"\", \"\\\" nejsou čísla, ale \", \" a \", \".\"],\r\n    logicalOperator_leftInputNotBoolean: [\"Levý vstup logického operátoru \\\"\", \"\\\" není boolean, ale \", \".\"],\r\n    logicalOperator_rightInputNotBoolean: [\"Pravý vstup logického operátoru \\\"\", \"\\\" není boolean, ale \", \".\"],\r\n};\r\n\r\nexport const CS: LanguageDef = {\r\n    abbr: \"CS\",\r\n\r\n    relationErrors: {\r\n        emptyColumn: \"Název sloupce nemůže být prázdný\",\r\n        duplicitColumn: \"Duplicitní název sloupce\",\r\n        keywordColumn: \"Název sloupce nemůže být klíčové slovo\",\r\n        invalidColumn: \"Nepovolené znaky v názvu sloupce\",\r\n\r\n        unsupportedNull: \"Null hodonoty nejsou podporovány\",\r\n        invalidNumber: \"Daný řetězec není číslo\",\r\n        invalidBoolean: \"Daný řetězec není boolean\",\r\n    },\r\n\r\n    codeErrors: EN.codeErrors,\r\n\r\n    semanticErrors: semanticErrors,\r\n    semanticError: \"Sémantická chyba: \",\r\n\r\n    syntaxErrors: syntaxErrors,\r\n    syntaxError: \"Syntaktická chyba: \",\r\n\r\n    userMessages: {\r\n        loadedRelationsTotalNo: \"Nyní nejsou v aplikaci nahrané žádné relace.\",\r\n        loadedRelationsTotalSome: \" relací celkově nahráno v aplikaci: \",\r\n        loadRelationNew: \"Relace nahrána do aplikace.\",\r\n        loadAllRelationsNew: [/* number of loaded */ \" relací nahráno do aplikace, \", /* number of skipped */ \" přeskočeno kvůli chybám.\"],\r\n        deleteLoadedRelations: \" relací odebráno.\",\r\n\r\n        relationsExportOK: \"Relace staženy.\",\r\n        relationsExportErr: \"Stahování relací selhalo: \",\r\n        relationsImport: [\" relací nahráno, \", \" souborů přeskočeno.\"],\r\n\r\n        expressionsExportOK: \"Výrazy staženy do souboru.\",\r\n        expressionsExportErr: \"Stahování výrazů selhalo: \",\r\n        expressionsImport: [/* number of expressions */ \" výrazů nahráno z \", /* number of files */ \" souborů (\",\r\n            /* number of skipped expressions */ \" výrazů přeskočeno, \", /* number of skipped files */ \" souborů přeskočeno).\"]\r\n    },\r\n\r\n    operations: {\r\n        selection: \"Selekce\",\r\n        projection: \"Projekce\",\r\n        rename: \"Přejmenování\",\r\n        union: \"Sjednocení\",\r\n        intersection: \"Průnik\",\r\n        difference: \"Rozdíl\",\r\n        naturalJoin: \"Přirozené spojení\",\r\n        cartesianProduct: \"Kartézský součin\",\r\n        leftSemiJoin: \"Levé vnitřní spojení\",\r\n        rightSemiJoin: \"Pravé vnitřní spojení\",\r\n        leftAntijoin: \"Levý antijoin\",\r\n        rightAntijoin: \"Pravý antijoin\",\r\n        thetaJoin: \"Theta spojení\",\r\n        leftThetaSemiJoin: \"Levé theta spojení\",\r\n        rightThetaSemiJoin: \"Pravé theta spojení\",\r\n        fullOuterJoin: \"Plné vnější spojení\",\r\n        leftOuterJoin: \"Levé vnější spojení\",\r\n        rightOuterJoin: \"Pravé vnější spojení\",\r\n        division: \"Dělení\"\r\n    },\r\n\r\n    managementSection: {\r\n        batchButton: \"Batch\",\r\n        loadButton: \"Nahrát\",\r\n        saveButton: \"Uložit\",\r\n        samplesButton: \"Ukázky\",\r\n        samplesMenuTitle: \"Připravené vzorové projekty\",\r\n        settingsButton: \"Nastavení\",\r\n        settingsNullValues: \"Null hodnoty\",\r\n        settingsNullValuesAllowed: \"povoleny\",\r\n        settingsNullValuesForbidden: \"zakázány\",\r\n        settingsCSVSeparator: \"CSV oddělovač\",\r\n        settingsCSVSeparatorSemicolon: \"středník\",\r\n        settingsCSVSeparatorComma: \"čárka\",\r\n        settingsTheme: \"Režim\",\r\n        settingsThemeLight: \"světlý\",\r\n        settingsThemeDark: \"tmavý\",\r\n        settingsLanguage: \"Jazyk\",\r\n        aboutButton: \"O aplikaci\"\r\n    },\r\n\r\n    relationSection: {\r\n        relationSectionHeader: \"Relace\",\r\n        loadAllButton: \"Nahrát všechny\",\r\n        loadAllButtonTooltip: \"Nahraje všechny bezchybné relace do aplikace\",\r\n        removeLoadedButton: \"Odebrat nahrané\",\r\n        removeLoadedButtonTooltip: \"Odebere všechny nahrané relace z aplikace\",\r\n        importButton: \"Import\",\r\n        importButtonTooltip: \"Nahraje nové relace ze souborů\",\r\n        exportButton: \"Export\",\r\n        exportButtonTooltip: \"Stáhne editované relace do souborů\",\r\n        loadButton: \"Nahrát\",\r\n        loadButtonTooltip: \"Nahraje relaci do aplikace\",\r\n        renameButton: \"Přejmenovat\",\r\n        deleteButton: \"Odstranit\",\r\n        deleteButtonTooltip: \"Odstraní vybranou relaci\",\r\n        revertButton: \"Obnovit\",\r\n        revertButtonTooltip: \"Obnoví relaci do posledního nahraného stavu\"\r\n    },\r\n\r\n    expressionSection: {\r\n        expressionSectionHeader: \"Výrazy\",\r\n\r\n        importButton: \"Import\",\r\n        importButtonTooltip: \"Nahraje nové výrazy ze souboru\",\r\n        exportButton: \"Export\",\r\n        exportButtonTooltip: \"Stáhne výrazy do souboru\",\r\n\r\n        evaluateButton: \"Vyhodnotit\",\r\n        evaluateButtonTooltip: \"Vyhodnotí vybraný relační výraz\",\r\n        renameButton: \"Přejmenovat\",\r\n        deleteButton: \"Odstranit\",\r\n        deleteButtonTooltip: \"Odstraní vybraný relační výraz\",\r\n\r\n        expressionTextareaPlaceholder: \"Zde napište svůj relační výraz...\",\r\n\r\n        lineComment: \"Řádkový komentář\",\r\n        blockComment: \"Blokový komentář\"\r\n    },\r\n\r\n    resultSection: {\r\n        resultSectionHeader: \"Výsledek\",\r\n\r\n        exportEvalTreeButton: \"Export\",\r\n        exportEvalTreeButtonTooltip: \"Uloží evaluační strom jako obrázek\",\r\n        evalTreeTitle: \"Evaluační strom pro\",\r\n\r\n        resultRelationTitle: \"Výsledná relace\",\r\n        intermediateRelationTitle: \"Mezivýsledná relace\",\r\n        addButton: \"Přidat\",\r\n        addButtonTooltip: \"Přidá zvolenou relaci mezi editované\",\r\n        exportRelationButton: \"Export\",\r\n        exportRelationButtonTooltip: \"Stáhne zvolenou relaci do souboru\",\r\n    }\r\n}","import {ErrorWithTextRange} from \"./errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Messages for {@link RASyntaxError}.\r\n * The description is a string array - between its members are inserted error parameters (names of invalid relations,\r\n * invalid input parts, etc.). See english language definition for expected structure of each error description.\r\n * @category Errors\r\n * @public\r\n */\r\nexport interface SyntaxErrorMessages {\r\n    // expects 1 part\r\n    exprParser_emptyStringGiven: string[],\r\n    // expects 2 parts\r\n    exprParser_outerJoinWhenNullNotSupported: string[],\r\n    // expects 2 parts\r\n    exprParser_unexpectedPart: string[],\r\n    // expects 4 parts\r\n    exprParser_bothBranchesError: string[],\r\n    // expects 1 part\r\n    exprParser_invalidExpression: string[],\r\n    // expects 1 part\r\n    exprParser_invalidParentheses: string[],\r\n    // expects 2 parts\r\n    exprParser_invalidStart: string[],\r\n    // expects 2 parts\r\n    exprParser_invalidEnd: string[],\r\n    // expects 3 parts\r\n    exprParser_relationAfterRelation: string[],\r\n    // expects 3 parts\r\n    exprParser_relationAfterUnary: string[],\r\n    // expects 2 parts\r\n    exprParser_relationAfterClosing: string[],\r\n    // expects 3 parts\r\n    exprParser_unaryAfterBinary: string[],\r\n    // expects 2 parts\r\n    exprParser_unaryAfterOpening: string[],\r\n    // expects 3 parts\r\n    exprParser_binaryAfterBinary: string[],\r\n    // expects 2 parts\r\n    exprParser_binaryAfterOpening: string[],\r\n    // expects 2 parts\r\n    exprParser_openingAfterRelation: string[],\r\n    // expects 2 parts\r\n    exprParser_openingAfterUnary: string[],\r\n    // expects 1 part\r\n    exprParser_openingAfterClosing: string[],\r\n    // expects 2 parts\r\n    exprParser_closingAfterBinary: string[],\r\n    // expects 1 part\r\n    exprParser_closingAfterOpening: string[],\r\n\r\n    // expects 1 part\r\n    valueParser_emptyInput: string[],\r\n    // expects 1 part\r\n    valueParser_unsupportedNull: string[],\r\n    // expects 2 parts\r\n    valueParser_unexpectedPart: string[],\r\n    // expects 1 part\r\n    valueParser_missingOpeningParenthesis: string[],\r\n    // expects 1 part\r\n    valueParser_missingClosingParenthesis: string[],\r\n    // expects 1 part\r\n    valueParser_invalidExpression: string[],\r\n    // expects 2 parts\r\n    valueParser_invalidStart: string[],\r\n    // expects 2 parts\r\n    valueParser_invalidEnd: string[],\r\n    // expects 3 parts\r\n    valueParser_literalAfterLiteral: string[],\r\n    // expects 3 parts\r\n    valueParser_literalAfterReference: string[],\r\n    // expects 2 parts\r\n    valueParser_literalAfterClosing: string[],\r\n    // expects 3 parts\r\n    valueParser_referenceAfterLiteral: string[],\r\n    // expects 3 parts\r\n    valueParser_referenceAfterReference: string[],\r\n    // expects 2 parts\r\n    valueParser_referenceAfterClosing: string[],\r\n    // expects 3 parts\r\n    valueParser_notAfterLiteral: string[],\r\n    // expects 3 parts\r\n    valueParser_notAfterReference: string[],\r\n    // expects 2 parts\r\n    valueParser_notAfterClosing: string[],\r\n    // expects 3 parts\r\n    valueParser_binaryAfterOperator: string[],\r\n    // expects 2 parts\r\n    valueParser_binaryAfterOpening: string[],\r\n    // expects 2 parts\r\n    valueParser_openingAfterLiteral: string[],\r\n    // expects 2 parts\r\n    valueParser_openingAfterReference: string[],\r\n    // expects 1 part\r\n    valueParser_openingAfterClosing: string[],\r\n    // expects 2 parts\r\n    valueParser_closingAfterOperator: string[],\r\n    // expects 1 part\r\n    valueParser_closingAfterOpening: string[],\r\n\r\n    // expects 3 parts\r\n    stringUtils_missingClosingChar: string[],\r\n    // expects 2 parts\r\n    stringUtils_charNotFound: string[],\r\n\r\n    // expects 1 part\r\n    renameNode_missingArrow: string[],\r\n    // expects 2 parts\r\n    renameNode_invalidNewName: string[],\r\n    // expects 2 parts\r\n    renameNode_keywordNewName: string[],\r\n    // expects 2 parts\r\n    renameNode_multipleRenameOfTheColumn: string[],\r\n\r\n    // expects 3 parts\r\n    selectionNode_resultNotBoolean: string[],\r\n    // expects 3 parts\r\n    thetaJoinNode_resultNotBoolean: string[],\r\n\r\n    // expects 4 parts\r\n    comparingOperator_differentInputTypes: string[],\r\n    // expects 4 parts\r\n    computingOperator_inputTypesNotNumbers: string[],\r\n    // expects 3 parts\r\n    logicalOperator_leftInputNotBoolean: string[],\r\n    // expects 3 parts\r\n    logicalOperator_rightInputNotBoolean: string[]\r\n}\r\n\r\n/**\r\n * Syntax error in an expression structure.\r\n * @extends ErrorWithTextRange\r\n * @category Errors\r\n * @public\r\n */\r\nexport class RASyntaxError extends ErrorWithTextRange {\r\n    /**\r\n     * Creates a new RASyntaxError with the given message.\r\n     *\r\n     * @param msg error message {@type string}\r\n     * @param range optional text range of the error {@type StartEndPair?}\r\n     * @public\r\n     */\r\n    constructor(msg: string, range: StartEndPair | undefined) {\r\n        super(language().syntaxError + msg, range);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, RASyntaxError);\r\n        }\r\n        this.name = 'RASyntaxError';\r\n    }\r\n}","import {ErrorWithTextRange} from \"./errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Messages for {@type RASemanticError}.\r\n * The description is a string array - between its members are inserted error parameters (names of invalid relations,\r\n * invalid input parts, etc.). See english language definition for expected structure of each error description.\r\n * @category Errors\r\n * @public\r\n */\r\nexport interface SemanticErrorMessages {\r\n    // expects 2 parts\r\n    exprParser_relationNotDefined: string[],\r\n\r\n    // expects 3 parts\r\n    binaryNode_commonColumns: string[],\r\n    // expects 4 parts\r\n    setOperationNode_notEqualColumns: string[],\r\n    // expects 3 parts\r\n    divisionNode_rightColumnsNotSubset: string[],\r\n    // expects 3 parts\r\n    divisionNode_rightColumnsNotProperSubset: string[],\r\n    // expects 2 parts\r\n    renameNode_absentOriginalColumn: string[],\r\n    // expects 2 parts\r\n    renameNode_changeToDuplicit: string[],\r\n    // expects 2 parts\r\n    projectionNode_absentColumn: string[],\r\n    // expects part\r\n    projectionNode_emptyProjection: string[],\r\n\r\n    // expects 3 parts\r\n    referenceValue_absentColumn: string[]\r\n}\r\n\r\n/**\r\n * Semantic error in an expression structure.\r\n * @extends ErrorWithTextRange\r\n * @category Errors\r\n * @public\r\n */\r\nexport class RASemanticError extends ErrorWithTextRange {\r\n    /**\r\n     * Creates a new RASemanticError with the given message.\r\n     *\r\n     * @param msg error message {@type string}\r\n     * @param range optional text range of the error {@type StartEndPair?}\r\n     * @public\r\n     */\r\n    constructor(msg: string, range: StartEndPair | undefined) {\r\n        super(language().semanticError + msg, range);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, RASemanticError);\r\n        }\r\n        this.name = 'RASemanticError';\r\n    }\r\n}","/**\r\n * Computes width (average on sample of characters) and its height of the given font with given size in pixels.\r\n *\r\n * @param fontFamily font to use {@type string}\r\n * @param fontSize size to use {@type string}\r\n * @return average width and height of the given font {@type {{fontWidth: number, fontHeight: number}}}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function computeFontSizeInPx(fontFamily: string, fontSize: string): {fontWidth: number, fontHeight: number} {\r\n    const text: string = \"0123456789qwertyuiopasdfghjkllzxcvbnmQWERTYUIOOPASDFGHJKLLZXCVBNM!@#$%^&*()_+[];',./\";\r\n    const div = document.createElement(\"div\");\r\n    div.setAttribute('style', `font-family: ${fontFamily}; font-size: ${fontSize}; position: absolute; white-space: nowrap;`);\r\n    div.innerText = text;\r\n    document.documentElement.appendChild(div);\r\n    const divWidth: number = div.clientWidth;\r\n    const divHeight: number = div.clientHeight;\r\n    div.remove();\r\n    return { fontWidth: divWidth / text.length, fontHeight: divHeight };\r\n}","/**\r\n * Returns start index of the word before the given index in the given string.\r\n *\r\n * @param str string to search in {@type string}\r\n * @param index index before which the word starts {@type number}\r\n * @return start index of the word before the given index in the given string {@type number}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function getStartOfWordBeforeIndex(str: string, index: number): number {\r\n    const prefixText: string = str.slice(0, index);\r\n    let i: number = prefixText.length - 1;\r\n    while (true) {\r\n        // if non-name-character is reached\r\n        if (!prefixText.charAt(i).match(/\\w/)) {\r\n            ++i;\r\n            break;\r\n        }\r\n        if (i === 0) {\r\n            break;\r\n        }\r\n        --i;\r\n    }\r\n    return i;\r\n}\r\n\r\n/**\r\n * Returns sorted given array of whispers with respect to given last word before cursor.\r\n * Matched word parts in the whispers are highlighted by CSS span. Not-matched words are made grey.\r\n *\r\n * @param whispers whispers to sort (not modified) {@type string[]}\r\n * @param wordBeforeCursor string to use for sorting {@type string}\r\n * @return sorted whispers {@type string[]}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function sortWhispers(whispers: string[], wordBeforeCursor: string): string[] {\r\n    // values for sorting whispers\r\n    const startsWithWord: number = 2;\r\n    const containsWord: number = 1;\r\n    // creates help array with whisper likelihoods and highlighted matched parts\r\n    const helpArray: {whisper: string, likelihood: number}[] = whispers.map(whisper => {\r\n        let likelihood = 0;\r\n        const wordStart = whisper.toLowerCase().indexOf(wordBeforeCursor.toLowerCase());\r\n        if (wordStart > -1) {\r\n            likelihood += wordStart === 0 ? startsWithWord : containsWord;\r\n            const wordEnd = wordStart + wordBeforeCursor.length;\r\n            whisper = whisper.slice(0, wordStart) + \"<span class='whisper-matched-word'>\" +\r\n                whisper.slice(wordStart, wordEnd) + \"</span>\" + whisper.slice(wordEnd);\r\n        }\r\n        if (likelihood === 0) {\r\n            whisper = \"<span class='whisper-rejected-word'>\" + whisper + \"</span>\"\r\n        }\r\n        return {whisper, likelihood};\r\n    });\r\n    if (wordBeforeCursor !== \"\") {\r\n        helpArray.sort((x, y) => y.likelihood - x.likelihood);\r\n    }\r\n    return helpArray.map(help => help.whisper);\r\n}","import React from \"react\";\r\nimport './css/xTextArea.css';\r\nimport {mod} from \"../utils/math\";\r\nimport {computeFontSizeInPx} from \"../utils/fontUtils\";\r\nimport {getStartOfWordBeforeIndex} from \"../utils/whisperUtils\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Description of an error located in the input text.\r\n * @category Components\r\n * @public\r\n */\r\nexport interface LocatedError {\r\n    /**\r\n     * index of the first error character\r\n     * @type number\r\n     * @public\r\n     */\r\n    start: number,\r\n    /**\r\n     * index of the last error character\r\n     * @type number\r\n     * @public\r\n     */\r\n    end: number,\r\n    /**\r\n     * error message\r\n     * @type string\r\n     * @public\r\n     */\r\n    msg: string\r\n}\r\n\r\n/**\r\n * Props of XTextArea component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface XTextAreaProps {\r\n    /**\r\n     * id of the component\r\n     * @type string\r\n     * @public\r\n     */\r\n    id: string;\r\n    /**\r\n     * current text content of the textarea\r\n     * @type string\r\n     * @public\r\n     */\r\n    text: string;\r\n    /**\r\n     * text to be shown as textarea placeholder\r\n     * @type string\r\n     * @public\r\n     */\r\n    placeholder: string;\r\n    /**\r\n     * error messages and ranges to be highlighted in text area\r\n     * @type LocatedError[]\r\n     * @public\r\n     */\r\n    errors: LocatedError[];\r\n    /**\r\n     * pairs of parentheses\r\n     * @type StartEndPair[]\r\n     * @public\r\n     */\r\n    parentheses: StartEndPair[];\r\n    /**\r\n     * strings whispered to the user to be added at the current position\r\n     * @type string[]\r\n     * @public\r\n     */\r\n    whispers: string[];\r\n    /**\r\n     * handler of text change\r\n     * @type function\r\n     * @public\r\n     */\r\n    onChange: (text: string, cursorIndex: number) => void;\r\n    /**\r\n     * handler of input with Ctrl key\r\n     * @type function\r\n     * @public\r\n     */\r\n    onCtrlInput: (ev: KeyboardEvent) => void;\r\n    /**\r\n     * true if dark theme should be applied\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    darkTheme: boolean;\r\n}\r\n\r\ninterface XTextAreaState {}\r\n\r\n/**\r\n * HTMLTextAreaElement extended for painting number lines, inserting strings given from parent and whispering.\r\n */\r\ntype ExtendedHTMLTextArea = HTMLTextAreaElement & {\r\n    /**\r\n     * (Re)paints line numbers next to textarea.\r\n     *\r\n     * @param darkTheme style to be applied to numbers\r\n     */\r\n    paintLineNumbers: (darkTheme: boolean) => void,\r\n    // reference to canvas element used to paint line numbers\r\n    canvasLines: HTMLCanvasElement,\r\n    // true when the mouse button is clicked down\r\n    mouseIsDown: boolean,\r\n\r\n    /**\r\n     * Updates textarea content to the given value. Updates number of lines.\r\n     */\r\n    update: (value: string, darkTheme: boolean) => void,\r\n    // number of lines in the textarea\r\n    linesCount: number,\r\n\r\n    /**\r\n     * Whispers given array of strings to the user at the current cursor position.\r\n     *\r\n     * @param toWhisper\r\n     */\r\n    createWhisper: (whispers: string[]) => void,\r\n    /**\r\n     * Moves the WhisperDiv to be located next to the current cursor position.\r\n     * The WhisperDiv is moved only if the whisperDiv.isShown is true.\r\n     */\r\n    moveWhisper: () => void,\r\n    /**\r\n     * Hides the WhisperDiv (whisperDiv.isShown is set to false).\r\n     */\r\n    hideWhisper: () => void,\r\n    /**\r\n     * Inserts current selected whisper.\r\n     *\r\n     * @param onChange callback to the parent after text change\r\n     */\r\n    insertCurrentSelectedWhisper: () => void,\r\n    // true when the whisper should not be shown automatically (e.g., after pressing Enter)\r\n    notAutoShowWhisper: boolean,\r\n    // reference to whisper div\r\n    whisperDiv: WhisperDiv,\r\n\r\n    /**\r\n     * Creates error div elements for given ranges.\r\n     */\r\n    updateErrors: (ranges: LocatedError[]) => void,\r\n    /**\r\n     * Moves error div elements to current position.\r\n     */\r\n    moveErrors: () => void,\r\n    // div elements for highlighting errors\r\n    errorDivs: ErrorDiv[],\r\n\r\n    /**\r\n     * Creates parentheses div elements for parentheses next to the cursor.\r\n     */\r\n    updateParentheses: () => void,\r\n    /**\r\n     * Moves parentheses div elements to current position.\r\n     */\r\n    moveParentheses: () => void,\r\n    // positions of parentheses pairs in text\r\n    parentheses: StartEndPair[],\r\n    // div elements for highlighting parentheses\r\n    parenthesesDivs: ParenthesesDiv[],\r\n\r\n    /**\r\n     * Insert given pair of symbols at the cursor position. If a part of text is selected, it inserts the first symbol\r\n     * before it and the second symbol after it.\r\n     */\r\n    insertPairSymbol: (first: string, second: string) => void,\r\n    /**\r\n     * Deletes characters before and after the cursor if the adjacent characters are pair symbols: (), [], <>, \"\".\r\n     * If the pair was deleted, returns true, otherwise returns false.\r\n     */\r\n    checkPairSymbolDelete: () => boolean\r\n};\r\n\r\n/**\r\n * HTMLDivElement extended by functions for easy whispering.\r\n */\r\ntype WhisperDiv = HTMLDivElement & {\r\n    // true when the whisper should be shown\r\n    isShown: boolean,\r\n    // index of the selected whisper\r\n    selectedIndex: number,\r\n    /**\r\n     * Updates selected whisper by given difference. Removes highlights from previous highlighted whisper and\r\n     * highlights the new selected. The new index is modulo actual whisper count. The function does nothing, when\r\n     * there no whispers at the moment.\r\n     *\r\n     * @param indexDiff\r\n     */\r\n    changeSelected: (indexDiff: number) => void,\r\n    /**\r\n     * Updates selected whisper to given index. Removes highlights from previous highlighted whisper and\r\n     * highlights the new selected. The new index is modulo actual whisper count. The function does nothing, when\r\n     * there no whispers at the moment.\r\n     *\r\n     * @param newIndex\r\n     */\r\n    setSelected: (newIndex: number) => void,\r\n    /**\r\n     * Returns current selected whisper or undefined, when no whisper is selected.\r\n     */\r\n    getSelectedWhisper: () => string | undefined\r\n};\r\n\r\n/**\r\n * HTMLDivElement extended by data for error highlighting.\r\n */\r\ntype ErrorDiv = HTMLDivElement & {\r\n    startLine: number,\r\n    startColumn: number,\r\n    rangeLength: number,\r\n    messageSpan: HTMLSpanElement\r\n}\r\n\r\n/**\r\n * HTMLDivElement extended by data for parentheses highlighting.\r\n */\r\ntype ParenthesesDiv = HTMLDivElement & {\r\n    startLine: number,\r\n    startColumn: number\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\n\r\nconst fontSize: string = cssConstants.getPropertyValue('--x-textarea-font-size');\r\nconst fontFamily: string = cssConstants.getPropertyValue('--x-textarea-font-family');\r\nconst {fontWidth} = computeFontSizeInPx(fontFamily, fontSize);\r\nconst lineHeight: number = Number(cssConstants.getPropertyValue('--x-textarea-line-height'));\r\nconst numsBackgroundLight: string = cssConstants.getPropertyValue('--light-color-b');\r\nconst numsBackgroundDark: string = cssConstants.getPropertyValue('--dark-color-b');\r\nconst numsColorLight: string = cssConstants.getPropertyValue('--text-color-light');\r\nconst numsColorDark: string = cssConstants.getPropertyValue('--text-color-dark');\r\nconst canvasWidth: number = 24;\r\n\r\n/**\r\n * TextArea extended by line numbers and text highlighting. The component is maintained by JavaScript HTML functions,\r\n * not by React.\r\n * Accepts {@link XTextAreaProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class XTextArea extends React.Component<XTextAreaProps, XTextAreaState> {\r\n    // @ts-ignore - always set before usage in componentDidMount\r\n    private textarea: ExtendedHTMLTextArea;\r\n\r\n    /**\r\n     * Returns current text area selection start and end.\r\n     * @return current text area selection start and end {@type StartEndPair}\r\n     * @public\r\n     */\r\n    public getSelection(): StartEndPair {\r\n        return {start: this.textarea.selectionStart, end: this.textarea.selectionEnd};\r\n    }\r\n\r\n    /**\r\n     * Sets text area selection start and end. If end is not given, start value is used as end value as well.\r\n     *\r\n     * @param start start index {@type number}\r\n     * @param end end index {@type number}\r\n     * @public\r\n     */\r\n    public setSelection(start: number, end?: number): void {\r\n        this.textarea.setSelectionRange(start, end ? end : start);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the textarea has focus.\r\n     * @return true if the textarea has focus {@type boolean}\r\n     * @public\r\n     */\r\n    public isFocused(): boolean {\r\n        return document.activeElement !== null && document.activeElement.id === this.props.id + '-ta';\r\n    }\r\n\r\n    /**\r\n     * The text area gains focus in the window.\r\n     * @public\r\n     */\r\n    public focus(): void {\r\n        this.textarea.focus();\r\n    }\r\n\r\n    /**\r\n     * Sets the given placeholder in the textarea.\r\n     * @param placeholder placeholder to be set\r\n     * @public\r\n     */\r\n    public setPlaceholder(placeholder: string): void {\r\n        this.textarea.placeholder = placeholder;\r\n    }\r\n\r\n    /**\r\n     * The component is build by JavaScript HTML functions after mount of the empty div in render function.\r\n     */\r\n    componentDidMount() {\r\n        const props: Readonly<XTextAreaProps> = this.props;\r\n        // @ts-ignore - gets parent div\r\n        const div: HTMLDivElement = document.getElementById(props.id);\r\n\r\n        // LAYOUT (table with 1 row and 2 columns)\r\n        const table = document.createElement('table');\r\n        table.setAttribute('cellspacing','0');\r\n        table.setAttribute('cellpadding','0');\r\n        table.classList.add('x-textarea-table');\r\n        const tr = document.createElement('tr');\r\n        const td1 = document.createElement('td');\r\n        td1.setAttribute('id', props.id + '-td1');\r\n        td1.classList.add('x-textarea-table-td1');\r\n        const td2 = document.createElement('td');\r\n        td2.classList.add('x-textarea-table-td2');\r\n        tr.appendChild(td1);\r\n        tr.appendChild(td2);\r\n        table.appendChild(tr);\r\n\r\n        // TEXTAREA\r\n        // @ts-ignore - extended later in componentDidMount\r\n        const ta: ExtendedHTMLTextArea = document.createElement('textarea');\r\n        ta.setAttribute('id', props.id + '-ta');\r\n        ta.setAttribute('spellcheck', 'false');\r\n        ta.mouseIsDown = false;\r\n        ta.setAttribute('placeholder', this.props.placeholder);\r\n        ta.classList.add('x-textarea', 'scrollbar-container');\r\n        ta.value = props.text;\r\n\r\n        // TEXTAREA NUMBERS (Canvas)\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = canvasWidth + 4;    // must not set width & height in css !!!\r\n        canvas.classList.add('x-textarea-canvas');\r\n        ta.canvasLines = canvas;\r\n        td1.appendChild(canvas);\r\n        td2.appendChild(ta);\r\n        div.appendChild(table);\r\n\r\n        // TEXTAREA WHISPER DIV\r\n        // @ts-ignore - extended later in componentDidMount\r\n        const whisperDiv: WhisperDiv = document.createElement('div');\r\n        whisperDiv.classList.add('whisper-div');\r\n        whisperDiv.isShown = false;\r\n        whisperDiv.selectedIndex = -1;\r\n        whisperDiv.changeSelected = function (indexDiff: number) {\r\n            this.setSelected(this.selectedIndex + indexDiff);\r\n        }\r\n        whisperDiv.setSelected = function (newIndex: number) {\r\n            if (this.childElementCount > 0) {\r\n                // removes selected highlight from previous selected whisper (if it is valid)\r\n                if (this.selectedIndex > -1 && this.selectedIndex < this.childElementCount) {\r\n                    this.children[this.selectedIndex].classList.remove(\"selected-whisper\");\r\n                }\r\n                // updates the index modulo child count\r\n                this.selectedIndex = mod(newIndex, this.childElementCount);\r\n                // adds selected highlight\r\n                this.children[this.selectedIndex].classList.add(\"selected-whisper\");\r\n            }\r\n        }\r\n        whisperDiv.getSelectedWhisper = function (): string | undefined {\r\n            if (this.selectedIndex > -1 && this.childElementCount > 0) {\r\n                // @ts-ignore\r\n                return this.children[this.selectedIndex].innerText;\r\n            }\r\n            return undefined;\r\n        }\r\n        ta.whisperDiv = whisperDiv;\r\n        td2.appendChild(whisperDiv);\r\n\r\n        // Line numbers rendering inspired by: https://www.w3schools.com/code/tryit.asp?filename=G68VMFWS12UH,\r\n        // Nikola Bozovic, nigerija@gmail.com\r\n        ta.paintLineNumbers = function(darkTheme: boolean): void {\r\n            try {\r\n                const canvas = this.canvasLines;\r\n                if (canvas.height !== this.clientHeight) {\r\n                    canvas.height = this.clientHeight; // on resize\r\n                }\r\n                // @ts-ignore\r\n                const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\r\n                ctx.fillStyle = darkTheme ? numsBackgroundDark : numsBackgroundLight;\r\n                ctx.fillRect(0, 0, canvasWidth + 2, this.scrollHeight + 1);\r\n                ctx.fillStyle = darkTheme ? numsColorDark : numsColorLight;\r\n                ctx.font = fontSize + \" \" + fontFamily;\r\n                for (let i = 0; i < this.linesCount; i++) {\r\n                    const text = \"\" + (i + 1);  // line number\r\n                    ctx.fillText(text,canvasWidth - (text.length * 8), 19 + (i * lineHeight));\r\n                }\r\n            }\r\n            catch(e) {\r\n                console.log('XTextArea paintLineNumbers error: ' + e);\r\n            }\r\n        };\r\n\r\n        ta.update = function (value: string, darkTheme: boolean) {\r\n            this.value = value;\r\n            // computes lines count\r\n            let lines: number = 1;\r\n            for (let i = 0; i < value.length; ++i) {\r\n                if (value.charAt(i) === \"\\n\") {\r\n                    ++lines;\r\n                }\r\n            }\r\n            this.linesCount = lines;\r\n            // set height to fit all lines\r\n            this.style.height = (lines * lineHeight + 8) + \"px\";\r\n            // if the horizontal scrollbar is visible, fits it into the height\r\n            if (this.scrollHeight > this.clientHeight) {\r\n                this.style.height = (this.scrollHeight + lineHeight + 10) + \"px\";\r\n            }\r\n            this.paintLineNumbers(darkTheme);\r\n            this.updateParentheses();\r\n        }\r\n\r\n        ta.createWhisper = function (whispers: string[]): void {\r\n            if (whispers.length === 0) {\r\n                this.hideWhisper();\r\n            }\r\n            else {\r\n                this.whisperDiv.innerHTML = \"\";\r\n                whispers.forEach((whisper, i) => {\r\n                    const div = document.createElement(\"div\");\r\n                    div.innerHTML = whisper;\r\n                    div.onclick = event => {\r\n                        this.focus();\r\n                        this.whisperDiv.setSelected(i);\r\n                        event.stopPropagation();\r\n                    };\r\n                    div.ondblclick = event => {\r\n                        this.focus();\r\n                        this.insertCurrentSelectedWhisper();\r\n                        this.notAutoShowWhisper = true;\r\n                        event.stopPropagation();\r\n                    };\r\n                    this.whisperDiv.appendChild(div);\r\n                });\r\n                // selects the first whisper after change\r\n                this.whisperDiv.setSelected(0);\r\n                // needs to be set to true before moveWhisper call\r\n                this.whisperDiv.isShown = true;\r\n                // sets the div position\r\n                this.moveWhisper();\r\n            }\r\n        }\r\n\r\n        ta.moveWhisper = function () {\r\n            // updates only if the whisper is shown\r\n            if (this.whisperDiv.isShown) {\r\n                // finds cursor position in the whole string\r\n                const cursorLineAndColumn = getPositionLineAndColumn(this.value, this.selectionEnd);\r\n                // computes position of the bottom end of the cursor relative to the text\r\n                const cursorDistanceFromTATotalTop: number = (cursorLineAndColumn.line + 1) * lineHeight;\r\n                const cursorDistanceFromTATotalLeft: number = cursorLineAndColumn.column * fontWidth;\r\n                const yPos: number = cursorDistanceFromTATotalTop - this.scrollTop;\r\n                const xPos: number = cursorDistanceFromTATotalLeft - this.scrollLeft + 4;\r\n                // shows the div at computed position if the cursor is visible\r\n                if (0 <= yPos && yPos < this.clientHeight && 0 <= xPos && xPos < this.clientWidth) {\r\n                    // if the div is in the upper part of the screen, shows it under the cursor\r\n                    if (this.getBoundingClientRect().y + yPos <= window.innerHeight / 2) {\r\n                        this.whisperDiv.setAttribute('style', `display: block; top: ${yPos + 4}px; left: ${xPos}px;`);\r\n                    }\r\n                    // if the div is in the lower part of the screen, shows it above the cursor\r\n                    else {\r\n                        this.whisperDiv.setAttribute('style',\r\n                            `display: block; bottom: ${this.getBoundingClientRect().height - yPos + lineHeight}px; left: ${xPos}px;`);\r\n                    }\r\n                }\r\n                // hides the div if the cursor is not visible (but DOES NOT SET whisperDiv.isShown to false to re-appear it again)\r\n                else {\r\n                    this.whisperDiv.setAttribute('style', `display: none;`);\r\n                }\r\n            }\r\n        }\r\n\r\n        ta.hideWhisper = function () {\r\n            //whisperDiv.innerHTML = '';\r\n            this.whisperDiv.setAttribute('style', 'display: none;');\r\n            this.whisperDiv.isShown = false;\r\n        }\r\n\r\n        ta.insertCurrentSelectedWhisper = function () {\r\n            const currWhisper: string | undefined = this.whisperDiv.getSelectedWhisper();\r\n            if (currWhisper !== undefined) {\r\n                const i: number = getStartOfWordBeforeIndex(this.value, this.selectionEnd);\r\n                const beforeAdd: string = this.value.slice(0, i);\r\n                const afterAdd: string = this.value.slice(this.selectionEnd);\r\n                const newCursorPos: number = i + currWhisper.length;\r\n                props.onChange(beforeAdd + currWhisper + afterAdd, newCursorPos);\r\n                this.setSelectionRange(newCursorPos, newCursorPos);\r\n                this.hideWhisper();\r\n            }\r\n        }\r\n\r\n        ta.notAutoShowWhisper = false;\r\n\r\n        // TEXTAREA ERROR RANGE HIGHLIGHTS\r\n        ta.errorDivs = [];\r\n\r\n        ta.moveErrors = function () {\r\n            this.errorDivs.forEach(highlight => {\r\n                // computes position of the highlight relative to the text\r\n                const yPos: number = (highlight.startLine + 1) * lineHeight + 1 - this.scrollTop;\r\n                // shows the div at computed position if the line is visible\r\n                if (1 < yPos && yPos < this.clientHeight) {\r\n                    let width: number = highlight.rangeLength * fontWidth;\r\n                    let xPos: number = highlight.startColumn * fontWidth + 7 - this.scrollLeft;\r\n                    // if the whole highlight is out of the width, does not display it\r\n                    if (xPos > this.clientWidth || xPos + width < 3) {\r\n                        highlight.setAttribute('style', `display: none;`);\r\n                    }\r\n                    else {\r\n                        // updates position of highlights starting before first visible column\r\n                        if (xPos < 3) {\r\n                            width += xPos - 3;\r\n                            xPos = 3;\r\n                        }\r\n                        // updates width of highlights ending after last visible column\r\n                        if (xPos + width > this.clientWidth) {\r\n                            width = this.clientWidth - xPos;\r\n                        }\r\n                        // updates the position of message span when the highlight is on the right side of the screen\r\n                        if (this.getBoundingClientRect().x + xPos >= window.innerWidth / 2) {\r\n                            highlight.messageSpan.setAttribute('style', `right: 50%; left: unset;`);\r\n                        }\r\n                        highlight.setAttribute('style', `display: block; top: ${yPos}px; left: ${xPos}px; width: ${width}px`);\r\n                    }\r\n                }\r\n                // hides the div if the line is not visible\r\n                else {\r\n                    highlight.setAttribute('style', `display: none;`);\r\n                }\r\n            });\r\n        }\r\n\r\n        ta.updateErrors = function (ranges: LocatedError[]) {\r\n            // removes old highlight divs\r\n            this.errorDivs.forEach(highlight => {\r\n                highlight.remove();\r\n            });\r\n            this.errorDivs = [];\r\n\r\n            // appends the highlight div as textarea child and adds it to highlights array\r\n            const pushHighlight = (highlight: ErrorDiv) => {\r\n                // @ts-ignore - adds it to the parent element\r\n                this.parentElement.appendChild(highlight);\r\n                this.errorDivs.push(highlight);\r\n            }\r\n\r\n            ranges.forEach(range => {\r\n                // finds highlight start and end lines and columns\r\n                const start = getPositionLineAndColumn(this.value, range.start);\r\n                const end = getPositionLineAndColumn(this.value, range.end);\r\n                // error on one line only\r\n                if (start.line === end.line) {\r\n                    pushHighlight(createHighlightDiv(start.line, start.column, end.column - start.column,\r\n                        range.msg, this));\r\n                }\r\n                // error on multiple lines\r\n                else {\r\n                    // pushes first line part - from error start to line end\r\n                    pushHighlight(createHighlightDiv(start.line, start.column,\r\n                        getLineLength(this.value, start.line) - start.column, range.msg, this));\r\n                    // pushes middle lines\r\n                    for (let line = start.line + 1; line < end.line; ++line) {\r\n                        pushHighlight(createHighlightDiv(line, 0, getLineLength(this.value, line),\r\n                            range.msg, this));\r\n                    }\r\n                    // pushes last line part - from line start to error end\r\n                    pushHighlight(createHighlightDiv(end.line, 0, end.column, range.msg, this));\r\n                }\r\n            });\r\n\r\n            // moves highlight to current positions\r\n            this.moveErrors();\r\n        }\r\n\r\n        ta.parentheses = [];\r\n        ta.parenthesesDivs = [];\r\n\r\n        ta.updateParentheses = function () {\r\n            ta.parenthesesDivs.forEach(div => {\r\n                div.remove();\r\n            });\r\n            ta.parenthesesDivs = [];\r\n            if (ta.selectionStart === ta.selectionEnd) {\r\n                const c1 = ta.selectionStart;\r\n                const c2 = c1 - 1;\r\n                const around = ta.parentheses.filter(p => p.start === c1 || p.start === c2 || p.end === c1 || p.end === c2);\r\n                // true when the first pair is processed\r\n                let first = true;\r\n                around.forEach(parentheses => {\r\n                    // finds highlight start and end lines and columns\r\n                    const start = getPositionLineAndColumn(ta.value, parentheses.start);\r\n                    const end = getPositionLineAndColumn(ta.value, parentheses.end);\r\n                    const div1 = createParenthesesDiv(start.line, start.column, ta);\r\n                    const div2 = createParenthesesDiv(end.line, end.column, ta);\r\n                    // @ts-ignore\r\n                    ta.parentElement.appendChild(div1);\r\n                    // @ts-ignore\r\n                    ta.parentElement.appendChild(div2);\r\n                    ta.parenthesesDivs.push(div1);\r\n                    ta.parenthesesDivs.push(div2);\r\n                    // changes color to distinguish two pairs\r\n                    div1.classList.toggle('first-pair', first);\r\n                    div1.classList.toggle('second-pair', !first);\r\n                    div2.classList.toggle('first-pair', first);\r\n                    div2.classList.toggle('second-pair', !first);\r\n                    first = false;\r\n                });\r\n                ta.moveParentheses();\r\n            }\r\n        }\r\n\r\n        ta.moveParentheses = function () {\r\n            ta.parenthesesDivs.forEach(div => {\r\n                // computes position of the highlight relative to the text\r\n                const yPos: number = (div.startLine + 1) * lineHeight + 1 - this.scrollTop;\r\n                // shows the div at computed position if the line is visible\r\n                if (1 < yPos && yPos < this.clientHeight) {\r\n                    let width: number = fontWidth;\r\n                    let xPos: number = div.startColumn * fontWidth + 7 - this.scrollLeft;\r\n                    // if the whole highlight is out of the width, does not display it\r\n                    if (xPos > this.clientWidth || xPos + width < 3) {\r\n                        div.setAttribute('style', `display: none;`);\r\n                    }\r\n                    else {\r\n                        // updates position of highlights starting before first visible column\r\n                        if (xPos < 3) {\r\n                            width += xPos - 3;\r\n                            xPos = 3;\r\n                        }\r\n                        // updates width of highlights ending after last visible column\r\n                        if (xPos + width > this.clientWidth) {\r\n                            width = this.clientWidth - xPos;\r\n                        }\r\n                        div.setAttribute('style', `display: block; top: ${yPos}px; left: ${xPos}px; width: ${width}px`);\r\n                    }\r\n                }\r\n                // hides the div if the line is not visible\r\n                else {\r\n                    div.setAttribute('style', `display: none;`);\r\n                }\r\n            });\r\n        }\r\n\r\n        ta.insertPairSymbol = function (first: string, second: string) {\r\n            const before: string = ta.value.slice(0, this.selectionStart);\r\n            const between: string = ta.value.slice(this.selectionStart, this.selectionEnd)\r\n            const after: string = ta.value.slice(this.selectionEnd);\r\n            const newCursorPos: number = ta.selectionEnd + 1;\r\n            props.onChange(before + first + between + second + after, newCursorPos);\r\n            this.setSelectionRange(newCursorPos, newCursorPos);\r\n            this.hideWhisper();\r\n        }\r\n\r\n        ta.checkPairSymbolDelete = function (): boolean {\r\n            // only if nothing is selected\r\n            if (ta.selectionStart === ta.selectionEnd) {\r\n                const prevI = ta.selectionStart - 1;\r\n                const nextI = ta.selectionStart;\r\n                if (0 <= prevI && nextI < ta.value.length) {\r\n                    const prev = this.value.charAt(prevI);\r\n                    const next = this.value.charAt(nextI);\r\n                    // if the cursor is between pair symbol\r\n                    if ((prev === '(' && next === ')') || (prev === '[' && next === ']') ||\r\n                      (prev === '\"' && next === '\"' && this.value.charAt(prevI - 1) !== '\\\\')) {\r\n                        const before: string = ta.value.slice(0, prevI);\r\n                        const after: string = ta.value.slice(nextI + 1);\r\n                        props.onChange(before + after, prevI);\r\n                        this.setSelectionRange(prevI, prevI);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // handles whisper div position when scrolling on page\r\n        window.addEventListener('scroll', () => ta.moveWhisper());\r\n        window.addEventListener('resize', () => {\r\n            ta.moveWhisper();\r\n            ta.moveErrors();\r\n            ta.moveParentheses();\r\n        });\r\n        window.addEventListener('click', () => ta.hideWhisper());\r\n        ta.onscroll     = () => {\r\n            ta.paintLineNumbers(this.props.darkTheme);\r\n            ta.moveWhisper();\r\n            ta.moveErrors();\r\n            ta.moveParentheses();\r\n        };\r\n        ta.onmousedown  = event => {\r\n            ta.mouseIsDown = true;\r\n            setTimeout(ta.updateParentheses, 0);\r\n            event.stopPropagation();\r\n        }\r\n        ta.onmouseup    = () => {\r\n            ta.mouseIsDown = false;\r\n            ta.paintLineNumbers(this.props.darkTheme);\r\n            setTimeout(ta.updateParentheses, 0);\r\n        };\r\n        ta.onmousemove  = () => {\r\n            if (ta.mouseIsDown) ta.paintLineNumbers(this.props.darkTheme);\r\n        };\r\n        ta.oninput      = (ev) => {\r\n            // @ts-ignore\r\n            this.props.onChange(ev.target.value, ev.target.selectionStart);\r\n        }\r\n        // prevents default behavior of special keys input when whisperDiv is shown, passes key event to the parent\r\n        ta.onkeydown    = (ev) => {\r\n            if (ta.whisperDiv.isShown) {\r\n                if (ev.key === \"ArrowDown\") {\r\n                    ta.whisperDiv.changeSelected(1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"ArrowUp\") {\r\n                    ta.whisperDiv.changeSelected(-1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"PageDown\") {\r\n                    // moves selected whisper to bottom\r\n                    ta.whisperDiv.setSelected(-1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"PageUp\") {\r\n                    // moves selected whisper to top\r\n                    ta.whisperDiv.setSelected(0);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"End\" || ev.key === \"Home\") {\r\n                    ta.hideWhisper();\r\n                    // keeps default behaviour\r\n                }\r\n                if (ev.key === \"Escape\" || ev.key === \"Esc\") {\r\n                    ta.hideWhisper();\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Enter\" && !ev.ctrlKey) {\r\n                    ta.insertCurrentSelectedWhisper();\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Enter\" && ev.ctrlKey) {\r\n                    ta.hideWhisper();\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Tab\") {\r\n                    ta.insertCurrentSelectedWhisper();\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"ArrowLeft\") {\r\n                    const cursor = (ta.selectionStart === 0) ? 0 : (ta.selectionStart - 1);\r\n                    // forces update to recompute whispers if needed\r\n                    this.props.onChange(ta.value, cursor);\r\n                    // keeps default behaviour\r\n                }\r\n                if (ev.key === \"ArrowRight\") {\r\n                    const cursor = (ta.selectionStart === ta.value.length) ? ta.selectionStart : ta.selectionStart + 1;\r\n                    // forces update to recompute whispers if needed\r\n                    this.props.onChange(ta.value, cursor);\r\n                    // keeps default behaviour\r\n                }\r\n            }\r\n            if (ev.key === \"Enter\" || ev.key === \"Tab\") {\r\n                // does not show whisper after pressing Enter or Tab\r\n                ta.notAutoShowWhisper = true;\r\n            }\r\n            if (ev.key === \"Backspace\" && !ta.whisperDiv.isShown) {\r\n                // does not show whisper after pressing Backspace when it is closed\r\n                ta.notAutoShowWhisper = true;\r\n            }\r\n            if (ev.ctrlKey) {\r\n                if (ev.key === \" \") {\r\n                    if (ta.whisperDiv.isShown) {\r\n                        ta.hideWhisper();\r\n                    }\r\n                    else {\r\n                        this.props.onChange(ta.value, ta.selectionStart);\r\n                    }\r\n                }\r\n                this.props.onCtrlInput(ev);\r\n            }\r\n            if (ev.key === \"ArrowLeft\" || ev.key === \"ArrowRight\" || ev.key === \"ArrowUp\" || ev.key === \"ArrowDown\" ||\r\n                ev.key === \"Home\" || ev.key === \"End\" || ev.key === \"PageUp\" || ev.key === \"PageDown\") {\r\n                setTimeout(ta.updateParentheses, 0);\r\n            }\r\n            if (ev.key === \"(\") {\r\n                ta.insertPairSymbol(\"(\", \")\");\r\n                ev.preventDefault();\r\n            }\r\n            if (ev.key === \"[\") {\r\n                ta.insertPairSymbol(\"[\", \"]\");\r\n                ev.preventDefault();\r\n            }\r\n            if (ev.key === '\"' && ta.value.charAt(ta.selectionStart - 1) !== \"\\\\\") {\r\n                ta.insertPairSymbol('\"', '\"');\r\n                ev.preventDefault();\r\n            }\r\n            // if the text area deletes pair symbol, default backspace behavior is prevented\r\n            if (ev.key === \"Backspace\" && ta.checkPairSymbolDelete()) {\r\n                ev.preventDefault();\r\n            }\r\n        }\r\n\r\n        // make sure numbers are painted\r\n        ta.update(this.props.text, this.props.darkTheme);\r\n        // shows highlights\r\n        ta.updateErrors(this.props.errors);\r\n        this.textarea = ta;\r\n    }\r\n\r\n    /**\r\n     * Updates text content and component style.\r\n     */\r\n    componentDidUpdate(prevProps: Readonly<XTextAreaProps>) {\r\n        this.textarea.update(this.props.text, this.props.darkTheme);\r\n        if (prevProps.darkTheme !== this.props.darkTheme) {\r\n            this.textarea.paintLineNumbers(this.props.darkTheme);\r\n        }\r\n        // whispers\r\n        if (this.props.whispers !== prevProps.whispers) {\r\n            if (this.textarea.notAutoShowWhisper) {\r\n                this.textarea.notAutoShowWhisper = false;\r\n            }\r\n            else {\r\n                this.textarea.createWhisper(this.props.whispers);\r\n            }\r\n        }\r\n        // highlights error\r\n        if (this.props.errors !== undefined) {\r\n            this.textarea.updateErrors(this.props.errors);\r\n        }\r\n        // first undefined highlight removes 'x-textarea-err' from textarea.className to show selection with blue color\r\n        else if (this.props.errors !== prevProps.errors) {\r\n            this.textarea.classList.remove('x-textarea-err');\r\n        }\r\n        // highlights parentheses\r\n        if (this.props.parentheses !== prevProps.parentheses) {\r\n            this.textarea.parentheses = this.props.parentheses;\r\n            this.textarea.updateParentheses();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders only an empty div. Other maintaining is not provided by React.\r\n     */\r\n    public render() {\r\n        return <div id={this.props.id} className=\"x-textarea-div\" />;\r\n    }\r\n}\r\n\r\n/**\r\n * Computes line and column number for given position in text.\r\n */\r\nfunction getPositionLineAndColumn(text: string, position: number): {line: number, column: number} {\r\n    const textBeforeCursor: string = text.slice(0, position);\r\n    const line: number = (textBeforeCursor.match(/\\n/g) || []).length;\r\n    const lastNewLine: number = textBeforeCursor.lastIndexOf('\\n');\r\n    const column: number = textBeforeCursor.length - lastNewLine - 1;\r\n    return {line, column};\r\n}\r\n\r\n/**\r\n * Returns number of characters on the given line.\r\n */\r\nfunction getLineLength(text: string, line: number): number {\r\n    let newLinesFound = 0;\r\n    let lineStart = 0;  // index of line-th newline\r\n    let lineEnd = 0;    // index of (line+1)-th newline\r\n    for (let i = 0; i < text.length; ++i) {\r\n        if (text.charAt(i) === '\\n') {\r\n            ++newLinesFound;\r\n            if (newLinesFound === line) {\r\n                lineStart = i;\r\n            }\r\n            else if (newLinesFound === line + 1) {\r\n                lineEnd = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (lineEnd === 0) {\r\n        lineEnd = text.length; // handles case of last line in text\r\n    }\r\n    return lineEnd - lineStart;\r\n}\r\n\r\n/**\r\n * Creates a div for highlighting errors in the given textarea.\r\n */\r\nfunction createHighlightDiv(startLine: number, startColumn: number, rangeLength: number, msg: string,\r\n                            textarea: ExtendedHTMLTextArea): ErrorDiv {\r\n    // @ts-ignore\r\n    const highlight: ErrorDiv = document.createElement('div');\r\n    highlight.classList.add(\"x-textarea-highlight\");\r\n    highlight.startLine = startLine;\r\n    highlight.startColumn = startColumn;\r\n    highlight.rangeLength = rangeLength;\r\n    // dispatches click event to not block textarea underneath highlights\r\n    highlight.onclick = (ev: MouseEvent) => {\r\n        const newEvent: MouseEvent = new MouseEvent(ev.type, {...ev});\r\n        textarea.dispatchEvent(newEvent);\r\n        ev.stopPropagation();\r\n    }\r\n    const span: HTMLSpanElement = document.createElement('span');\r\n    span.classList.add(\"highlight-tooltip\");\r\n    span.innerText = msg;\r\n    highlight.messageSpan = span;\r\n    highlight.appendChild(span);\r\n    return highlight;\r\n}\r\n\r\n/**\r\n * Creates a div for highlighting parentheses in the given textarea.\r\n */\r\nfunction createParenthesesDiv(startLine: number, startColumn: number, textarea: ExtendedHTMLTextArea): ParenthesesDiv {\r\n    // @ts-ignore\r\n    const div: ParenthesesDiv = document.createElement('div');\r\n    div.classList.add(\"x-textarea-parentheses\");\r\n    div.startLine = startLine;\r\n    div.startColumn = startColumn;\r\n    // dispatches click event to not block textarea underneath highlights\r\n    div.onclick = (ev: MouseEvent) => {\r\n        const newEvent: MouseEvent = new MouseEvent(ev.type, {...ev});\r\n        textarea.dispatchEvent(newEvent);\r\n        ev.stopPropagation();\r\n    }\r\n    return div;\r\n}","/**\r\n * Modulo operation with positive result for negative numbers (as % in JavaScript can give negative results).\r\n *\r\n * @param n base number {@type number}\r\n * @param m dividing number {@type number}\r\n * @return n modulo m {@type number}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function mod(n: number, m: number): number {\r\n    return ((n % m) + m) % m;\r\n}","import {Row} from \"./row\";\r\nimport {SupportedColumnType} from \"./columnType\";\r\nimport {isEqual} from \"lodash\";\r\n\r\n/**\r\n * Formal relational algebra relation. It contains relational schema (set of column names and types)\r\n * and data tuples (set of rows). For editable representation which may happen to be invalid, use {@link StoredRelation}.\r\n *\r\n * @category Relation\r\n * @public\r\n */\r\nexport class Relation {\r\n\r\n    public readonly name: string;\r\n    private columns = new Map<string, SupportedColumnType>();\r\n    private columnNames: string[] = []; // array to have an ordered printing of columns\r\n    private rows: Row[] = [];\r\n    private finishedSchema = false;\r\n\r\n    /**\r\n     * Creates an empty relation of the given name.\r\n     *\r\n     * @param name name of the relation {@type string}\r\n     * @public\r\n     */\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Returns name of the relation.\r\n     *\r\n     * @return relation name {@type string}\r\n     * @public\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the relational schema is finished (no more columns can be added).\r\n     *\r\n     * @return true if the relational schema is finished (no more columns can be added) {@type boolean}\r\n     * @public\r\n     */\r\n    public hasFinishedSchema(): boolean {\r\n        return this.finishedSchema;\r\n    }\r\n\r\n    /**\r\n     * Sets the relational schema finished (no more columns can be added).\r\n     * @public\r\n     */\r\n    public finishSchema(): void {\r\n        this.finishedSchema = true;\r\n    }\r\n\r\n    /**\r\n     * Adds a column to a relational schema if the relational schema is not finished yet.\r\n     *\r\n     * @param name name of the column {@type string}\r\n     * @param type type of the column {@type SupportedColumnType}\r\n     * @return true if the column was added (relation did not contain a column with the same name before) {@type boolean}\r\n     * @public\r\n     */\r\n    public addColumn(name: string, type: SupportedColumnType): boolean {\r\n        if (!this.hasColumn(name) && !this.hasFinishedSchema()) {\r\n            this.columns.set(name, type);\r\n            this.columnNames.push(name);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the relation has a column with the same name\r\n     * (NOTE: type of the column does not matter).\r\n     *\r\n     * @param name Column name to be checked {@type string}\r\n     * @return true if the relation has a column with the same name {@type boolean}\r\n     * @public\r\n     */\r\n    public hasColumn(name: string): boolean {\r\n        return this.columnNames.some(cn => cn === name);\r\n    }\r\n\r\n    /**\r\n     * Returns map (name -> value) of column values in a relation.\r\n     *\r\n     * @return map of column values in a relation {@type Map<String, SupportedColumnType>}\r\n     * @public\r\n     */\r\n    public getColumns(): Map<string, SupportedColumnType> {\r\n        return this.columns;\r\n    }\r\n\r\n    /**\r\n     * Applies the given function to each column in the relation.\r\n     *\r\n     * @param f function to be applied to each column in the relation {@type function}\r\n     * @public\r\n     */\r\n    public forEachColumn(f: (type: SupportedColumnType, name: string) => void): void {\r\n        return this.columns.forEach(f);\r\n    }\r\n\r\n    /**\r\n     * Return column names  in a relation.\r\n     *\r\n     * @return array of column names in a relation {@type string[]}\r\n     * @public\r\n     */\r\n    public getColumnNames(): string[] {\r\n        return this.columnNames;\r\n    }\r\n\r\n    /**\r\n     * Returns number of columns in a relation.\r\n     *\r\n     * @return number of columns in a relation {@type number}\r\n     * @public\r\n     */\r\n    public getColumnsCount(): number {\r\n        return this.columnNames.length;\r\n    }\r\n\r\n    /**\r\n     * Adds a row to a relation. The row must have the same column set as the relation. If the row was added,\r\n     * sets the row finished and returns true. Also the relational schema of this relation\r\n     * is set finished (no more columns can be added). If the row was not added, returns false.\r\n     * NOTE: Rows in a relation cannot be duplicit, adding a duplicit row returns true, but only one is kept.\r\n     *\r\n     * @param row row to be added {@type Row}\r\n     * @return true if the row was added, false otherwise {@type boolean}\r\n     * @public\r\n     */\r\n    public addRow(row: Row): boolean {\r\n        if (isEqual(row.getTypes(), this.columns)) {\r\n            this.finishSchema();\r\n            row.finish();\r\n            if (!this.rows.some(r => r.equals(row))) {\r\n                this.rows.push(row);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns all rows in a relation.\r\n     *\r\n     * @return array of rows in a relation {@type Row[]}\r\n     * @public\r\n     */\r\n    public getRows(): Row[] {\r\n        return this.rows;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of rows in a relation.\r\n     *\r\n     * @return number of rows in a relation {@type number}\r\n     * @public\r\n     */\r\n    public getRowsCount(): number {\r\n        return this.rows.length;\r\n    }\r\n\r\n    /**\r\n     * Returns a relational schema in a format: RelationName(ColumnOneName: ColumnOneType, ...) - both column names\r\n     * and column types are used.\r\n     *\r\n     * @return relational schema as a string {@type string}\r\n     * @public\r\n     */\r\n    public getSchemaString(): string {\r\n        return this.name + \"(\" + [...this.columns].map(s => s[0] + \": \" + s[1]).join(\", \") + \")\";\r\n    }\r\n\r\n    /**\r\n     * Returns a relational schema in a format: RelationName(ColumnOneName, ...) - only column names are used.\r\n     *\r\n     * @return relational schema as a string {@type string}\r\n     * @public\r\n     */\r\n    public getNamesSchemaString(): string {\r\n        return this.name + \"(\" + this.columnNames.join(\", \") + \")\";\r\n    }\r\n\r\n    /**\r\n     * Returns a formatted string representation of the relation content (column names, column types and rows).\r\n     *\r\n     * @return string representation of the relation {@type string}\r\n     * @public\r\n     */\r\n    public contentString(): string {\r\n        // @ts-ignore - prepares array representation of types and rows\r\n        const columnTypes: SupportedColumnType[] = this.columnNames.map(name => this.columns.get(name));\r\n        const rows = [...this.rows].map(row => row.getOrderedPrintValues(this.columnNames));\r\n        // finds longest inputs in each column\r\n        const longest = this.columnNames.map(n => n.length);\r\n        columnTypes.forEach((type, i) => {\r\n            if (type.length > longest[i]) {\r\n                longest[i] = type.length;\r\n            }\r\n        })\r\n        rows.forEach(r => {\r\n            r.forEach((d, i) => {\r\n                if (longest[i] < d.length) {\r\n                    longest[i] = d.length;\r\n                }\r\n            });\r\n        });\r\n        // function for end-padding strings with spaces\r\n        const pad = (ss: string[]) => ss.map((s, i) => s.padEnd(longest[i], \" \")).join(' | ');\r\n        return pad(this.columnNames) + '\\n' +\r\n            pad(columnTypes) + '\\n' +\r\n            longest.map(n => \"-\".repeat(n)).join(\"-+-\") + '\\n' +\r\n            rows.map(r => pad(r)).join('\\n');\r\n    }\r\n\r\n    /**\r\n     * Custom equals function for testing purposes.\r\n     *\r\n     * @param other an object to compare {@type any}\r\n     * @return true if this and given objects have same name, columns, and rows {@type boolean}\r\n     * @public\r\n     */\r\n    public equals(other: any): boolean {\r\n        if (other instanceof Relation) {\r\n            return this.name === other.name &&\r\n                isEqual(this.columns, other.columns) &&\r\n                isEqual(new Set(this.rows), new Set(other.rows));\r\n        }\r\n        return false;\r\n    }\r\n}","/**\r\n * Messages for {@link CodeError}.\r\n * The description is a string array - between its members are inserted error parameters (names of invalid relations,\r\n * invalid input parts, etc.). See english language definition for expected structure of each error description.\r\n * @category Errors\r\n * @public\r\n */\r\nexport interface CodeErrorMessages {\r\n    // expects 1 part\r\n    resultSection_nodeIndexNotFound: string[],\r\n    // expects 2 part\r\n    resultSection_evalError: string[],\r\n    // expects 1 part\r\n    resultSection_nullRelationToSave: string[],\r\n    // expects 1 part\r\n    resultSection_nullRelationToAdd: string[],\r\n\r\n    // expects 3 parts\r\n    row_absentColumn: string[],\r\n\r\n    // expects 2 parts\r\n    valueParser_unexpectedToken: string[],\r\n\r\n    // expects 2 parts\r\n    exprParser_unexpectedToken: string[],\r\n    // expects 2 parts\r\n    exprParser_thetaJoinBranchError: string[],\r\n    // expects 2 parts\r\n    exprParser_projectionBranchError: string[]\r\n}\r\n\r\n/**\r\n * Error caused by an unexpected error in code of the application.\r\n * @extends Error\r\n * @category Errors\r\n * @public\r\n */\r\nexport class CodeError extends Error {\r\n    /**\r\n     * Creates a new CodeError with the given message.\r\n     *\r\n     * @param msg error message {@type string}\r\n     * @public\r\n     */\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, CodeError);\r\n        }\r\n        this.name = 'CodeError';\r\n    }\r\n}","import {RASemanticError} from \"./raSemanticError\";\r\nimport {RASyntaxError} from \"./raSyntaxError\";\r\nimport {CodeError} from \"./codeError\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Factory for creating custom application errors: CodeError, RASemanticError, RASyntaxError.\r\n * It creates an error message by given error code and string parameters.\r\n * @category Errors\r\n * @public\r\n */\r\nexport class ErrorFactory {\r\n\r\n    /**\r\n     * Creates a new code error. Params are used to join error messages.\r\n     *\r\n     * @param msg predefined error description {@link CodeErrorMessages} {@type string[]}\r\n     * @param params textual specification {@type ...string}\r\n     * @public\r\n     */\r\n    public static codeError(msg: string[], ...params: string[]): CodeError {\r\n        assertParamsCount(msg.length - 1, params);\r\n        return new CodeError(joinStringArrays(msg, params));\r\n    }\r\n\r\n    /**\r\n     * Creates a new RASemanticError. Params are used to join error messages.\r\n     *\r\n     * @param msg predefined error description {@link SemanticErrorMessages} {@type string[]}\r\n     * @param range text range of the error in the input when defined {@type StartEndPair?}\r\n     * @param params textual specification {@type ...string}\r\n     * @public\r\n     */\r\n    public static semanticError(msg: string[], range: StartEndPair | undefined, ...params: string[]): RASemanticError {\r\n        assertParamsCount(msg.length - 1, params);\r\n        return new RASemanticError(joinStringArrays(msg, params), range);\r\n    }\r\n\r\n    /**\r\n     * Creates a new RASyntaxError. Params are used to join error messages.\r\n     *\r\n     * @param msg predefined error description {@link SyntaxErrorMessages} {@type string[]}\r\n     * @param range text range of the error in the input when defined {@type StartEndPair?}\r\n     * @param params textual specification {@type ...string}\r\n     * @public\r\n     */\r\n    public static syntaxError(msg: string[], range: StartEndPair | undefined, ...params: string[]): RASyntaxError {\r\n        assertParamsCount(msg.length - 1, params);\r\n        return new RASyntaxError(joinStringArrays(msg, params), range);\r\n    }\r\n}\r\n\r\n/**\r\n * Extends the given params array with empty strings to have the length of expectedCount. When the initial length of the\r\n * given params array is the same or greater, the array is not changed.\r\n */\r\nexport function assertParamsCount(expectedCount: number, params: string[]): void {\r\n    if (params.length !== expectedCount) {\r\n        console.log(\"Unexpected params count, expected \" + expectedCount + \", given \" + params.length);\r\n        while (params.length < expectedCount) {\r\n            params.push(\"\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Joins given string arrays [a1, a2, ..., an] and [b1, b2, ..., bn-1] to one string \"a1b1a2b2...an-1bn-1an\".\r\n * WARNING: a.length is expected to be at least 1. b.length is expected to be at least \"a.length - 1\".\r\n *\r\n * @param a array of length at least 1\r\n * @param b array of length at least \"a.length - 1\"\r\n */\r\nexport function joinStringArrays(a: string[], b: string[]): string {\r\n    const aLen: number = a.length;\r\n    const toConcat: string[] = Array<string>(2 * aLen - 2);\r\n    for (let i = 1; i < aLen; i++) {\r\n        toConcat[2 * i - 2] = b[i - 1];\r\n        toConcat[2 * i - 1] = a[i];\r\n    }\r\n    return a[0].concat(...toConcat);\r\n}","import {BinaryNodeClass} from \"../ratree/binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {UnaryNodeClass} from \"../ratree/unaryNode\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Abstract parent class for all RATokens.\r\n */\r\nexport abstract class ExprToken {\r\n    protected constructor(public readonly str: IndexedString, public readonly type: string) {}\r\n\r\n    /**\r\n     * Gets token start and end index in the text (if the token has IndexedString representation) or undefined.\r\n     */\r\n    public getRange(): StartEndPair | undefined {\r\n        return this.str.getRange();\r\n    }\r\n}\r\n\r\n/**\r\n * Parentheses.\r\n */\r\nexport abstract class ParenthesisToken extends ExprToken {}\r\n\r\nexport class OpeningParenthesis extends ParenthesisToken {\r\n    public constructor(str: IndexedString) {\r\n        super(str, \"OpeningParenthesis\");\r\n    }\r\n}\r\n\r\nexport class ClosingParenthesis extends ParenthesisToken {\r\n    public constructor(str: IndexedString) {\r\n        super(str, \"ClosingParenthesis\");\r\n    }\r\n}\r\n\r\n/**\r\n * Relation reference.\r\n */\r\nexport class RelationToken extends ExprToken {\r\n    public constructor(name: IndexedString) {\r\n        super(name, \"RelationToken\");\r\n    }\r\n}\r\n\r\n/**\r\n * Unary operators.\r\n */\r\nexport class UnaryOperatorToken extends ExprToken {\r\n\r\n    public static selection(selection: IndexedString) {\r\n        return new UnaryOperatorToken(selection, \"selection\");\r\n    }\r\n\r\n    public static projection(projection: IndexedString) {\r\n        return new UnaryOperatorToken(projection, \"projection\");\r\n    }\r\n\r\n    public static rename(rename: IndexedString) {\r\n        return new UnaryOperatorToken(rename, \"rename\");\r\n    }\r\n\r\n    private constructor(str: IndexedString, type: UnaryNodeClass) {\r\n        super(str, type);\r\n    }\r\n}\r\n\r\n/**\r\n * Precedence values for binary operators (highest to lowest).\r\n */\r\nconst precedenceLevelA: number = 10;\r\nconst cartesianPrecedence: number = precedenceLevelA;\r\nconst naturalPrecedence: number = precedenceLevelA;\r\nconst thetaPrecedence: number = precedenceLevelA;\r\nconst semiPrecedence: number = precedenceLevelA;\r\nconst antiPrecedence: number = precedenceLevelA;\r\nconst thetaSemiPrecedence: number = precedenceLevelA;\r\nconst outerPrecedence: number = precedenceLevelA;\r\nconst divisionPrecedence: number = precedenceLevelA;\r\n\r\nconst precedenceLevelB: number = precedenceLevelA - 1;\r\nconst intersectionPrecedence: number = precedenceLevelB;\r\n\r\nconst precedenceLevelC: number = precedenceLevelB - 1;\r\nconst differencePrecedence: number = precedenceLevelC;\r\nconst unionPrecedence: number = precedenceLevelC;\r\n\r\n/**\r\n * Binary operators.\r\n */\r\nexport class BinaryOperatorToken extends ExprToken {\r\n\r\n    static naturalJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, naturalPrecedence, \"natural join\");\r\n    }\r\n\r\n    static cartesianProduct(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, cartesianPrecedence, \"cartesian product\");\r\n    }\r\n\r\n    static union(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, unionPrecedence, \"union\");\r\n    }\r\n\r\n    static intersection(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, intersectionPrecedence, \"intersection\");\r\n    }\r\n\r\n    static difference(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, differencePrecedence, \"difference\");\r\n    }\r\n\r\n    static leftSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, semiPrecedence, \"left semijoin\");\r\n    }\r\n\r\n    static rightSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, semiPrecedence, \"right semijoin\");\r\n    }\r\n\r\n    static leftAntijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, antiPrecedence, \"left antijoin\");\r\n    }\r\n\r\n    static rightAntijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, antiPrecedence, \"right antijoin\");\r\n    }\r\n\r\n    static thetaJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaPrecedence, \"theta join\");\r\n    }\r\n\r\n    static leftThetaSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaSemiPrecedence, \"left theta semijoin\");\r\n    }\r\n\r\n    static rightThetaSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaSemiPrecedence, \"right theta semijoin\");\r\n    }\r\n\r\n    static fullOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"full outer join\");\r\n    }\r\n\r\n    static leftOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"left outer join\");\r\n    }\r\n\r\n    static rightOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"right outer join\");\r\n    }\r\n\r\n    static division(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, divisionPrecedence, \"division\");\r\n    }\r\n\r\n    private constructor(str: IndexedString, public readonly precedence: number, type: BinaryNodeClass) {\r\n        super(str, type);\r\n    }\r\n}","import {ErrorFactory} from \"../error/errorFactory\";\r\nimport {RASyntaxError} from \"../error/raSyntaxError\";\r\nimport {language} from \"../language/language\";\r\nimport {Pair} from \"../types/pair\";\r\n\r\n/**\r\n * Class providing general helper functions for strings.\r\n * @category Utils\r\n * @public\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Returns true if the string contains letters only and has length at least 1.\r\n     *\r\n     * @param str Checked string {@type string}\r\n     * @return true if the string contains letters only and has length at least 1 {@type boolean}\r\n     * @public\r\n     */\r\n    public static isWord(str: string): boolean {\r\n        return str.length > 0 && str.split(\"\").every(c => StringUtils.isLetter(c));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the string contains letters, numbers and underscores only, has length at least 1 and starts with\r\n     * a letter or an underscore.\r\n     *\r\n     * @param str Checked string {@type string}\r\n     * @return true if the string contains letters, numbers and underscores only, has length at least 1 and starts with\r\n     * a letter or an underscore {@type boolean}\r\n     * @public\r\n     */\r\n    public static isName(str: string): boolean {\r\n        if (str.length === 0) {\r\n            return false;\r\n        }\r\n        if (!StringUtils.isLetter(str.charAt(0)) && str.charAt(0) !== '_') {\r\n            return false;\r\n        }\r\n        return str.split(\"\").every(c => StringUtils.isNameChar(c));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the string contains whitespaces only.\r\n     *\r\n     * @param str Checked string {@type string}\r\n     * @return true if the string contains whitespaces only {@type boolean}\r\n     * @public\r\n     */\r\n    public static isWhitespacesOnly(str: string): boolean {\r\n        const regex = /\\s*/;\r\n        const res = regex.exec(str);\r\n        return res === null ? false : res[0] === str;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given string has length one and the character is a letter.\r\n     *\r\n     * @param c Checked character {@type string}\r\n     * @return true if the given string has length one and the character is a letter {@type boolean}\r\n     * @public\r\n     */\r\n    public static isLetter(c: string): boolean {\r\n        return c.length === 1 && c.toLowerCase() !== c.toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given string has length one and the character is a letter, a number or an underscore.\r\n     *\r\n     * @param c Checked character {@type string}\r\n     * @return true if the given string has length one and the character is a letter, a number or an underscore {@type boolean}\r\n     * @public\r\n     */\r\n    public static isNameChar(c: string): boolean {\r\n        return StringUtils.isLetter(c) || StringUtils.isDigit(c) || c === '_';\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given string has length one and the character is a digit.\r\n     *\r\n     * @param c Checked character {@type string}\r\n     * @return true if the given string has length one and the character is a digit {@type boolean}\r\n     * @public\r\n     */\r\n    public static isDigit(c: string): boolean {\r\n        return c.length === 1 && c.match(/\\d/) !== null;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the string represents a decimal number.\r\n     *\r\n     * @param str Checked string {@type string}\r\n     * @return true if the string represents a decimal number {@type boolean}\r\n     * @public\r\n     */\r\n    public static isNumber(str: string): boolean {\r\n        return /^[-]?[\\d]+([.][\\d]+)?$/.test(str);\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of letters and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, as a word is returned an empty string.\r\n     *\r\n     * @param str string to be split {@type string}\r\n     * @return split string in a pair (word, rest) {@type Pair<string>}\r\n     * @public\r\n     */\r\n    public static nextWord(str: string): Pair<string> {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (!StringUtils.isLetter(str.charAt(i))) {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of letters, numbers and underscores, which starts with a letter or\r\n     * an underscore and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, or an underscore, as a name is returned an empty string.\r\n     *\r\n     * @param str string to be split {@type string}\r\n     * @return split string in a pair (name, rest) {@type Pair<string>}\r\n     * @public\r\n     */\r\n    public static nextName(str: string): Pair<string> {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        if (!StringUtils.isLetter(str.charAt(0)) && str.charAt(0) !== '_') {\r\n            return { first: \"\", second: str };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            const char: string = str.charAt(i);\r\n            if (!StringUtils.isLetter(char) && !StringUtils.isDigit(char) && char !== '_') {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of non-whitespace characters and its rest and returns these parts in a pair.\r\n     *\r\n     * @param str string to be split {@type string}\r\n     * @return split string in a pair (start, rest) {@type Pair<string>}\r\n     * @public\r\n     */\r\n    public static nextNonWhitespacePart(str: string): Pair<string> {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (str.charAt(i).match(/\\s/)) {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting number and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a digit, as a number is returned an empty string.\r\n     *\r\n     * @param str string to be split {@type string}\r\n     * @return split string in a pair (word, rest) {@type Pair<string>}\r\n     * @public\r\n     */\r\n    static nextNumber(str: string): Pair<string> {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        // string starts with '-' sign\r\n        if (str.charAt(0) === '-') {\r\n            // if there is a digit after '-', shifts the start\r\n            if (str.length > 1 && StringUtils.isDigit(str.charAt(1))) {\r\n                i = 1;\r\n            }\r\n            // there is no digit\r\n            else {\r\n                return { first: \"\", second: str };\r\n            }\r\n        }\r\n        let digitFound: boolean = false;\r\n        let dotFound: boolean = false;\r\n        while (i < str.length) {\r\n            if (StringUtils.isDigit(str.charAt(i))) {\r\n                digitFound = true;\r\n                ++i;\r\n            }\r\n            else if (str.charAt(i) === '.') {\r\n                // second dot or a dot without previous digits\r\n                if (dotFound || !digitFound) {\r\n                    break;\r\n                }\r\n                else {\r\n                    dotFound = true;\r\n                    ++i;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        const numStr = str.substring(0, i);\r\n        const rest = str.substring(i);\r\n        return { first: numStr, second: rest };\r\n    }\r\n\r\n    /**\r\n     * Splits the given string into starting quoted part and the rest. Quotes can be escaped by an odd count of\r\n     * backslashes.\r\n     * NOTE: When the closing quote is not found until the rest of the line, unclosed string is returned\r\n     * => the error is not thrown, it is only added to the return object.\r\n     * NOTE: First character of the string is expected to be '\"'.\r\n     *\r\n     * @param str string to be split {@type string}\r\n     * @return the starting quoted part, the rest, and optimal error {@type Object}\r\n     * @public\r\n     */\r\n    static nextQuotedString(str: string): { first: string, second: string, error: RASyntaxError | undefined } {\r\n        let i: number = 1;\r\n        // backslashes escape the quote character only in odd count\r\n        let backslashes: number = 0;\r\n        while (i < str.length) {\r\n            const curChar = str.charAt(i);\r\n            // increases index for using \"i\" in slicing\r\n            ++i;\r\n            if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                return { first: str.slice(0, i), second: str.slice(i), error: undefined };\r\n            }\r\n            // end of line breaks the string\r\n            if (curChar === '\\n') {\r\n                return {\r\n                    first: str.slice(0, i),\r\n                    second: str.slice(i),\r\n                    error: ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_missingClosingChar,\r\n                        undefined, '\"', '\"')\r\n                };\r\n            }\r\n            // updates backslash count\r\n            if (curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n        }\r\n        return {\r\n            first: str,\r\n            second: \"\",\r\n            error: ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_missingClosingChar,\r\n                undefined, '\"', '\"')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Splits the string to the starting bordered part and the rest and returns these parts in a pair.\r\n     * If there is only one ending character and it differs from the starting one, nested bordering is supported.\r\n     * Characters after an odd count of escape characters are ignored and cannot start or end a bordered part.\r\n     * Starting and ending characters in quoted part are ignored, quotes can be escaped by an odd count of backslashes.\r\n     * NOTE: First character of the string is expected to be 'start'.\r\n     * NOTE: Should not be used for slicing quoted strings, use nextQuotedString instead.\r\n     * NOTE: It is expected, that there are no comments in the given string.\r\n     *\r\n     * @param str string to be split {@type string}\r\n     * @param start starting character of the string and also starting character of the bordered part (one character) {@type string}\r\n     * @param end ending characters of the bordered part (one or more characters) {@type string}\r\n     * @param escape character which makes next character being ignored (default '\\0') {@type string}\r\n     * @return pair of the starting bordered part and the rest {@type Pair<string>}\r\n     * @public\r\n     */\r\n    static nextBorderedPart(str: string, start: string, end: string, escape: string = '\\0'): Pair<string> {\r\n        let depth: number = 1;\r\n        let i: number = 1;\r\n        // to ignore special characters\r\n        let inQuotes: boolean = false;\r\n        // nested bordering is supported if there is only one ending character\r\n        const nesting: boolean = end.length === 1;\r\n        // backslashes escape the quote character only in odd count\r\n        let backslashes: number = 0;\r\n        // escape characters escape the end character only in odd count\r\n        let escapeCount: number = 0;\r\n        while (i < str.length) {\r\n            const curChar = str.charAt(i);\r\n            // checks end of the part (before checking start for a case when start == end)\r\n            if (end.indexOf(curChar) > -1 && (escapeCount % 2) === 0 && !inQuotes) {\r\n                --depth;\r\n            }\r\n            // checks start of the bordered part (if only one ending character was given)\r\n            else if (curChar === start && (escapeCount % 2) === 0 && nesting && !inQuotes) {\r\n                ++depth;\r\n            }\r\n            // found quote if even number of backslashes before\r\n            else if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                inQuotes = !inQuotes;\r\n            }\r\n            // updates escape chars count\r\n            if (curChar === escape) {\r\n                ++escapeCount;\r\n            }\r\n            else {\r\n                escapeCount = 0;\r\n            }\r\n            // updates backslash count\r\n            if (curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            // increases index for before slicing\r\n            ++i;\r\n            if (depth === 0) {\r\n                return { first: str.slice(0, i), second: str.slice(i) };\r\n            }\r\n        }\r\n        throw ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_missingClosingChar, undefined,\r\n            end.split('').join(\"' / '\"), start);\r\n    }\r\n\r\n    /**\r\n     * Skips all whitespaces and exactly one given character and returns rest of the string.\r\n     * If the string does not match this pattern, throws error.\r\n     *\r\n     * @param str string to be skipped in {@type string}\r\n     * @param char char to be skipped exactly one time (expected to be string of length 1) {@type string}\r\n     * @return given string without starting sequence of whitespaces and exactly one char {@type string}\r\n     * @public\r\n     */\r\n    public static skipWhitespacesAndChar(str: string, char: string): string {\r\n        let charFound: boolean = false;\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (str.charAt(i).match(/\\s/)) {\r\n                ++i;\r\n            }\r\n            else if (str.charAt(i) === char && !charFound) {\r\n                charFound = true;\r\n                ++i;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (!charFound) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_charNotFound, undefined, char);\r\n        }\r\n        return str.substring(i);\r\n    }\r\n}","import {Relation} from \"../relation/relation\";\r\nimport {ErrorWithTextRange} from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Result of fake evaluation of RATreeNode.\r\n * @category RATree\r\n * @public\r\n */\r\nexport interface NodeFakeEvalResult {\r\n    /**\r\n     * Result relation\r\n     * @type Relation\r\n     * @public\r\n     */\r\n    result: Relation,\r\n    /**\r\n     * Found column names to whisper\r\n     * @type string[]\r\n     * @public\r\n     */\r\n    whispers: string[],\r\n    /**\r\n     * Detected errors\r\n     * @type ErrorWithTextRange[]\r\n     * @public\r\n     */\r\n    errors: ErrorWithTextRange[]\r\n}\r\n\r\n/**\r\n * Abstract general node of the relational algebra syntactic tree.\r\n * @category RATree\r\n * @public\r\n */\r\nexport abstract class RATreeNode {\r\n\r\n    protected resultRelation: Relation | undefined;\r\n\r\n    protected constructor() {}\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * After successful call, this.resultRelation must be set to valid Relation.\r\n     * @public\r\n     */\r\n    public abstract eval(): void;\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public abstract fakeEval(cursorIndex: number): NodeFakeEvalResult;\r\n\r\n    /**\r\n     * Returns true if this node and its subtree was already evaluated.\r\n     *\r\n     * @return true if this node and its subtree was already evaluated {@type boolean}\r\n     * @public\r\n     */\r\n    public isEvaluated(): boolean {\r\n        return this.resultRelation !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the resulting relation. The node and its subtree is evaluated if it was not evaluated before.\r\n     *\r\n     * @return resulting relation gained by evaluating this node and its subtree {@type Relation}\r\n     * @public\r\n     */\r\n    public getResult(): Relation {\r\n        if (this.resultRelation === undefined) {\r\n            this.eval();\r\n        }\r\n        // @ts-ignore\r\n        return this.resultRelation;\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public abstract printInLine(): string;\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public abstract getOperationName(): string;\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public abstract getOperationSymbol(): string;\r\n}","import {Relation} from \"../relation/relation\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\n\r\n/**\r\n * Leave node of the relational algebra syntactic tree with reference to a source relation.\r\n * @extends RATreeNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class RelationNode extends RATreeNode {\r\n\r\n    /**\r\n     * Creates a new RelationNode.\r\n     *\r\n     * @param relation source relation {@type Relation}\r\n     * @public\r\n     */\r\n    public constructor(relation: Relation) {\r\n        super();\r\n        this.resultRelation = relation;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * After successful call, this.resultRelation must be set to valid Relation.\r\n     * @public\r\n     */\r\n    public eval(): void {\r\n        // nothing to evaluate\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        // @ts-ignore\r\n        const relation: Relation = this.resultRelation;\r\n        return {result: relation, whispers: [], errors: []};\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        // @ts-ignore\r\n        return this.resultRelation.getName();\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        // @ts-ignore\r\n        return this.resultRelation.getName();\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return \"\";\r\n    }\r\n}","import {StartEndPair} from \"./startEndPair\";\r\n\r\n/**\r\n * String representation with index of each character. The index is not changed by the mutating the string.\r\n * Provides some usual string functions. Uses array of {@link IndexedChar}.\r\n * @category Types\r\n * @public\r\n */\r\nexport class IndexedString {\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing the given string. StartIndex is used as the offset for indexes.\r\n     * When the startIndex is omitted, 0 is used. When NaN is given, all indexes are NaN.\r\n     * Indexes of the characters are (0 + startIndex, ..., str.length - 1 + startIndex).\r\n     * NOTE: Each character has its own index. That means '\\r\\n' line separator has two indexes. For expected behavior, use\r\n     * '\\n' separator instead.\r\n     *\r\n     * @param str string to store {@type string}\r\n     * @param startIndex index of the first character {@type number}\r\n     * @return new IndexedString instance {@type IndexedString}\r\n     * @public\r\n     */\r\n    public static new(str: string, startIndex: number = 0): IndexedString {\r\n        return new IndexedString(str, str.split('').map((char, index) => {return {char: char, index: index + startIndex}}));\r\n    }\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing an empty string \"\".\r\n     *\r\n     * @return new IndexedString instance {@type IndexedString}\r\n     * @public\r\n     */\r\n    public static empty(): IndexedString {\r\n        return new IndexedString('', []);\r\n    }\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing the given array of IndexedChars.\r\n     *\r\n     * @param arr array of IndexedChars {@type IndexedChar[]}\r\n     * @return new IndexedString instance {@type IndexedString}\r\n     * @public\r\n     */\r\n    public static newFromArray(arr: IndexedChar[]): IndexedString {\r\n        return new IndexedString(arr.map(ic => ic.char).join(''), arr);\r\n    }\r\n\r\n    /**\r\n     * Private constructor to ensure compatible string and IndexCharArray.\r\n     *\r\n     * @param str string representation {@type string}\r\n     * @param chars IndexedChar representation {@type IndexedChar[]}\r\n     */\r\n    private constructor(private readonly str: string, private readonly chars: IndexedChar[]) { }\r\n\r\n    /**\r\n     * Returns string representation of the IndexedString.\r\n     *\r\n     * @return string representation of the IndexedString {@type string}\r\n     * @public\r\n     */\r\n    public toString(): string {\r\n        return this.str;\r\n    }\r\n\r\n    /**\r\n     * Returns length of the string.\r\n     *\r\n     * @return length of the string {@type number}\r\n     * @public\r\n     */\r\n    public length(): number {\r\n        return this.str.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the IndexedString represents an empty string \"\".\r\n     *\r\n     * @return true if the IndexedString represents an empty string \"\" {@type boolean}\r\n     * @public\r\n     */\r\n    public isEmpty(): boolean {\r\n        return this.length() === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns IndexedChar array representing the IndexedString.\r\n     * The array is reference to inner IndexedString structure.\r\n     *\r\n     * @return IndexedChar array representation {@type IndexedChar[]}\r\n     * @public\r\n     */\r\n    public getChars(): IndexedChar[] {\r\n        return this.chars;\r\n    }\r\n\r\n    /**\r\n     * Returns the original index of the first character of the IndexedString. Returns NaN if empty.\r\n     *\r\n     * @return original index of the first character {@type number}\r\n     * @public\r\n     */\r\n    public getFirstIndex(): number {\r\n        if (this.isEmpty()) {\r\n            return NaN;\r\n        }\r\n        return this.chars[0].index;\r\n    }\r\n\r\n    /**\r\n     * Returns the original index of the last character of the IndexedString. Returns NaN if empty.\r\n     *\r\n     * @return original index of the last character {@type number}\r\n     * @public\r\n     */\r\n    public getLastIndex(): number {\r\n        if (this.isEmpty()) {\r\n            return NaN;\r\n        }\r\n        return this.chars[this.length() - 1].index;\r\n    }\r\n\r\n    /**\r\n     * Returns indexes of the first and the last character of the IndexedString. Returns undefined if empty.\r\n     *\r\n     * @return indexes of the first and the last character {@type StartEndPair?}\r\n     * @public\r\n     */\r\n    public getRange(): StartEndPair | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return { start: this.chars[0].index, end: this.chars[this.length() - 1].index };\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the character at the given current index. Throws RangeError if the index is\r\n     * out of IndexedString bounds.\r\n     *\r\n     * @param index current index {@type number}\r\n     * @return char at the given index {@type string}\r\n     * @public\r\n     */\r\n    public charAt(index: number): string {\r\n        if (index < 0 || index >= this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return this.chars[index].char;\r\n    }\r\n\r\n    /**\r\n     * Returns an original position index of the character at the given current index. Throws RangeError if the given index is\r\n     * out of IndexedString bounds.\r\n     *\r\n     * @param index current index {@type number}\r\n     * @return original index {@type number}\r\n     * @public\r\n     */\r\n    public indexAt(index: number): number {\r\n        if (index < 0 || index >= this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return this.chars[index].index;\r\n    }\r\n\r\n    /**\r\n     * Split a string into substrings using the specified separator and return them as an array.\r\n     * It does not accept RegEx separators and array limit as built-in string.\r\n     *\r\n     * @param separator string separator {@type string}\r\n     * @return separated substrings {@type IndexedString[]}\r\n     * @public\r\n     */\r\n    public split(separator: string): IndexedString[] {\r\n        if (this.isEmpty()) {\r\n            if (separator === '') {\r\n                return [];\r\n            }\r\n            return [IndexedString.empty()];\r\n        }\r\n        const sepLen: number = separator.length;\r\n        const strSplit: string[] = this.str.split(separator);\r\n        const prefixSum: number[] = Array<number>(strSplit.length);\r\n        prefixSum[0] = 0;\r\n        for (let i = 1; i < strSplit.length; i++) {\r\n            prefixSum[i] = prefixSum[i - 1] + strSplit[i - 1].length + sepLen;\r\n        }\r\n\r\n        return strSplit.map((strSplit, index) => {\r\n            return new IndexedString(strSplit, this.chars.slice(prefixSum[index], prefixSum[index] + strSplit.length));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a section of a IndexedString.\r\n     *\r\n     * @param start index of the beginning of the specified portion of stringObj {@type number}\r\n     * @param end index of the end of the specified portion of IndexedString. The substring includes the characters\r\n     * up to, but not including, the character indicated by end. If this value is not specified, the substring\r\n     * continues to the end of IndexedString {@type number}\r\n     * @return section of a IndexedString {@type IndexedString}\r\n     * @public\r\n     */\r\n    public slice(start: number, end?: number): IndexedString {\r\n        const _start = start < 0 ? this.length() + start : start;\r\n        const _end = end !== undefined ? (end < 0 ? this.length() + end : end) : this.length();\r\n        if (_start > _end || _start < 0 || _end > this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return IndexedString.newFromArray(this.chars.slice(_start, _end));\r\n    }\r\n\r\n    /**\r\n     * Removes the leading and trailing white space and line terminator characters from a string.\r\n     *\r\n     * @return returns an IndexedString without leading and trailing white space and line terminator characters {@type IndexedString[]}\r\n     * @public\r\n     */\r\n    public trim(): IndexedString {\r\n        const trimStr: string = this.str.trim();\r\n        if (trimStr === '') {\r\n            return new IndexedString('', []);\r\n        }\r\n        const start: number = this.str.indexOf(trimStr.charAt(0));\r\n        return IndexedString.newFromArray(this.chars.slice(start, start + trimStr.length));\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the concatenation of this IndexedString with multiple other.\r\n     *\r\n     * @param strings IndexedStrings to append to the end of the string {@type ...IndexedString}\r\n     * @return string that contains the concatenation of this IndexedString with multiple other {@type IndexedString}\r\n     * @public\r\n     */\r\n    public concat(...strings: IndexedString[]): IndexedString {\r\n        return IndexedString.newFromArray(this.chars.concat(...strings.map(is => is.chars)));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the searchString sequence is the same as the corresponding\r\n     * elements of this object starting at position. Otherwise returns false.\r\n     *\r\n     * @param searchString checked value {@type string}\r\n     * @param position position to start the IndexedString {@type number?}\r\n     * @return true if the IndexedString starts with the given searchString {@type boolean}\r\n     * @public\r\n     */\r\n    public startsWith(searchString: string, position?: number | undefined): boolean {\r\n        return this.str.startsWith(searchString, position);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the searchString sequence is the same as the corresponding\r\n     * elements of this object starting at endPosition – searchString.length. Otherwise returns false.\r\n     *\r\n     * @param searchString checked value {@type string}\r\n     * @param endPosition position to end the IndexedString {@type number?}\r\n     * @return true if the IndexedString ends with the given searchString {@type boolean}\r\n     * @public\r\n     */\r\n    public endsWith(searchString: string, endPosition?: number | undefined): boolean {\r\n        return this.str.endsWith(searchString, endPosition);\r\n    }\r\n\r\n    /**\r\n     * Replaces text in a string, using a regular expression or search string.\r\n     * NOTE: Returns built-in string, the IndexedString is not modified.\r\n     *\r\n     * @param searchValue string or RegEx to search for {@type string}\r\n     * @param replaceValue string containing the text to replace for every successful match of searchValue in this string {@type string}\r\n     * @return built-in string with replaced values {@type string}\r\n     * @public\r\n     */\r\n    public replace(searchValue: string | RegExp, replaceValue: string): string {\r\n        return this.str.replace(searchValue, replaceValue);\r\n    }\r\n\r\n    /**\r\n     * Creates a deep copy of this IndexedString.\r\n     *\r\n     * @return deep copy of this IndexedString {@type IndexedString}\r\n     * @public\r\n     */\r\n    public copy(): IndexedString {\r\n        return new IndexedString(this.str, this.chars.map(ic => {return {char: ic.char, index: ic.index}}));\r\n    }\r\n\r\n    /**\r\n     * Returns true if it contains any of the characters from string chars. Otherwise, returns false.\r\n     *\r\n     * @param chars characters to search for {@type string}\r\n     * @return true if it contains any of the characters from string chars {@type boolean}\r\n     * @public\r\n     */\r\n    public containsAny(chars: string): boolean {\r\n        for (let i = 0; i < chars.length; ++i) {\r\n            if (this.str.indexOf(chars[i]) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Indexed representation of one character in {@link IndexedString}.\r\n * WARNING: It is always assumed that IndexedChar.char is a string of length 1.\r\n * @category Types\r\n * @public\r\n */\r\nexport interface IndexedChar {\r\n    /**\r\n     * char - string of length 1\r\n     * @type string\r\n     * @public\r\n     */\r\n    char: string,\r\n    /**\r\n     * index\r\n     * @type number\r\n     * @public\r\n     */\r\n    index: number\r\n}","import {IndexedString} from \"../types/indexedString\";\r\nimport {StringUtils} from \"./stringUtils\";\r\nimport {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {RASyntaxError} from \"../error/raSyntaxError\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\nimport {Pair} from \"../types/pair\";\r\n\r\n/**\r\n * Class providing general helper functions for IndexedString.\r\n * @category Utils\r\n * @public\r\n */\r\nexport class IndexedStringUtils {\r\n\r\n    /**\r\n     * Returns true if the string contains letters only and has length at least 1.\r\n     * \r\n     * @param str Checked indexed string {@type IndexedString}\r\n     * @return true if the string contains letters only and has length at least 1 {@type boolean}\r\n     * @public\r\n     */\r\n    public static isWord(str: IndexedString): boolean {\r\n        return StringUtils.isWord(str.toString());\r\n    }\r\n\r\n    /**\r\n     * Returns true if the string contains letters, numbers and underscores only, has length at least 1 and starts with\r\n     * a letter or an underscore.\r\n     *\r\n     * @param str Checked string {@type IndexedString}\r\n     * @return true if the string contains letters, numbers and underscores only, has length at least 1 and starts with\r\n     * a letter or an underscore {@type boolean}\r\n     * @public\r\n     */\r\n    public static isName(str: IndexedString): boolean {\r\n        return StringUtils.isName(str.toString());\r\n    }\r\n\r\n    /**\r\n     * Returns true if the string contains whitespaces only.\r\n     *\r\n     * @param str Checked string {@type IndexedString}\r\n     * @return true if the string contains whitespaces only {@type boolean}\r\n     * @public\r\n     */\r\n    public static isWhitespacesOnly(str: IndexedString): boolean {\r\n        return StringUtils.isWhitespacesOnly(str.toString());\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given string has length one and the character is a letter.\r\n     *\r\n     * @param c Checked character {@type IndexedString}\r\n     * @return true if the given string has length one and the character is a letter {@type boolean}\r\n     * @public\r\n     */\r\n    public static isLetter(c: IndexedString): boolean {\r\n        return StringUtils.isLetter(c.toString());\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given string has length one and the character is a letter, a number or an underscore.\r\n     *\r\n     * @param c Checked character {@type IndexedString}\r\n     * @return true if the given string has length one and the character is a letter, a number or an underscore {@type boolean}\r\n     * @public\r\n     */\r\n    public static isNameChar(c: IndexedString): boolean {\r\n        return StringUtils.isNameChar(c.toString());\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given string has length one and the character is a digit.\r\n     *\r\n     * @param c Checked character {@type IndexedString}\r\n     * @return true if the given string has length one and the character is a digit {@type boolean}\r\n     * @public\r\n     */\r\n    public static isDigit(c: IndexedString): boolean {\r\n        return StringUtils.isDigit(c.toString());\r\n    }\r\n\r\n    /**\r\n     * Returns true if the string represents a decimal number.\r\n     *\r\n     * @param str Checked string {@type IndexedString}\r\n     * @return true if the string represents a decimal number {@type boolean}\r\n     * @public\r\n     */\r\n    public static isNumber(str: IndexedString): boolean {\r\n        return StringUtils.isNumber(str.toString());\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of letters and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, as a word is returned an empty string.\r\n     *\r\n     * @param str indexed string to be split {@type IndexedString}\r\n     * @return split indexed string in a pair (word, rest) {@type Pair<IndexedString>}\r\n     * @public\r\n     */\r\n    public static nextWord(str: IndexedString): Pair<IndexedString> {\r\n        const strParts: Pair<string> = StringUtils.nextWord(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of letters, numbers and underscores, which starts with a letter or\r\n     * an underscore and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, or an underscore, as a name is returned an empty string.\r\n     *\r\n     * @param str string to be split {@type IndexedString}\r\n     * @return split indexed string in a pair (name, rest) {@type Pair<IndexedString>}\r\n     * @public\r\n     */\r\n    public static nextName(str: IndexedString): Pair<IndexedString> {\r\n        const strParts: Pair<string> = StringUtils.nextName(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of non-whitespace characters and its rest and returns these\r\n     * parts in a pair.\r\n     *\r\n     * @param str string to be split {@type IndexedString}\r\n     * @return split indexed string in a pair (name, rest) {@type Pair<IndexedString>}\r\n     * @public\r\n     */\r\n    public static nextNonWhitespacePart(str: IndexedString): Pair<IndexedString> {\r\n        const strParts: Pair<string> = StringUtils.nextNonWhitespacePart(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting number and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a digit, as a number is returned an empty string.\r\n     *\r\n     * @param str indexed string to be split {@type IndexedString}\r\n     * @return split indexed string in a pair (word, rest) {@type Pair<IndexedString>}\r\n     * @public\r\n     */\r\n    static nextNumber(str: IndexedString): Pair<IndexedString> {\r\n        const strParts: Pair<string> = StringUtils.nextNumber(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits the given indexed string into starting quoted part and the rest. Quotes can be escaped by an odd count of\r\n     * backslashes.\r\n     * NOTE: When the closing quote is not found until the rest of the line, unclosed string is returned\r\n     * => the error is not thrown, it is only added to the return object.\r\n     * NOTE: First character of the string is expected to be '\"'.\r\n     *\r\n     * @param str string to be split {@type IndexedString}\r\n     * @return pair of the starting bordered part and the rest {@type Object}\r\n     * @public\r\n     */\r\n    static nextQuotedString(str: IndexedString): { first: IndexedString, second: IndexedString, error: RASyntaxError | undefined } {\r\n        const strParts: { first: string, second: string, error: RASyntaxError | undefined } = StringUtils.nextQuotedString(str.toString());\r\n        return {\r\n            first: str.slice(0, strParts.first.length),\r\n            second: str.slice(strParts.first.length),\r\n            error: insertRangeIfUndefined(strParts.error, {start: str.getFirstIndex(), end: str.getFirstIndex()})\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Splits the indexed string to the starting bordered part and the rest and returns these parts in a pair.\r\n     * If there is only one ending character and it differs from the starting one, nested bordering is supported.\r\n     * Characters after escape character are ignored and cannot start or end a bordered part.\r\n     * Starting and ending characters in quoted part are ignored.\r\n     * NOTE: First character of the string is expected to be 'start'.\r\n     * NOTE: Should not be used for slicing quoted strings, use nextQuotedString instead.\r\n     * NOTE: It is expected, that there are no comments in the given string.\r\n     *\r\n     * @param str indexed string to be split {@type IndexedString}\r\n     * @param start starting character of the string and also starting character of the bordered part (one character) {@type string}\r\n     * @param end ending characters of the bordered part (one or more characters) {@type string}\r\n     * @param escape character which makes next character being ignored (default '\\0') {@type string}\r\n     * @return pair of the starting bordered part and the rest as indexed strings {@type Pair<IndexedString>}\r\n     * @public\r\n     */\r\n    static nextBorderedPart(str: IndexedString, start: string, end: string, escape: string = '\\0'): Pair<IndexedString> {\r\n        try {\r\n            const strParts: Pair<string> = StringUtils.nextBorderedPart(str.toString(), start, end, escape);\r\n            return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n        }\r\n        catch (err) {\r\n            throw insertRangeIfUndefined(err, {start: str.getFirstIndex(), end: str.getFirstIndex()});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes all line and block comments from the given IndexedString.\r\n     * If there is unclosed block comment, return the error as well.\r\n     * Line comment \"//comment\\n\" will be changed to \"\\n\" - new line is kept.\r\n     * Block comment \"/\\*comment* /\" will be changed to \" \" - it is replaced by a space to ensure splitting of the content around.\r\n     *\r\n     * @param str string to delete comments in {@type IndexedString}\r\n     * @return string with deleted comments and optimal error {@type Object}\r\n     * @public\r\n     */\r\n    public static deleteAllComments(str: IndexedString): {str: IndexedString, err: RASyntaxError | undefined} {\r\n        const chars = str.copy().getChars();\r\n        // to ignore special characters\r\n        let inQuotes: boolean = false;\r\n        let inLineComment: boolean = false;\r\n        let blockCommentStart: number = -1;\r\n        let backslashes: number = 0;\r\n\r\n        for (let i = 0; i < chars.length; ++i) {\r\n            const curChar = chars[i].char;\r\n            // found quote if even number of backslashes before\r\n            if (curChar === '\"' && (backslashes % 2) === 0 && !inLineComment && blockCommentStart === -1) {\r\n                inQuotes = !inQuotes;\r\n            }\r\n            // found start of a line comment if it is not in a comment already\r\n            else if (curChar === '/' && i + 1 < chars.length && chars[i + 1].char === '/' && !inQuotes && !inLineComment && blockCommentStart === -1) {\r\n                inLineComment = true;\r\n                chars[i].char = '\\0';\r\n                ++i;    // skips '/'\r\n            }\r\n            // newlines ends the line comment\r\n            else if (curChar === '\\n') {\r\n                inLineComment = false;\r\n            }\r\n            // found start of a block comment if it is not in a comment already\r\n            else if (curChar === '/' && i + 1 < chars.length && chars[i + 1].char === '*' && !inQuotes && !inLineComment && blockCommentStart === -1) {\r\n                blockCommentStart = i;\r\n                chars[i].char = '\\0';\r\n                ++i;    // skips '*'\r\n                chars[i].char = ' ';\r\n            }\r\n            // found end of a block comment\r\n            else if (curChar === '*' && i + 1 < chars.length && chars[i + 1].char === '/' && blockCommentStart !== -1) {\r\n                blockCommentStart = -1;\r\n                chars[i].char = '\\0';\r\n                ++i;    // replaces '/' with space to force splitting of string in the comment place\r\n                chars[i].char = ' ';\r\n            }\r\n            // updates backslash count\r\n            if (curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            if (inLineComment || blockCommentStart !== -1) {\r\n                chars[i].char = '\\0';\r\n            }\r\n        }\r\n        let err = undefined;\r\n        if (blockCommentStart !== -1) {\r\n            const errStart = chars[blockCommentStart].index;\r\n            err = ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_missingClosingChar,\r\n              {start: errStart, end: errStart + 1}, '*/', '/*');\r\n        }\r\n        // creates a new string from non-null characters\r\n        return {str: IndexedString.newFromArray(chars.filter(c => c.char !== '\\0')), err: err};\r\n    }\r\n\r\n    /**\r\n     * Skips all whitespaces and exactly one given character and returns rest of the string.\r\n     * If the string does not match this pattern, throws error.\r\n     *\r\n     * @param str string to be skipped in {@type IndexedString}\r\n     * @param char char to be skipped exactly one time (expected to be string of length 1) {@type string}\r\n     * @return given string without starting sequence of whitespaces and exactly one char {@type IndexedString}\r\n     * @public\r\n     */\r\n    public static skipWhitespacesAndChar(str: IndexedString, char: string): IndexedString {\r\n        try {\r\n            const skippedStr: string = StringUtils.skipWhitespacesAndChar(str.toString(), char);\r\n            return str.slice(str.length() - skippedStr.length);\r\n        }\r\n        catch (err) {\r\n            throw insertRangeIfUndefined(err, str.getRange());\r\n        }\r\n    }\r\n}","import {RATreeNode} from \"./raTreeNode\";\r\n\r\n/**\r\n * Classes extending unary node.\r\n * @category RATree\r\n * @public\r\n */\r\nexport type UnaryNodeClass = \"rename\" | \"projection\" | \"selection\";\r\n\r\n/**\r\n * Abstract node of the relational algebra syntactic tree with one subtree.\r\n * @extends RATreeNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport abstract class UnaryNode extends RATreeNode {\r\n\r\n    protected subtree: RATreeNode;\r\n\r\n    /**\r\n     * Creates a new UnaryNode.\r\n     *\r\n     * @param subtree subtree of the node {@type RATreeNode}\r\n     * @public\r\n     */\r\n    protected constructor(subtree: RATreeNode) {\r\n        super();\r\n        this.subtree = subtree;\r\n    }\r\n\r\n    /**\r\n     * Returns subtree of the unary node.\r\n     *\r\n     * @return subtree of the unary node {@type RATreeNode}\r\n     * @public\r\n     */\r\n    public getSubtree(): RATreeNode {\r\n        return this.subtree;\r\n    }\r\n}","import {ColumnContent, SupportedColumnType} from \"./columnType\";\r\nimport {isEqual} from \"lodash\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Row stores a set of column values in a formal {@link Relation} representation.\r\n *\r\n * @category Relation\r\n * @public\r\n */\r\nexport class Row {\r\n\r\n    private readonly types = new Map<string, SupportedColumnType>();\r\n    private values = new Map<string, ColumnContent>();\r\n    private finished: boolean;\r\n\r\n    /**\r\n     * Creates a new row with given columns. Given column set is final, no more column can be added.\r\n     * Given column values are set to null. They can be set to a new value by addColumn function, as long as the row\r\n     * is not set finished.\r\n     *\r\n     * @param columns set of columns in a row {@type Map<String, SupportedColumnType>}\r\n     * @public\r\n     */\r\n    public constructor(columns: Map<string, SupportedColumnType>) {\r\n        // adds empty columns\r\n        columns.forEach((value, name) => {\r\n            this.values.set(name, null);\r\n        });\r\n        this.types = columns;\r\n        this.finished = false;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the row is finished and no more column change is possible.\r\n     *\r\n     * @return true if the row is finished {@type boolean}\r\n     * @public\r\n     */\r\n    public isFinished(): boolean {\r\n        return this.finished;\r\n    }\r\n\r\n    /**\r\n     * Sets the row as finished, no more changes in column values are possible.\r\n     * @public\r\n     */\r\n    public finish(): void {\r\n        this.finished = true;\r\n    }\r\n\r\n    /**\r\n     * Gets names of all columns in a row.\r\n     *\r\n     * @return set of all column names {@type IterableIterator<String>}\r\n     * @public\r\n     */\r\n    public getColumnNames(): IterableIterator<string> {\r\n        return this.types.keys();\r\n    }\r\n\r\n    /**\r\n     * Adds a value to the row. If the addition succeeded, returns true. It can fail, if the row is finished,\r\n     * if there is no column of the given name or if there is a column with the name, but different type.\r\n     *\r\n     * @param name name of the column {@type string}\r\n     * @param value new value of the column {@type ColumnContent}\r\n     * @return true if addition succeeded {@type boolean}\r\n     * @public\r\n     */\r\n    public addValue(name: string, value: ColumnContent): boolean {\r\n        // finished row or not present column\r\n        if (this.finished || !this.types.has(name)) {\r\n            return false;\r\n        }\r\n        let givenType = typeof value;\r\n        // null can be set all column types\r\n        if (value !== null && givenType !== this.types.get(name)) {\r\n            return false;\r\n        }\r\n        this.values.set(name, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the value (possibly null) of the column with the given name. If there is no column with this name, undefined is returned.\r\n     *\r\n     * @param name name of the column {@type string}\r\n     * @return value of the column or undefined if there is no such column {@type ColumnContent?}\r\n     * @public\r\n     */\r\n    public getValue(name: string): ColumnContent | undefined {\r\n        return this.values.get(name);\r\n    }\r\n\r\n    /**\r\n     * Returns the type of the given column or undefined if the column is absent.\r\n     *\r\n     * @param name name of the column {@type string}\r\n     * @return the type of the column {@type SupportedColumnType?}\r\n     * @public\r\n     */\r\n    public getType(name: string): SupportedColumnType | undefined {\r\n        return this.types.get(name);\r\n    }\r\n\r\n    /**\r\n     * Gets types of all columns.\r\n     *\r\n     * @return map of columns {@type Map<String, SupportedColumnType>}\r\n     * @public\r\n     */\r\n    public getTypes(): Map<string, SupportedColumnType> {\r\n        return this.types;\r\n    }\r\n\r\n    /**\r\n     * Gets values of all columns.\r\n     *\r\n     * @return map of columns {@type Map<String, ColumnContent>}\r\n     * @public\r\n     */\r\n    public getValues(): Map<string, ColumnContent> {\r\n        return this.values;\r\n    }\r\n\r\n    /**\r\n     * Returns values of all columns ordered by given array of column names. OrderedColumns are expected to be from the\r\n     * relation that contains the row. The returned values are converted to string type. String column values are\r\n     * changed to printing representation - escaped '\\\\' and '\"' are returned without the escape '\\\\'.\r\n     *\r\n     * @param orderedColumns order of columns to be returned {@type string[]}\r\n     * @return ordered array of values {@type string[]}\r\n     * @public\r\n     */\r\n    public getOrderedPrintValues(orderedColumns: string[]): string[] {\r\n        let ret: string[] = [];\r\n        orderedColumns.forEach(column => {\r\n            const value = this.values.get(column);\r\n            const type = this.types.get(column);\r\n            // should be handled before call\r\n            if (value === undefined || type === undefined) {\r\n                throw ErrorFactory.codeError(language().codeErrors.row_absentColumn, column, [...this.types.values()].join(', '));\r\n            }\r\n            if (type === \"string\") {\r\n                const str = String(value).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n                ret.push(str);\r\n            }\r\n            else {\r\n                ret.push(String(value));\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Custom equals function.\r\n     *\r\n     * @param other object to compare to {@type any}\r\n     * @return whether this and given object has the same values and types\r\n     * @public\r\n     */\r\n    public equals(other: Object): boolean {\r\n        if (other instanceof Row) {\r\n            return isEqual(this.types, other.types) && isEqual(this.values, other.values);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import {UnaryNode} from \"./unaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {Row} from \"../relation/row\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Projection node of the relational algebra syntactic tree.\r\n * @extends UnaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class ProjectionNode extends UnaryNode {\r\n\r\n    private readonly projection: IndexedString;\r\n    private readonly stringRange: StartEndPair;\r\n\r\n    /**\r\n     * Creates a new ProjectionNode.\r\n     * Expects the projection string to start with '[' and end with ']'.\r\n     *\r\n     * @param projection string describing projected columns {@type IndexedString}\r\n     * @param subtree source subtree {@type RATreeNode}\r\n     * @public\r\n     */\r\n    constructor(projection: IndexedString, subtree: RATreeNode) {\r\n        super(subtree);\r\n        this.projection = projection;\r\n        // @ts-ignore - should never be empty\r\n        this.stringRange = projection.getRange();\r\n    }\r\n\r\n    /**\r\n     * Parses projection string to set of projected columns and their ranges.\r\n     */\r\n    private parseProjection(): Set<{str: string, range: StartEndPair}> {\r\n        const ret = new Set<{str: string, range: StartEndPair}>();\r\n        let str: string = this.projection.toString().replace(/]/g, ',');\r\n        const projStart: number = this.stringRange.start;\r\n        let start: number = 1;\r\n        for (let i = 1; i < this.projection.length(); ++i) {\r\n            if (str.charAt(i) === ',') {\r\n                const range = (start === i) ? {start: projStart + start - 1, end: projStart + i - 1} :\r\n                  {start: projStart + start, end: projStart + i - 1};\r\n                ret.add({str: str.slice(start, i).trim(), range});\r\n                start = i + 1;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * After successful call, this.resultRelation must be set to valid Relation.\r\n     * Expectations: projected names are subset of source schema\r\n     * @public\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        // handles empty projection\r\n        if (this.projection.toString().slice(1, -1).trim().length === 0) {\r\n            throw ErrorFactory.semanticError(language().semanticErrors.projectionNode_emptyProjection, this.stringRange);\r\n        }\r\n        const source: Relation = this.subtree.getResult();\r\n        const projectedIndexed: {str: string, range: StartEndPair}[] = [...this.parseProjection()];\r\n        // checks if projected columns really exist in source relation\r\n        projectedIndexed.forEach(proj => {\r\n            if (!source.hasColumn(proj.str)) {\r\n                throw ErrorFactory.semanticError(language().semanticErrors.projectionNode_absentColumn, proj.range, proj.str);\r\n            }\r\n        });\r\n\r\n        const projected: string[] = projectedIndexed.map(p => p.str);\r\n        const result: Relation = new Relation(source.getName() + \"[...]\");\r\n        // projection of relational schema\r\n        source.forEachColumn((type, name) => {\r\n            if (projected.indexOf(name) > -1) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // projection of relation rows\r\n        source.getRows().forEach(row => {\r\n             let newRow: Row = new Row(result.getColumns());\r\n             row.getValues().forEach((value, name) => {\r\n                 if (projected.indexOf(name) > -1) {\r\n                     newRow.addValue(name, value);\r\n                 }\r\n             });\r\n             result.addRow(newRow);\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: projected names are subset of source schema\r\n     * Returned schema: intersection of projected names and source schema\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        let source = this.subtree.fakeEval(cursorIndex);\r\n        // checks whether the cursor is in this projection block - saves current available columns\r\n        let whispers = source.whispers;\r\n        if (this.stringRange !== undefined && this.stringRange.start < cursorIndex && cursorIndex <= this.stringRange.end) {\r\n            whispers = source.result.getColumnNames();\r\n        }\r\n        // adds errors from current expression\r\n        const errors = source.errors;\r\n        // creates relational schema - \"projected columns\"\r\n        const result: Relation = new Relation(source.result.name + \"[...]\");\r\n        // handles empty projection\r\n        if (this.projection.toString().slice(1, -1).trim().length === 0) {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.projectionNode_emptyProjection, this.stringRange));\r\n            return {result, whispers, errors};\r\n        }\r\n        const projected: Set<{str: string, range: StartEndPair}> = this.parseProjection();\r\n        // adds only projected, which exist in source\r\n        const absent: {str: string, range: StartEndPair}[] = [];\r\n        projected.forEach(proj => {\r\n            const strName = proj.str;\r\n            if (source.result.hasColumn(strName)) {\r\n                // @ts-ignore - strName must be in the source now\r\n                result.addColumn(strName, source.result.getColumns().get(strName));\r\n            }\r\n            else {\r\n                absent.push(proj);\r\n            }\r\n        });\r\n        absent.forEach(proj => {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.projectionNode_absentColumn, proj.range, proj.str));\r\n        });\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        return language().operations.projection;\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return this.projection.replace(/\\s+/g, ' ');\r\n    }\r\n}","import {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Lowercase reserved keywords which cannot be used for column names. They are:\r\n * - Null value: null\r\n * - Boolean values: true, false\r\n * - Empty string: \"\"\r\n */\r\nconst forbiddenColumnNames: string[] = [\"null\", \"true\", \"false\", \"\"];\r\n\r\n/**\r\n * Reserved keywords which cannot be used for relation names. They are:\r\n * - First characters of outer joins: F, L, R\r\n * - Empty string: \"\"\r\n */\r\nconst forbiddenRelationNames: string[] = [\"F\", \"L\", \"R\", \"\"];\r\n\r\n/**\r\n * Returns lowercase reserved keywords which cannot be used for column names. They are:\r\n * - Null value: null\r\n * - Boolean values: true, false\r\n * - Empty string: \"\"\r\n *\r\n * @return lowercase reserved column-keywords {@type string[]}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function getForbiddenColumnNames(): string[] {\r\n    return forbiddenColumnNames;\r\n}\r\n\r\n/**\r\n * Returns reserved keywords which cannot be used for relation names. They are:\r\n * - First characters of outer joins: F, L, R, f, l, r\r\n * - Empty string: \"\"\r\n *\r\n * @return lowercase reserved relation-keywords {@type string[]}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function getForbiddenRelationNames(): string[] {\r\n    return forbiddenRelationNames;\r\n}\r\n\r\n/**\r\n * Returns true if the given string is forbidden as a column name.\r\n *\r\n * @param str string to check {@type (string | IndexedString)}\r\n * @return true if the given string is forbidden as a column name {@type boolean}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function isForbiddenColumnName(str: string | IndexedString): boolean {\r\n    return forbiddenColumnNames.indexOf(str.toString().toLowerCase()) > -1;\r\n}\r\n\r\n/**\r\n * Returns true if the given string is forbidden as a relation name.\r\n *\r\n * @param str string to check {@type (string | IndexedString)}\r\n * @return true if the given string is forbidden as a relation name {@type boolean}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function isForbiddenRelationName(str: string | IndexedString): boolean {\r\n    // does not use to lower because forbidden names are upper\r\n    return forbiddenRelationNames.indexOf(str.toString()) > -1;\r\n}","import {IndexedString} from \"./indexedString\";\r\n\r\ninterface KeyValue {\r\n    key: IndexedString,\r\n    value: IndexedString\r\n}\r\n\r\n/**\r\n * Wrapper of JavaScript Map object to provide usage of object {@link IndexedString} as a key for {@link IndexedString} values.\r\n * @category Types\r\n * @public\r\n */\r\nexport class ISToISMap {\r\n    private map: Map<string, KeyValue> = new Map<string, KeyValue>();\r\n\r\n    /**\r\n     * Gets the value for the given key.\r\n     *\r\n     * @param key key of the value to get {@type (string | IndexedString)}\r\n     * @return value of the given key or undefined {@type IndexedString?}\r\n     * @public\r\n     */\r\n    public get(key: string | IndexedString): IndexedString | undefined {\r\n        const keyValue = this.map.get(key.toString());\r\n        return keyValue === undefined ? undefined : keyValue.value;\r\n    }\r\n\r\n    /**\r\n     * Sets the value for the given key.\r\n     *\r\n     * @param key key of the value to set {@type IndexedString}\r\n     * @param value value to set {@type IndexedString}\r\n     * @public\r\n     */\r\n    public set(key: IndexedString, value: IndexedString): void {\r\n        this.map.set(key.toString(), {key, value});\r\n    }\r\n\r\n    /**\r\n     * Deletes the value for the given key.\r\n     *\r\n     * @param key key of the value to delete {@type IndexedString}\r\n     * @return true if an element in the Map object existed and has been removed, or false if the element does not exist {@type boolean}\r\n     * @public\r\n     */\r\n    public delete(key: IndexedString): boolean {\r\n        return this.map.delete(key.toString());\r\n    }\r\n\r\n    /**\r\n     * Returns true, if the given key is in the map.\r\n     *\r\n     * @param key key to check {@type (string | IndexedString)}\r\n     * @return true, if the given key is in the map {@type boolean}\r\n     * @public\r\n     */\r\n    public has(key: string | IndexedString): boolean {\r\n        return this.map.has(key.toString());\r\n    }\r\n\r\n    /**\r\n     * Removes all values from the map.\r\n     * @public\r\n     */\r\n    public clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    /**\r\n     * Returns the size og the map.\r\n     *\r\n     * @return size of the map {@type number}\r\n     * @public\r\n     */\r\n    public size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    /**\r\n     * Performs the given function for each (value, key, index) in the map.\r\n     *\r\n     * @param f function to perform {@type function}\r\n     * @public\r\n     */\r\n    public forEach(f: (value: IndexedString, row: IndexedString, index?: number) => void): void {\r\n        [...this.map.values()].forEach((keyValue, index) => f(keyValue.value, keyValue.key, index));\r\n    }\r\n}","import {Row} from \"../relation/row\";\r\nimport {VEResult, VETreeNode} from \"./veTreeNode\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Enum of types of ComparingOperator class.\r\n * @enum {number}\r\n * @category VETree\r\n * @public\r\n */\r\nexport enum ComparingOperatorType {\r\n    equal,\r\n    nonEqual,\r\n    less,\r\n    more,\r\n    lessOrEqual,\r\n    moreOrEqual\r\n}\r\n\r\n/**\r\n * Comparing operator compares two values and returns boolean.\r\n * @extends VETreeNode\r\n * @category VETree\r\n * @public\r\n */\r\nexport class ComparingOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of equality type (type = ComparingOperatorType.equal).\r\n     *\r\n     * @param operator used string representation of equality operator {@type IndexedString}\r\n     * @param left left subtree producing a value {@type VETreeNode}\r\n     * @param right right subtree producing a value {@type VETreeNode}\r\n     * @return new ComparingOperator instance of equality type {@type ComparingOperator}\r\n     * @public\r\n     */\r\n    public static equal(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.equal, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of non-equality type (type = ComparingOperatorType.nonEqual).\r\n     *\r\n     * @param operator used string representation of non-equality operator {@type IndexedString}\r\n     * @param left left subtree producing a value {@type VETreeNode}\r\n     * @param right right subtree producing a value {@type VETreeNode}\r\n     * @return new ComparingOperator instance of non-equality type {@type ComparingOperator}\r\n     * @public\r\n     */\r\n    public static nonEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.nonEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of less type (type = ComparingOperatorType.less).\r\n     *\r\n     * @param operator used string representation of less operator {@type IndexedString}\r\n     * @param left left subtree producing a value {@type VETreeNode}\r\n     * @param right right subtree producing a value {@type VETreeNode}\r\n     * @return new ComparingOperator instance of less type {@type ComparingOperator}\r\n     * @public\r\n     */\r\n    public static less(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.less, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of more type (type = ComparingOperatorType.more).\r\n     *\r\n     * @param operator used string representation of more operator {@type IndexedString}\r\n     * @param left left subtree producing a value {@type VETreeNode}\r\n     * @param right right subtree producing a value {@type VETreeNode}\r\n     * @return new ComparingOperator instance of more type {@type ComparingOperator}\r\n     * @public\r\n     */\r\n    public static more(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.more, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of less-or-equal type (type = ComparingOperatorType.lessOrEqual).\r\n     *\r\n     * @param operator used string representation of less-or-equal operator {@type IndexedString}\r\n     * @param left left subtree producing a value {@type VETreeNode}\r\n     * @param right right subtree producing a value {@type VETreeNode}\r\n     * @return new ComparingOperator instance of less-or-equal type {@type ComparingOperator}\r\n     * @public\r\n     */\r\n    public static lessOrEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.lessOrEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of more-or-equal type (type = ComparingOperatorType.moreOrEqual).\r\n     *\r\n     * @param operator used string representation of more-or-equal operator {@type IndexedString}\r\n     * @param left left subtree producing a value {@type VETreeNode}\r\n     * @param right right subtree producing a value {@type VETreeNode}\r\n     * @return new ComparingOperator instance of more-or-equal type {@type ComparingOperator}\r\n     * @public\r\n     */\r\n    public static moreOrEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.moreOrEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator of the given type.\r\n     *\r\n     * @param type ComparingOperator type {@type ComparingOperatorType}\r\n     * @param operator used string representation of the operator {@type IndexedString}\r\n     * @param left left subtree producing a value {@type VETreeNode}\r\n     * @param right right subtree producing a value {@type VETreeNode}\r\n     * @public\r\n     */\r\n    public constructor(private readonly type: ComparingOperatorType, private readonly operator: IndexedString,\r\n                       private readonly left: VETreeNode, private readonly right: VETreeNode) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluate the node and its subtrees and compares their value results to produce a boolean value. It needs to\r\n     * receive results of the same type from its subtrees.\r\n     * NOTE: If one of the subtree results is null, only equality and non-equality are valid. Other comparing\r\n     * operations returns always false.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes {@type Row}\r\n     * @return boolean comparing left and right subtree values {@type VEResult}\r\n     * @public\r\n     */\r\n    public eval(source: Row): VEResult {\r\n        const leftResult: VEResult = this.left.eval(source);\r\n        const rightResult: VEResult = this.right.eval(source);\r\n\r\n        if (leftResult.type !== \"null\" && rightResult.type !== \"null\" && leftResult.type !== rightResult.type) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.comparingOperator_differentInputTypes,\r\n                this.operator.getRange(), this.operator.toString(), leftResult.type, rightResult.type);\r\n        }\r\n\r\n        // if both values are null but both types are not null, returns false\r\n        if (leftResult.value === null && rightResult.value === null && leftResult.type !== \"null\" && rightResult.type !== \"null\") {\r\n            return {value: false, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.equal) {\r\n            return {value: leftResult.value === rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.nonEqual) {\r\n            // if any value of non-null type is null, returns false\r\n            if ((leftResult.value === null && leftResult.type !== \"null\") || (rightResult.value === null && rightResult.type !== \"null\")) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value !== rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.less) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value < rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.more) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value > rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.lessOrEqual) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value <= rightResult.value, type: \"boolean\"};\r\n        }\r\n        // if (this.type === ComparingOperatorType.moreOrEqual)\r\n        if (leftResult.value === null || rightResult.value === null) {\r\n            return {value: false, type: \"boolean\"};\r\n        }\r\n        return {value: leftResult.value >= rightResult.value, type: \"boolean\"};\r\n    }\r\n\r\n    /**\r\n     * Returns string representation of the node.\r\n     *\r\n     * @return string representation of the node {@type string}\r\n     * @public\r\n     */\r\n    public toString(): string {\r\n        return \"(\" + this.left.toString() + \" \" + this.operator.toString() + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import {UnaryNode} from \"./unaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {StringUtils} from \"../utils/stringUtils\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {Row} from \"../relation/row\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {isForbiddenColumnName} from \"../utils/keywords\";\r\nimport {ErrorWithTextRange} from \"../error/errorWithTextRange\";\r\nimport {ISToISMap} from \"../types/isToISMap\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Renaming node of the relational algebra syntactic tree.\r\n * @extends UnaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class RenameNode extends UnaryNode {\r\n\r\n    private readonly rename: IndexedString;\r\n    private readonly stringRange: StartEndPair | undefined;\r\n\r\n    /**\r\n     * Creates a new RenameNode.\r\n     * The rename string is expected to start with '<' and end with '>'.\r\n     *\r\n     * @param rename string describing each renaming {@type IndexedString}\r\n     * @param subtree source subtree {@type RATreeNode}\r\n     * @public\r\n     */\r\n    public constructor(rename: IndexedString, subtree: RATreeNode) {\r\n        super(subtree);\r\n        this.rename = rename;\r\n        this.stringRange = rename.getRange();\r\n    }\r\n\r\n    private parseChanges(doThrow: boolean, errors: ErrorWithTextRange[] = []): ISToISMap {\r\n        const handleError = (error: SyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            } else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        const parts: IndexedString[] = this.rename.slice(1, -1).split(\",\");\r\n        const ret: ISToISMap = new ISToISMap();\r\n        for (let part of parts) {\r\n            // @ts-ignore\r\n            let words: IndexedString[] = part.split(\"->\").map(w => w.trim());\r\n            let beforeError = false; // true when there was an error in before in \"before -> after\"\r\n            let afterError = false;  // true when there was an error in after in \"before -> after\"\r\n            if (words.length !== 2) {\r\n                let range = part.getRange();\r\n                if (part.isEmpty() && this.stringRange !== undefined) {\r\n                    range = {start: this.stringRange.start, end: this.stringRange.start};\r\n                }\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.renameNode_missingArrow, range));\r\n                beforeError = true;\r\n                afterError = true;\r\n            }\r\n            if (!beforeError && ret.has(words[0])) {\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.renameNode_multipleRenameOfTheColumn,\r\n                    words[0].getRange(), words[0].toString()));\r\n                beforeError = true;\r\n            }\r\n            if (!afterError && !StringUtils.isName(words[1].toString())) {\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.renameNode_invalidNewName,\r\n                    words[1].getRange(), words[1].toString()));\r\n                afterError = true;\r\n            }\r\n            if (!afterError && isForbiddenColumnName(words[1])) {\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.renameNode_keywordNewName,\r\n                    words[1].getRange(), words[1].toString()));\r\n                afterError = true;\r\n            }\r\n            // if no error found, adds original rename pair\r\n            if (!beforeError && !afterError) {\r\n                ret.set(words[0], words[1]);\r\n            }\r\n            // if no before error, fakes rename \"before -> before\"\r\n            else if (!beforeError) {\r\n                ret.set(words[0], words[0]);\r\n            }\r\n            // if no after error, fakes rename \"\"\" -> before\", where empty string has undefined range\r\n            else if (!afterError) {\r\n                ret.set(IndexedString.empty(), words[0]);\r\n            }\r\n            // if both errors, adds nothing\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * After successful call, this.resultRelation must be set to valid Relation.\r\n     * Expectations: original names in projection pair (original -> new) are subset of the source schema,\r\n     * new names with rest of the source schema contain no duplicity\r\n     * @public\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const changes: ISToISMap = this.parseChanges(true);\r\n        const source: Relation = this.subtree.getResult();\r\n        // check whether all columns to rename are in source relation\r\n        changes.forEach((value, key) => {\r\n             if (source.getColumnNames().indexOf(key.toString()) === -1) {\r\n                 throw ErrorFactory.semanticError(language().semanticErrors.renameNode_absentOriginalColumn,\r\n                     key.getRange(), key.toString());\r\n             }\r\n        });\r\n        // rename of relational schema\r\n        const result: Relation = new Relation(source.getName() + \"<...>\");\r\n        const toChange: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>();\r\n        // in first loop adds unchanged columns only\r\n        source.forEachColumn((type, name) => {\r\n            if (changes.has(name)) {\r\n                toChange.set(name, type);\r\n            }\r\n            else {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // in second loop adds changed columns\r\n        toChange.forEach((type, name) => {\r\n            // @ts-ignore (changes must contain 'name' key now)\r\n            if (!result.addColumn(changes.get(name).toString(), type)) {\r\n                const newName = changes.get(name);\r\n                throw ErrorFactory.semanticError(language().semanticErrors.renameNode_changeToDuplicit,\r\n                    this.rename.getRange(), newName ? newName.toString() : \"\");\r\n            }\r\n        });\r\n        // rename of relation rows\r\n        source.getRows().forEach(row => {\r\n            const newRow: Row = new Row(result.getColumns());\r\n            row.getValues().forEach((value, name) => {\r\n                const returned = changes.get(name);\r\n                if (typeof returned === \"undefined\") {\r\n                    newRow.addValue(name, value);\r\n                }\r\n                else {\r\n                    newRow.addValue(returned.toString(), value);\r\n                }\r\n            });\r\n            result.addRow(newRow);\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: original names in projection pair (original -> new) are subset of the source schema,\r\n     * new names with rest of the source schema contain no duplicity\r\n     * Returned schema: if the cursor is not after the arrow '->' returns\r\n     * (source schema minus originals) union (news whose originals were in source schema),\r\n     * otherwise returns empty array (does not whisper to what the user should rename)\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        const source = this.subtree.fakeEval(cursorIndex);\r\n        // checks whether the cursor is in this rename block\r\n        let whispers = source.whispers;\r\n        if (this.stringRange !== undefined && this.stringRange.start < cursorIndex && cursorIndex <= this.stringRange.end) {\r\n            whispers = source.result.getColumnNames();\r\n        }\r\n        // adds errors from current expression\r\n        const errors = source.errors;\r\n        const changes: ISToISMap = this.parseChanges(false, errors);\r\n        // creates relational schema - \"(source minus to-rename) union (renamed existing in source)\"\r\n        const result: Relation = new Relation(source.result.getName() + \"<...>\");\r\n        // in first loop adds source columns which are not in changes.keys\r\n        source.result.forEachColumn((type, name) => {\r\n            if (!changes.has(name)) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // in second loop adds changes.values whose changes.keys are in source\r\n        const absent: IndexedString[] = [];\r\n        const duplicit: IndexedString[] = [];\r\n        changes.forEach((after, before) => {\r\n            const beforeStr = before.toString();\r\n            const afterStr = after.toString();\r\n            if (!source.result.hasColumn(beforeStr) && !before.isEmpty()) {\r\n                absent.push(before);\r\n            }\r\n            // @ts-ignore source must have beforeStr now\r\n            else if(!result.addColumn(afterStr, source.result.getColumns().get(beforeStr))) {\r\n                duplicit.push(after);\r\n            }\r\n        });\r\n        absent.forEach(column => {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.renameNode_absentOriginalColumn,\r\n                column.getRange(), column.toString()));\r\n        });\r\n        duplicit.forEach(column => {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.renameNode_changeToDuplicit,\r\n                column.getRange(), column.toString()));\r\n        });\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        return language().operations.rename;\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return this.rename.replace(/\\s+/g, ' ');\r\n    }\r\n}","import {Row} from \"../relation/row\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\n\r\n/**\r\n * Result of the VETreeNode evaluation.\r\n * @category VETree\r\n * @public\r\n */\r\nexport interface VEResult {\r\n    /**\r\n     * result value\r\n     * @type ColumnContent\r\n     * @public\r\n     */\r\n    value: ColumnContent,\r\n    /**\r\n     * result type\r\n     * @type (SupportedColumnType | \"null\")\r\n     * @public\r\n     */\r\n    type: SupportedColumnType | \"null\"\r\n}\r\n\r\n/**\r\n * Abstract class for value-evaluating nodes producing new values.\r\n * @category VETree\r\n * @public\r\n */\r\nexport abstract class VETreeNode {\r\n\r\n    /**\r\n     * Evaluates this value-evaluating tree.\r\n     *\r\n     * @param source row with values to be used to reference to {@type Row}\r\n     * @return evaluated value and its type {@type VEResult}\r\n     * @public\r\n     */\r\n    public abstract eval(source: Row): VEResult;\r\n\r\n    /**\r\n     * Returns string representation of the node.\r\n     *\r\n     * @return string representation of the node {@type string}\r\n     * @public\r\n     */\r\n    public abstract toString(): string;\r\n}","import {Row} from \"../relation/row\";\r\nimport {VEResult, VETreeNode} from \"./veTreeNode\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Enum of types of LogicalOperator class.\r\n * @category VETree\r\n * @public\r\n */\r\nenum LogicalOperatorType {\r\n    and,\r\n    or,\r\n    not\r\n}\r\n\r\n/**\r\n * Logical operator chains boolean values and produces new ones.\r\n * @extends VETreeNode\r\n * @category VETree\r\n * @public\r\n */\r\nexport class LogicalOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates an 'and' logical operator.\r\n     *\r\n     * @param operator String representing an 'and' in input (used to printing) {@type IndexedString}\r\n     * @param left Left subtree evaluating to a boolean value {@type VETreeNode}\r\n     * @param right Right subtree evaluating to a boolean value {@type VETreeNode}\r\n     * @return new LogicalOperator instance of and type {@type LogicalOperator}\r\n     * @public\r\n     */\r\n    public static and(operator: IndexedString, left: VETreeNode, right: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.and, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates an 'or' logical operator.\r\n     *\r\n     * @param operator String representing an 'or' in input (used to printing) {@type IndexedString}\r\n     * @param left Left subtree evaluating to a boolean value {@type VETreeNode}\r\n     * @param right Right subtree evaluating to a boolean value {@type VETreeNode}\r\n     * @return new LogicalOperator instance of and type {@type LogicalOperator}\r\n     * @public\r\n     */\r\n    public static or(operator: IndexedString, left: VETreeNode, right: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.or, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates a 'not' logical operator.\r\n     *\r\n     * @param operator String representing a 'not' in input (used to printing) {@type IndexedString}\r\n     * @param subtree Subtree evaluating to a boolean value {@type VETreeNode}\r\n     * @return new LogicalOperator instance of and type {@type LogicalOperator}\r\n     * @public\r\n     */\r\n    public static not(operator: IndexedString, subtree: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.not, operator, subtree);\r\n    }\r\n\r\n    private constructor(private readonly type: LogicalOperatorType, private readonly operator: IndexedString,\r\n                        private readonly left: VETreeNode, private readonly right?: VETreeNode) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluates recursively subtrees and transforms their boolean results into a new boolean.\r\n     * If any subtree evaluates to string or number, throws error.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes {@type Row}\r\n     * @return boolean comparing left and right subtree values {@type VEResult}\r\n     * @public\r\n     */\r\n    public eval(source: Row): { value: boolean, type: \"boolean\" } {\r\n        const leftResult: VEResult = this.left.eval(source);\r\n        if (leftResult.type !== \"boolean\") {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.logicalOperator_leftInputNotBoolean,\r\n                this.operator.getRange(), this.operator.toString(), leftResult.type);\r\n        }\r\n\r\n        if (this.type === LogicalOperatorType.not) {\r\n            if (leftResult.value === null) {\r\n                return { value: false, type: \"boolean\" };\r\n            }\r\n            return { value: !leftResult.value, type: \"boolean\" };\r\n        }\r\n        else {\r\n            // @ts-ignore (in and/or operations right subtree must exist)\r\n            const rightResult: VEResult = this.right.eval(source);\r\n            if (rightResult.type !== \"boolean\") {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.logicalOperator_rightInputNotBoolean,\r\n                    this.operator.getRange(), this.operator.toString(), rightResult.type);\r\n            }\r\n\r\n            if (this.type === LogicalOperatorType.and) {\r\n                if (leftResult.value === null || rightResult.value === null) {\r\n                    return { value: false, type: \"boolean\" };\r\n                }\r\n                // @ts-ignore (they must be both booleans now)\r\n                return { value: leftResult.value && rightResult.value, type: \"boolean\" };\r\n            }\r\n            else /* if (this.type === LogicalOperatorType.or)*/ {\r\n                if (leftResult.value === null && rightResult.value === null) {\r\n                    return { value: false, type: \"boolean\" };\r\n                }\r\n                if (leftResult.value === null) {\r\n                    // @ts-ignore (it must be boolean now)\r\n                    return { value: rightResult.value, type: \"boolean\" };\r\n                }\r\n                if (rightResult.value === null) {\r\n                    // @ts-ignore (it must be boolean now)\r\n                    return { value: leftResult.value, type: \"boolean\" };\r\n                }\r\n                // @ts-ignore (they must be both booleans now)\r\n                return { value: leftResult.value || rightResult.value, type: \"boolean\" };\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns string representation of the node.\r\n     *\r\n     * @return string representation of the node {@type string}\r\n     * @public\r\n     */\r\n    public toString(): string {\r\n        if (this.type === LogicalOperatorType.not) {\r\n            return this.operator.toString() + \"(\" + this.left.toString() + \")\";\r\n        }\r\n        // @ts-ignore (in and, or operations right subtree must exist)\r\n        return \"(\" + this.left.toString() + \" \" + this.operator.toString() + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import {Row} from \"../relation/row\";\r\nimport {VEResult, VETreeNode} from \"./veTreeNode\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Enum of types of ComputingOperator class.\r\n * @category VETree\r\n * @public\r\n */\r\nenum ComputingOperatorType {\r\n    plus = \"+\",\r\n    minus = \"-\",\r\n    multiplication = \"*\",\r\n    division = \"/\"\r\n}\r\n\r\n/**\r\n * Comparing operator takes two number values and returns a new computed number.\r\n * @extends VETreeNode\r\n * @category VETree\r\n * @public\r\n */\r\nexport class ComputingOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates an addition (+) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value {@type VETreeNode}\r\n     * @param right Right subtree evaluating to a number value {@type VETreeNode}\r\n     * @param range Range of the operator in the input string to highlight errors {@type StartEndPair?}\r\n     * @return new ComputingOperator instance of add type {@type ComputingOperator}\r\n     * @public\r\n     */\r\n    public static add(left: VETreeNode, right: VETreeNode, range: StartEndPair | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.plus, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a deduction (-) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value {@type VETreeNode}\r\n     * @param right Right subtree evaluating to a number value {@type VETreeNode}\r\n     * @param range Range of the operator in the input string to highlight errors {@type StartEndPair?}\r\n     * @return new ComputingOperator instance of deduct type {@type ComputingOperator}\r\n     * @public\r\n     */\r\n    public static deduct(left: VETreeNode, right: VETreeNode, range: StartEndPair | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.minus, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a multiplication (*) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value {@type VETreeNode}\r\n     * @param right Right subtree evaluating to a number value {@type VETreeNode}\r\n     * @param range Range of the operator in the input string to highlight errors {@type StartEndPair?}\r\n     * @return new ComputingOperator instance of multiply type {@type ComputingOperator}\r\n     * @public\r\n     */\r\n    public static multiply(left: VETreeNode, right: VETreeNode, range: StartEndPair | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.multiplication, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a division (/) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value {@type VETreeNode}\r\n     * @param right Right subtree evaluating to a number value {@type VETreeNode}\r\n     * @param range Range of the operator in the input string to highlight errors {@type StartEndPair?}\r\n     * @return new ComputingOperator instance of divide type {@type ComputingOperator}\r\n     * @public\r\n     */\r\n    public static divide(left: VETreeNode, right: VETreeNode, range: StartEndPair | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.division, left, right, range);\r\n    }\r\n\r\n    private constructor(private readonly type: ComputingOperatorType, private readonly left: VETreeNode,\r\n                        private readonly right: VETreeNode, private readonly range: StartEndPair | undefined) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluates recursively subtrees and transforms their number results into a new number.\r\n     * If any subtree evaluates to string or boolean, throws error.\r\n     * If any subtree evaluates to null, returns null.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes {@type Row}\r\n     * @return number produced from subtrees with given operation, or null if any subtree returned null {@type VEResult}\r\n     */\r\n    public eval(source: Row): { value: number | null, type: \"number\" } {\r\n        const leftResult: VEResult = this.left.eval(source);\r\n        const rightResult: VEResult = this.right.eval(source);\r\n\r\n        if (leftResult.type !== \"number\" || rightResult.type !== \"number\") {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.computingOperator_inputTypesNotNumbers, this.range,\r\n                this.type, leftResult.type, rightResult.type);\r\n        }\r\n\r\n        if (leftResult.value === null || rightResult.value === null) {\r\n            return { value: null, type: \"number\" };\r\n        }\r\n\r\n        switch (this.type) {\r\n            case ComputingOperatorType.plus:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value + rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.minus:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value - rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.multiplication:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value * rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.division:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value / rightResult.value, type: \"number\" };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns string representation of the node.\r\n     *\r\n     * @return string representation of the node {@type string}\r\n     * @public\r\n     */\r\n    public toString(): string {\r\n        return \"(\" + this.left.toString() + \" \" + this.type + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import {Row} from \"../relation/row\";\r\nimport {VEResult, VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\n\r\n/**\r\n * Class storing literal value of number, string or null type.\r\n * @extends VETreeNode\r\n * @category VETree\r\n * @public\r\n */\r\nexport class LiteralValue extends VETreeNode {\r\n\r\n    /**\r\n     * Creates a literal storing given value.\r\n     *\r\n     * @param value value to be returned by eval(...) function {@type ColumnContent}\r\n     * @param type type of the literal value {@type (SupportedColumnType | \"null\")}\r\n     */\r\n    public constructor(private readonly value: ColumnContent, private readonly type: SupportedColumnType | \"null\") {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Returns stored value.\r\n     *\r\n     * @param source row with actual values of columns (note: not used in literals) {@type Row}\r\n     * @return stored value and its type {@type VEResult}\r\n     * @public\r\n     */\r\n    public eval(source: Row): VEResult {\r\n        return { value: this.value, type: this.type };\r\n    }\r\n\r\n    /**\r\n     * Returns string representation of the node.\r\n     *\r\n     * @return string representation of the node {@type string}\r\n     * @public\r\n     */\r\n    public toString(): string {\r\n        if (this.value === null) {\r\n            return \"null\";\r\n        }\r\n        return this.value.toString();\r\n    }\r\n}","import {Row} from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Class storing reference to a column.\r\n * @extends VETreeNode\r\n * @category VETree\r\n * @public\r\n */\r\nexport class ReferenceValue extends VETreeNode {\r\n\r\n    /**\r\n     * Creates a reference to the given column.\r\n     *\r\n     * @param columnName name of the referenced column {@type IndexedString}\r\n     * @public\r\n     */\r\n    public constructor(private readonly columnName: IndexedString) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Returns value (expected to be string, number, or boolean) of the referenced column from given source row.\r\n     *\r\n     * @param source row with actual values of columns {@type Row}\r\n     * @return referenced value and its type {@type VEResult}\r\n     * @public\r\n     */\r\n    public eval(source: Row): { value: ColumnContent, type: SupportedColumnType } {\r\n        const value: ColumnContent | undefined = source.getValue(this.columnName.toString());\r\n        const type: SupportedColumnType | undefined = source.getType(this.columnName.toString());\r\n        if (value === undefined || type === undefined) {\r\n            throw ErrorFactory.semanticError(language().semanticErrors.referenceValue_absentColumn,\r\n                this.columnName.getRange(), this.columnName.toString(), [...source.getColumnNames()].join(', '));\r\n        }\r\n        return { value: value, type: type };\r\n    }\r\n\r\n    /**\r\n     * Returns string representation of the node.\r\n     *\r\n     * @return string representation of the node {@type string}\r\n     * @public\r\n     */\r\n    public toString(): string {\r\n        return this.columnName.toString();\r\n    }\r\n}","import {ComparingOperatorType} from \"../vetree/comparingOperator\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Precedence value for all token types.\r\n */\r\nconst precedenceNot: number = 50;\r\nconst precedenceMulDiv: number = 30;\r\nconst precedencePlusMinus: number = 25;\r\nconst precedenceComparison: number = 20;\r\nconst precedenceAnd: number = 10;\r\nconst precedenceOr: number = 5;\r\n\r\n/**\r\n * Tokens used for parsing of string expression to BooleanEvaluating tree.\r\n */\r\nexport abstract class ValueToken {\r\n    protected constructor(public readonly str: IndexedString) {}\r\n\r\n    /**\r\n     * Gets token start and end index in the text (if the token has IndexedString representation) or undefined.\r\n     */\r\n    public getRange(): StartEndPair | undefined {\r\n        return this.str.getRange();\r\n    }\r\n}\r\n\r\nexport abstract class OperatorToken extends ValueToken {\r\n    protected constructor(str: IndexedString, readonly precedence: number) {\r\n        super(str);\r\n    }\r\n}\r\n\r\nexport class LogicalNotToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceNot);\r\n    }\r\n}\r\n\r\nexport class LogicalAndToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceAnd);\r\n    }\r\n}\r\n\r\nexport class LogicalOrToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceOr);\r\n    }\r\n}\r\n\r\nexport class ComputingMultiplicationToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceMulDiv);\r\n    }\r\n}\r\n\r\nexport class ComputingDivisionToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceMulDiv);\r\n    }\r\n}\r\n\r\nexport class ComputingPlusToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedencePlusMinus);\r\n    }\r\n}\r\n\r\nexport class ComputingMinusToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedencePlusMinus);\r\n    }\r\n}\r\n\r\nexport class ComparingToken extends OperatorToken {\r\n    constructor(readonly type: ComparingOperatorType, operator: IndexedString) {\r\n        super(operator, precedenceComparison);\r\n    }\r\n}\r\n\r\nexport abstract class ParenthesisToken extends ValueToken {\r\n    protected constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class OpeningParentheses extends ParenthesisToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class ClosingParentheses extends ParenthesisToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class LiteralToken extends ValueToken {\r\n    constructor(str: IndexedString, readonly value: ColumnContent, readonly type: SupportedColumnType | \"null\") {\r\n        super(str);\r\n    }\r\n}\r\n\r\nexport class ReferenceToken extends ValueToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(columnName: IndexedString) {\r\n        super(columnName);\r\n    }\r\n}","import {StringUtils} from \"../utils/stringUtils\";\r\nimport {ComparingOperator, ComparingOperatorType} from \"../vetree/comparingOperator\";\r\nimport {LogicalOperator} from \"../vetree/logicalOperator\";\r\nimport {LiteralValue} from \"../vetree/literalValue\";\r\nimport {ReferenceValue} from \"../vetree/referenceValue\";\r\nimport {ComputingOperator} from \"../vetree/computingOperator\";\r\nimport {\r\n    ClosingParentheses,\r\n    ComparingToken,\r\n    ComputingDivisionToken,\r\n    ComputingMinusToken,\r\n    ComputingMultiplicationToken,\r\n    ComputingPlusToken,\r\n    LiteralToken,\r\n    LogicalAndToken,\r\n    LogicalNotToken,\r\n    LogicalOrToken,\r\n    OpeningParentheses,\r\n    OperatorToken,\r\n    ParenthesisToken,\r\n    ReferenceToken,\r\n    ValueToken\r\n} from \"./valueTokens\"\r\nimport {VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {IndexedStringUtils} from \"../utils/indexedStringUtils\";\r\nimport {ErrorWithTextRange, insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {RASyntaxError} from \"../error/raSyntaxError\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Parser of the logic-algebraic subexpressions in relational algebra expressions.\r\n * @category Expression\r\n * @public\r\n */\r\nexport class ValueParser {\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression into a value-evaluating tree and returns the tree.\r\n     * Uses Shunting-yard algorithm (first, it transforms the string into reverse polish notation).\r\n     * Supported expressions:\r\n     * - logical: and (&&, &), or (||, |), not (!, ~)\r\n     * - computing: addition (+), deduction (-), multiplication (*), division (/)\r\n     * - comparing: equal (==, =), non-equal (!=, <>), less (<), more (>), less-or-equal (<=), more-or-equal (>=)\r\n     * - literals: numbers (1, 5.02, etc.), strings (\"String\", \"With inner \\\" symbol\", etc.), nulls (null),\r\n     * booleans (true, false)\r\n     * - column references (ColumnNameAsStringWithoutQuotes, Id, etc.)\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed {@type IndexedString}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @return VETreeNode root of the evaluation tree {@type VETreeNode}\r\n     * @public\r\n     */\r\n    public static parse(str: IndexedString, nullValuesSupport: boolean): VETreeNode {\r\n        let tokens: ValueToken[] = ValueParser.parseTokens(str, nullValuesSupport, true);\r\n        this.assertValidInfixTokens(tokens, true);\r\n        tokens = this.simplify(tokens);\r\n        try {\r\n            const rpn: ValueToken[] = ValueParser.toRPN(tokens);\r\n            return ValueParser.rpnToVETree(rpn);\r\n        }\r\n        catch (err) {\r\n            throw insertRangeIfUndefined(err, str.getRange());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression and returns errors in it.\r\n     * For supported operations see {@link parse}.\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed {@type IndexedString}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @param columns available source column names {@type string[]}\r\n     * @return detected errors {@type ErrorWithTextRange[]}\r\n     * @public\r\n     */\r\n    public static fakeParse(str: IndexedString, nullValuesSupport: boolean, columns: string[]): ErrorWithTextRange[] {\r\n        const errors: ErrorWithTextRange[] = [];\r\n        let tokens: ValueToken[] = ValueParser.parseTokens(str, nullValuesSupport, false, errors);\r\n        tokens.forEach(token => {\r\n            if (token instanceof ReferenceToken && columns.indexOf(token.str.toString()) === -1) {\r\n                errors.push(ErrorFactory.semanticError(language().semanticErrors.referenceValue_absentColumn,\r\n                    token.str.getRange(), token.str.toString(), columns.join(', ')));\r\n            }\r\n        })\r\n        this.assertValidInfixTokens(tokens, false, errors);\r\n        return errors;\r\n    }\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression into an array of Tokens.\r\n     * Tokens are returned infix (in order parsed from string).\r\n     * If doThrow is true, found errors are thrown. Otherwise, they are added in errors array and ignored.\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param doThrow true if errors should be thrown\r\n     * @param errors array for storing not thrown errors\r\n     * @return infix array of parsed Tokens\r\n     */\r\n    public static parseTokens(str: IndexedString, nullValuesSupport: boolean, doThrow: boolean,\r\n                              errors: ErrorWithTextRange[] = []): ValueToken[] {\r\n        const handleError = (error: RASyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            }\r\n            else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        let rest: IndexedString = str.trim();\r\n        if (rest.isEmpty()) {\r\n            handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_emptyInput, undefined));\r\n        }\r\n        const tokens: ValueToken[] = [];\r\n        while (!rest.isEmpty()) {\r\n            // PARENTHESES\r\n            if (rest.startsWith('(')) {\r\n                tokens.push(new OpeningParentheses(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith(')')) {\r\n                tokens.push(new ClosingParentheses(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // COMPUTING OPERATORS\r\n            else if (rest.startsWith('+')) {\r\n                tokens.push(new ComputingPlusToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('-')) {\r\n                tokens.push(new ComputingMinusToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('*')) {\r\n                tokens.push(new ComputingMultiplicationToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('/')) {\r\n                tokens.push(new ComputingDivisionToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // COMPARING OPERATORS\r\n            else if (rest.startsWith('==')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.equal, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('=')) {     // NOTE: needs to be after '==' check\r\n                tokens.push(new ComparingToken(ComparingOperatorType.equal, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('!=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.nonEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<>')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.nonEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.lessOrEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('>=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.moreOrEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.less, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('>')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.more, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // LOGICAL OPERATORS\r\n            else if (rest.startsWith('!') || rest.startsWith('~')\r\n                || rest.startsWith('\\u00ac')) { // NOTE: needs to be after '!=' check\r\n                tokens.push(new LogicalNotToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('&&')) {\r\n                tokens.push(new LogicalAndToken(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('&') || rest.startsWith('\\u2227')) { // NOTE: needs to be after '&&' check\r\n                tokens.push(new LogicalAndToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('||')) {\r\n                tokens.push(new LogicalOrToken(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('|') || rest.startsWith('\\u2228')) { // NOTE: needs to be after '||' check\r\n                tokens.push(new LogicalOrToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // LITERALS\r\n            else if (rest.startsWith('\"')) {\r\n                const split = IndexedStringUtils.nextQuotedString(rest);\r\n                if (split.error !== undefined) {\r\n                    handleError(split.error);\r\n                }\r\n                const end = split.first.length() > 1 ? -1 : undefined;\r\n                const str = split.first.slice(1, end);\r\n                tokens.push(new LiteralToken(str, str.toString(), \"string\"));\r\n                rest = split.second;\r\n            }\r\n            else if (StringUtils.isDigit(rest.charAt(0))) {\r\n                let split = IndexedStringUtils.nextNumber(rest);\r\n                tokens.push(new LiteralToken(split.first, Number(split.first.toString()), \"number\"));\r\n                rest = split.second;\r\n            }\r\n            else if (rest.startsWith('null')) {\r\n                if (!nullValuesSupport) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_unsupportedNull,\r\n                        rest.slice(0, 4).getRange()));\r\n                }\r\n                tokens.push(new LiteralToken(rest.slice(0, 4), null, \"null\"));\r\n                rest = rest.slice(4);\r\n            }\r\n            else if (rest.startsWith('true') || rest.startsWith('True') || rest.startsWith('TRUE')) {\r\n                tokens.push(new LiteralToken(rest.slice(0, 4), true, \"boolean\"));\r\n                rest = rest.slice(4);\r\n            }\r\n            else if (rest.startsWith('false') || rest.startsWith('False') || rest.startsWith('FALSE')) {\r\n                tokens.push(new LiteralToken(rest.slice(0, 5), false, \"boolean\"));\r\n                rest = rest.slice(5);\r\n            }\r\n            // COLUMN REFERENCE\r\n            else if (StringUtils.isLetter(rest.charAt(0)) || rest.charAt(0) === '_') {\r\n                let split = IndexedStringUtils.nextName(rest);\r\n                tokens.push(new ReferenceToken(split.first));\r\n                rest = split.second;\r\n            }\r\n            // UNEXPECTED PART\r\n            else {\r\n                const split = IndexedStringUtils.nextNonWhitespacePart(rest);\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_unexpectedPart,\r\n                    split.first.getRange(), split.first.toString()));\r\n                rest = rest.slice(split.first.length());\r\n            }\r\n            rest = rest.trim();\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * It checks whether all adjacent pairs of tokens are possible and if the array start and end are valid\r\n     * (e.i., it starts with '(', literal, column reference or '!' and it ends with ')', literal or column reference).\r\n     * If doThrow is true, found errors are thrown. Otherwise, they are added in errors array and ignored.\r\n     */\r\n    public static assertValidInfixTokens(tokens: ValueToken[], doThrow: boolean, errors: ErrorWithTextRange[] = []) {\r\n        if (tokens.length === 0) {\r\n            return;\r\n        }\r\n        \r\n        const handleError = (error: RASyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            }\r\n            else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        \r\n        // checks start of an array: it must start with '(', literal, reference or '!'\r\n        // it cannot start with binary operator or ')'\r\n        if ((tokens[0] instanceof ClosingParentheses) || ((tokens[0] instanceof OperatorToken) && !(tokens[0] instanceof LogicalNotToken))) {\r\n            handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_invalidStart,\r\n                tokens[0].getRange(), tokens[0].str.toString()));\r\n        }\r\n        // checks end of an array: it must end with ')', literal or reference\r\n        // it cannot end with operator or '('\r\n        if ((tokens[tokens.length - 1] instanceof OpeningParentheses) || (tokens[tokens.length - 1] instanceof OperatorToken)) {\r\n            handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_invalidEnd,\r\n                tokens[tokens.length - 1].getRange(), tokens[tokens.length - 1].str.toString()));\r\n        }\r\n        // checks adjacent pairs of tokens\r\n        let i2: number = 1;\r\n        while (i2 < tokens.length) {\r\n            const token1: ValueToken = tokens[i2 - 1];\r\n            const token2: ValueToken = tokens[i2];\r\n            ++i2;\r\n\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            if (token2 instanceof LiteralToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_literalAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_literalAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_literalAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof ReferenceToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_referenceAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_referenceAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_referenceAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof LogicalNotToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_notAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_notAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_notAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: literal, reference or ')'\r\n            // invalid predecessors: operator or '('\r\n            else if (token2 instanceof OperatorToken /* only binary (without LogicalNotToken) */ ) {\r\n                if (token1 instanceof OperatorToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_binaryAfterOperator,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof OpeningParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_binaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof OpeningParentheses) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_openingAfterLiteral,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_openingAfterReference,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_openingAfterClosing,\r\n                        token2.getRange()));\r\n                }\r\n            }\r\n            // valid predecessors: literal or reference\r\n            // invalid predecessors: operator, '(' or ')'\r\n            else if (token2 instanceof ClosingParentheses) {\r\n                if (token1 instanceof OperatorToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_closingAfterOperator,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof OpeningParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_closingAfterOpening,\r\n                        token2.getRange()));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simplifies given token array in infix form. That means all groups of LogicalNotTokens ('!') are reduced to 1 or 0\r\n     * tokens (\"!\" => \"!\", \"!!\" => \"\", \"!!!\" => \"!\", \"!!!!\" => \"\", ...).\r\n     *\r\n     * @param tokens tokens to simplify\r\n     */\r\n    public static simplify(tokens: ValueToken[]): ValueToken[] {\r\n        const notIndexes: number[] = [];\r\n        const indexesToRemove: Set<number> = new Set<number>();\r\n        // finds indexes in tokens where '!'s are\r\n        tokens.forEach((token, i) => {\r\n            if (token instanceof LogicalNotToken) {\r\n                notIndexes.push(i);\r\n            }\r\n        });\r\n        for (let i = 1; i < notIndexes.length; ++i) {\r\n            // if there is \"x - 1\" and \"x\" next to each other, adds them to remove\r\n            if (notIndexes[i - 1] + 1 === notIndexes[i]) {\r\n                indexesToRemove.add(notIndexes[i - 1]);\r\n                indexesToRemove.add(notIndexes[i]);\r\n                notIndexes[i] = NaN; // sets to NaN to not remove possible third '!' in a row\r\n            }\r\n        }\r\n        if (indexesToRemove.size === 0) {\r\n            return tokens;\r\n        }\r\n        return tokens.filter((t, i) => !indexesToRemove.has(i));\r\n    }\r\n\r\n    /**\r\n     * Transforms given infix boolean and algebraic expression into postfix (reverse polish) form.\r\n     *\r\n     * @param tokens infix boolean and algebraic expression as Token array\r\n     * @return postfix (reverse polish) form of given array\r\n     */\r\n    public static toRPN(tokens: ValueToken[]): ValueToken[] {\r\n        const rpnQueue: ValueToken[] = [];\r\n        const operatorsStack: Array<OperatorToken | ParenthesisToken> = [];\r\n        tokens.forEach(token => {\r\n            if (token instanceof LiteralToken || token instanceof ReferenceToken) {\r\n                rpnQueue.push(token);\r\n            }\r\n            else if (token instanceof OperatorToken) {\r\n                while (operatorsStack.length > 0 && operatorsStack[operatorsStack.length - 1] instanceof OperatorToken) {\r\n                    // @ts-ignore (token must be of OperatorToken class)\r\n                    let other: OperatorToken = operatorsStack[operatorsStack.length - 1];\r\n                    // all used operators have left associativity\r\n                    if (token.precedence <= other.precedence) {\r\n                        // @ts-ignore (token must be present)\r\n                        rpnQueue.push(operatorsStack.pop());\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof OpeningParentheses) {\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof ClosingParentheses) {\r\n                while (true) {\r\n                    if (operatorsStack.length === 0) {\r\n                        throw ErrorFactory.syntaxError(language().syntaxErrors.valueParser_missingOpeningParenthesis,\r\n                            undefined);\r\n                    }\r\n                    if (operatorsStack[operatorsStack.length - 1] instanceof OpeningParentheses) {\r\n                        operatorsStack.pop();\r\n                        break;\r\n                    }\r\n                    // @ts-ignore (token must be present)\r\n                    rpnQueue.push(operatorsStack.pop());\r\n                }\r\n            }\r\n        });\r\n        while (operatorsStack.length > 0) {\r\n            // @ts-ignore (token must be present)\r\n            const curToken: ValueToken = operatorsStack.pop();\r\n            if (curToken instanceof OpeningParentheses) {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.valueParser_missingClosingParenthesis,\r\n                    undefined);\r\n            }\r\n            else {\r\n                rpnQueue.push(curToken);\r\n            }\r\n        }\r\n        return rpnQueue;\r\n    }\r\n\r\n    /**\r\n     * Creates a value-evaluating tree from the given array of tokens in reverse polish form.\r\n     * Wraps recursive function rpnToVETreeRecursive(tokens), when not all tokens are used, throws error.\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @return VETreeNode tree (its root)\r\n     */\r\n    public static rpnToVETree(tokens: ValueToken[]): VETreeNode {\r\n        const ret: VETreeNode = this.rpnToVETreeRecursive(tokens);\r\n        // not all tokens were used\r\n        if (tokens.length > 0) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.valueParser_invalidExpression, undefined);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates a value-evaluating tree from the given array of tokens in reverse polish form.\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @return VETreeNode tree (its root)\r\n     */\r\n    public static rpnToVETreeRecursive(tokens: ValueToken[]): VETreeNode {\r\n        if (tokens.length === 0) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.valueParser_invalidExpression, undefined);\r\n        }\r\n        // @ts-ignore (there must be a token)\r\n        const token: ValueToken = tokens.pop();\r\n        if (token instanceof LogicalNotToken) {\r\n            const subtree: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.not(token.str, subtree);\r\n        }\r\n        if (token instanceof LogicalAndToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.and(token.str, left, right);\r\n        }\r\n        if (token instanceof LogicalOrToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.or(token.str, left, right);\r\n        }\r\n        if (token instanceof ComparingToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return new ComparingOperator(token.type, token.str, left, right);\r\n        }\r\n        if (token instanceof LiteralToken) {\r\n            return new LiteralValue(token.value, token.type);\r\n        }\r\n        if (token instanceof ReferenceToken) {\r\n            return new ReferenceValue(token.str);\r\n        }\r\n        if (token instanceof ComputingPlusToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.add(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingMinusToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.deduct(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingMultiplicationToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.multiply(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingDivisionToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.divide(left, right, token.getRange());\r\n        }\r\n        // should never happen\r\n        throw ErrorFactory.codeError(language().codeErrors.valueParser_unexpectedToken, JSON.stringify(token));\r\n    }\r\n}","import {NodeFakeEvalResult, RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\n\r\n/**\r\n * Classes extending binary node.\r\n * @category RATree\r\n * @public\r\n */\r\nexport type BinaryNodeClass = \"left antijoin\" | \"right antijoin\" | \"cartesian product\" | \"division\" | \"natural join\"\r\n    | \"left outer join\" | \"right outer join\" | \"full outer join\" | \"left semijoin\" | \"right semijoin\" | \"union\"\r\n    | \"intersection\" | \"difference\" | \"theta join\" | \"left theta semijoin\" | \"right theta semijoin\";\r\n\r\n/**\r\n * Abstract node of the relational algebra syntactic tree with two subtrees.\r\n * @extends RATreeNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport abstract class BinaryNode extends RATreeNode {\r\n\r\n    protected leftSubtree: RATreeNode;\r\n    protected rightSubtree: RATreeNode;\r\n\r\n    /**\r\n     * Creates a new BinaryNode.\r\n     *\r\n     * @param left left subtree {@type RATreeNode}\r\n     * @param right right subtree {@type RATreeNode}\r\n     * @public\r\n     */\r\n    protected constructor(left: RATreeNode, right: RATreeNode) {\r\n        super();\r\n        this.leftSubtree = left;\r\n        this.rightSubtree = right;\r\n    }\r\n\r\n    /**\r\n     * Returns left subtree of the binary node.\r\n     * @return left subtree {@type RATreeNode}\r\n     * @public\r\n     */\r\n    public getLeftSubtree(): RATreeNode {\r\n        return this.leftSubtree;\r\n    }\r\n\r\n    /**\r\n     * Returns right subtree of the binary node.\r\n     * @return right subtree {@type RATreeNode}\r\n     * @public\r\n     */\r\n    public getRightSubtree(): RATreeNode {\r\n        return this.rightSubtree;\r\n    }\r\n\r\n    /**\r\n     * Fake evaluates left and right subtrees of the current not-parametrized binary node.\r\n     * Returns new simple faked schema with empty \"\" name:\r\n     * - type = union: returns union of source schemas\r\n     * - type = left: returns left source schema\r\n     * - type = right: returns right source schema\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @param type type of the returned relational schema {@type (\"union\" | \"left\" | \"right\")}\r\n     * @return fake evaluation information {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    protected fakeEvalBinary(cursorIndex: number, type: \"union\" | \"left\" | \"right\"): NodeFakeEvalResult {\r\n        // evaluates the subtrees\r\n        const left = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right = this.rightSubtree.fakeEval(cursorIndex);\r\n        // creates return relation\r\n        const result: Relation = new Relation(\"Binary\");\r\n        if (type === \"left\" || type === \"union\") {\r\n            left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (type === \"right\" || type === \"union\") {\r\n            right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        left.errors.push(...right.errors);\r\n        return {\r\n            result,\r\n            whispers: left.whispers.length !== 0 ? left.whispers : right.whispers,\r\n            errors: left.errors\r\n        };\r\n    }\r\n}","import {RATreeNode} from \"./raTreeNode\";\r\nimport {UnaryNode} from \"./unaryNode\";\r\nimport {BinaryNode} from \"./binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Finds the root in the given tree with the given index with respect to depth first search. Root has index 0.\r\n *\r\n * @param root root of the searched tree {@type RATreeNode}\r\n * @param index index to be found {@type number}\r\n * @return found root with given index or null if not found {@type RATreeNode?}\r\n * @category RATree\r\n * @public\r\n */\r\nexport function depthSearch(root: RATreeNode, index: number): RATreeNode | null {\r\n    let i: number = 0;\r\n    const findIndexInTree = (node: RATreeNode): RATreeNode | null => {\r\n        // wanted index found\r\n        if (i === index) {\r\n            return node;\r\n        }\r\n        i++;\r\n        if (node instanceof UnaryNode) {\r\n            return findIndexInTree(node.getSubtree());\r\n        }\r\n        if (node instanceof BinaryNode) {\r\n            const leftSearch = findIndexInTree(node.getLeftSubtree());\r\n            if (leftSearch === null) {\r\n                return findIndexInTree(node.getRightSubtree());\r\n            }\r\n            return leftSearch;\r\n        }\r\n        // end of the branch without the result\r\n        return null;\r\n    }\r\n    return findIndexInTree(root);\r\n}\r\n\r\n/**\r\n * Computes depth of the tree. One node has depth 0.\r\n *\r\n * @param root root of the tree to compute the depth for {@type RATreeNode}\r\n * @return tree depth {@type number}\r\n * @category RATree\r\n * @public\r\n */\r\nexport function getTreeDepth(root: RATreeNode): number {\r\n    if (root instanceof BinaryNode) {\r\n        const left: number = getTreeDepth(root.getLeftSubtree());\r\n        const right: number = getTreeDepth(root.getRightSubtree());\r\n        return Math.max(left, right) + 1;\r\n    }\r\n    if (root instanceof UnaryNode) {\r\n        return getTreeDepth(root.getSubtree()) + 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Returns true if the given cursor position is in the given range, it is not inside quotes, and the character at the\r\n * cursor position is present (i.e., was not removed as comment).\r\n * Note: given range is expected to be computed from given string.\r\n *\r\n * @param cursor index of the cursor {@type number}\r\n * @param range range of the string {@type StartEndPair?}\r\n * @param str string to search in {@type IndexedString}\r\n * @return true if the given cursor position is in the given range, it is not inside quotes, and the character at the\r\n * cursor position is present {@type boolean}\r\n * @category RATree\r\n * @public\r\n */\r\nexport function isInRangeAndNotInQuotes(cursor: number, range: StartEndPair | undefined, str: IndexedString): boolean {\r\n    if (range !== undefined && range.start < cursor && cursor <= range.end) {\r\n        const len = range.end - range.start;\r\n        const s = str.toString();\r\n        const cursorIndexInStr = cursor - range.start;\r\n        let insideQuotes: boolean = false;\r\n        let backslashes: number = 0;\r\n        for (let i = 0; i < len; ++i) {\r\n            const curChar = s.charAt(i);\r\n            // quotes found\r\n            if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                insideQuotes = !insideQuotes;\r\n            }\r\n            if (insideQuotes && curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            if (i === cursorIndexInStr - 1) {\r\n                // when the cursor was reached, returns true, if it is not in quotes and the position is present (was not removed as comment)\r\n                return !insideQuotes && str.getChars().some(c => c.index === cursor - 1);\r\n            }\r\n        }\r\n        console.warn(\"isInRangeAndNotInQuotes outside range\");\r\n    }\r\n    return false;\r\n}","import {UnaryNode} from \"./unaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {VEResult, VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ValueParser} from \"../expression/valueParser\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {isInRangeAndNotInQuotes} from \"./raTreeTools\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Selection node of the relational algebra syntactic tree.\r\n * @extends UnaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class SelectionNode extends UnaryNode {\r\n\r\n    private readonly selection: IndexedString;\r\n    private readonly stringRange: StartEndPair | undefined;\r\n    private readonly nullValuesSupport: boolean;\r\n\r\n    /**\r\n     * Creates a new SelectionNode.\r\n     * Expects the selection string to start with '(' and end with ')'.\r\n     *\r\n     * @param selection logic-algebraic expression {@type IndexedString}\r\n     * @param subtree source subtree for renaming {@type RATreeNode}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @public\r\n     */\r\n    public constructor(selection: IndexedString, subtree: RATreeNode, nullValuesSupport: boolean) {\r\n        super(subtree);\r\n        this.selection = selection;\r\n        this.stringRange = selection.getRange();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * After successful call, this.resultRelation must be set to valid Relation.\r\n     * Expectations: condition is valid expression which evaluates to boolean\r\n     * @public\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n\r\n        let boolExpr: VETreeNode;\r\n        try {\r\n            boolExpr = ValueParser.parse(this.selection.slice(1, -1), this.nullValuesSupport);\r\n        }\r\n        catch (e) {\r\n            throw insertRangeIfUndefined(e, this.stringRange);\r\n        }\r\n\r\n        const source: Relation = this.subtree.getResult();\r\n        const result: Relation = new Relation(source.name + \"(...)\");\r\n        source.forEachColumn((type, name) => result.addColumn(name, type));\r\n\r\n        source.getRows().forEach(row => {\r\n            let bool: VEResult = boolExpr.eval(row);\r\n            if (bool.type !== \"boolean\") {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.selectionNode_resultNotBoolean,\r\n                    this.stringRange, this.selection.replace(/\\s+/g, \" \"), bool.type);\r\n            }\r\n            if (bool.value) {\r\n                result.addRow(row);\r\n            }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: columns names used in the condition exists in source schema\r\n     * Returned schema: source schema\r\n     * Usage of absent column names does not affect returned schema.\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        let {result, whispers, errors} = this.subtree.fakeEval(cursorIndex);\r\n        const newResult = new Relation(result.getName() + \"(...)\");\r\n        result.forEachColumn((type, name) => {\r\n            newResult.addColumn(name, type);\r\n        });\r\n        result = newResult;\r\n        // checks whether the cursor is in this selection block (and not in the string) - saves current available columns\r\n        if (isInRangeAndNotInQuotes(cursorIndex, this.stringRange, this.selection)) {\r\n            whispers = result.getColumnNames();\r\n        }\r\n        // checks empty selection input\r\n        if (this.selection.toString().slice(1, -1).trim().length  === 0) {\r\n            errors.push(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_emptyInput, this.stringRange));\r\n        }\r\n        // adds errors from current expression\r\n        else {\r\n            errors.push(...ValueParser.fakeParse(this.selection.slice(1, -1), this.nullValuesSupport, result.getColumnNames()));\r\n        }\r\n        // result schema is the same as the source\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        return language().operations.selection;\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return this.selection.replace(/\\s+/g, ' ');\r\n    }\r\n}","import {BinaryNode} from \"./binaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {Row} from \"../relation/row\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Enum of types of antijoin node: left, right.\r\n * @enum {string}\r\n * @category RATree\r\n * @public\r\n */\r\nexport enum AntijoinType {\r\n    left = \"\\u22b3\",\r\n    right = \"\\u22b2\"\r\n}\r\n\r\n/**\r\n * Antijoin node of the relational algebra syntactic tree.\r\n * @extends BinaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class AntijoinNode extends BinaryNode {\r\n\r\n    private readonly type: AntijoinType;\r\n\r\n    /**\r\n     * Creates a new AntijoinNode.\r\n     *\r\n     * @param operator type of antijoin {@type AntijoinType}\r\n     * @param leftSubtree left subtree {@type RATreeNode}\r\n     * @param rightSubtree right subtree {@type RATreeNode}\r\n     * @public\r\n     */\r\n    public constructor(operator: AntijoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * Expectations on source schemas: none\r\n     * @public\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        let rowsToKeep: Row[];   // rows from the subtree, which have to be kept in result\r\n        let rowsToHelp: Row[];\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        if (this.type === AntijoinType.left) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n            rowsToKeep = leftSource.getRows();\r\n            rowsToHelp = rightSource.getRows();\r\n        }\r\n        else {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n            rowsToKeep = rightSource.getRows();\r\n            rowsToHelp = leftSource.getRows();\r\n        }\r\n        // join of relation rows\r\n        rowsToKeep.forEach(keptRow => {\r\n            let someMatch: boolean = rowsToHelp.some(helpRow => {\r\n                // if all common columns match, the row should not be added\r\n                return commonColumns.every(c => keptRow.getValue(c) === helpRow.getValue(c));\r\n            });\r\n            if (!someMatch) {\r\n                let newRow: Row = new Row(result.getColumns());\r\n                keptRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                result.addRow(newRow);\r\n            }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: none\r\n     * Returned schema: left/right source schema (for left/right antijoin)\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        const type = this.type === AntijoinType.left ? \"left\" : \"right\";\r\n        return this.fakeEvalBinary(cursorIndex, type);\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        return this.type === AntijoinType.left ? lang.leftAntijoin : lang.rightAntijoin;\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import {BinaryNode} from \"./binaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {Row} from \"../relation/row\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Enum of types of outer join node: full, left, right.\r\n * @enum {string}\r\n * @category RATree\r\n * @public\r\n */\r\nexport enum OuterJoinType {\r\n    left = \"*L*\",\r\n    right = \"*R*\",\r\n    full = \"*F*\"\r\n}\r\n\r\n/**\r\n * Outer join node of the relational algebra syntactic tree.\r\n * @extends BinaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class OuterJoinNode extends BinaryNode {\r\n\r\n    private readonly type: OuterJoinType;\r\n\r\n    /**\r\n     * Creates a new OuterJoinNode.\r\n     *\r\n     * @param operator type of outer join {@type OuterJoinType}\r\n     * @param leftSubtree left subtree {@type RATreeNode}\r\n     * @param rightSubtree right subtree {@type RATreeNode}\r\n     * @public\r\n     */\r\n    public constructor(operator: OuterJoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * Expectations on source schemas: none\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // join of relation rows\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        // adds naturally joined rows\r\n        leftRows.forEach(leftRow => {\r\n            rightRows.forEach(rightRow => {\r\n                // if all common columns have the same value\r\n                if (commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c))) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        // adds left source rows with right null values\r\n        if (this.type === OuterJoinType.left || this.type === OuterJoinType.full) {\r\n            leftRows.forEach(leftRow => {\r\n                let someMatch: boolean = rightRows.some(rightRow => {\r\n                    // if all common columns match, the row should not be added\r\n                    return commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c));\r\n                });\r\n                if (!someMatch) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        }\r\n        // adds right source rows with left null values\r\n        if (this.type === OuterJoinType.right || this.type === OuterJoinType.full) {\r\n            rightRows.forEach(rightRow => {\r\n                let someMatch: boolean = leftRows.some(leftRow => {\r\n                    // if all common columns match, the row should not be added\r\n                    return commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c));\r\n                });\r\n                if (!someMatch) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        }\r\n        this.resultRelation = result;\r\n    }\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: none\r\n     * Returned schema: union of source schemas (in all cases - full/left/right)\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        return this.fakeEvalBinary(cursorIndex, \"union\");\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        if (this.type === OuterJoinType.left) {\r\n            return lang.leftOuterJoin;\r\n        }\r\n        else if (this.type === OuterJoinType.right) {\r\n            return lang.rightOuterJoin;\r\n        }\r\n        else {\r\n            return lang.fullOuterJoin;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import {BinaryNode} from \"./binaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {Row} from \"../relation/row\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Cartesian product node of the relational algebra syntactic tree.\r\n * @extends BinaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class CartesianProductNode extends BinaryNode {\r\n\r\n    /**\r\n     * Creates a new CartesianProductNode.\r\n     *\r\n     * @param leftSubtree left subtree {@type RATreeNode}\r\n     * @param rightSubtree right subtree {@type RATreeNode}\r\n     * @param stringRange position of the operator in the original text {@type StartEndPair?}\r\n     * @public\r\n     */\r\n    public constructor(leftSubtree: RATreeNode, rightSubtree: RATreeNode, private stringRange: StartEndPair | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * Expectations on source schemas: disjointness\r\n     * @public\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // join of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + \"\\u2a2f\" + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        rightSource.forEachColumn((type, name) => {\r\n            if (!result.addColumn(name, type)) {\r\n                throw ErrorFactory.semanticError(language().semanticErrors.binaryNode_commonColumns,\r\n                    this.stringRange, \"cartesian product\", name);\r\n            }\r\n        });\r\n        // join of relation rows\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                let newRow: Row = new Row(result.getColumns());\r\n                leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                result.addRow(newRow);\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: disjointness\r\n     * Returned schema: union of source schemas\r\n     * Returned fake schema is not affected when disjointness is not held\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        // evaluates the subtrees\r\n        const left = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right = this.rightSubtree.fakeEval(cursorIndex);\r\n        // creates return relation\r\n        const result: Relation = new Relation(\"\");\r\n        left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // checks errors\r\n        left.errors.push(...right.errors);\r\n        const commonColumns: string[] = [];\r\n        left.result.getColumnNames().forEach(leftColumn => {\r\n            if (right.result.hasColumn(leftColumn)) {\r\n                commonColumns.push(leftColumn);\r\n            }\r\n        });\r\n        if (commonColumns.length > 0) {\r\n            left.errors.push(ErrorFactory.semanticError(language().semanticErrors.binaryNode_commonColumns,\r\n                this.stringRange, \"cartesian product\", commonColumns.join('\", \"')));\r\n        }\r\n        return {\r\n            result,\r\n            whispers: left.whispers.length !== 0 ? left.whispers : right.whispers,\r\n            errors: left.errors\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        return language().operations.cartesianProduct;\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return \"⨯\";\r\n    }\r\n}","import {BinaryNode} from \"./binaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {Row} from \"../relation/row\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Division node of the relational algebra syntactic tree.\r\n * @extends BinaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class DivisionNode extends BinaryNode {\r\n\r\n    /**\r\n     * Creates a new DivisionNode.\r\n     *\r\n     * @param leftSubtree left subtree {@type RATreeNode}\r\n     * @param rightSubtree right subtree {@type RATreeNode}\r\n     * @param stringRange position of the operator in the original text {@type StartEndPair?}\r\n     * @public\r\n     */\r\n    public constructor(leftSubtree: RATreeNode, rightSubtree: RATreeNode, private stringRange: StartEndPair | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * Expectations on source schemas: right source schema is a proper subset of left source schema\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        const leftColumns: Map<string, SupportedColumnType> = leftSource.getColumns();\r\n        const rightColumns: Map<string, SupportedColumnType> = rightSource.getColumns();\r\n\r\n        if (![...rightColumns].every(value => leftColumns.has(value[0]) && leftColumns.get(value[0]) === value[1])) {\r\n            throw ErrorFactory.semanticError(language().semanticErrors.divisionNode_rightColumnsNotSubset,\r\n                this.stringRange, rightSource.getSchemaString(), leftSource.getSchemaString());\r\n        }\r\n\r\n        // difference of columns in left and right subtree\r\n        const resultColumns: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>();\r\n        leftColumns.forEach((type, name) => {\r\n           if (!rightColumns.has(name)) {\r\n               resultColumns.set(name, type);\r\n           }\r\n        });\r\n\r\n        if (resultColumns.size === 0) {\r\n            throw ErrorFactory.semanticError(language().semanticErrors.divisionNode_rightColumnsNotProperSubset,\r\n                this.stringRange, rightSource.getNamesSchemaString(), leftSource.getNamesSchemaString());\r\n        }\r\n\r\n        // join of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + \"\\u00f7\" + rightSource.getName() + \")\");\r\n        resultColumns.forEach((type, name) => result.addColumn(name, type));\r\n        // filter relation rows\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        leftRows.forEach(leftRow => {\r\n           if (rightRows.every(rightRow => {\r\n               // creates a row with left row's extra columns and right row's common columns\r\n               let testRow: Row = new Row(leftColumns);\r\n               // left row's extra columns\r\n               // @ts-ignore ('name' must be present in left row)\r\n               resultColumns.forEach((type, name) => testRow.addValue(name, leftRow.getValue(name)));\r\n               // right row's common columns\r\n               rightRow.getValues().forEach((type, name) => testRow.addValue(name, type));\r\n               // tests if the created row exists in left relation\r\n               return [...leftRows].some(lr => lr.equals(testRow));\r\n           })) {\r\n               let newRow: Row = new Row(result.getColumns());\r\n               // @ts-ignore ('name' must be present in left row)\r\n               resultColumns.forEach((value, name) => newRow.addValue(name, leftRow.getValue(name)));\r\n               result.addRow(newRow);\r\n           }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: right source schema is a proper subset of left source schema\r\n     * Returned schema: left source schema minus right source schema\r\n     * Returned fake schema may be empty (right source schema may contain all left source columns).\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        const left = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right = this.rightSubtree.fakeEval(cursorIndex);\r\n        const leftColumns = left.result.getColumns();\r\n        const rightColumns = right.result.getColumns();\r\n        // creates relation schema - \"left columns minus right columns\"\r\n        const resultColumns = new Map([...leftColumns.entries()].filter(([key, _]) => !rightColumns.has(key)));\r\n        const result = new Relation(\"(\" + left.result.getName() + \"\\u00f7\" + right.result.getName() + \")\");\r\n        resultColumns.forEach((type, name) => result.addColumn(name, type));\r\n        // checks errors in schema\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        if (![...rightColumns].every(value => leftColumns.has(value[0]) && leftColumns.get(value[0]) === value[1])\r\n            && left.result.getName() !== \"\") {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.divisionNode_rightColumnsNotSubset,\r\n                this.stringRange, right.result.getSchemaString(), left.result.getSchemaString()));\r\n        }\r\n        else if (resultColumns.size === 0 && left.result.getName() !== \"\") {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.divisionNode_rightColumnsNotProperSubset,\r\n                this.stringRange, right.result.getNamesSchemaString(), left.result.getNamesSchemaString()));\r\n        }\r\n        return {\r\n            result,\r\n            whispers: left.whispers.length !== 0 ? left.whispers : right.whispers,\r\n            errors: left.errors\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        return language().operations.division;\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return \"÷\";\r\n    }\r\n}","import {BinaryNode} from \"./binaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {Row} from \"../relation/row\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Enum of types of natural join node: natural, left semi, right semi.\r\n * @enum {string}\r\n * @category RATree\r\n * @public\r\n */\r\nexport enum NaturalJoinType {\r\n    natural = \"*\",\r\n    leftSemi = \"<*\",\r\n    rightSemi = \"*>\"\r\n}\r\n\r\n/**\r\n * Natural join or semi join node of the relational algebra syntactic tree.\r\n * @extends BinaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class NaturalJoinNode extends BinaryNode {\r\n\r\n    private readonly type: NaturalJoinType;\r\n\r\n    /**\r\n     * Creates a new NaturalJoinNode.\r\n     *\r\n     * @param operator type of natural join {@type NaturalJoinNode}\r\n     * @param leftSubtree left subtree {@type RATreeNode}\r\n     * @param rightSubtree right subtree {@type RATreeNode}\r\n     * @public\r\n     */\r\n    public constructor(operator: NaturalJoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * Expectations on source schemas: none\r\n     * @public\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        if (this.type === NaturalJoinType.leftSemi || this.type === NaturalJoinType.natural) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === NaturalJoinType.rightSemi || this.type === NaturalJoinType.natural) {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // join of relation rows\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                // if all common columns have the same value\r\n                if ([...commonColumns].every(c => leftRow.getValue(c) === rightRow.getValue(c))) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    if (this.type === NaturalJoinType.leftSemi || this.type === NaturalJoinType.natural) {\r\n                        leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    if (this.type === NaturalJoinType.rightSemi || this.type === NaturalJoinType.natural) {\r\n                        rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: none\r\n     * Returned schema: left/right/both source schema (for left-semijoin/right-semijoin/natural join)\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        let type: \"union\" | \"left\" | \"right\" = \"union\";\r\n        if (this.type === NaturalJoinType.leftSemi) {\r\n            type = \"left\";\r\n        }\r\n        else if (this.type === NaturalJoinType.rightSemi) {\r\n            type = \"right\";\r\n        }\r\n        return this.fakeEvalBinary(cursorIndex, type);\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        if (this.type === NaturalJoinType.leftSemi) {\r\n            return lang.leftSemiJoin;\r\n        }\r\n        else if (this.type === NaturalJoinType.rightSemi) {\r\n            return lang.rightSemiJoin;\r\n        }\r\n        else {\r\n            return lang.naturalJoin;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return \"*\";\r\n    }\r\n\r\n    /**\r\n     * Returns type of the NaturalJoinNode.\r\n     *\r\n     * @return type of the node {@type NaturalJoinType}\r\n     * @public\r\n     */\r\n    public getType(): NaturalJoinType {\r\n        return this.type;\r\n    }\r\n}","import {BinaryNode} from \"./binaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {Row} from \"../relation/row\";\r\nimport {isEqual} from \"lodash\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Enum of types of set operation node: union, intersection, difference.\r\n * @enum {string}\r\n * @category RATree\r\n * @public\r\n */\r\nexport enum SetOperationType {\r\n    union = \"\\u222a\",\r\n    intersection = \"\\u2229\",\r\n    difference = \"\\\\\"\r\n}\r\n\r\n/**\r\n * Set operation node of the relational algebra syntactic tree.\r\n * @extends BinaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class SetOperationNode extends BinaryNode {\r\n\r\n    private readonly type: SetOperationType;\r\n\r\n    /**\r\n     * Creates a new SetOperationNode.\r\n     *\r\n     * @param operator type of set operation {@type SetOperationType}\r\n     * @param leftSubtree left subtree {@type RATreeNode}\r\n     * @param rightSubtree right subtree {@type RATreeNode}\r\n     * @param stringRange position of the operator in the original text {@type StartEndPair?}\r\n     * @public\r\n     */\r\n    public constructor(operator: SetOperationType, leftSubtree: RATreeNode, rightSubtree: RATreeNode,\r\n                       private stringRange: StartEndPair | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * Expectations on source schemas: equality\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n\r\n        if (!isEqual(leftSource.getColumns(), rightSource.getColumns())) {\r\n            let typeStr: string = this.getOperationName().toLowerCase();\r\n            throw ErrorFactory.semanticError(language().semanticErrors.setOperationNode_notEqualColumns,\r\n                this.stringRange, leftSource.getSchemaString(), rightSource.getSchemaString(), typeStr);\r\n        }\r\n        // copy of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // change of relation rows\r\n        let resultRows: Row[];\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        if (this.type === SetOperationType.union) {\r\n            resultRows = [...leftRows, ...rightRows];\r\n        }\r\n        else if (this.type === SetOperationType.intersection) {\r\n            resultRows = [...leftRows].filter(lr => [...rightRows].some(rr => lr.equals(rr)));\r\n        }\r\n        else /* this.type === SetOperationType.difference */ {\r\n            resultRows = [...leftRows].filter(lr => ![...rightRows].some(rr => lr.equals(rr)));\r\n        }\r\n        resultRows.forEach(row => result.addRow(row));\r\n        this.resultRelation = result;\r\n    }\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: equality\r\n     * Returned schema: intersection of source schemas\r\n     * Returned schema may be empty (when there is no common column in sources).\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        const left = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right = this.rightSubtree.fakeEval(cursorIndex);\r\n        // join of relational schema - \"left intersection right\"\r\n        const result: Relation = new Relation(\"(\" + left.result.getName() + this.type + right.result.getName() + \")\");\r\n        left.result.forEachColumn((type, name) => {\r\n            if (right.result.hasColumn(name)) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // checks errors in schema\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        if (!isEqual(left.result.getColumns(), right.result.getColumns()) && left.result.getName() !== \"\" && right.result.getName() !== \"\") {\r\n            let typeStr: string = this.getOperationName().toLowerCase();\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.setOperationNode_notEqualColumns,\r\n                this.stringRange, left.result.getSchemaString(), right.result.getSchemaString(), typeStr));\r\n        }\r\n        return {\r\n            result,\r\n            whispers: left.whispers.length !== 0 ? left.whispers : right.whispers,\r\n            errors: left.errors\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        if (this.type === SetOperationType.union) {\r\n            return lang.union;\r\n        }\r\n        else if (this.type === SetOperationType.intersection) {\r\n            return lang.intersection;\r\n        }\r\n        else {\r\n            return lang.difference;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import {BinaryNode} from \"./binaryNode\";\r\nimport {RATreeNode} from \"./raTreeNode\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {Row} from \"../relation/row\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {VEResult, VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ValueParser} from \"../expression/valueParser\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {isInRangeAndNotInQuotes} from \"./raTreeTools\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Enum of types of theta join node: full (theta), left (theta semi), right (theta semi).\r\n * @enum {string}\r\n * @category RATree\r\n * @public\r\n */\r\nexport enum ThetaJoinType {\r\n    full = \"[]\",\r\n    left = \"\\u27e8]\",\r\n    right = \"[\\u27e9\"\r\n}\r\n\r\n/**\r\n * Theta join or theta semijoin node of the relational algebra syntactic tree.\r\n * @extends BinaryNode\r\n * @category RATree\r\n * @public\r\n */\r\nexport class ThetaJoinNode extends BinaryNode {\r\n\r\n    private readonly type: ThetaJoinType;\r\n    private readonly condition: IndexedString;\r\n    private readonly stringRange: StartEndPair | undefined;\r\n    private readonly nullValuesSupport: boolean;\r\n\r\n    /**\r\n     * Creates a new ThetaJoinNode.\r\n     * Expects the condition string to start with '[' and end with ']' or start with'⟨' and end with ']' or start\r\n     * with '[' and end with '⟩'.\r\n     *\r\n     * @param type type of natural join {@type ThetaJoinType}\r\n     * @param condition logic-algebraic condition {@type IndexedString}\r\n     * @param leftSubtree left subtree {@type RATreeNode}\r\n     * @param rightSubtree right subtree {@type RATreeNode}\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @public\r\n     */\r\n    public constructor(type: ThetaJoinType, condition: IndexedString,\r\n                       leftSubtree: RATreeNode, rightSubtree: RATreeNode, nullValuesSupport: boolean) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.condition = condition;\r\n        this.stringRange = condition.getRange();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * Expectations on source schemas: disjointness\r\n     * Other expectations: condition is valid expression which evaluates to boolean\r\n     * @public\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n\r\n        let boolExpr: VETreeNode;\r\n        try {\r\n            boolExpr = ValueParser.parse(this.condition.slice(1, -1), this.nullValuesSupport);   // slices brackets out\r\n        }\r\n        catch (e) {\r\n            throw insertRangeIfUndefined(e, this.stringRange);\r\n        }\r\n\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n\r\n        leftSource.getColumnNames().forEach(leftColumn => {\r\n            if (rightSource.hasColumn(leftColumn)) {\r\n                throw ErrorFactory.semanticError(language().semanticErrors.binaryNode_commonColumns, this.stringRange,\r\n                    this.getOperationName().toLowerCase(), leftColumn);\r\n            }\r\n        });\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type.charAt(0) + \"...\" + this.type.charAt(1) + rightSource.getName() + \")\");\r\n        if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // combine columns of both source relations to use it in testing row\r\n        const bothSourceColumns: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>(leftSource.getColumns());\r\n        rightSource.forEachColumn((type, name) => bothSourceColumns.set(name, type));\r\n\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                const testRow: Row = new Row(bothSourceColumns);\r\n                leftRow.getValues().forEach((value, name) => testRow.addValue(name, value));\r\n                rightRow.getValues().forEach((value, name) => testRow.addValue(name, value));\r\n                // checks whether the combined row from both relation columns satisfies the condition\r\n                let booleanResult: VEResult = boolExpr.eval(testRow);\r\n                if (booleanResult.type !== \"boolean\") {\r\n                    throw ErrorFactory.syntaxError(language().syntaxErrors.thetaJoinNode_resultNotBoolean,\r\n                        this.stringRange, this.condition.replace(/\\s+/g, \" \"), booleanResult.type);\r\n                }\r\n                if (booleanResult.value) {\r\n                    const newRow: Row = new Row(result.getColumns());\r\n                    if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n                        leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n                        rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * Strict expectations: disjointness\r\n     * Returned schema: left/right/both source schema (for left/right/full semijoin)\r\n     * Returned fake schema is not affected when disjointness is not held\r\n     *\r\n     * @param cursorIndex index of the cursor in original text input {@type number}\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper {@type NodeFakeEvalResult}\r\n     * @public\r\n     */\r\n    public fakeEval(cursorIndex: number) {\r\n        const left = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right = this.rightSubtree.fakeEval(cursorIndex);\r\n        const sourceColumns: string[] = [];\r\n        sourceColumns.push(...left.result.getColumnNames());\r\n        sourceColumns.push(...right.result.getColumnNames());\r\n        // creates return relation\r\n        const result: Relation = new Relation(this.type);\r\n        if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n            left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n            right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // checks whether the cursor is in this condition block (and not in the string) - saves current available columns\r\n        let whispers = left.whispers.length !== 0 ? left.whispers : right.whispers;\r\n        if (isInRangeAndNotInQuotes(cursorIndex, this.stringRange, this.condition)) {\r\n            whispers = sourceColumns;\r\n        }\r\n        // adds errors from current expression\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        const commonColumns: string[] = [];\r\n        left.result.getColumnNames().forEach(leftColumn => {\r\n            if (right.result.hasColumn(leftColumn)) {\r\n                commonColumns.push(leftColumn);\r\n            }\r\n        });\r\n        if (commonColumns.length > 0 && this.stringRange !== undefined) {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.binaryNode_commonColumns,\r\n                {start: this.stringRange.start, end: this.stringRange.start},   // highlight only opening bracket\r\n                this.getOperationName().toLowerCase(), commonColumns.join('\", \"')));\r\n        }\r\n        // checks empty condition input\r\n        if (this.condition.toString().slice(1, -1).trim().length  === 0) {\r\n            errors.push(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_emptyInput, this.stringRange));\r\n        }\r\n        else {\r\n            errors.push(...ValueParser.fakeParse(this.condition.slice(1, -1), this.nullValuesSupport, sourceColumns));\r\n        }\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line {@type string}\r\n     * @public\r\n     */\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        if (this.type === ThetaJoinType.left) {\r\n            return lang.leftThetaSemiJoin;\r\n        }\r\n        else if (this.type === ThetaJoinType.right) {\r\n            return lang.rightThetaSemiJoin;\r\n        }\r\n        else {\r\n            return lang.thetaJoin;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node {@type string}\r\n     * @public\r\n     */\r\n    public getOperationSymbol(): string {\r\n        return this.condition.replace(/\\s+/g, ' ');\r\n    }\r\n\r\n    /**\r\n     * Returns type of ThetaJoinNode.\r\n     *\r\n     * @return type of the node {@type ThetaJoinType}\r\n     * @public\r\n     */\r\n    public getType(): ThetaJoinType {\r\n        return this.type;\r\n    }\r\n}","import {RATreeNode} from \"./raTreeNode\";\r\nimport {ProjectionNode} from \"./projectionNode\";\r\nimport {RenameNode} from \"./renameNode\";\r\nimport {SelectionNode} from \"./selectionNode\";\r\nimport {UnaryNode, UnaryNodeClass} from \"./unaryNode\";\r\nimport {AntijoinNode, AntijoinType} from \"./antijoinNode\";\r\nimport {CartesianProductNode} from \"./cartesianProductNode\";\r\nimport {DivisionNode} from \"./divisionNode\";\r\nimport {OuterJoinNode, OuterJoinType} from \"./outerJoinNode\";\r\nimport {NaturalJoinNode, NaturalJoinType} from \"./naturalJoinNode\";\r\nimport {SetOperationNode, SetOperationType} from \"./setOperationNode\";\r\nimport {BinaryNode, BinaryNodeClass} from \"./binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ThetaJoinNode, ThetaJoinType} from \"./thetaJoinNode\";\r\n\r\n/**\r\n * Factory for creating unary and binary nodes of given class.\r\n * @category RATree\r\n * @public\r\n */\r\nexport class RATreeFactory {\r\n\r\n    /**\r\n     * Creates new unary node of given class.\r\n     *\r\n     * @param unaryClass wanted class {@type UnaryNodeClass}\r\n     * @param subtree source subtree for a node {@type RATreeNode}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @param expr expression used to specify node's behavior {@type IndexedString}\r\n     * @return created unary node {@type UnaryNode}\r\n     * @public\r\n     */\r\n    public static createUnary(unaryClass: UnaryNodeClass, subtree: RATreeNode,\r\n                              nullValuesSupport: boolean, expr: IndexedString): UnaryNode {\r\n        switch (unaryClass) {\r\n            case \"projection\":\r\n                return new ProjectionNode(expr, subtree);\r\n            case \"rename\":\r\n                return new RenameNode(expr, subtree);\r\n            case \"selection\":\r\n                return new SelectionNode(expr, subtree, nullValuesSupport);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new binary node of given class.\r\n     *\r\n     * @param binaryClass wanted class {@type BinaryNodeClass}\r\n     * @param left left source subtree for a node {@type RATreeNode}\r\n     * @param right right source subtree for a node {@type RATreeNode}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @param expr expression used to specify node's behavior {@type IndexedString}\r\n     * @return created binary node {@type BinaryNode}\r\n     * @public\r\n     */\r\n    public static createBinary(binaryClass: BinaryNodeClass, left: RATreeNode, right: RATreeNode,\r\n                               nullValuesSupport: boolean, expr: IndexedString): BinaryNode {\r\n        switch (binaryClass) {\r\n            case \"left antijoin\":\r\n                return new AntijoinNode(AntijoinType.left, left, right);\r\n            case \"right antijoin\":\r\n                return new AntijoinNode(AntijoinType.right, left, right);\r\n            case \"cartesian product\":\r\n                return new CartesianProductNode(left, right, expr.getRange());\r\n            case \"division\":\r\n                return new DivisionNode(left, right, expr.getRange());\r\n            case \"natural join\":\r\n                return new NaturalJoinNode(NaturalJoinType.natural, left, right);\r\n            case \"left outer join\":\r\n                return new OuterJoinNode(OuterJoinType.left, left, right);\r\n            case \"right outer join\":\r\n                return new OuterJoinNode(OuterJoinType.right, left, right);\r\n            case \"full outer join\":\r\n                return new OuterJoinNode(OuterJoinType.full, left, right);\r\n            case \"left semijoin\":\r\n                return new NaturalJoinNode(NaturalJoinType.leftSemi, left, right);\r\n            case \"right semijoin\":\r\n                return new NaturalJoinNode(NaturalJoinType.rightSemi, left, right);\r\n            case \"union\":\r\n                return new SetOperationNode(SetOperationType.union, left, right, expr.getRange());\r\n            case \"intersection\":\r\n                return new SetOperationNode(SetOperationType.intersection, left, right, expr.getRange());\r\n            case \"difference\":\r\n                return new SetOperationNode(SetOperationType.difference, left, right, expr.getRange());\r\n            case \"theta join\":\r\n                return new ThetaJoinNode(ThetaJoinType.full, expr, left, right, nullValuesSupport);\r\n            case \"left theta semijoin\":\r\n                return new ThetaJoinNode(ThetaJoinType.left, expr, left, right, nullValuesSupport);\r\n            case \"right theta semijoin\":\r\n                return new ThetaJoinNode(ThetaJoinType.right, expr, left, right, nullValuesSupport);\r\n        }\r\n    }\r\n}","import {Relation} from \"../relation/relation\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {\r\n  BinaryOperatorToken,\r\n  ClosingParenthesis,\r\n  ExprToken,\r\n  OpeningParenthesis,\r\n  ParenthesisToken,\r\n  RelationToken,\r\n  UnaryOperatorToken\r\n} from \"./exprTokens\";\r\nimport {StringUtils} from \"../utils/stringUtils\";\r\nimport {RATreeNode} from \"../ratree/raTreeNode\";\r\nimport {RelationNode} from \"../ratree/relationNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {IndexedStringUtils} from \"../utils/indexedStringUtils\";\r\nimport {ErrorWithTextRange} from \"../error/errorWithTextRange\";\r\nimport {RATreeFactory} from \"../ratree/raTreeFactory\";\r\nimport {language} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Fake parsing result in {@link ExprParser}.\r\n * @category Expression\r\n * @public\r\n */\r\nexport interface ExprFakeParseResult {\r\n    /**\r\n     * found words to whisper (relation or column names)\r\n     * @type string[]\r\n     * @public\r\n     */\r\n    whispers: string[],\r\n    /**\r\n     * detected errors\r\n     * @type ErrorWithTextRange[]\r\n     * @public\r\n     */\r\n    errors: ErrorWithTextRange[],\r\n    /**\r\n     * pairs of indexes with parentheses\r\n     * @type StartEndPair[]\r\n     * @public\r\n     */\r\n    parentheses: StartEndPair[]\r\n}\r\n\r\n/**\r\n * Parser of relational algebra expressions from textual inputs.\r\n * @category Expression\r\n * @public\r\n */\r\nexport class ExprParser {\r\n\r\n    /**\r\n     * Creates a parser with given source relations.\r\n     *\r\n     * @param relations map of relations used as source for leave nodes {@type Map<String, Relation>}\r\n     * @param nullValuesSupport whether to support null values {@type boolean}\r\n     * @public\r\n     */\r\n    public constructor(readonly relations: Map<string, Relation>, readonly nullValuesSupport: boolean) {}\r\n\r\n    /**\r\n     * Parses given relational algebra expression 'expr' and returns tree of RA operations.\r\n     * Expression is expected to respect following constraints:\r\n     * - all relation's and column's names contain letters, numbers and underscores only\r\n     * - all relation's and column's names start with a letter\r\n     * - used operations must be in a simplified notation and be well-structured\r\n     * - line comments begin with '//' and ends with newline\r\n     * - block comments begins with '/*' and ends with '* /'\r\n     *\r\n     * Supported operations are:\r\n     * - projection of columns: Relation[projectedColumn1, ...]\r\n     * - selection of rows: Relation(condition)\r\n     * - rename of columns: Relation<oldName -> newName, ...>\r\n     * - cartesian product: A ⨯ B\r\n     * - natural join: A * B\r\n     * - theta join: A [condition] B\r\n     * - left and right semijoin: A <* B and A *> B\r\n     * - left and right antijoin: A ⊳ B and A ⊲ B\r\n     * - left and right theta semijoin: A <condition] B and A [condition> B\r\n     * - division: A ÷ B\r\n     * - left, right and full outer join: A *L* B, A *R* B and A *F* B\r\n     * - union, intersection and difference: A ∪ B, A ∩ B and A \\ B\r\n     *\r\n     * See {@link ValueParser} for condition-subexpressions constraints.\r\n     *\r\n     * @param expr relational algebra expression in expected format {@type string}\r\n     * @return tree structure of the given expression {@type RATreeNode}\r\n     * @public\r\n     */\r\n    public parse(expr: string): RATreeNode {\r\n        const {str, err} = IndexedStringUtils.deleteAllComments(IndexedString.new(expr));\r\n        if (err !== undefined) {\r\n            throw err;\r\n        }\r\n        const {tokens} = this.parseTokens(str);\r\n        if (tokens.length === 0) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_emptyStringGiven, undefined);\r\n        }\r\n        this.assertValidInfixTokens(tokens);\r\n        const rpn: ExprToken[] = this.toRPN(tokens);\r\n        return this.rpnToRATree(rpn);\r\n    }\r\n\r\n    /**\r\n     * Parses given expression and finds words to whisper for the given cursorIndex.\r\n     * If the cursor is located next to any RA operator, returns list of all defined relation names.\r\n     * If the cursor is located inside any RA operator, which uses relation columns, returns list of available column\r\n     * names at given place.\r\n     * If a parsing error occurs, it is faked to work or ignored and reported in returning errors array.\r\n     * For supported operations see {@link parse}.\r\n     *\r\n     * @param expr input expression to fake parse {@type string}\r\n     * @param cursorIndex current index of the cursor {@type number}\r\n     * @return parsed information {@type ExprFakeParseResult}\r\n     * @public\r\n     */\r\n    public fakeParse(expr: string, cursorIndex: number): ExprFakeParseResult {\r\n        if (expr.trim() === \"\") {\r\n            return {whispers: [...this.relations.keys()], errors: [], parentheses: []};\r\n        }\r\n        const {str, err} = IndexedStringUtils.deleteAllComments(IndexedString.new(expr));\r\n        const {whispers, tokens, errors, parentheses} = this.parseTokens(str, false, cursorIndex);\r\n        if (err !== undefined) {\r\n            errors.push(err);\r\n        }\r\n        // prevent errors in creation of RPN\r\n        if (tokens.length === 0) {\r\n            return {whispers: whispers, errors: errors, parentheses: parentheses};\r\n        }\r\n        // fakes found errors to valid parse\r\n        this.assertValidInfixTokens(tokens, false, errors);\r\n        const rpn: ExprToken[] = this.toRPN(tokens);\r\n        const raTree: RATreeNode = this.rpnToRATree(rpn, false, errors);\r\n        // tries to find whispers inside RA operations with parameters\r\n        const innerResult: {whispers: string[], errors: ErrorWithTextRange[]} = raTree.fakeEval(cursorIndex);\r\n        errors.push(...innerResult.errors);\r\n        // if there are whispers from inner operators, returns them\r\n        if (innerResult.whispers.length > 0) {\r\n            return {whispers: innerResult.whispers, errors: errors, parentheses: parentheses};\r\n        }\r\n        // otherwise returns outer whispers (or empty array if no were found)\r\n        return {whispers: whispers, errors: errors, parentheses: parentheses};\r\n    }\r\n\r\n    /**\r\n     * Parses given expression to ExprToken array. While parsing, it tries to find cursor index and returns whispers.\r\n     * When doThrow is false, parsing errors are not thrown but stored in errors array. Returns found pair characters\r\n     * (e.g., parentheses).\r\n     *\r\n     * @param expr IndexedString to parse the expression from\r\n     * @param cursorIndex current cursor index\r\n     * @param doThrow whether to throw encountered errors was a relation or an unary operator (default false)\r\n     */\r\n    public parseTokens(expr: IndexedString, doThrow: boolean = true, cursorIndex: number = NaN):\r\n        { tokens: ExprToken[], whispers: string[], errors: ErrorWithTextRange[], parentheses: StartEndPair[] } {\r\n        // handles empty string\r\n        if (expr.isEmpty()) {\r\n            return {tokens: [], whispers: [...this.relations.keys()], errors: [], parentheses: []};\r\n        }\r\n\r\n        let tokens: ExprToken[] = [];\r\n        let whispers: string[] = cursorIndex === 0 ? [...this.relations.keys()] : [];\r\n        let errors: ErrorWithTextRange[] = [];\r\n        let parentheses: StartEndPair[] = [];\r\n\r\n        // throws the error if doThrow is true, otherwise adds it to the errors array\r\n        const handleError = (err: ErrorWithTextRange) => {\r\n            if (doThrow) {\r\n                throw err;\r\n            }\r\n            errors.push(err);\r\n        }\r\n\r\n        // adds new pair of parentheses from margins of the given string\r\n        const pushParentheses = (str: IndexedString) => {\r\n            parentheses.push({start: str.getFirstIndex(), end: str.getLastIndex()});\r\n        }\r\n\r\n        let selectionExpected: boolean = false;\r\n        let rest: IndexedString = expr;\r\n        while (!rest.isEmpty()) {\r\n            // checks whether the cursor was reached\r\n            const restStartIndex: number = rest.getFirstIndex();\r\n            if (restStartIndex === cursorIndex) {\r\n                whispers = [...this.relations.keys()];\r\n            }\r\n\r\n            // '(' can be a selection or a parentheses\r\n            if (rest.startsWith(\"(\")) {\r\n                let split: {first: IndexedString, second: IndexedString};\r\n                try {\r\n                    split = IndexedStringUtils.nextBorderedPart(rest, '(', ')');\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (err) {\r\n                    // saves error\r\n                    if (err instanceof ErrorWithTextRange) {\r\n                        handleError(err);\r\n                    }\r\n\r\n                    if (selectionExpected) {\r\n                        // it fakes the unclosed expression part as a selection operator\r\n                        tokens.push(UnaryOperatorToken.selection(rest.concat(IndexedString.new(')', rest.getLastIndex() + 1))));\r\n                    }\r\n                    else {\r\n                        // it fakes the unclosed expression as nested expression in parentheses\r\n                        tokens.push(new OpeningParenthesis(rest.slice(0, 1)));\r\n                        // parses inner part between parentheses\r\n                        const recursiveReturn = this.parseTokens(rest.slice(1), doThrow, cursorIndex);\r\n                        errors.push(...recursiveReturn.errors);\r\n                        if (whispers.length === 0) {\r\n                            whispers.push(...recursiveReturn.whispers);\r\n                        }\r\n                        tokens.push(...recursiveReturn.tokens);\r\n                        parentheses.push(...recursiveReturn.parentheses);\r\n                        // gives invalid index (NaN for not reporting errors with this imaginary parentheses\r\n                        tokens.push(new ClosingParenthesis(IndexedString.new(')', NaN)));\r\n                    }\r\n                    // breaks the while cycle because rest was parsed recursively\r\n                    break;\r\n                }\r\n\r\n                // saves parentheses\r\n                pushParentheses(split.first);\r\n\r\n                // whole \"(...)\" part pushed as selection\r\n                if (selectionExpected) {\r\n                    tokens.push(UnaryOperatorToken.selection(split.first));\r\n                }\r\n                // inner of \"(...)\" part parsed as parentheses structure\r\n                else {\r\n                    tokens.push(new OpeningParenthesis(split.first.slice(0, 1)));\r\n                    const recursiveReturn = this.parseTokens(split.first.slice(1, -1), doThrow, cursorIndex);\r\n                    errors.push(...recursiveReturn.errors);\r\n                    if (whispers.length === 0) {\r\n                        whispers.push(...recursiveReturn.whispers);\r\n                    }\r\n                    tokens.push(...recursiveReturn.tokens);\r\n                    parentheses.push(...recursiveReturn.parentheses);\r\n                    tokens.push(new ClosingParenthesis(split.first.slice(-1)));\r\n                    selectionExpected = true;\r\n                }\r\n                rest = split.second;\r\n            }\r\n            // '[' can be a projection, theta join, or right theta semi join\r\n            else if (rest.startsWith(\"[\")) {\r\n                let split: {first: IndexedString, second: IndexedString};\r\n                let error: boolean = false;\r\n                try {\r\n                    split = IndexedStringUtils.nextBorderedPart(rest, '[', ']\\u27e9');\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (err) {\r\n                    error = true;\r\n                    // saves error\r\n                    if (err instanceof ErrorWithTextRange) {\r\n                        handleError(err);\r\n                    }\r\n                    // it fakes the unclosed expression part as a projection operator\r\n                    split = {first: rest.concat(IndexedString.new(']', rest.getLastIndex() + 1)), second: IndexedString.empty()};\r\n                }\r\n\r\n                // saves parentheses\r\n                pushParentheses(split.first);\r\n\r\n                // checks whether the cursor was reached\r\n                if (!error && split.first.getLastIndex() === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                // right theta semijoin found \"[...⟩\"\r\n                if (split.first.endsWith('\\u27e9')) {\r\n                    tokens.push(BinaryOperatorToken.rightThetaSemijoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // if the next part contains any character from =<>+/*&|~\"()! it cannot be a valid Projection\r\n                else if (split.first.containsAny('=<>+/*&|~\"()!')) {\r\n                    tokens.push(BinaryOperatorToken.thetaJoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // else suppose it is a projection\r\n                else {\r\n                    tokens.push(UnaryOperatorToken.projection(split.first));\r\n                    selectionExpected = true;\r\n                    rest = split.second;\r\n                }\r\n            }\r\n            // BINARY OPERATORS\r\n            else if (rest.startsWith(\"*F*\") || rest.startsWith(\"*L*\") || rest.startsWith(\"*R*\")) {\r\n                const operator: IndexedString = rest.slice(0, 3);\r\n                // checks whether the cursor was reached\r\n                if (operator.getLastIndex() === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"*F\")) {\r\n                    tokens.push(BinaryOperatorToken.fullOuterJoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"*L\")) {\r\n                    tokens.push(BinaryOperatorToken.leftOuterJoin(operator));\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.rightOuterJoin(operator));\r\n                }\r\n                rest = rest.slice(3);\r\n                selectionExpected = false;\r\n            }\r\n            // operators of 2 characters\r\n            else if (rest.startsWith(\"<*\") || rest.startsWith(\"*>\")) {\r\n                const operator: IndexedString = rest.slice(0, 2);\r\n                // checks whether the cursor was reached\r\n                if (operator.getLastIndex() === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"<*\")) {\r\n                    tokens.push(BinaryOperatorToken.leftSemijoin(operator));\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.rightSemijoin(operator));\r\n                }\r\n                rest = rest.slice(2);\r\n                selectionExpected = false;\r\n            }\r\n            // operators of 1 character\r\n            else if (\"*\\u2a2f\\u222a\\u2229\\\\\\u22b3\\u22b2\\u00f7\".indexOf(rest.charAt(0)) > -1) {\r\n                const operator: IndexedString = rest.slice(0, 1);\r\n                // checks whether the cursor was reached\r\n                if (operator.getLastIndex() === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"*\")) {\r\n                    tokens.push(BinaryOperatorToken.naturalJoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u2a2f\")) {\r\n                    tokens.push(BinaryOperatorToken.cartesianProduct(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u222a\")) {\r\n                    tokens.push(BinaryOperatorToken.union(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u2229\")) {\r\n                    tokens.push(BinaryOperatorToken.intersection(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\\\\")) {\r\n                    tokens.push(BinaryOperatorToken.difference(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u22b3\")) {\r\n                    tokens.push(BinaryOperatorToken.leftAntijoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u22b2\")) {\r\n                    tokens.push(BinaryOperatorToken.rightAntijoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u00f7\")) {\r\n                    tokens.push(BinaryOperatorToken.division(operator));\r\n                }\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            // '<' can be a rename or left theta semi join - this \"if\" must be after <*\r\n            else if (rest.startsWith('<')) {\r\n                try {\r\n                    const split = IndexedStringUtils.nextBorderedPart(rest, '<', '>', '-');\r\n                    // saves parentheses\r\n                    pushParentheses(split.first);\r\n                    // checks whether the cursor was reached\r\n                    if (split.first.getLastIndex() === cursorIndex - 1) {\r\n                        whispers = [...this.relations.keys()];\r\n                    }\r\n                    tokens.push(UnaryOperatorToken.rename(split.first));\r\n                    selectionExpected = true;\r\n                    rest = split.second;\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (err) {\r\n                    // saves error\r\n                    if (err instanceof ErrorWithTextRange) {\r\n                        handleError(err);\r\n                    }\r\n                    // it fakes the unclosed expression part as a rename operator\r\n                    tokens.push(UnaryOperatorToken.rename(rest.concat(IndexedString.new('>', rest.getLastIndex() + 1))));\r\n                    // breaks the while cycle as all was used\r\n                    break;\r\n                }\r\n            }\r\n            // '⟨' can be a rename or left theta semi join - this \"if\" must be after <*\r\n            else if (rest.startsWith('\\u27e8')) {\r\n                try {\r\n                    const split = IndexedStringUtils.nextBorderedPart(rest, '\\u27e8', ']');\r\n                    // saves parentheses\r\n                    pushParentheses(split.first);\r\n                    // checks whether the cursor was reached\r\n                    if (split.first.getLastIndex() === cursorIndex - 1) {\r\n                        whispers = [...this.relations.keys()];\r\n                    }\r\n                    tokens.push(BinaryOperatorToken.leftThetaSemijoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (err) {\r\n                    // saves error\r\n                    if (err instanceof ErrorWithTextRange) {\r\n                        handleError(err);\r\n                    }\r\n                    // it fakes the unclosed expression part as a theta join operator\r\n                    tokens.push(BinaryOperatorToken.leftThetaSemijoin(rest.concat(IndexedString.new(']', rest.getLastIndex() + 1))));\r\n                    // breaks the while cycle as all was used\r\n                    break;\r\n                }\r\n            }\r\n            // RELATION REFERENCE\r\n            else if (StringUtils.isLetter(rest.charAt(0)) || rest.charAt(0) === '_') {\r\n                const split = IndexedStringUtils.nextName(rest);\r\n\r\n                // checks whether the cursor was reached in the relation reference string\r\n                if (split.first.getFirstIndex() <= cursorIndex - 1 && cursorIndex - 1 <= split.first.getLastIndex()) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                tokens.push(new RelationToken(split.first));\r\n                rest = split.second;\r\n                selectionExpected = true;\r\n            }\r\n            // WHITE SPACE\r\n            else if (rest.charAt(0).match(/\\s/)) {\r\n                let i = 0;\r\n                while (i < rest.length() && rest.charAt(i).match(/\\s/)) {\r\n                    if (rest.indexAt(i) === cursorIndex - 1) {\r\n                        whispers = [...this.relations.keys()];\r\n                    }\r\n                    ++i;\r\n                }\r\n                rest = rest.slice(i);\r\n            }\r\n            // UNEXPECTED PART\r\n            else {\r\n                const split = IndexedStringUtils.nextNonWhitespacePart(rest);\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.exprParser_unexpectedPart,\r\n                    split.first.getRange(), split.first.toString()));\r\n                // tries to skip first unexpected character\r\n                rest = rest.slice(split.first.length());\r\n            }\r\n        }\r\n        return { tokens, whispers, errors, parentheses };\r\n    }\r\n\r\n    /**\r\n     * Checks the validity of the given infix token array. If doThrow is false, pushes found errors to the given errors\r\n     * array. Fake tokens are relations with empty name \"\", or natural joins \"*\", their error ranges are undefined.\r\n     * All faked errors are pushed in given errors array.\r\n     * Expects validly nested parentheses: yes \"(()())\", no \")()\", \")(\". Expects not empty array.\r\n     *\r\n     * @param tokens token array to check\r\n     * @param doThrow whether to throw found errors\r\n     * @param errors array for pushing faked errors for NOT_THROW type\r\n     */\r\n    public assertValidInfixTokens(tokens: ExprToken[], doThrow: boolean = true, errors: ErrorWithTextRange[] = []): void {\r\n        /**\r\n         * Handles the error described by given error code, params and range. If doThrow is true, throws the described\r\n         * error. Otherwise, fakes it by inserting a new token at given index. The token is binary (natural join) if\r\n         * missing is \"binary\", otherwise, it is a relation with empty name.\r\n         */\r\n        const handleError = (index: number, missing: \"binary\" | \"relation\",\r\n                             msg: string[], range: StartEndPair | undefined, ...params: string[]) => {\r\n            const error = ErrorFactory.syntaxError(msg, range, ...params);\r\n            if (doThrow) {\r\n                throw error;\r\n            }\r\n            else if (missing === \"binary\") {\r\n                errors.push(error);\r\n                tokens.splice(index, 0, BinaryOperatorToken.naturalJoin(IndexedString.new(\"*\")));\r\n            }\r\n            else {\r\n                errors.push(error);\r\n                tokens.splice(index, 0, new RelationToken(IndexedString.new(\"\")));\r\n            }\r\n        }\r\n\r\n        // checks start of an array: it must start with '(' or relation\r\n        if (tokens[0] instanceof UnaryOperatorToken || tokens[0] instanceof BinaryOperatorToken || tokens[0] instanceof ClosingParenthesis) {\r\n            handleError(0, \"relation\", language().syntaxErrors.exprParser_invalidStart,\r\n                tokens[0].getRange(), tokens[0].str.toString());\r\n        }\r\n\r\n        // checks end of an array: it must end with ')', relation or an unary operator\r\n        if (tokens[tokens.length - 1] instanceof OpeningParenthesis || tokens[tokens.length - 1] instanceof BinaryOperatorToken) {\r\n            handleError(tokens.length, \"relation\", language().syntaxErrors.exprParser_invalidEnd,\r\n                tokens[tokens.length - 1].getRange(), tokens[tokens.length - 1].str.toString());\r\n        }\r\n\r\n        // checks adjacent pairs of tokens\r\n        let i2: number = 1;\r\n        while (i2 < tokens.length) {\r\n            const token1: ExprToken = tokens[i2 - 1];\r\n            const token2: ExprToken = tokens[i2];\r\n\r\n            // valid predecessors: binary operator or '('\r\n            if (token2 instanceof RelationToken) {\r\n                if (token1 instanceof RelationToken) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_relationAfterRelation,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof UnaryOperatorToken) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_relationAfterUnary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof ClosingParenthesis) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_relationAfterClosing,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof UnaryOperatorToken) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_unaryAfterBinary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_unaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof BinaryOperatorToken) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_binaryAfterBinary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_binaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: binary operator or '('\r\n            else if (token2 instanceof OpeningParenthesis) {\r\n                if (token1 instanceof RelationToken) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_openingAfterRelation,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof UnaryOperatorToken) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_openingAfterUnary,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof ClosingParenthesis) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_openingAfterClosing,\r\n                        token2.getRange());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof ClosingParenthesis) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_closingAfterBinary,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_closingAfterOpening,\r\n                        token2.getRange());\r\n                }\r\n            }\r\n            else {\r\n                throw ErrorFactory.codeError(language().codeErrors.exprParser_unexpectedToken, JSON.stringify(token2));\r\n            }\r\n            ++i2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transforms given infix relation algebra expression into postfix (reverse polish) form.\r\n     * Throws error when invalid parentheses structure is given.\r\n     *\r\n     * @param tokens infix relational algebra expression as Token array\r\n     * @return postfix (reverse polish) form of given array\r\n     */\r\n    public toRPN(tokens: ExprToken[]): ExprToken[] {\r\n        const rpnQueue: ExprToken[] = [];\r\n        const operatorsStack: Array<BinaryOperatorToken | ParenthesisToken> = [];\r\n        tokens.forEach(token => {\r\n            if (token instanceof RelationToken || token instanceof UnaryOperatorToken) {\r\n                rpnQueue.push(token);\r\n            }\r\n            else if (token instanceof BinaryOperatorToken) {\r\n                while (operatorsStack.length > 0 && operatorsStack[operatorsStack.length - 1] instanceof BinaryOperatorToken) {\r\n                    // @ts-ignore (token must be of BinaryOperatorToken class)\r\n                    let other: BinaryOperatorToken = operatorsStack[operatorsStack.length - 1];\r\n                    // all used operators have left associativity\r\n                    if (token.precedence <= other.precedence) {\r\n                        // @ts-ignore (token must be present)\r\n                        rpnQueue.push(operatorsStack.pop());\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof OpeningParenthesis) {\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof ClosingParenthesis) {\r\n                while (true) {\r\n                    if (operatorsStack.length === 0) {\r\n                        throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_invalidParentheses,\r\n                            undefined);\r\n                    }\r\n                    if (operatorsStack[operatorsStack.length - 1] instanceof OpeningParenthesis) {\r\n                        operatorsStack.pop();\r\n                        break;\r\n                    }\r\n                    // @ts-ignore (token must be present)\r\n                    rpnQueue.push(operatorsStack.pop());\r\n                }\r\n            }\r\n        });\r\n        while (operatorsStack.length > 0) {\r\n            // @ts-ignore (token must be present)\r\n            const curToken: ExprToken = operatorsStack.pop();\r\n            if (curToken instanceof OpeningParenthesis) {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_invalidParentheses,\r\n                    undefined);\r\n            }\r\n            else {\r\n                rpnQueue.push(curToken);\r\n            }\r\n        }\r\n        return rpnQueue;\r\n    }\r\n\r\n    /**\r\n     * Creates a RA expression evaluating tree from the given array of tokens in reverse polish form.\r\n     * Wraps recursive function rpnToRATreeRecursive(tokens).\r\n     * Possible errors:\r\n     * - not all tokens were used (invalid RPN structure was given, should not happen if the previous infix structure\r\n     * was asserted/faked) - if doThrow = false, returns a RelationNode with an empty relation\r\n     * - reference to a relation which does not exist found - if doThrow = false, replaces it with an empty relation\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @param doThrow if true and an error occurs, throws an error, if false and an error occurs, fakes it and does\r\n     * not throw\r\n     * @param errors array to store found errors when doThrow = false\r\n     * @return RATreeNode tree (its root)\r\n     */\r\n    public rpnToRATree(tokens: ExprToken[], doThrow: boolean = true, errors: ErrorWithTextRange[] = []): RATreeNode {\r\n        const ret: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n        // not all tokens were used\r\n        if (tokens.length > 0) {\r\n            if (doThrow) {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_invalidExpression, undefined);\r\n            }\r\n            else {\r\n                return new RelationNode(new Relation(\"\"));\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Helper function for rpnToRATree.\r\n     */\r\n    public rpnToRATreeRecursive(tokens: ExprToken[], doThrow: boolean, errors: ErrorWithTextRange[]): RATreeNode {\r\n        if (tokens.length === 0) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_invalidExpression, undefined);\r\n        }\r\n        // @ts-ignore (there must be a token)\r\n        const token: ExprToken = tokens.pop();\r\n        // RELATION REFERENCE\r\n        if (token instanceof RelationToken) {\r\n            const relation: Relation | undefined = this.relations.get(token.str.toString());\r\n            // when the relation does not exist, throws or fakes it with an empty relation\r\n            if (relation === undefined) {\r\n                const error = ErrorFactory.semanticError(language().semanticErrors.exprParser_relationNotDefined,\r\n                    token.getRange(), token.str.toString());\r\n                if (doThrow) {\r\n                    throw error;\r\n                }\r\n                else {\r\n                    errors.push(error);\r\n                    return new RelationNode(new Relation(\"\"));\r\n                }\r\n            }\r\n            return new RelationNode(relation);\r\n        }\r\n        // UNARY OPERATORS\r\n        if (token instanceof UnaryOperatorToken) {\r\n            const subtree: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            // @ts-ignore\r\n            return RATreeFactory.createUnary(token.type, subtree, this.nullValuesSupport, token.str);\r\n        }\r\n        // BINARY OPERATORS\r\n        if (token instanceof BinaryOperatorToken) {\r\n            const right: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            const left: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            // @ts-ignore\r\n            return RATreeFactory.createBinary(token.type, left, right, this.nullValuesSupport, token.str);\r\n        }\r\n        // should never happen\r\n        throw ErrorFactory.codeError(language().codeErrors.exprParser_unexpectedToken, JSON.stringify(token));\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n/**\r\n * Props of TextInput component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface TextInputProps {\r\n    /**\r\n     * initial value for the input\r\n     * @type string\r\n     * @public\r\n     */\r\n    value: string,\r\n    /**\r\n     * text on the submit button\r\n     * @type string\r\n     * @public\r\n     */\r\n    buttonText: string,\r\n    /**\r\n     * handler of input submit\r\n     * @type function\r\n     * @public\r\n     */\r\n    onSubmit: (text: string) => void,\r\n    /**\r\n     * function which returns true for forbidden inputs which cannot be submitted\r\n     * @type function\r\n     * @public\r\n     */\r\n    forbidden: (text: string) => boolean,\r\n    /**\r\n     * id of the input\r\n     * @type string\r\n     * @public\r\n     */\r\n    id: string\r\n}\r\n\r\ninterface TextInputState {\r\n    value: string,\r\n    buttonDisable: boolean\r\n}\r\n\r\n/**\r\n * Basic text input with submit button (without label). The input cannot be submit if the current value is forbidden.\r\n * All inserted tabulators are replaced by 4 spaces.\r\n * Accepts {@link TextInputProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class TextInput extends React.Component<TextInputProps, TextInputState> {\r\n\r\n    private readonly inputRef: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: TextInputProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            buttonDisable: this.props.forbidden(this.props.value)\r\n        }\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<TextInputProps>) {\r\n        if (prevProps.value !== this.props.value) {\r\n            this.setState({value: this.props.value});\r\n        }\r\n    }\r\n\r\n    private handleChange = (value: string): void => {\r\n        value = value.replace(/\\t/g, \"    \");\r\n        const disable: boolean = this.props.forbidden(value);\r\n        this.setState({\r\n            value: value,\r\n            buttonDisable: disable\r\n        });\r\n    }\r\n\r\n    private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n        if (event.key === \"Enter\") {\r\n            if (!this.state.buttonDisable) {\r\n                this.handleSubmit();\r\n            }\r\n        }\r\n        else if (event.key === \"Escape\" || event.key === \"Esc\") {\r\n            if (this.inputRef.current !== null) {\r\n                this.inputRef.current.blur();\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleSubmit = (): void => {\r\n        this.props.onSubmit(this.state.value);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <>\r\n                <input\r\n                    ref={this.inputRef}\r\n                    type='text'\r\n                    id={this.props.id}\r\n                    spellCheck={false}\r\n                    autoComplete={\"off\"}\r\n                    value={this.state.value}\r\n                    onChange={event => this.handleChange(event.target.value)}\r\n                    onKeyDown={this.handleKeyDown}\r\n                    className={'text-input'}\r\n                />\r\n                <button\r\n                    onClick={this.handleSubmit}\r\n                    disabled={this.state.buttonDisable}\r\n                >{this.props.buttonText}</button>\r\n            </>\r\n        );\r\n    }\r\n}","import \"./css/messageBox.css\"\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\nconst boxMargin: number = Number(cssConstants.getPropertyValue('--message-box-margin-num'));\r\n\r\n/**\r\n * Class for displaying messages and errors to the user in a pop-up box.\r\n * @category Components\r\n * @public\r\n */\r\nexport class MessageBox {\r\n\r\n    private static readonly hideTimeout: number = 5000;\r\n\r\n    private static box: HTMLDivElement = MessageBox.init();\r\n    private static hideIntervalId: NodeJS.Timeout;\r\n\r\n    private static init(): HTMLDivElement {\r\n        const box = document.createElement(\"div\");\r\n        box.classList.add(\"message-box\");\r\n        box.style.visibility = \"hidden\";\r\n        box.onmouseenter = () => {\r\n            MessageBox.clearHideTimeout();\r\n        }\r\n        box.onmouseleave = () => {\r\n            MessageBox.setHideTimeout();\r\n        }\r\n\r\n        const paragraph = document.createElement(\"p\");\r\n        box.appendChild(paragraph);\r\n\r\n        const button = document.createElement(\"button\");\r\n        button.innerText = \"\\u2716\";\r\n        button.onclick = () => {\r\n            MessageBox.hideBox();\r\n        }\r\n        box.appendChild(button);\r\n\r\n        window.addEventListener('resize', () => {\r\n            MessageBox.moveBox();\r\n        });\r\n\r\n        document.body.appendChild(box);\r\n        return box;\r\n    }\r\n\r\n    private static setHideTimeout = () => {\r\n        // clears previous hide interval\r\n        MessageBox.clearHideTimeout();\r\n        MessageBox.hideIntervalId = setTimeout(MessageBox.hideBox, MessageBox.hideTimeout);\r\n    }\r\n\r\n    private static clearHideTimeout = () => {\r\n        clearTimeout(MessageBox.hideIntervalId);\r\n    }\r\n\r\n    private static hideBox = () => {\r\n        MessageBox.box.style.visibility = \"hidden\";\r\n    }\r\n\r\n    private static moveBox = () => {\r\n        if (MessageBox.box.style.visibility === \"visible\") {\r\n            MessageBox.box.style.width = (document.body.clientWidth - 2 * boxMargin) + \"px\";\r\n        }\r\n    }\r\n\r\n    private static display(msg: string, error: boolean): void {\r\n        const box = MessageBox.box;\r\n        // @ts-ignore - first element is paragraph\r\n        box.firstElementChild.innerText = msg;\r\n        box.style.visibility = \"visible\";\r\n        box.classList.toggle(\"message-box-message\", !error);\r\n        box.classList.toggle(\"message-box-error\", error);\r\n        MessageBox.moveBox();\r\n        MessageBox.setHideTimeout();\r\n    }\r\n\r\n    /**\r\n     * Displays given message in a message box fixed on the page bottom.\r\n     * @param msg message to display {@type string}\r\n     * @public\r\n     */\r\n    public static message(msg: string): void {\r\n        MessageBox.display(msg, false);\r\n    }\r\n\r\n    /**\r\n     * Displays given error in a message box fixed on the page bottom.\r\n     * @param msg error to display {@type string}\r\n     * @public\r\n     */\r\n    public static error(msg: string): void {\r\n        MessageBox.display(msg, true);\r\n    }\r\n}","import React from \"react\";\r\nimport \"./css/expressionSection.css\"\r\nimport {Relation} from \"../relation/relation\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport {RASyntaxError} from \"../error/raSyntaxError\";\r\nimport {RASemanticError} from \"../error/raSemanticError\";\r\nimport {LocatedError, XTextArea} from \"./xTextArea\";\r\nimport {ExprParser} from \"../expression/exprParser\";\r\nimport {getStartOfWordBeforeIndex, sortWhispers} from \"../utils/whisperUtils\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {TextInput} from \"./textInput\";\r\nimport {ErrorWithTextRange} from \"../error/errorWithTextRange\";\r\nimport {RATreeNode} from \"../ratree/raTreeNode\";\r\nimport {MessageBox} from \"./messageBox\";\r\nimport {LanguageDef} from \"../language/language\";\r\nimport {StartEndPair} from \"../types/startEndPair\";\r\n\r\n/**\r\n * Props of ExpressionSection component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface ExpressionSectionProps {\r\n    /**\r\n     * available expressions\r\n     * @type Expression[]\r\n     * @public\r\n     */\r\n    expressions: Expression[],\r\n    /**\r\n     * index of the current selected expression in the expression list\r\n     * @type number\r\n     * @public\r\n     */\r\n    currentExpressionIndex: number,\r\n    /**\r\n     * loaded relations user as sources for expression evaluation\r\n     * @type Map<String, Relation>\r\n     * @public\r\n     */\r\n    relations: Map<string, Relation>,\r\n    /**\r\n     * handler of selecting different expression as current\r\n     * @type function\r\n     * @public\r\n     */\r\n    onSelectDifferentExpression: (newIndex: number) => void,\r\n    /**\r\n     * handler of moving an expression on a new position using drag and drop\r\n     * @type function\r\n     * @public\r\n     */\r\n    onDragExpression: (from: number, to: number) => void,\r\n    /**\r\n     * handler of creating the new expression\r\n     * @type function\r\n     * @public\r\n     */\r\n    onNewExpression: () => void,\r\n    /**\r\n     * handler of deleting the current expression\r\n     * @type function\r\n     * @public\r\n     */\r\n    onDeleteExpression: (onDone: () => void) => void,\r\n    /**\r\n     * handler of saving the expressions\r\n     * @type function\r\n     * @public\r\n     */\r\n    onExportExpressions: (onDone: (msg: string) => void) => void,\r\n    /**\r\n     * handler of loading the expressions\r\n     * @type function\r\n     * @public\r\n     */\r\n    onImportExpressions: (onDone: (msg: string) => void) => void,\r\n    /**\r\n     * handler of change in the current selected expression\r\n     * @type function\r\n     * @public\r\n     */\r\n    onChange: (name: string, text: string) => void,\r\n    /**\r\n     * handler of evaluation, it accepts the parsed tree from the expression text\r\n     * @type function\r\n     * @public\r\n     */\r\n    onEval: (tree: RATreeNode) => void,\r\n    /**\r\n     * handler of unexpected errors\r\n     * @type function\r\n     * @public\r\n     */\r\n    onUnexpectedError: (e: Error) => void,\r\n    /**\r\n     * whether to support null values\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    nullValuesSupport: boolean,\r\n    /**\r\n     * true if dark theme should be applied\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    darkTheme: boolean,\r\n    /**\r\n     * current application language\r\n     * @type LanguageDef\r\n     * @public\r\n     */\r\n    language: LanguageDef\r\n}\r\n\r\ninterface ExpressionSectionState {\r\n    sectionClicked: boolean,\r\n    whispers: string[],\r\n    errors: LocatedError[],\r\n    parentheses: StartEndPair[],\r\n    cursorIndex: number\r\n}\r\n\r\n/**\r\n * Identifier of elements drag-and-dropped from the ExpressionSection.\r\n */\r\nconst dndId: string = \"E\";\r\n\r\n/**\r\n * Section to edit, manage, and eval relational algebra expressions.\r\n * Accepts {@link ExpressionSectionProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class ExpressionSection extends React.Component<ExpressionSectionProps, ExpressionSectionState> {\r\n\r\n    // reference to child textarea element\r\n    private readonly textAreaRef: React.RefObject<XTextArea>;\r\n    // timestamp of last expression text change\r\n    private lastChange: number = 0;\r\n    // timestamp of last display of whispers and errors\r\n    private lastWhisperAndErrorsUpdate: number = 0;\r\n    // update rate of whispers and errors (in ms)\r\n    private readonly whispersAndErrorsUpdateRate: number = 400;\r\n\r\n    constructor(props: ExpressionSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false,\r\n            whispers: [],\r\n            errors: [],\r\n            parentheses: [],\r\n            cursorIndex: 0\r\n        }\r\n        this.textAreaRef = React.createRef<XTextArea>();\r\n        setInterval(() => this.updateWhispersAndErrors(), this.whispersAndErrorsUpdateRate);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ExpressionSectionProps>) {\r\n        if (this.props.language !== prevProps.language) {\r\n            const textarea = this.textAreaRef.current;\r\n            if (textarea !== null) {\r\n                textarea.setPlaceholder(this.props.language.expressionSection.expressionTextareaPlaceholder);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates displayed errors and parentheses pairs in the text area input.\r\n     * @public\r\n     */\r\n    public updateErrorsAndParentheses = () => {\r\n        const text = this.getCurExpr().text;\r\n        const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n        const { errors, parentheses } = exprParser.fakeParse(text, this.state.cursorIndex);\r\n        this.setState({\r\n            errors: errors.filter(err => err.range !== undefined && !isNaN(err.range.start) && !isNaN(err.range.end))\r\n                // @ts-ignore\r\n                .map(err => {return {start: err.range.start, end: err.range.end + 1, msg: err.message}}),\r\n            parentheses: parentheses.filter(p => !isNaN(p.start) && !isNaN(p.end))\r\n        });\r\n    }\r\n\r\n    private getCurExpr(): Expression {\r\n        return this.props.expressions[this.props.currentExpressionIndex];\r\n    }\r\n\r\n    private handleSelectDifferentExpression(index: number): void {\r\n        this.props.onSelectDifferentExpression(index);\r\n    }\r\n\r\n    private evalExpr = (): void => {\r\n        try {\r\n            const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n            const tree = exprParser.parse(this.props.expressions[this.props.currentExpressionIndex].text);\r\n            tree.eval();\r\n            this.setState({errors: []});\r\n            this.props.onEval(tree);\r\n        }\r\n        catch (err) {\r\n            if (err instanceof ErrorWithTextRange) {\r\n                if (err.range !== undefined) {\r\n                    // change end to also highlight the last char\r\n                    err.range.end += 1;\r\n                    this.setState(state => {\r\n                        const errorRanges = state.errors;\r\n                        // does not push duplicate error range\r\n                        if (errorRanges.every(er => er.start !== err.range.start || er.end !== err.range.end)) {\r\n                            errorRanges.push({...err.range, msg: err.message});\r\n                        }\r\n                        return {errors: errorRanges}\r\n                    });\r\n                }\r\n            }\r\n            this.showError(err);\r\n        }\r\n    }\r\n\r\n    private newExpression = (): void => {\r\n        this.props.onNewExpression();\r\n    }\r\n\r\n    private deleteExpression = (): void => {\r\n        this.props.onDeleteExpression(this.updateErrorsAndParentheses);\r\n    }\r\n\r\n    private exportExpressions = (): void => {\r\n        this.props.onExportExpressions(MessageBox.message);\r\n    }\r\n\r\n    private importExpressions = (): void => {\r\n        this.props.onImportExpressions((msg) => {\r\n            MessageBox.message(msg);\r\n            this.updateErrorsAndParentheses();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds given special string into RA expression at the current cursor position.\r\n     *\r\n     * @param str string to be added\r\n     * @param shift move of the cursor from added string end position (to the beginning)\r\n     */\r\n    private addSpecialString = (str: string, shift: number): void => {\r\n        // @ts-ignore\r\n        const {start, end} = this.textAreaRef.current.getSelection();\r\n        const firstPart: string = this.getCurExpr().text.substring(0, start);\r\n        const secondPart: string = this.getCurExpr().text.substring(end);\r\n        const newPosition: number = firstPart.length + str.length - shift;\r\n        const newStr: string = firstPart + str + secondPart;\r\n        // updates text in textarea\r\n        this.handleExprChange(newStr, newPosition, () => {\r\n            // @ts-ignore - moves cursor to expected position\r\n            this.textAreaRef.current.setSelection(newPosition);\r\n            // @ts-ignore\r\n            this.textAreaRef.current.focus();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles change of expression text. Updates text and notifies the parent.\r\n     *\r\n     * @param text\r\n     * @param cursorIndex\r\n     * @param onDone callback after updating the state\r\n     */\r\n    private handleExprChange = (text: string, cursorIndex: number, onDone: () => void = () => {}): void => {\r\n        this.props.onChange(this.getCurExpr().name, text);  // must be called before setState for proper functionality of XTextArea\r\n        this.setState({cursorIndex: cursorIndex}, onDone);\r\n        this.lastChange = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Handles input with Ctrl key pressed from textarea.\r\n     */\r\n    private handleCtrlInput = (ev: KeyboardEvent): void => {\r\n        if (ev.key === \"Enter\") {\r\n            this.evalExpr();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows current whispers and errors, if the text area is focused and there was a text change after last update.\r\n     */\r\n    private updateWhispersAndErrors = () => {\r\n        const textArea = this.textAreaRef.current;\r\n        if (textArea !== null && textArea.isFocused() && this.lastChange > this.lastWhisperAndErrorsUpdate) {\r\n            const text = this.getCurExpr().text;\r\n            const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n            const fakeParseResult = exprParser.fakeParse(text, this.state.cursorIndex);\r\n            const wordBeforeCursor: string = text.slice(getStartOfWordBeforeIndex(text, this.state.cursorIndex), this.state.cursorIndex);\r\n            const whispers = sortWhispers(fakeParseResult.whispers, wordBeforeCursor);\r\n            this.setState({\r\n                whispers: whispers,\r\n                errors: fakeParseResult.errors.filter(err => err.range !== undefined && !isNaN(err.range.start) && !isNaN(err.range.end))\r\n                    // @ts-ignore\r\n                    .map(err => {return {start: err.range.start, end: err.range.end + 1, msg: err.message}}),\r\n                parentheses: fakeParseResult.parentheses.filter(p => !isNaN(p.start) && !isNaN(p.end))\r\n            });\r\n            this.lastWhisperAndErrorsUpdate = Date.now();\r\n        }\r\n    }\r\n\r\n    private handleExprNameChange = (name: string) => {\r\n        this.props.onChange(name, this.getCurExpr().text);\r\n    }\r\n\r\n    /**\r\n     * Handles and shows the given error. If the error is not of RASyntaxError or RASemanticError class, it is passed\r\n     * to the parent as unexpected error.\r\n     *\r\n     * @param err the error to handle\r\n     */\r\n    private showError = (err: Error) => {\r\n        // common user's errors\r\n        if (err instanceof RASyntaxError || err instanceof RASemanticError) {\r\n            MessageBox.error(err.message);\r\n        }\r\n        else {\r\n            this.props.onUnexpectedError(err);\r\n            MessageBox.error(\"UNEXPECTED ERROR: \" + err.message + \"\\n\" +\r\n                \"Please, help us and report your last actions, thank you!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Requests expressions move when the drag ends.\r\n     */\r\n    // @ts-ignore\r\n    private handleDragDrop = (e: DragEvent<HTMLDivElement>, i: number) => {\r\n        e.preventDefault();\r\n        const data = e.dataTransfer.getData(\"text/plain\");\r\n        const fromIndex = Number(data.slice(1));\r\n        if (data.charAt(0) === dndId && !isNaN(fromIndex)) {\r\n            this.props.onDragExpression(fromIndex, i);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const lang = this.props.language.expressionSection;\r\n        const ops = this.props.language.operations;\r\n\r\n        const createExprMenuButtons = () => {\r\n            return this.props.expressions.map((expr, i) => {\r\n                const className: string = (this.props.currentExpressionIndex === i ? \"button-clicked\" : \"\");\r\n                return (<button\r\n                    key={i}\r\n                    onClick={() => this.handleSelectDifferentExpression(i)}\r\n                    className={className}\r\n                    draggable={true}\r\n                    onDragStart={e => e.dataTransfer.setData(\"text/plain\", dndId + String(i))}\r\n                    onDragOver={e => e.preventDefault()}\r\n                    onDrop={e => this.handleDragDrop(e, i)}\r\n                >{expr.name}</button>);\r\n            });\r\n        }\r\n\r\n        const createButton = (text: string, onClick: () => void, tooltip: string, style?: React.CSSProperties) => {\r\n            return (<TooltipButton\r\n                key={text}\r\n                text={text}\r\n                onClick={onClick}\r\n                style={style}\r\n                tooltip={tooltip}\r\n            />);\r\n        }\r\n\r\n        const createOpButton = (key: string, char: string, text: string, tooltip: string, shift: number, style: React.CSSProperties = {}) => {\r\n            return (<TooltipButton\r\n                key={key}\r\n                text={text}\r\n                onClick={() => this.addSpecialString(char, shift)}\r\n                tooltip={tooltip}\r\n                style={style}\r\n            />);\r\n        }\r\n        const buttonGroupMargin = {marginRight: \"10px\"};\r\n\r\n        return (\r\n            <section className=\"page-section\">\r\n                <header>\r\n                    <h2>{lang.expressionSectionHeader}</h2>\r\n                    {createButton(lang.importButton, this.importExpressions, lang.importButtonTooltip)}\r\n                    {createButton(lang.exportButton, this.exportExpressions, lang.exportButtonTooltip)}\r\n                </header>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    {createExprMenuButtons()}\r\n                    <button onClick={this.newExpression}\r\n                        style={{minWidth: \"0\", marginLeft: \"10px\", padding: \"2px 6px 1px 6px\"}}>\r\n                        <strong>+</strong>\r\n                    </button>\r\n                </menu>\r\n\r\n                <XTextArea\r\n                    ref={this.textAreaRef}\r\n                    id=\"expression-section-textarea\"\r\n                    text={this.getCurExpr().text}\r\n                    placeholder={lang.expressionTextareaPlaceholder}\r\n                    errors={this.state.errors}\r\n                    whispers={this.state.whispers}\r\n                    parentheses={this.state.parentheses}\r\n\r\n                    onChange={this.handleExprChange}\r\n                    onCtrlInput={this.handleCtrlInput}\r\n\r\n                    darkTheme={this.props.darkTheme}\r\n                />\r\n\r\n                <menu className=\"expressions-operators-menu\">\r\n                    {createOpButton(\"unary_a\", \"()\", \"()\", ops.selection, 1)}\r\n                    {createOpButton(\"unary_b\", \"[]\", \"[]\", ops.projection, 1)}\r\n                    {createOpButton(\"unary_c\", \"< -> >\", \"<>\", ops.rename, 5, buttonGroupMargin)}\r\n\r\n                    {createOpButton(\"set_a\", \"\\u222a\", \"\\u222a\", ops.union, 0)}\r\n                    {createOpButton(\"set_b\", \"\\u2229\", \"\\u2229\", ops.intersection, 0)}\r\n                    {createOpButton(\"set_c\", \"\\\\\", \"\\\\\", ops.difference, 0, buttonGroupMargin)}\r\n\r\n                    {createOpButton(\"inner_a\", \"*\", \"*\", ops.naturalJoin, 0)}\r\n                    {createOpButton(\"inner_b\", \"\\u2a2f\", \"\\u2a2f\", ops.cartesianProduct, 0)}\r\n                    {createOpButton(\"inner_c\", \"<*\", \"<*\", ops.leftSemiJoin, 0)}\r\n                    {createOpButton(\"inner_d\", \"*>\", \"*>\", ops.rightSemiJoin, 0)}\r\n                    {createOpButton(\"inner_e\", \"\\u22b3\", \"\\u22b3\", ops.leftAntijoin, 0)}\r\n                    {createOpButton(\"inner_f\", \"\\u22b2\", \"\\u22b2\", ops.rightAntijoin, 0)}\r\n                    {createOpButton(\"inner_g\", \"[]\", \"[]\", ops.thetaJoin, 1)}\r\n                    {createOpButton(\"inner_h\", \"\\u27e8]\", \"\\u27e8]\", ops.leftThetaSemiJoin, 1)}\r\n                    {createOpButton(\"inner_i\", \"[\\u27e9\", \"[\\u27e9\", ops.rightThetaSemiJoin, 1, buttonGroupMargin)}\r\n\r\n                    {this.props.nullValuesSupport && createOpButton(\"outer_a\", \"*F*\", \"*F*\", ops.fullOuterJoin, 0)}\r\n                    {this.props.nullValuesSupport && createOpButton(\"outer_b\", \"*L*\", \"*L*\", ops.leftOuterJoin, 0)}\r\n                    {this.props.nullValuesSupport && createOpButton(\"outer_c\", \"*R*\", \"*R*\", ops.rightOuterJoin, 0, buttonGroupMargin)}\r\n\r\n                    {createOpButton(\"division\", \"\\u00f7\", \"\\u00f7\", ops.division, 0, buttonGroupMargin)}\r\n\r\n                    {createOpButton(\"line_comment\", \"//\", \"//\", lang.lineComment, 0)}\r\n                    {createOpButton(\"block_comment\", \"/**/\", \"/*\", lang.blockComment, 2)}\r\n                </menu>\r\n\r\n                <menu className=\"page-section-management-menu\">\r\n                    <TooltipButton\r\n                        text={lang.evaluateButton}\r\n                        onClick={this.evalExpr}\r\n                        className={\"action-button\"}\r\n                        style={{marginRight: \"40px\"}}\r\n                        tooltip={lang.evaluateButtonTooltip}\r\n                    />\r\n                    <TextInput\r\n                        value={this.getCurExpr().name}\r\n                        buttonText={lang.renameButton}\r\n                        onSubmit={this.handleExprNameChange}\r\n                        forbidden={() => false}\r\n                        id=\"expression-name-input\"\r\n                    />\r\n                    {createButton(lang.deleteButton, this.deleteExpression, lang.deleteButtonTooltip)}\r\n                </menu>\r\n            </section>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport './css/resultRelationTable.css'\r\nimport {Row} from \"../relation/row\";\r\n\r\n/**\r\n * Props of RelationTable component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface RelationTableProps {\r\n    /**\r\n     * relation to be shown\r\n     * @type Relation\r\n     * @public\r\n     */\r\n    relation: Relation\r\n}\r\n\r\ninterface RelationTableState {\r\n    // index of the column which is used to order the table (or -1 if none is used)\r\n    orderBy: number,\r\n    // 1 = ascending, -1 = descending\r\n    orderDir: number\r\n}\r\n\r\n/**\r\n * Table which shows given relation. The relation cannot be edited\r\n * Rows can be ordered by column values when the column header is clicked.\r\n * When the same column header is clicked for the second time, the order direction is changed (asc, des, asc, des, ...).\r\n * Accepts {@link RelationTableProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class ResultRelationTable extends React.Component<RelationTableProps, RelationTableState> {\r\n\r\n    constructor(props: RelationTableProps) {\r\n        super(props);\r\n        this.state = {\r\n            orderBy: -1,\r\n            orderDir: 1\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RelationTableProps>, prevState: Readonly<RelationTableState>, snapshot?: any) {\r\n        if (prevProps.relation !== this.props.relation) {\r\n            this.setState({\r\n                orderDir: 1,\r\n                orderBy: -1\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates ordering column or direction. If the given orderBy index is already selected, switches ASC/DESC order.\r\n     * Otherwise, sets ASC ordering by new orderBy column index.\r\n     */\r\n    private updateOrderBy(orderBy: number): void {\r\n        this.setState(state => {\r\n            if (state.orderBy === orderBy) {\r\n                return {\r\n                    orderDir: -state.orderDir,\r\n                    orderBy: orderBy\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    orderDir: 1,\r\n                    orderBy: orderBy\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    private getOrderByText = (): string => {\r\n        return this.state.orderDir === 1 ? \" ▼\" : \" ▲\";\r\n    }\r\n\r\n    /**\r\n     * Creates a header row for a table (with given column names).\r\n     *\r\n     * @param columns\r\n     */\r\n    private createHeaderRow(columns: string[]) {\r\n        return (\r\n            <tr>\r\n                <td className=\"row-number-td\"/>\r\n                {columns.map((columnName, index) => {\r\n                    const text: string = this.state.orderBy === index ?\r\n                        (columnName + this.getOrderByText()) : columnName;\r\n                    return <th key={index} onClick={() => this.updateOrderBy(index)}>{text}</th>\r\n                })}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates rows for a table. If there is no row in a resultRelation, returns one cell \"<<NO ROWS>>\".\r\n     *\r\n     * @param columns\r\n     */\r\n    private createRows(columns: string[]) {\r\n        // creates default row if no exists\r\n        if (this.props.relation.getRowsCount() === 0) {\r\n            return (\r\n                <tr key='1'>\r\n                    <td className=\"row-number-td\"/>\r\n                    <td key='1' colSpan={columns.length}>{'<<NO ROWS>>'}</td>\r\n                </tr>\r\n            );\r\n        }\r\n        const rows: Row[] = this.props.relation.getRows();\r\n        // sorts rows if orderBy is given (null values are after other values)\r\n        if (this.state.orderBy > -1 && this.state.orderBy < columns.length) {\r\n            const sortCol: string = columns[this.state.orderBy];\r\n            // @ts-ignore cannot be undefined\r\n            const type: \"string\" | \"number\" | \"boolean\" = rows[0].getType(sortCol);\r\n            if (type === \"number\") {\r\n                rows.sort((a, b) => {\r\n                    // @ts-ignore\r\n                    let aValue: number | null = a.getValue(sortCol);\r\n                    // @ts-ignore\r\n                    let bValue: number | null = b.getValue(sortCol);\r\n                    // a is null\r\n                    if (aValue === null && bValue !== null) {\r\n                        return this.state.orderDir * Number.MAX_SAFE_INTEGER;\r\n                    }\r\n                    // b is null\r\n                    if (aValue !== null && bValue === null) {\r\n                        return this.state.orderDir * Number.MIN_SAFE_INTEGER;\r\n                    }\r\n                    // no is null - compares as numbers\r\n                    if (aValue !== null && bValue !== null) {\r\n                        // @ts-ignore\r\n                        return this.state.orderDir * (a.getValue(sortCol) - b.getValue(sortCol));\r\n                    }\r\n                    // both are null\r\n                    return 0;\r\n                });\r\n            }\r\n            else {\r\n                rows.sort((a, b) => {\r\n                    // @ts-ignore\r\n                    let aValue: string | boolean | null = a.getValue(sortCol);\r\n                    // @ts-ignore\r\n                    let bValue: string | boolean | null = b.getValue(sortCol);\r\n                    // a is null\r\n                    if (aValue === null && bValue !== null) {\r\n                        return this.state.orderDir * Number.MAX_SAFE_INTEGER;\r\n                    }\r\n                    // b is null\r\n                    if (aValue !== null && bValue === null) {\r\n                        return this.state.orderDir * Number.MIN_SAFE_INTEGER;\r\n                    }\r\n                    // no is null - compares as strings\r\n                    if (aValue !== null && bValue !== null) {\r\n                        return this.state.orderDir * String(a.getValue(sortCol)).localeCompare(String(b.getValue(sortCol)));\r\n                    }\r\n                    // both are null\r\n                    return 0;\r\n                });\r\n            }\r\n        }\r\n        // creates all rows if any\r\n        return rows.map((row, index) => (\r\n            <tr key={index}>\r\n                <td className=\"row-number-td\">{index + 1}</td>\r\n                {row.getOrderedPrintValues(columns).map((value, index) => (\r\n                    <td key={index}>{value}</td>\r\n                ))}\r\n            </tr>\r\n        ));\r\n    }\r\n\r\n    render(){\r\n        // creates header row\r\n        const columns: string[] = this.props.relation.getColumnNames();\r\n        const headerRow = this.createHeaderRow(columns);\r\n        const rows = this.createRows(columns);\r\n\r\n        return (\r\n            <div className=\"result-table-container scrollbar-container\">\r\n                <table className=\"result-table\">\r\n                    <thead>\r\n                    {headerRow}\r\n                    </thead>\r\n                    <tbody>\r\n                    {rows}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {Group} from '@visx/group';\r\nimport {hierarchy, Tree} from '@visx/hierarchy';\r\nimport {HierarchyPointLink, HierarchyPointNode} from '@visx/hierarchy/lib/types';\r\nimport {LinkVertical} from '@visx/shape';\r\nimport ParentSize from \"@visx/responsive/lib/components/ParentSize\";\r\nimport {useTooltip} from '@visx/tooltip';\r\nimport './css/evaluationTree.css';\r\nimport {RATreeNode} from \"../ratree/raTreeNode\";\r\nimport {UnaryNode} from \"../ratree/unaryNode\";\r\nimport {BinaryNode} from \"../ratree/binaryNode\";\r\nimport {getTreeDepth} from \"../ratree/raTreeTools\";\r\nimport {computeFontSizeInPx} from \"../utils/fontUtils\";\r\n\r\n/**\r\n * Id of the SVG element for evaluation tree rendering.\r\n * @type string\r\n * @category Components\r\n * @public\r\n */\r\nexport const evalTreeSVGId: string = \"eval-tree-svg\";\r\n\r\n/**\r\n * Props of EvaluationTree component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface EvaluationTreeProps {\r\n    /**\r\n     * root of the evaluation tree to be displayed\r\n     * @type RATreeNode\r\n     * @public\r\n     */\r\n    tree: RATreeNode,\r\n    /**\r\n     * index of the current selected node (with respect to depth first search)\r\n     * @type number\r\n     * @public\r\n     */\r\n    selected: number,\r\n    /**\r\n     * handler of click on nodes, it receives the index of the clicked node (with respect to depth first search)\r\n     * @type function\r\n     * @public\r\n     */\r\n    onClick: (index: number) => void,\r\n    /**\r\n     * true if dark theme should be applied\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    darkTheme: boolean\r\n}\r\n\r\n/**\r\n * Component displaying an evaluation tree. The tree is interactive and handles clicking on the nodes.\r\n * Accepts {@link EvaluationTreeProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class EvaluationTree extends React.Component<EvaluationTreeProps, {}> {\r\n    render() {\r\n        return (\r\n            <ParentSize>{({ width }) =>\r\n                <TreeComponent\r\n                    raTree={this.props.tree}\r\n                    selected={this.props.selected}\r\n                    width={width}\r\n                    onClick={this.props.onClick}\r\n                    darkTheme={this.props.darkTheme}\r\n                />}\r\n            </ParentSize>\r\n        );\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\n\r\nconst fontSize: string = cssConstants.getPropertyValue('--eval-tree-font-size');\r\nconst fontFamily: string = cssConstants.getPropertyValue('--eval-tree-font-family');\r\nconst {fontWidth, fontHeight} = computeFontSizeInPx(fontFamily, fontSize);\r\nconst nodePaddingX2: number = 24;\r\nconst nodeHeight = 2 * fontHeight + nodePaddingX2;\r\nconst maxNodeTextLength = 30;\r\n\r\nconst backgroundColorLight = cssConstants.getPropertyValue('--light-color-a');\r\nconst backgroundColorDark = cssConstants.getPropertyValue('--dark-color-a');\r\nconst textColorLight = cssConstants.getPropertyValue('--text-color-light');\r\nconst textColorDark = cssConstants.getPropertyValue('--text-color-dark');\r\nconst selectedNodeColorLight = cssConstants.getPropertyValue('--light-color-c');\r\nconst unselectedNodeColorLight = cssConstants.getPropertyValue('--light-color-b');\r\nconst selectedNodeColorDark = cssConstants.getPropertyValue('--dark-color-d');\r\nconst unselectedNodeColorDark = cssConstants.getPropertyValue('--dark-color-c');\r\n\r\n/**\r\n * Data for evaluation tree nodes.\r\n */\r\ninterface DisplayTreeNode {\r\n    title: string;\r\n    symbol: string,\r\n    index: number;\r\n    children?: this[];\r\n}\r\n\r\n/**\r\n * Creates a DisplayTreeNode tree from the given RATreeNode tree.\r\n *\r\n * @param tree RATreeNode tree to parse to DisplayTreeNode tree\r\n * @return parsed DisplayTreeNode tree\r\n */\r\nfunction parseTreeForDisplay(tree: RATreeNode): DisplayTreeNode {\r\n    let indexes = 0;\r\n    function parseTreeForDisplayHelper(node: RATreeNode): DisplayTreeNode {\r\n        let symbol: string = node.getOperationSymbol();\r\n        if (symbol.length > maxNodeTextLength) {\r\n            symbol = symbol.slice(0, maxNodeTextLength - 4) + \"...\" + symbol.charAt(symbol.length - 1);\r\n        }\r\n\r\n        if (node instanceof UnaryNode) {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++,\r\n                children: [\r\n                    parseTreeForDisplayHelper(node.getSubtree())\r\n                ]\r\n            }\r\n        }\r\n        else if (node instanceof BinaryNode) {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++,\r\n                children: [\r\n                    parseTreeForDisplayHelper(node.getLeftSubtree()),\r\n                    parseTreeForDisplayHelper(node.getRightSubtree())\r\n                ]\r\n            }\r\n        }\r\n        else /* (tree instanceof RelationNode) */ {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++\r\n            };\r\n        }\r\n    }\r\n    return parseTreeForDisplayHelper(tree);\r\n}\r\n\r\n/**\r\n * Component representing individual nodes of the displayed tree.\r\n *\r\n * Props:\r\n * - node: HierarchyPointNode<DisplayTreeNode>: node to be displayed wrapped as visx HierarchyPointNode.\r\n * - selected: boolean: boolean whether the given node is currently selected by the user\r\n * - onClick: (index: number) => void: handler of click on the node, it receives the index of the node (with\r\n * respect to depth first search)\r\n */\r\nfunction TreeNodeComponent({ node, selected, onClick, darkTheme }:\r\n            { node: HierarchyPointNode<DisplayTreeNode>, selected: boolean, onClick: (index: number) => void, darkTheme: boolean }): JSX.Element {\r\n    const {\r\n        tooltipOpen, // true when mouse is over\r\n        showTooltip,\r\n        hideTooltip\r\n    } = useTooltip();\r\n\r\n    const handleMouseOver = () => {\r\n        showTooltip({ tooltipLeft: 0, tooltipTop: 0 });\r\n    };\r\n\r\n    // computes node width with respect to the text length and asserts it wider than taller\r\n    let nodeWidth = Math.max(node.data.title.length, node.data.symbol.length) * fontWidth + nodePaddingX2;\r\n    if (nodeWidth < nodeHeight) {\r\n        nodeWidth = nodeHeight;\r\n    }\r\n\r\n    return (\r\n        // top=y, left=x for vertical layout; top=x, left=y for horizontal layout\r\n        <Group top={node.y} left={node.x}>\r\n            <rect\r\n                height={nodeHeight} width={nodeWidth}\r\n                y={-nodeHeight / 2} x={-nodeWidth / 2} rx={5}\r\n                fill={darkTheme ?\r\n                    (selected ? selectedNodeColorDark : (tooltipOpen ? selectedNodeColorDark : unselectedNodeColorDark)) :\r\n                    (selected ? selectedNodeColorLight : (tooltipOpen ? selectedNodeColorLight : unselectedNodeColorLight))}\r\n                onClick={() => {\r\n                    onClick(node.data.index);\r\n                }}\r\n                cursor=\"pointer\"\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={hideTooltip}\r\n            />\r\n            <text\r\n                y=\"-4px\"\r\n                dy=\".2em\"\r\n                fontSize={fontSize}\r\n                fontFamily={fontFamily}\r\n                textAnchor=\"middle\"\r\n                style={{ pointerEvents: \"none\"}}\r\n                fill={darkTheme ? textColorDark : textColorLight}\r\n            >\r\n                {node.data.symbol === \"\" ?\r\n                    <tspan x=\"0\" dy=\".5em\">{node.data.title}</tspan> :\r\n                    (<>\r\n                        <tspan x=\"0\" dy=\"0\">{node.data.title}</tspan>\r\n                        <tspan x=\"0\" dy=\"1.2em\">{node.data.symbol}</tspan>\r\n                    </>)}\r\n            </text>\r\n        </Group>\r\n    );\r\n}\r\n\r\n/**\r\n * Internal component for displaying the evaluation tree. It uses visx Tree component.\r\n *\r\n * Props:\r\n * - tree: RATreeNode: root of the evaluation tree to be displayed\r\n * - selected: number: index of the current selected node (with respect to depth first search)\r\n * - width: number: width of the parent container\r\n * - onClick: (index: number) => void: handler of click on nodes, it receives the index of the clicked node (with\r\n * respect to depth first search)\r\n */\r\nfunction TreeComponent({raTree, selected, width, onClick, darkTheme}:\r\n            {raTree: RATreeNode, selected: number, width: number, onClick: (index: number) => void, darkTheme: boolean}): JSX.Element | null {\r\n    const treeDepth: number = getTreeDepth(raTree);\r\n    // height = \"nodes height\" + \"gaps between nodes\" + \"margin up and under\"\r\n    const height = (treeDepth + 1) * nodeHeight + treeDepth * nodeHeight / 2 + nodeHeight;\r\n    const margin = { top: nodeHeight, left: 0 / 2, right: 0 / 2, bottom: nodeHeight };\r\n    const yMax = height - margin.top - margin.bottom;\r\n    const xMax = width - margin.left - margin.right;\r\n\r\n    const tree: DisplayTreeNode = parseTreeForDisplay(raTree);\r\n    const data = hierarchy<DisplayTreeNode>(tree);\r\n\r\n    return width < 10 ? null : (\r\n        <svg id=\"eval-tree-svg\" width={width} height={height}>\r\n            <rect width={width} height={height} rx={14} fill={darkTheme ? backgroundColorDark : backgroundColorLight} />\r\n            <Tree<DisplayTreeNode> root={data} size={[xMax, yMax]}>\r\n                {tree => (\r\n                    <Group top={margin.top} left={margin.left}>\r\n                        {tree.links().map((link, i) => (\r\n                            <LinkVertical<HierarchyPointLink<DisplayTreeNode>, HierarchyPointNode<DisplayTreeNode>>\r\n                                key={`cluster-link-${i}`}\r\n                                data={link}\r\n                                stroke={darkTheme ? textColorDark : textColorLight}\r\n                                strokeWidth=\"1\"\r\n                                strokeOpacity={1}\r\n                                fill=\"none\"\r\n                            />\r\n                        ))}\r\n                        {tree.descendants().map((node) => (\r\n                            <TreeNodeComponent\r\n                                key={`node-${node.data.index}`}\r\n                                node={node}\r\n                                selected={node.data.index === selected}\r\n                                onClick={onClick}\r\n                                darkTheme={darkTheme}\r\n                            />\r\n                        ))}\r\n                    </Group>\r\n                )}\r\n            </Tree>\r\n        </svg>\r\n    );\r\n}","/**\r\n * Textual file information.\r\n * @category Utils\r\n * @public\r\n */\r\nexport interface File {\r\n    /**\r\n     * name of the file\r\n     * @type string\r\n     * @public\r\n     */\r\n    name: string,\r\n    /**\r\n     * textual content of the file\r\n     * @type string?\r\n     * @public\r\n     */\r\n    text: string | null\r\n}\r\n\r\n/**\r\n * FileDialog for loading files to the application.\r\n * @category Utils\r\n * @public\r\n */\r\nexport class FileDialog {\r\n\r\n    /**\r\n     * Loads asynchronously a textual content from one file selected by the user in the file browser.\r\n     *\r\n     * @param accept comma-separated list of extensions for filter (default are all extensions) {@type string}\r\n     * @return a file in a promise {@type Promise<File>}\r\n     * @public\r\n     */\r\n    public static openFile(accept: string = \"*\"): Promise<File> {\r\n        return new Promise<File>(resolve => {\r\n            let element = document.createElement('div');\r\n            element.innerHTML = `<input type=\"file\" accept=${accept}>`;\r\n            let fileInput = element.firstChild;\r\n            // @ts-ignore\r\n            fileInput.addEventListener('change', function() {\r\n                // @ts-ignore\r\n                let file = fileInput.files[0];\r\n                let reader = new FileReader();\r\n                reader.onload = function() {\r\n                    // @ts-ignore\r\n                    resolve({name: file.name, text: reader.result});\r\n                };\r\n                reader.readAsText(file);\r\n            });\r\n            // @ts-ignore\r\n            fileInput.click();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously loads textual content from multiple files selected by the user in the file browser.\r\n     *\r\n     * @param accept comma-separated list of extensions for filter (default are all extensions) {@type string}\r\n     * @return array of files in a promise {@type Promise<File[]>}\r\n     * @public\r\n     */\r\n    public static openFiles(accept: string = \"*\"): Promise<File[]> {\r\n        return new Promise<File[]>(resolve => {\r\n            FileDialog.openFilesHelper(resolve, accept);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads textual content from multiple files selected by the user in the file browser.\r\n     * Multiple file input handling inspired by xaedes on https://stackoverflow.com/a/13975217.\r\n     *\r\n     * @param resolve - resolving function accepting an array of file information\r\n     * @param accept comma-separated list of extensions for filter\r\n     */\r\n    private static openFilesHelper(resolve: (files: File[]) => void, accept: string): void {\r\n        let element = document.createElement('div');\r\n        element.innerHTML = `<input type=\"file\" accept=${accept} multiple>`;\r\n        // @ts-ignore\r\n        let fileInput: HTMLInputElement = element.firstChild;\r\n        const fileInfo: {name: string, text: string | null}[] = [];\r\n        fileInput.addEventListener('change', function() {\r\n            // @ts-ignore\r\n            const files: FileList = fileInput.files;\r\n            function readFile(index: number) {\r\n                if (index === files.length) {\r\n                    return resolve(fileInfo);\r\n                }\r\n                const file = files[index];\r\n                const reader = new FileReader();\r\n                reader.onload = function(e) {\r\n                    // @ts-ignore\r\n                    fileInfo.push({name: file.name, text: e.target.result});\r\n                    readFile(index+1);\r\n                    console.log('File ' + (index+1) + '/' + files.length + ' loaded');\r\n                }\r\n                reader.readAsText(file);\r\n            }\r\n            readFile(0);\r\n        });\r\n        fileInput.click();\r\n    }\r\n}\r\n","/**\r\n * Two possible CSV value separators: comma (,) and semicolon (;).\r\n * @typedef {(\",\" | \";\")} CsvValueSeparator\r\n */\r\nexport type CsvValueSeparator = \",\" | \";\";\r\n\r\n/**\r\n * Returns the first found value separator character: (,) or (;). If no separator is found, returns undefined.\r\n *\r\n * @param str string to search in {@type string}\r\n * @return found separator or undefined {@type CsvValueSeparator?}\r\n * @category Types\r\n * @public\r\n */\r\nexport function findValueSeparator(str: string): CsvValueSeparator | undefined {\r\n    let inQuotes: boolean = false;\r\n    for (let i = 0; i < str.length; ++i) {\r\n        const char: string = str.charAt(i);\r\n        // quotes found\r\n        if (char === '\"') {\r\n            if (!inQuotes) {\r\n                inQuotes = true;\r\n            }\r\n            else {\r\n                const c2 = str.charAt(i + 1);\r\n                if (c2 === \",\" || c2 === \";\") {\r\n                    return c2;\r\n                }\r\n                // double-quotes mean one quote in cell\r\n                else if (c2 === '\"') {\r\n                    // skips second quote\r\n                    ++i;\r\n                }\r\n                // error\r\n                else {\r\n                    return undefined;\r\n                }\r\n            }\r\n        }\r\n        if (!inQuotes && (char === \",\" || char === \";\")) {\r\n            return char;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Splits the given line using the given CSV separator. It follows CSV rules:\r\n * - a cell with a separator (as value) needs to be enclosed in quotes.\r\n * - a cell with a quote (as value) needs to be enclosed in additional quotes. The value quote needs to be typed twice.\r\n *\r\n * @param line line of CSV file to be split {@type string}\r\n * @param separator CSV separator to use {@type CsvValueSeparator}\r\n * @return split line to individual cells {@type string[]}\r\n * @category Types\r\n * @public\r\n */\r\nexport function splitCSVLine(line: string, separator: CsvValueSeparator): string[] {\r\n    // adds separator to simply handle the last cell\r\n    line += separator;\r\n    const ret: string[] = [];\r\n    let inQuotes: boolean = false;\r\n    let partStart: number = 0;\r\n    let i: number = 0;\r\n    while (i < line.length) {\r\n        const c = line.charAt(i);\r\n        // quotes found\r\n        if (c === '\"') {\r\n            // first quotes (after separator)\r\n            if (!inQuotes) {\r\n                inQuotes = true;\r\n                partStart = i;\r\n            }\r\n            else {\r\n                const c2 = line.charAt(i + 1);\r\n                if (c2 === separator) {\r\n                    ret.push(line.slice(partStart + 1, i).replace(/\"\"/g, '\"'));\r\n                    inQuotes = false;\r\n                    partStart = i + 2;\r\n                }\r\n                // double-quotes mean one quote in cell, else error\r\n                else if (c2 !== '\"') {\r\n                    throw new Error();\r\n                }\r\n                i += 2;\r\n                continue;\r\n            }\r\n        }\r\n        else if (c === separator && !inQuotes) {\r\n            ret.push(line.slice(partStart, i).replace('\"\"', '\"'));\r\n            partStart = i + 1;\r\n        }\r\n        ++i;\r\n    }\r\n    return ret;\r\n}","/**\r\n * Wrapper of JavaScript Map object to provide usage of object (row: number | \"name\", column: number) as a key for\r\n * string values.\r\n * @category Types\r\n * @public\r\n */\r\nexport class NNToSMap {\r\n    private map: Map<string, string> = new Map<string, string>();\r\n\r\n    /**\r\n     * Gets the value for the given key (row, column).\r\n     *\r\n     * @param row row part of the key {@type (number | \"name\")}\r\n     * @param column row column of the key {@type number}\r\n     * @return value of the given key or undefined {@type string?}\r\n     * @public\r\n     */\r\n    public get(row: number | \"name\", column: number): string | undefined {\r\n        return this.map.get(row + \":\" + column);\r\n    }\r\n\r\n    /**\r\n     * Sets the value of the given key (row, column).\r\n     *\r\n     * @param row row part of the key {@type (number | \"name\")}\r\n     * @param column row column of the key {@type number}\r\n     * @param value value to set {@type string}\r\n     * @public\r\n     */\r\n    public set(row: number | \"name\", column: number, value: string): void {\r\n        this.map.set(row + \":\" + column, value);\r\n    }\r\n\r\n    /**\r\n     * Deletes the value for the given key (row, column).\r\n     *\r\n     * @param row row part of the key {@type (number | \"name\")}\r\n     * @param column row column of the key {@type number}\r\n     * @return true if an element in the Map object existed and has been removed, or false if the element does not exist {@type boolean}\r\n     * @public\r\n     */\r\n    public delete(row: number | \"name\", column: number): boolean {\r\n        return this.map.delete(row + \":\" + column);\r\n    }\r\n\r\n    /**\r\n     * Removes all values from the map.\r\n     * @public\r\n     */\r\n    public clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    /**\r\n     * Returns the size og the map.\r\n     *\r\n     * @return size of the map {@type number}\r\n     * @public\r\n     */\r\n    public size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    /**\r\n     * Performs the given function for each (value, row, column, index) in the map.\r\n     *\r\n     * @param f function to perform {@type function}\r\n     * @public\r\n     */\r\n    public forEach(f: (value: string, row: number | \"name\", column: number, index?: number) => void): void {\r\n        [...this.map.entries()]\r\n            .map((entry) => {return {value: entry[1], key: NNToSMap.parseKey(entry[0])}})\r\n            .forEach((entry, index) => f(entry.value, entry.key.row, entry.key.column, index));\r\n    }\r\n\r\n    private static parseKey(key: string): {row: number | \"name\", column: number} {\r\n        const split = key.split(':');\r\n        return {row: Number(split[0]), column: Number(split[1])};\r\n    }\r\n}","import {isSupportedColumnType, SupportedColumnType} from \"./columnType\";\r\nimport {StringUtils} from \"../utils/stringUtils\";\r\nimport {NNToSMap} from \"../types/nnToSMap\";\r\nimport {Relation} from \"./relation\";\r\nimport {Row} from \"./row\";\r\nimport {isForbiddenColumnName} from \"../utils/keywords\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Plain object representation of the stored relation.\r\n *\r\n * @category Relation\r\n * @public\r\n */\r\nexport interface StoredRelationData {\r\n    name: string;\r\n    columnNames: string[];\r\n    columnTypes: SupportedColumnType[];\r\n    rows: string[][];\r\n    columnCount: number;\r\n    rowCount: number;\r\n}\r\n\r\n/**\r\n * Creates a copy of the given stored relation data.\r\n *\r\n * @param data stored relation data to copy {@type StoredRelationData}\r\n * @return deep copied stored relation data {@type StoredRelationData}\r\n * @category Relation\r\n * @public\r\n */\r\nexport function copyStoredRelationData(data: StoredRelationData): StoredRelationData {\r\n    return {\r\n        name: data.name,\r\n        columnNames: [...data.columnNames],\r\n        columnTypes: [...data.columnTypes],\r\n        rows: data.rows.map(row => [...row]),\r\n        columnCount: data.columnCount,\r\n        rowCount: data.rowCount\r\n    }\r\n}\r\n\r\n/**\r\n * String-arrays representation of the relation for its storing. The relation may happen to be in inconsistent state.\r\n * For formal representation (sets of concrete types) use {@link Relation}.\r\n * @category Relation\r\n * @public\r\n */\r\nexport class StoredRelation {\r\n\r\n    /**\r\n     * Creates a new stored relation with given name, one column and no rows.\r\n     *\r\n     * @param name name of the relation {@type string}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @return stored relation {@type StoredRelation}\r\n     * @public\r\n     */\r\n    public static new(name: string, nullValuesSupport: boolean): StoredRelation {\r\n        return new StoredRelation(name, [\"Column1\"], [\"number\"], [], nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Creates a new stored relation from given plain relation object. If the object is not a valid StoredRelationData,\r\n     * throws error.\r\n     *\r\n     * @param data input object {@type any}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @return stored relation {@type StoredRelation}\r\n     * @public\r\n     */\r\n    public static fromData(data: any, nullValuesSupport: boolean): StoredRelation {\r\n        if (isStoredRelationData(data)) {\r\n            const d: StoredRelationData = data as StoredRelationData;\r\n            return new StoredRelation(d.name, d.columnNames, d.columnTypes, d.rows, nullValuesSupport);\r\n        }\r\n        throw new Error(\"Given object is not a valid relation.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new stored relation from given full relation representation.\r\n     *\r\n     * @param name name to overwrite original relation name {@type string}\r\n     * @param relation formal relation representation {@type Relation}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @return stored relation {@type StoredRelation}\r\n     * @public\r\n     */\r\n    public static fromRelation(name: string, relation: Relation, nullValuesSupport: boolean): StoredRelation {\r\n        const columnNames: string[] = [];\r\n        const columnTypes: SupportedColumnType[] = [];\r\n        relation.getColumns().forEach((type, name) => {\r\n            columnNames.push(name);\r\n            columnTypes.push(type);\r\n        });\r\n        const rows: string[][] = relation.getRows().map(row => {\r\n            return row.getOrderedPrintValues(columnNames);\r\n        });\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Creates a new relation with the same name, columns, rows a null values support.\r\n     *\r\n     * @param relation relation to copy {@type StoredRelation}\r\n     * @return deep copied relation {@type StoredRelation}\r\n     * @public\r\n     */\r\n    public static copy(relation: StoredRelation): StoredRelation {\r\n        const name = relation.name;\r\n        const columnNames = [...relation.columnNames];\r\n        const columnTypes = [...relation.columnTypes];\r\n        const rows = relation.rows.map(row => [...row]);\r\n        const nullValuesSupport = relation.nullValuesSupport;\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Returns formatted string representation of StoredRelation or StoredRelationData.\r\n     *\r\n     * @param rel relation to stringify {@type StoredRelation}\r\n     * @return formatted string representation {@type string}\r\n     * @public\r\n     */\r\n    public static format(rel: StoredRelation | StoredRelationData): string {\r\n        // finds longest inputs in each column\r\n        const longest = rel.columnNames.map(n => n.length);\r\n        rel.columnTypes.forEach((t, i) => {\r\n            if (longest[i] < t.length) {\r\n                longest[i] = t.length;\r\n            }\r\n        });\r\n        rel.rows.forEach(r => {\r\n            r.forEach((d, i) => {\r\n                if (longest[i] < d.length) {\r\n                    longest[i] = d.length;\r\n                }\r\n            });\r\n        });\r\n        // function for end-padding strings with spaces\r\n        const pad = (ss: string[]) => ss.map((s, i) => s.padEnd(longest[i], \" \")).join(' | ');\r\n        return pad(rel.columnNames) + '\\n' +\r\n            pad(rel.columnTypes) + '\\n' +\r\n            longest.map(n => \"-\".repeat(n)).join(\"-+-\") + '\\n' +\r\n            rel.rows.map(r => pad(r)).join('\\n') + '\\n\\n';\r\n    }\r\n\r\n    private name: string;\r\n    columnNames: string[];\r\n    columnTypes: SupportedColumnType[];\r\n    rows: string[][];\r\n    private columnCount: number;\r\n    private rowCount: number;\r\n    private readonly errors: NNToSMap;\r\n    private nullValuesSupport: boolean;\r\n    private actual: boolean;\r\n    private revertState: StoredRelationData;\r\n\r\n    /**\r\n     * Creates new relation with given name, one default column and no rows.\r\n     *\r\n     * @param name relation name {@type string}\r\n     * @param columnNames column names {@type string[]}\r\n     * @param columnTypes column types {@type SupportedColumnType[]}\r\n     * @param rows data tuples as 2D string array [row, column] {@type string[][]}\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @public\r\n     */\r\n    constructor(name: string, columnNames: string[], columnTypes: SupportedColumnType[],\r\n                        rows: string[][], nullValuesSupport: boolean) {\r\n        this.name = name;\r\n        this.columnNames = columnNames;\r\n        this.columnTypes = columnTypes;\r\n        this.rows = rows;\r\n        this.columnCount = columnNames.length;\r\n        this.rowCount = rows.length;\r\n        this.errors = new NNToSMap();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n        this.actual = false;\r\n        this.revertState = this.toDataObject();\r\n        this.recomputeErrors();\r\n    }\r\n\r\n    /**\r\n     * Checks all possible errors in the relation.\r\n     * @public\r\n     */\r\n    public recomputeErrors(): void {\r\n        this.errors.clear();\r\n        this.checkColumnNames();\r\n        for (let c = 0; c < this.columnCount; ++c) {\r\n            [...new Array(this.rowCount).keys()].forEach(r => this.checkRowInput(c, r));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the column name on given index is valid and not duplicit and updates error map.\r\n     */\r\n    private checkColumnNames(): void {\r\n        const lang = language().relationErrors;\r\n        for (let columnIndex = 0; columnIndex < this.columnCount; ++columnIndex) {\r\n            const columnName: string = this.columnNames[columnIndex].trim();\r\n            if (columnName === \"\") {\r\n                this.errors.set(\"name\", columnIndex, lang.emptyColumn);\r\n                continue;\r\n            }\r\n            const nameCount: number = this.columnNames.reduce((agg, name) => {\r\n                return (name === columnName) ? (agg + 1) : agg;\r\n            }, 0);\r\n            if (nameCount > 1) {\r\n                this.errors.set(\"name\", columnIndex, lang.duplicitColumn);\r\n                continue;\r\n            }\r\n            if (isForbiddenColumnName(columnName)) {\r\n                this.errors.set(\"name\", columnIndex, lang.keywordColumn);\r\n                continue;\r\n            }\r\n            if (!StringUtils.isName(columnName)) {\r\n                this.errors.set(\"name\", columnIndex, lang.invalidColumn);\r\n                continue;\r\n            }\r\n            this.errors.delete(\"name\", columnIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the row input on given index is valid and updates error map.\r\n     */\r\n    private checkRowInput(columnIndex: number, rowIndex: number): void {\r\n        const lang = language().relationErrors;\r\n        this.errors.delete(rowIndex, columnIndex);\r\n        const input: string = this.rows[rowIndex][columnIndex].trim();\r\n        // empty input = null in non-string columns\r\n        if (input === \"null\" || (input === \"\" && this.columnTypes[columnIndex] !== \"string\")) {\r\n            if (!this.nullValuesSupport) {\r\n                this.errors.set(rowIndex, columnIndex, lang.unsupportedNull);\r\n            }\r\n        }\r\n        else if (this.columnTypes[columnIndex] === \"number\") {\r\n            if (!StringUtils.isNumber(input.replace(/\\s/g, \"\"))) {\r\n                this.errors.set(rowIndex, columnIndex, lang.invalidNumber);\r\n            }\r\n        }\r\n        else if (this.columnTypes[columnIndex] === \"boolean\") {\r\n            const lower = input.toLowerCase();\r\n            if (lower !== \"true\" && lower !== \"t\" && lower !== \"false\" && lower !== \"f\") {\r\n                this.errors.set(rowIndex, columnIndex, lang.invalidBoolean);\r\n            }\r\n        }\r\n        /* STRING COLUMNS CANNOT BE INVALID */\r\n    }\r\n\r\n    /**\r\n     * Checks whether all row inputs on given column index are valid and updates error map.\r\n     */\r\n    private checkColumnTypes(columnIndex: number): void {\r\n        this.rows.forEach((_, i) => this.checkRowInput(columnIndex, i));\r\n    }\r\n\r\n    /**\r\n     * Creates a relation with full schema.\r\n     * WARNING: It expects that there are no errors in the stored relation before call.\r\n     *\r\n     * @return formal relation representation {@type Relation}\r\n     * @public\r\n     */\r\n    public createRelation(): Relation {\r\n        const relation: Relation = new Relation(this.name);\r\n        for (let c = 0; c < this.columnCount; ++c) {\r\n            relation.addColumn(this.columnNames[c], this.columnTypes[c]);\r\n        }\r\n        this.rows.forEach(rowInput => {\r\n            const row: Row = new Row(relation.getColumns());\r\n            rowInput.forEach((input, c) => {\r\n                input = input.trim();\r\n                if (input === \"null\") {\r\n                    row.addValue(this.columnNames[c], null);\r\n                }\r\n                else if (this.columnTypes[c] === \"string\") {\r\n                    // changes input representation to expected in inner relations\r\n                    // replaces all used '\\' by two '\\\\' and all used '\"' by '\\\"'\r\n                    input = input.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\r\n                    row.addValue(this.columnNames[c], input);\r\n                }\r\n                else if (input === \"\") {\r\n                    row.addValue(this.columnNames[c], null);\r\n                }\r\n                else if (this.columnTypes[c] === \"number\") {\r\n                    row.addValue(this.columnNames[c], Number(input.replace(/\\s/g, \"\")));\r\n                }\r\n                else /* this.columnTypes[c] === \"boolean\" */ {\r\n                    const lower = input.toLowerCase();\r\n                    row.addValue(this.columnNames[c], lower === \"t\" || lower === \"true\");\r\n                }\r\n            });\r\n            relation.addRow(row);\r\n        });\r\n        relation.finishSchema();\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Creates plain object representation of the stored relation.\r\n     *\r\n     * @return compressed representation {@type StoredRelationData}\r\n     * @public\r\n     */\r\n    public toDataObject(): StoredRelationData {\r\n        return {\r\n            name: this.name,\r\n            columnNames: [...this.columnNames],\r\n            columnTypes: [...this.columnTypes],\r\n            rows: this.rows.map(row => [...row]),\r\n            columnCount: this.columnCount,\r\n            rowCount: this.rowCount\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns map \"row/column => error\". Numeric row keys are for relation rows, row key \"name\" is for column name row.\r\n     *\r\n     * @return map of errors in the relation {@type NNToSMap}\r\n     * @public\r\n     */\r\n    public getErrors(): NNToSMap {\r\n        return this.errors;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are no errors in the relation.\r\n     *\r\n     * @return true if there are no errors in the relation {@type boolean}\r\n     * @public\r\n     */\r\n    public isValid(): boolean {\r\n        return this.errors.size() === 0;\r\n    }\r\n\r\n    /**\r\n     * Sets null values support to check null errors in the relation.\r\n     *\r\n     * @param nullValuesSupport whether null values are supported {@type boolean}\r\n     * @public\r\n     */\r\n    public setNullValuesSupport(nullValuesSupport: boolean): void {\r\n        if (nullValuesSupport !== this.nullValuesSupport) {\r\n            this.nullValuesSupport = nullValuesSupport;\r\n            this.recomputeErrors();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new column with default name \"Column n\", default type \"number\", and empty inputs \"\" in all rows.\r\n     * @public\r\n     */\r\n    public addNewColumn(): void {\r\n        let i = (this.columnNames.length + 1);\r\n        let name = \"Column\" + i;\r\n        while (this.columnNames.indexOf(name) > -1) {\r\n            name = \"Column\" + ++i;\r\n        }\r\n        this.columnNames.push(name);\r\n        this.columnTypes.push(\"number\");\r\n        if (this.nullValuesSupport) {\r\n            this.rows.forEach(r => r.push(\"\"));\r\n        }\r\n        else {\r\n            this.rows.forEach(r => r.push(\"0\"));\r\n        }\r\n        ++this.columnCount;\r\n        this.checkColumnNames();\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row with empty inputs \"\" in all columns.\r\n     * @public\r\n     */\r\n    public addNewRow(): void {\r\n        if (this.nullValuesSupport) {\r\n            this.rows.push([...new Array(this.columnCount).keys()].map(_ => \"\"));\r\n        }\r\n        else {\r\n            this.rows.push([...new Array(this.columnCount).keys()].map(i => {\r\n                if (this.columnTypes[i] === \"number\") {\r\n                    return \"0\";\r\n                }\r\n                else if (this.columnTypes[i] === \"boolean\") {\r\n                    return \"false\";\r\n                }\r\n                return \"\";\r\n            }));\r\n        }\r\n        ++this.rowCount;\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Deletes a column with the given index. If the last column was deleted, removes all rows and creates\r\n     * new default column.\r\n     *\r\n     * @param columnIndex column to delete {@type number}\r\n     * @public\r\n     */\r\n    public deleteColumn(columnIndex: number): void {\r\n        this.columnNames.splice(columnIndex, 1);\r\n        this.columnTypes.splice(columnIndex, 1);\r\n        this.rows.forEach(row => row.splice(columnIndex, 1));\r\n        --this.columnCount;\r\n        // if last column was deleted, removes all rows and creates new default column\r\n        if (this.columnCount === 0) {\r\n            this.rows = [];\r\n            this.addNewColumn();\r\n        }\r\n        this.errors.forEach((value, row, column) => {\r\n            // removes errors for given row\r\n            if (column === columnIndex) {\r\n                this.errors.delete(row, column);\r\n            }\r\n            // updates row index for errors in rows under deleted one\r\n            else if (column > columnIndex) {\r\n                this.errors.delete(row, column);\r\n                this.errors.set(row, column, value);\r\n            }\r\n        });\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Deletes a row with given index.\r\n     *\r\n     * @param rowIndex row to delete {@type number}\r\n     * @public\r\n     */\r\n    public deleteRow(rowIndex: number): void {\r\n        this.rows.splice(rowIndex, 1);\r\n        --this.rowCount;\r\n        this.errors.forEach((value, row, column) => {\r\n            // removes errors for given row\r\n            if (row === rowIndex) {\r\n                this.errors.delete(row, column);\r\n            }\r\n            // updates row index for errors in rows under deleted one\r\n            else if (typeof row === \"number\" && row > rowIndex) {\r\n                this.errors.delete(row, column);\r\n                this.errors.set(row - 1, column, value);\r\n            }\r\n        });\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Returns row count.\r\n     *\r\n     * @return row count {@type number}\r\n     * @public\r\n     */\r\n    public getRowCount(): number {\r\n        return this.rowCount;\r\n    }\r\n\r\n    /**\r\n     * Returns column count.\r\n     *\r\n     * @return column count {@type number}\r\n     * @public\r\n     */\r\n    public getColumnCount(): number {\r\n        return this.columnCount;\r\n    }\r\n\r\n    /**\r\n     * Sets relation name.\r\n     *\r\n     * @param name new relation name {@type string}\r\n     * @public\r\n     */\r\n    public setName(name: string): void {\r\n        this.name = name;\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Gets relation name.\r\n     *\r\n     * @return relation name {@type string}\r\n     * @public\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * Gets column names.\r\n     *\r\n     * @return column names {@type string[]}\r\n     * @public\r\n     */\r\n    public getColumnNames(): string[] {\r\n        return this.columnNames;\r\n    }\r\n\r\n    /**\r\n     * Sets column name on the given index.\r\n     *\r\n     * @param columnName name to set {@type string}\r\n     * @param columnIndex column to update {@type number}\r\n     * @public\r\n     */\r\n    public setColumnName(columnName: string, columnIndex: number): void {\r\n        this.columnNames[columnIndex] = columnName;\r\n        this.checkColumnNames();\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Gets column types.\r\n     *\r\n     * @return column types {@type SupportedColumnType[]}\r\n     * @public\r\n     */\r\n    public getColumnTypes(): SupportedColumnType[] {\r\n        return this.columnTypes;\r\n    }\r\n\r\n    /**\r\n     * Sets column type on the given index.\r\n     *\r\n     * @param columnType type to set {@type SupportedColumnType}\r\n     * @param columnIndex column to update {@type number}\r\n     * @public\r\n     */\r\n    public setColumnType(columnType: SupportedColumnType, columnIndex: number): void {\r\n        this.columnTypes[columnIndex] = columnType;\r\n        this.checkColumnTypes(columnIndex);\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Gets all rows.\r\n     *\r\n     * @return data tuples as 2D string array [row, column] {@type string[][]}\r\n     * @public\r\n     */\r\n    public getRows(): string[][] {\r\n        return this.rows;\r\n    }\r\n\r\n    /**\r\n     * Sets value in the row in the given row and column.\r\n     *\r\n     * @param input value to set {@type string}\r\n     * @param rowIndex row to insert {@type number}\r\n     * @param columnIndex column to insert {@type number}\r\n     * @public\r\n     */\r\n    public setRowInput(input: string, rowIndex: number, columnIndex: number): void {\r\n        this.rows[rowIndex][columnIndex] = input;\r\n        this.checkRowInput(columnIndex, rowIndex);\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if no changes were made after last setActual(true) call.\r\n     * The StoredRelation is created with isActual() = false.\r\n     *\r\n     * @return actual value {@type boolean}\r\n     * @public\r\n     */\r\n    public isActual(): boolean {\r\n        return this.actual;\r\n    }\r\n\r\n    /**\r\n     * Sets current StoredRelation state as actual. Any change sets the state as not actual automatically.\r\n     * If it is set to actual, the current state is saved as the revert state.\r\n     *\r\n     * @param actual set relation actual value to the given value {@type boolean}\r\n     * @public\r\n     */\r\n    public setActual(actual: boolean): void {\r\n        this.actual = actual;\r\n        if (actual) {\r\n            this.revertState = this.toDataObject();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns name of the saved relation state to revert or empty string.\r\n     *\r\n     * @return name of the saver relation state to revert or empty string {@type string}\r\n     * @public\r\n     */\r\n    public getRevertName(): string {\r\n        if (this.revertState !== undefined) {\r\n            return this.revertState.name;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reverts the current relation to its last loaded state (if any exists, call canRevert() to check).\r\n     * The relation is set as not actual, null values support and saved revert state is not reverted.\r\n     * @public\r\n     */\r\n    public revert(): void {\r\n        if (this.revertState !== undefined) {\r\n            this.name = this.revertState.name;\r\n            this.columnNames = [...this.revertState.columnNames];\r\n            this.columnTypes = [...this.revertState.columnTypes];\r\n            this.rows = this.revertState.rows.map(row => [...row]);\r\n            this.columnCount = this.revertState.columnCount;\r\n            this.rowCount = this.revertState.rowCount;\r\n            this.actual = false;\r\n            this.recomputeErrors();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Returns true if the given object is a {@link StoredRelationData}, has at least one column, and all rows has the same length.\r\n * @param obj checked object {@type any}\r\n * @return whether the given object is a valid StoredRelationData {@type boolean}\r\n * @category Relation\r\n * @public\r\n */\r\nexport function isStoredRelationData(obj: any): boolean {\r\n    if (typeof obj !== \"object\") {\r\n        return false;\r\n    }\r\n    if (!(\"name\" in obj) || typeof obj.name !== \"string\") {\r\n        return false;\r\n    }\r\n    if (!(\"columnCount\" in obj) || typeof obj.columnCount !== \"number\" || obj.columnCount < 1) {\r\n        return false;\r\n    }\r\n    if (!(\"rowCount\" in obj) || typeof obj.rowCount !== \"number\") {\r\n        return false;\r\n    }\r\n    if (!(\"columnNames\" in obj) || !Array.isArray(obj.columnNames) || obj.columnNames.length !== obj.columnCount ||\r\n        obj.columnNames.some((o: any) => typeof o !== \"string\")) {\r\n        return false;\r\n    }\r\n    if (!(\"columnTypes\" in obj) || !Array.isArray(obj.columnTypes) || obj.columnTypes.length !== obj.columnCount ||\r\n        obj.columnTypes.some((o: any) => !isSupportedColumnType(o))) {\r\n        return false;\r\n    }\r\n    return (\"rows\" in obj && Array.isArray(obj.rows) && obj.rows.every((o: any) => {\r\n        return Array.isArray(o) && o.length === obj.columnCount && o.every((d: any) => typeof d === \"string\");\r\n    }));\r\n}","/**\r\n * Specifies supported column types in the application. When changed, update the keywords.ts file.\r\n */\r\n\r\n/**\r\n * Supported string names of types of columns for a relational schema.\r\n * @typedef SupportedColumnType\r\n * @category Relation\r\n * @public\r\n */\r\nexport type SupportedColumnType = \"string\" | \"number\" | \"boolean\";\r\n\r\n/**\r\n * Possible types of the content of columns (null values included).\r\n * @typedef ColumnContent\r\n * @category Relation\r\n * @public\r\n */\r\nexport type ColumnContent = string | number | boolean | null;\r\n\r\n/**\r\n * Returns true if the given obj is string with value SupportedColumnType value.\r\n * @param obj checked object {@type any}\r\n * @return whether the given obj is string with value SupportedColumnType value {@type boolean}\r\n * @category Relation\r\n * @public\r\n */\r\nexport function isSupportedColumnType(obj: any): boolean {\r\n    if (typeof obj !== \"string\") {\r\n        return false;\r\n    }\r\n    return obj === \"string\" || obj === \"number\" || obj === \"boolean\";\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport {CsvValueSeparator, findValueSeparator, splitCSVLine} from \"../types/csvSupport\";\r\nimport {StoredRelation} from \"./storedRelation\";\r\nimport {SupportedColumnType} from \"./columnType\";\r\nimport {saveAs} from \"file-saver\";\r\nimport JSZip from \"jszip\";\r\nimport {StringUtils} from \"../utils/stringUtils\";\r\n\r\n/**\r\n * Class for loading and saving relation definitions as {@link StoredRelation}.\r\n * @category Relation\r\n * @public\r\n */\r\nexport class RelationStoreManager {\r\n\r\n    /**\r\n     * Loads textual relation representations from multiple CSV files selected by the user. If the csv does not have\r\n     * valid stricture, it is skipped. Loaded CSVs are parsed to StoredRelations and returned in a promise.\r\n     *\r\n     * @param nullValuesSupport null values support to set in created StoredRelations {@type boolean}\r\n     * @return parsed StoredRelations and number of skipped files in a promise {@type Promise}\r\n     * @public\r\n     */\r\n    public static load(nullValuesSupport: boolean): Promise<{relations: StoredRelation[], skipped: number}> {\r\n        return new Promise<{relations: StoredRelation[], skipped: number}>(resolve => {\r\n            FileDialog.openFiles(\".csv\").then(files => {\r\n                let relations: StoredRelation[] = [];\r\n                let skipped: number = 0;\r\n                files.forEach(file => {\r\n                    if (file.name.match(/\\.csv$/)) {\r\n                        try {\r\n                            relations.push(this.csvToRelation(RelationStoreManager.createValidName(file.name.slice(0, -4)),\r\n                                file.text, nullValuesSupport));\r\n                        }\r\n                        catch (err) {\r\n                            console.log('File ' + file.name + ' skipped for bad format of csv');\r\n                            skipped += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log('Unsupported filetype: ' + file.name);\r\n                        skipped += 1;\r\n                    }\r\n                });\r\n                resolve({relations: relations, skipped: skipped});\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves given relations into csv files (in one csv file each relation). Uses given value separator.\r\n     *\r\n     * @param relations map of the relations to be  {@type StoredRelation[]}\r\n     * @param filename name of the downloaded file (without .zip/.csv extension) {@type string}\r\n     * @param valueSeparator the separator of values {@type CsvValueSeparator}\r\n     * @public\r\n     */\r\n    public static save(relations: StoredRelation[], filename: string, valueSeparator: CsvValueSeparator): void {\r\n        if (relations.length === 0) {\r\n            return;\r\n        }\r\n        if (relations.length === 1) {\r\n            const blob = new Blob([this.relationToCsv(relations[0], valueSeparator)], {type: \"text/plain;charset=utf-8\"});\r\n            saveAs(blob, relations[0].getName() + '.csv');\r\n            return;\r\n        }\r\n        const zip: JSZip = JSZip();\r\n        relations.forEach(relation => {\r\n            zip.file(relation.getName() + '.csv', this.relationToCsv(relation, valueSeparator));\r\n        });\r\n        zip.generateAsync({type: \"blob\"}).then(content => {\r\n            saveAs(content, filename + \".zip\");\r\n        }).catch(err => {\r\n            throw err;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses a StoredRelation from given csv text. If the text is invalid, throws error.\r\n     *\r\n     * @param name name of the relation\r\n     * @param text csv content to parse a relation from\r\n     * @param nullValuesSupport null values support to set in created StoredRelation\r\n     */\r\n    private static csvToRelation(name: string, text: string | null, nullValuesSupport: boolean): StoredRelation {\r\n        if (text === null || text === \"\") {\r\n            console.log(\"null or empty string read from file \" + name);\r\n            throw Error();\r\n        }\r\n\r\n        text = text.trim().replace(/\\r\\n/g, '\\n')\r\n            .replace(/\\r/g, '\\n').replace(/\\t/g, \"    \");\r\n\r\n        const lines: string[] = text.split('\\n');\r\n\r\n        if (lines.length < 2) {\r\n            console.log(\"file \" + name + \" has only one line\");\r\n            throw new Error();  // at least two lines are expected (names and types)\r\n        }\r\n\r\n        lines[0] = lines[0].replace(/\\s/g, '');\r\n        lines[1] = lines[1].replace(/\\s/g, '');\r\n\r\n        let separator = findValueSeparator(lines[1]);\r\n        // if no separator is found, only one column is expected - sets separator to not defined value to unify the\r\n        // following process\r\n        if (separator === undefined) {\r\n            separator = ';';\r\n        }\r\n\r\n        const columnNames: string[] = splitCSVLine(lines[0], separator);\r\n        const columnTypes: SupportedColumnType[] = splitCSVLine(lines[1], separator).map(str => {\r\n            const lower = str.toLowerCase();\r\n            if (lower === \"string\" || lower === \"str\" || lower === \"s\") {\r\n                return \"string\";\r\n            }\r\n            else if (lower === \"number\" || lower === \"num\" || lower === \"n\") {\r\n                return \"number\";\r\n            }\r\n            return \"boolean\";\r\n        });\r\n        // @ts-ignore - separator cannot be undefined\r\n        const rows: string[][] = lines.slice(2).map(line => splitCSVLine(line, separator));\r\n\r\n        // all rows must have equal column count\r\n        const columnCount = columnNames.length;\r\n        if (columnTypes.length !== columnCount || rows.some(row => row.length !== columnCount)) {\r\n            console.log(\"rows in file \" + name + \" do not have the same number of columns\");\r\n            throw new Error();\r\n        }\r\n\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Removes invalid characters for name. If the filtered name is empty, returns string \"relation\".\r\n     */\r\n    private static createValidName(name: string): string {\r\n        name = name.split('').filter(char => StringUtils.isNameChar(char)).join('');\r\n        if (name === \"\") {\r\n            return \"relation\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Creates a csv representation for the given relation.\r\n     */\r\n    private static relationToCsv(relation: StoredRelation, valueSeparator: CsvValueSeparator): string {\r\n        const names: string = relation.getColumnNames().map(\r\n            n => '\"' + n.replace(/\"/g, '\"\"') + '\"'\r\n        ).join(valueSeparator);\r\n        const types: string = relation.getColumnTypes().join(valueSeparator);\r\n        const rows: string[] = relation.getRows().map(row => row.map(\r\n            data => '\"' + data.replace(/\"/g, '\"\"') + '\"'\r\n        ).join(valueSeparator));\r\n        return [names, types, ...rows].join('\\n');\r\n    }\r\n}","import React from \"react\";\r\n// @ts-ignore - type declaration is not needed for its short usage\r\nimport downloadSVG from \"export-svg-with-styles\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {ResultRelationTable} from \"./resultRelationTable\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport {RATreeNode} from \"../ratree/raTreeNode\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {evalTreeSVGId, EvaluationTree} from \"./evaluationTree\";\r\nimport {depthSearch} from \"../ratree/raTreeTools\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {RelationStoreManager} from \"../relation/relationStoreManager\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport \"./css/resultSection.css\"\r\nimport {language, LanguageDef} from \"../language/language\";\r\n\r\n/**\r\n * Props of ResultSection component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface ResultSectionProps {\r\n    /**\r\n     * the root of the current evaluation tree to display\r\n     * @type RATreeNode\r\n     * @public\r\n     */\r\n    evaluationTreeRoot: RATreeNode,\r\n    /**\r\n     * name of the evaluated expression\r\n     * @type string\r\n     * @public\r\n     */\r\n    expressionName: string,\r\n    /**\r\n     * handler of adding the given relation to defined relations\r\n     * @type function\r\n     * @public\r\n     */\r\n    onAddResult: (relation: Relation) => void,\r\n    /**\r\n     * handler of unexpected errors\r\n     * @type function\r\n     * @public\r\n     */\r\n    onUnexpectedError: (e: Error) => void,\r\n    /**\r\n     * current selected value separator in csv files\r\n     * @type CsvValueSeparator\r\n     * @public\r\n     */\r\n    csvValueSeparator: CsvValueSeparator,\r\n    /**\r\n     * true if dark theme should be applied\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    darkTheme: boolean,\r\n    /**\r\n     * current application language\r\n     * @type LanguageDef\r\n     * @public\r\n     */\r\n    language: LanguageDef\r\n}\r\n\r\ninterface ResultSectionState {\r\n    selectedIndex: number\r\n}\r\n\r\n/**\r\n * Section to show the evaluation result. It contains a table with a result and text input and buttons to save it.\r\n * The component is hidden if given resultRelation is null.\r\n * Accepts {@link ResultSectionProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class ResultSection extends React.Component<ResultSectionProps, ResultSectionState> {\r\n\r\n    // reference to this section element\r\n    private readonly sectionRef: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: ResultSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedIndex: 0\r\n        }\r\n        this.sectionRef = React.createRef<HTMLDivElement>();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ResultSectionProps>) {\r\n        if (prevProps.evaluationTreeRoot !== this.props.evaluationTreeRoot) {\r\n            this.setState({selectedIndex: 0});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the result relation for the current selected node.\r\n     */\r\n    private getCurrentRelation = (): Relation | null => {\r\n        let currentNode: RATreeNode | null = depthSearch(this.props.evaluationTreeRoot, this.state.selectedIndex);\r\n        if (currentNode === null) {\r\n            currentNode = depthSearch(this.props.evaluationTreeRoot, 0);\r\n            if (currentNode === null) {\r\n                this.props.onUnexpectedError(ErrorFactory.codeError(language().codeErrors.resultSection_nodeIndexNotFound));\r\n                return null;\r\n            }\r\n        }\r\n        try {\r\n            return currentNode.getResult();\r\n        }\r\n        catch (err) {\r\n            // errors should be handled in expression section\r\n            this.props.onUnexpectedError(ErrorFactory.codeError(language().codeErrors.resultSection_evalError, err.message));\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private handleSelectedNodeChange = (index: number): void => {\r\n        this.setState({selectedIndex: index});\r\n    }\r\n\r\n    /**\r\n     * Saves the displayed evaluation tree as png picture.\r\n     */\r\n    private exportEvalTreeAsPng = (): void => {\r\n        const svg = document.getElementById(evalTreeSVGId);\r\n        if (svg !== null) {\r\n            const rect = svg.getBoundingClientRect();\r\n            const options = {\r\n                width: rect.width * 3,\r\n                height: rect.height * 3,\r\n                svg: svg,\r\n                filename: this.props.expressionName + \" - evaluation tree.png\"\r\n            }\r\n            downloadSVG(options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the current selected relation to a file.\r\n     */\r\n    private exportRelation = (): void => {\r\n        if (this.getCurrentRelation() === null) {\r\n            this.props.onUnexpectedError(ErrorFactory.codeError(language().codeErrors.resultSection_nullRelationToSave));\r\n            return;\r\n        }\r\n        try {\r\n            RelationStoreManager.save(\r\n                [StoredRelation.fromRelation(\"rachel_result\", this.getCurrentRelation() as Relation, true)],\r\n                \"rachel_result\", this.props.csvValueSeparator);\r\n        }\r\n        catch (err) {\r\n            console.warn(\"Saving error: \" + err, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the current selected relation with the given name to the parent.\r\n     */\r\n    private addRelation = (): void => {\r\n        if (this.getCurrentRelation() === null) {\r\n            this.props.onUnexpectedError(\r\n                ErrorFactory.codeError(language().codeErrors.resultSection_nullRelationToAdd)\r\n            );\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        this.props.onAddResult(this.getCurrentRelation());\r\n    }\r\n\r\n    render() {\r\n        const relation = this.getCurrentRelation();\r\n        // does not show null result\r\n        if (relation === null) {\r\n            return null;\r\n        }\r\n        const lang = this.props.language.resultSection;\r\n\r\n        const relationType: string = this.state.selectedIndex === 0 ? lang.resultRelationTitle : lang.intermediateRelationTitle;\r\n        const selectedNode: RATreeNode | null = depthSearch(this.props.evaluationTreeRoot, this.state.selectedIndex);\r\n        const tableTitle: string | null = selectedNode === null ? null : selectedNode.printInLine();\r\n\r\n        return (\r\n            <section\r\n                ref={this.sectionRef}\r\n                className=\"page-section result-section\">\r\n                <header>\r\n                    <h2>{lang.resultSectionHeader}</h2>\r\n                    <TooltipButton\r\n                        text={lang.exportEvalTreeButton}\r\n                        onClick={this.exportEvalTreeAsPng}\r\n                        tooltip={lang.exportEvalTreeButtonTooltip}\r\n                    />\r\n                </header>\r\n\r\n                <p className=\"upper-p\">\r\n                    <strong>{lang.evalTreeTitle + ' ' + this.props.evaluationTreeRoot.printInLine() + ':'}</strong>\r\n                </p>\r\n\r\n                <EvaluationTree\r\n                    tree={this.props.evaluationTreeRoot}\r\n                    selected={this.state.selectedIndex}\r\n                    onClick={this.handleSelectedNodeChange}\r\n                    darkTheme={this.props.darkTheme}\r\n                />\r\n\r\n                <p className=\"lower-p\"><strong>{relationType} {tableTitle}:</strong></p>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    <TooltipButton\r\n                        text={lang.addButton}\r\n                        onClick={this.addRelation}\r\n                        tooltip={lang.addButtonTooltip}\r\n                    />\r\n                    <TooltipButton\r\n                        text={lang.exportRelationButton}\r\n                        onClick={this.exportRelation}\r\n                        tooltip={lang.exportRelationButtonTooltip}\r\n                    />\r\n                </menu>\r\n\r\n                <ResultRelationTable relation={relation} />\r\n            </section>\r\n        );\r\n    }\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport {saveAs} from \"file-saver\";\r\nimport {Expression} from \"./expression\";\r\n\r\n/**\r\n * Promised expression information in {@link ExpressionStoreManager}.load() function.\r\n * @category Expression\r\n * @public\r\n */\r\nexport interface ExpressionLoadData {\r\n    /**\r\n     * successfully parsed expressions\r\n     * @type Expression[]\r\n     * @public\r\n     */\r\n    expressions: Expression[],\r\n    /**\r\n     * number of skipped expressions (from successfully loaded files)\r\n     * @type number\r\n     * @public\r\n     */\r\n    skippedExpressions: number,\r\n    /**\r\n     * number of successfully loaded files\r\n     * @type number\r\n     * @public\r\n     */\r\n    loadedFiles: number,\r\n    /**\r\n     * number of skipped files (not .txt, null loaded...)\r\n     * @type number\r\n     * @public\r\n     */\r\n    skippedFiles: number\r\n}\r\n\r\n/**\r\n * Class for loading and saving expressions.\r\n * @category Expression\r\n * @public\r\n */\r\nexport class ExpressionStoreManager {\r\n\r\n    /**\r\n     * Loads expressions from multiple textual files selected by the user. Each file can contain multiple expressions,\r\n     * split by '\\n###\\n'. When different line separator is used (\\r, \\r\\n), it is replaced by \\n before return.\r\n     * All tabulators are replaces by 4 spaces.\r\n     *\r\n     * @return information about loaded expressions in a promise {@type Promise<ExpressionLoadData>}\r\n     * @public\r\n     */\r\n    public static load(): Promise<ExpressionLoadData> {\r\n        return new Promise<ExpressionLoadData>(resolve => {\r\n            FileDialog.openFiles(\".txt\").then(files =>{\r\n                let expressions: Expression[] = [];\r\n                let skippedExpressions: number = 0;\r\n                let loadedFiles: number = 0;\r\n                let skippedFiles: number = 0;\r\n                files.forEach(file => {\r\n                    if (file.text === null) {\r\n                        console.log('Null read from file ' + file.name);\r\n                        skippedFiles += 1;\r\n                    }\r\n                    else if (file.name.match(/\\.txt$/)) {\r\n                        // replaces line separators to expected '\\n' and tabulators to four spaces\r\n                        file.text = file.text.replace(/\\r\\n/g, '\\n')\r\n                            .replace(/\\r/g, '\\n').replace(/\\t/g, \"    \");\r\n                        // prepends newline for first expected splitting of the first expression\r\n                        ('\\n'.concat(file.text)).split('\\n### ').forEach(part => {\r\n                            try {\r\n                                if (part.trim().length !== 0) {\r\n                                    expressions.push(this.splitExpressionNameAndText(part));\r\n                                }\r\n                            }\r\n                            catch (err) {\r\n                                skippedExpressions += 1;\r\n                            }\r\n                        });\r\n                        loadedFiles += 1;\r\n                    }\r\n                    else {\r\n                        console.log('Unsupported filetype: ' + file.name);\r\n                        skippedFiles += 1;\r\n                    }\r\n                });\r\n                resolve({expressions, skippedExpressions, loadedFiles, skippedFiles});\r\n            });\r\n        });\r\n    }\r\n\r\n    private static splitExpressionNameAndText(expr: string): Expression {\r\n        const firstNewLineIndex: number = expr.indexOf('\\n');\r\n        if (firstNewLineIndex === -1) {\r\n            console.log(\"Expression does not contain first name line.\");\r\n            throw Error();\r\n        }\r\n        const firstRow: string = expr.slice(0, firstNewLineIndex).trim();\r\n        if (!firstRow.endsWith(' ###')) {\r\n            console.log(\"Expression does not contain name between hashes.\");\r\n            throw Error();\r\n        }\r\n        const name: string = firstRow.slice(0, -4);\r\n        const text: string = expr.slice(firstNewLineIndex).trim();\r\n        return {name: name, text: text};\r\n    }\r\n\r\n    /**\r\n     * Saves given expressions to a textual file. Each expression starts with \"### Expression name ###\\n\" line.\r\n     *\r\n     * @param expressions array of expressions to be saved {@type Expression[]}\r\n     * @param filename name of the downloaded file (without extension) {@type string}\r\n     * @public\r\n     */\r\n    public static save(expressions: Expression[], filename: string): void {\r\n        const textContent: string = expressions.map(e => {\r\n            return \"### \" + e.name + \" ###\\n\\n\" + e.text;\r\n        }).join('\\n\\n');\r\n        const blob = new Blob([textContent], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, filename + '.txt');\r\n    }\r\n}","import {Project} from \"./project\";\r\n\r\n/**\r\n * Sample of the application {@link Project} with a name.\r\n * @category Project\r\n * @public\r\n */\r\nexport interface ProjectSample {\r\n    /**\r\n     * name of the sample\r\n     * @type string\r\n     * @public\r\n     */\r\n    name: string,\r\n    /**\r\n     * sample project\r\n     * @type Project\r\n     * @public\r\n     */\r\n    project: Project\r\n}\r\n\r\nconst samples: ProjectSample[] = [\r\n    // english sample\r\n    {\r\n        name: \"Cars and Owners (EN)\",\r\n        project: {\r\n            relations: [\r\n                {\r\n                    name: \"Car\",\r\n                    columnNames: [\"Id\", \"Owner\", \"Color\", \"Electric\", \"Weight\"],\r\n                    columnTypes: [\"number\", \"number\", \"string\", \"boolean\", \"number\"],\r\n                    rows: [\r\n                        ['1', '1', 'Blue', 'True', '1000'],\r\n                        ['2', '1', 'Green', 'false', '1 200'],\r\n                        ['3', '2', 'Blue', 'F', '850.42'],\r\n                        ['4', '3', 'Black', 't', '1 111.111 111']\r\n                    ],\r\n                    columnCount: 5,\r\n                    rowCount: 4\r\n                },\r\n                {\r\n                    name: \"Owner\",\r\n                    columnNames: [\"Id\", \"Name\"],\r\n                    columnTypes: [\"number\", \"string\"],\r\n                    rows: [\r\n                        ['1', 'George Smith'],\r\n                        ['2', 'Adam \"Driver /\\\\\" Jackson'],\r\n                        ['3', 'Michael Trueman'],\r\n                        ['Fix errors', 'before loading'],\r\n                        ['Or delete', 'invalid rows']\r\n                    ],\r\n                    columnCount: 2,\r\n                    rowCount: 3\r\n                }\r\n            ],\r\n            expressions: [\r\n                {\r\n                    name: \"Relation only\",\r\n                    text:\r\n                        \"// You can use comments until the line end after '//'\\n\" +\r\n                        \"// You must load relations before using them in expressions\\n\" +\r\n                        \"\\n\" +\r\n                        \"Car\\n\" +\r\n                        \"\\n\" +\r\n                        \"// After evaluation, you will see the evaluation tree\\n\" +\r\n                        \"// and the result relation at the bottom of the page\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Unary operator\",\r\n                    text:\r\n                        \"// Unary operator comes after the source relation\\n\" +\r\n                        \"// If the relation is still not defined, go check its definition\\n\" +\r\n                        \"// This expression returns all owners with id 1\\n\" +\r\n                        \"\\n\" +\r\n                        \"Owner(Id = 1)\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Binary operator\",\r\n                    text:\r\n                        \"// Binary operator comes between source relations\\n\" +\r\n                        \"// This expression returns natural join of cars and owners\\n\" +\r\n                        \"\\n\" +\r\n                        \"Car*Owner\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Escapes\",\r\n                    text:\r\n                        \"// Strings in expressions are enclosed in quotes\\n\" +\r\n                        \"// To use quotes inside a string, you must escape them by a backslash '\\\\\\\"'\\n\" +\r\n                        \"// To use backslash inside a string, you must escape it with second one '\\\\\\\\'\\n\" +\r\n                        \"\\n\" +\r\n                        'Owner(Name == \"Adam \\\\\"Driver /\\\\\\\\\\\\\" Jackson\")\\n' +\r\n                        '\\n' +\r\n                        '// This does not work: Owner(Name == \"Adam \"Driver /\\\\\" Jackson\")\\n' +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Example\",\r\n                    text:\r\n                        \"// Errors are highlighted by red underline - hover mouse over it to see details\\n\" +\r\n                        \"// While typing, Rachel shows you available relations or columns\\n\" +\r\n                        \"// (if relations are loaded in the application)\\n\" +\r\n                        \"// Try to write a query for: all cars' ids and their owners' names\\n\" +\r\n                        \"\\n\" +\r\n                        \"TODO...\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Example result\",\r\n                    text:\r\n                        \"// One possible expression is like this...\\n\" +\r\n                        \"\\n\" +\r\n                        \"(\\n\" +\r\n                        \"  Car\\n\" +\r\n                        \"  *\\n\" +\r\n                        \"  Owner< Id -> Owner >\\n\" +\r\n                        \")[Id, Name]\\n\" +\r\n                        \"\\n\" +\r\n                        \"// For more detailed manual click 'About' button in the page header\\n\" +\r\n                        \"\"\r\n                }\r\n            ],\r\n            nullValuesSupport: true\r\n        }\r\n    },\r\n    // czech sample\r\n    {\r\n        name: \"Auta a Majitelé (CS)\",\r\n        project: {\r\n            relations: [\r\n                {\r\n                    name: \"Auto\",\r\n                    columnNames: [\"Id\", \"Majitel\", \"Barva\", \"Elektro\", \"Váha\"],\r\n                    columnTypes: [\"number\", \"number\", \"string\", \"boolean\", \"number\"],\r\n                    rows: [\r\n                        ['1', '1', 'Modrá', 'True', '1000'],\r\n                        ['2', '1', 'Zelená', 'false', '1 200'],\r\n                        ['3', '2', 'Modrá', 'F', '850.42'],\r\n                        ['4', '3', 'Černá', 't', '1 111.111 111']\r\n                    ],\r\n                    columnCount: 5,\r\n                    rowCount: 4\r\n                },\r\n                {\r\n                    name: \"Majitel\",\r\n                    columnNames: [\"Id\", \"Jméno\"],\r\n                    columnTypes: [\"number\", \"string\"],\r\n                    rows: [\r\n                        ['1', 'Pepa Mrázek'],\r\n                        ['2', 'Adam \"Závodník /\\\\\" Horváth'],\r\n                        ['3', 'Michael Dvořák'],\r\n                        ['Před nahráním', 'oprav chyby'],\r\n                        ['Nebo odstraň', 'chybné řádky']\r\n                    ],\r\n                    columnCount: 2,\r\n                    rowCount: 3\r\n                }\r\n            ],\r\n            expressions: [\r\n                {\r\n                    name: \"Pouze relace\",\r\n                    text:\r\n                        \"// Můžeš používat komentáře po '//'\\n\" +\r\n                        \"// Před použitím relací ve výrazech je musíš nahrát\\n\" +\r\n                        \"\\n\" +\r\n                        \"Auto\\n\" +\r\n                        \"\\n\" +\r\n                        \"// Po vyhodnocení uvidíš evaluační strom\\n\" +\r\n                        \"// a výslednou relaci dole na stránce\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Unární operátor\",\r\n                    text:\r\n                        \"// Unární operátory se píší za vstupní relaci\\n\" +\r\n                        \"// Pokud je tato relace stále nedefinovaná, zkontroluj její definici\\n\" +\r\n                        \"// Tento dotaz vrátí všechny majitele s id = 1\\n\" +\r\n                        \"\\n\" +\r\n                        \"Majitel(Id = 1)\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Binární operátor\",\r\n                    text:\r\n                        \"// Binární operátory se píší mezi vstupní relace\\n\" +\r\n                        \"// Tento výraz vrátí přirozené spojení aut a majitelů\\n\" +\r\n                        \"\\n\" +\r\n                        \"Auto*Majitel\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Escapes\",\r\n                    text:\r\n                        \"// Textové řetězce ve výrazech musí být mezi uvozovkami\\n\" +\r\n                        \"// Pro použití uvozovek v řetězci před ně musíš napsat zpětné lomítko '\\\\\\\"'\\n\" +\r\n                        \"// Pro použití zpětného lomítka před něj musíš napsat druhé '\\\\\\\\'\\n\" +\r\n                        \"\\n\" +\r\n                        'Majitel(Jméno == \"Adam \\\\\"Závodník /\\\\\\\\\\\\\" Horváth\")\\n' +\r\n                        '\\n' +\r\n                        '// Toto by nefungovalo: Majitel(Jméno == \"Adam \"Závodník /\\\\\" Horváth\")\\n' +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Příklad\",\r\n                    text:\r\n                        \"// Chyby jsou zvýrazněni červeným podtržením - přejeď na ně myší pro detaily\\n\" +\r\n                        \"// Při psaní ti Rachel nabízí dostupné relace nebo sloupce\\n\" +\r\n                        \"// (pokud jsou relace nahrané v aplikace)\\n\" +\r\n                        \"// Zkus napsat dotaz pro: id všech aut a jména jejich majitelů\\n\" +\r\n                        \"\\n\" +\r\n                        \"TODO...\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Výsledek příkladu\",\r\n                    text:\r\n                        \"// Jedno možné řešení je toto...\\n\" +\r\n                        \"\\n\" +\r\n                        \"(\\n\" +\r\n                        \"  Auto\\n\" +\r\n                        \"  *\\n\" +\r\n                        \"  Majitel< Id -> Majitel >\\n\" +\r\n                        \")[Id, Jméno]\\n\" +\r\n                        \"\\n\" +\r\n                        \"// Pro více informací navštiv manuál přes odkaz 'O aplikaci' v horním menu\\n\" +\r\n                        \"\"\r\n                }\r\n            ],\r\n            nullValuesSupport: true\r\n        }\r\n    }\r\n];\r\n\r\n/**\r\n * Returns prepared project samples.\r\n *\r\n * @return {@type ProjectSample[]}\r\n * @category Project\r\n * @public\r\n */\r\nexport function getSamples(): ProjectSample[] {\r\n    return samples;\r\n}","import React from \"react\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {allSupportedLanguages, LanguageDef, SupportedLanguage} from \"../language/language\";\r\nimport \"./css/managementSection.css\"\r\nimport {getSamples} from \"../project/samples\";\r\nimport {Project} from \"../project/project\";\r\n\r\n/**\r\n * Props of ManagementSection component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface ManagementSectionProps {\r\n    /**\r\n     * handler of batch processing\r\n     * @type function\r\n     * @public\r\n     */\r\n    onBatch: () => void,\r\n    /**\r\n     * handler of project loading\r\n     * @type function\r\n     * @public\r\n     */\r\n    onLoadProject: () => void,\r\n    /**\r\n     * handler of project saving\r\n     * @type function\r\n     * @public\r\n     */\r\n    onSaveProject: () => void,\r\n    /**\r\n     * handler of loading the selected sample project\r\n     * @type function\r\n     * @public\r\n     */\r\n    onLoadSample: (sample: Project) => void,\r\n    /**\r\n     * current selected value separator in csv files\r\n     * @type CsvValueSeparator\r\n     * @public\r\n     */\r\n    csvValueSeparator: CsvValueSeparator,\r\n    /**\r\n     * current selected language of the application\r\n     * @type LanguageDef\r\n     * @public\r\n     */\r\n    language: LanguageDef,\r\n    /**\r\n     * current selected null values support\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    nullValuesSupport: boolean,\r\n    /**\r\n     * true if dark theme should be applied\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    darkTheme: boolean,\r\n    /**\r\n     * handler of change of the current selected value separator in csv files\r\n     * @type function\r\n     * @public\r\n     */\r\n    onCsvValueSeparatorChange: (csvValueSeparator: CsvValueSeparator) => void,\r\n    /**\r\n     * handler of change of the current selected language of the application\r\n     * @type function\r\n     * @public\r\n     */\r\n    onLanguageChange: (language: SupportedLanguage) => void,\r\n    /**\r\n     * handler of change of the current selected null values support\r\n     * @type function\r\n     * @public\r\n     */\r\n    onNullValuesSupportChange: (nullValuesSupport: boolean) => void,\r\n    /**\r\n     * handler of change of the current selected theme\r\n     * @type function\r\n     * @public\r\n     */\r\n    onDarkThemeChange: (darkTheme: boolean) => void\r\n}\r\n\r\ninterface ManagementSectionState {\r\n    sectionClicked: boolean\r\n}\r\n\r\n/**\r\n * Section to manage batch processing, importing/exporting the project, and settings.\r\n * Accepts {@link ManagementSectionProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class ManagementSection extends React.Component<ManagementSectionProps, ManagementSectionState> {\r\n\r\n    constructor(props: ManagementSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const lang = this.props.language.managementSection;\r\n\r\n        const createBatchButton = () => {\r\n            return (<button onClick={this.props.onBatch}>{lang.batchButton}</button>);\r\n        }\r\n        const createLoadProjectButton = () => {\r\n            return (<button onClick={this.props.onLoadProject} >{lang.loadButton}</button>);\r\n        }\r\n        const createSaveProjectButton = () => {\r\n            return (<button onClick={this.props.onSaveProject} >{lang.saveButton}</button>);\r\n        }\r\n        const createSettingsButton = () => {\r\n            const settingsMenu = (\r\n                <ul className=\"list-menu\">\r\n                    <li>\r\n                        <span>{lang.settingsNullValues}:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"null_values_support\"\r\n                            value=\"allowed\"\r\n                            id=\"null_values_support_allowed\"\r\n                            checked={this.props.nullValuesSupport}\r\n                            onChange={() => this.props.onNullValuesSupportChange(true)} />\r\n                        <label htmlFor=\"null_values_support_allowed\">{lang.settingsNullValuesAllowed}</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"null_values_support\"\r\n                            value=\"forbidden\"\r\n                            id=\"null_values_support_forbid\"\r\n                            checked={!this.props.nullValuesSupport}\r\n                            onChange={() => this.props.onNullValuesSupportChange(false)} />\r\n                        <label htmlFor=\"null_values_support_forbid\">{lang.settingsNullValuesForbidden}</label>\r\n                    </li>\r\n                    <li>\r\n                        <span>{lang.settingsCSVSeparator}:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"value_separator\"\r\n                            value=\"semicolon\"\r\n                            id=\"value_separator_semi\"\r\n                            checked={this.props.csvValueSeparator === \";\"}\r\n                            onChange={() => this.props.onCsvValueSeparatorChange(\";\")}/>\r\n                        <label htmlFor=\"value_separator_semi\">{lang.settingsCSVSeparatorSemicolon}</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"value_separator\"\r\n                            value=\"comma\"\r\n                            id=\"value_separator_comma\"\r\n                            checked={this.props.csvValueSeparator === \",\"}\r\n                            onChange={() => this.props.onCsvValueSeparatorChange(\",\")}/>\r\n                        <label htmlFor=\"value_separator_comma\">{lang.settingsCSVSeparatorComma}</label>\r\n                    </li>\r\n                    <li>\r\n                        <span>{lang.settingsTheme}:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"dark_mode\"\r\n                            value=\"on\"\r\n                            id=\"dark_mode_on\"\r\n                            checked={!this.props.darkTheme}\r\n                            onChange={() => this.props.onDarkThemeChange(false)} />\r\n                        <label htmlFor=\"dark_mode_on\">{lang.settingsThemeLight}</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"dark_mode\"\r\n                            value=\"off\"\r\n                            id=\"dark_mode_off\"\r\n                            checked={this.props.darkTheme}\r\n                            onChange={() => this.props.onDarkThemeChange(true)} />\r\n                        <label htmlFor=\"dark_mode_off\">{lang.settingsThemeDark}</label>\r\n                    </li>\r\n                    <li>\r\n                        <span>{lang.settingsLanguage}:</span>\r\n                        {allSupportedLanguages.map(lang => {\r\n                            return (<div key={lang} style={{display: \"inline\"}}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name=\"language\"\r\n                                    value={lang}\r\n                                    id={\"language_\" + lang}\r\n                                    checked={this.props.language.abbr === lang}\r\n                                    onChange={() => this.props.onLanguageChange(lang)} />\r\n                                <label htmlFor={\"language_\" + lang}>{lang}</label>\r\n                            </div>)\r\n                        })}\r\n                    </li>\r\n                </ul>\r\n            );\r\n            return (<div className={\"button-like\"}>{lang.settingsButton}{settingsMenu}</div>);\r\n        }\r\n        const createSamplesButton = () => {\r\n            const samplesMenu = (\r\n            <ul className=\"list-menu\">\r\n                {lang.samplesMenuTitle}\r\n                {getSamples().map((sample, i) => {\r\n                    return (\r\n                        <li key={i}>\r\n                            <button onClick={() => this.props.onLoadSample(sample.project)}>{sample.name}</button>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            );\r\n            return (<div className={\"button-like\"} >{lang.samplesButton}{samplesMenu}</div>);\r\n        }\r\n        const createAboutButton = () => {\r\n            return (\r\n                <a  href=\"https://github.com/kotliluk/rachel\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                    className={\"button-like\"}\r\n                >{lang.aboutButton}</a>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <header className=\"management-section\">\r\n                <h1>RACHEL</h1>\r\n                {createBatchButton()}\r\n                {createLoadProjectButton()}\r\n                {createSaveProjectButton()}\r\n                {createSamplesButton()}\r\n                {createSettingsButton()}\r\n                {createAboutButton()}\r\n            </header>\r\n        );\r\n    }\r\n}","import {copyExpression, Expression, isExpression} from \"../expression/expression\";\r\nimport {copyStoredRelationData, isStoredRelationData, StoredRelationData} from \"../relation/storedRelation\";\r\n\r\n/**\r\n * Project interface to store information about project relations, expressions, and null values support.\r\n * Does not store custom settings about saving file types etc.\r\n *\r\n * @category Project\r\n * @public\r\n */\r\nexport interface Project {\r\n    /**\r\n     * stored relation data in compressed representation\r\n     * @type StoredRelationData[]\r\n     * @public\r\n     */\r\n    relations: StoredRelationData[],\r\n    /**\r\n     * expressions\r\n     * @type Expression[]\r\n     * @public\r\n     */\r\n    expressions: Expression[],\r\n    /**\r\n     * whether the project supports null values\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    nullValuesSupport: boolean\r\n}\r\n\r\n/**\r\n * Checks whether the given object is {@link Project} (i.e., has all required fields of required types).\r\n *\r\n * @param obj value to be checked {@type any}\r\n * @return \"OK\" string if the given obj is Project or string description of found error in the structure {@type string}\r\n *\r\n * @category Project\r\n * @public\r\n */\r\nexport function isProjectObject(obj: any): string {\r\n    if (typeof obj !== \"object\") {\r\n        return 'The file cannot be parsed to an object.';\r\n    }\r\n    if (!(\"relations\" in obj) || !Array.isArray(obj.relations) || obj.relations.length === 0 ||\r\n        obj.relations.some((o: any) => !isStoredRelationData(o))) {\r\n        return 'The file must contain the field \"relations: StoredRelationData[]\" of length at least one';\r\n    }\r\n    if (!(\"expressions\" in obj) || !Array.isArray(obj.expressions) || obj.expressions.length === 0 ||\r\n        obj.expressions.some((o: any) => !isExpression(o))) {\r\n        return 'The file must contain the field \"expressions: Expression[]\" of length at least one';\r\n    }\r\n    if (!(\"nullValuesSupport\" in obj) || typeof obj.nullValuesSupport !== \"boolean\") {\r\n        return 'The file must contain the field \"nullValuesSupport: boolean\"';\r\n    }\r\n    return 'OK';\r\n}\r\n\r\n/**\r\n * Creates a copy of the given project.\r\n *\r\n * @param proj project to copy {@type Project}\r\n * @return deep copied project {@type Project}\r\n * @category Project\r\n * @public\r\n */\r\nexport function copyProject(proj: Project): Project {\r\n    return {\r\n        relations: proj.relations.map(rel => copyStoredRelationData(rel)),\r\n        expressions: proj.expressions.map(expr => copyExpression(expr)),\r\n        nullValuesSupport: proj.nullValuesSupport\r\n    }\r\n}","/**\r\n * Representation of named relational algebra expression.\r\n * @category Expression\r\n * @public\r\n */\r\nexport interface Expression {\r\n    /**\r\n     * name of the expression\r\n     * @type string\r\n     * @public\r\n     */\r\n    name: string,\r\n    /**\r\n     * text of the expression\r\n     * @type string\r\n     * @public\r\n     */\r\n    text: string\r\n}\r\n\r\n/**\r\n * Checks whether the given obj is an {@link Expression}.\r\n *\r\n * @param obj object to check {@type any}\r\n * @return whether the given obj is an Expression {@type boolean}\r\n * @category Expression\r\n * @public\r\n */\r\nexport function isExpression(obj: any): boolean {\r\n    if (typeof obj !== \"object\") {\r\n        return false;\r\n    }\r\n    return (\"name\" in obj) && (typeof obj.name === \"string\") && (\"text\" in obj) && (typeof obj.text === \"string\");\r\n}\r\n\r\n/**\r\n * Creates a copy of the given expression.\r\n *\r\n * @param exp Expression to copy {@type Expression}\r\n * @return deep copied expression {@type Expression}\r\n * @category Expression\r\n * @public\r\n */\r\nexport function copyExpression(exp: Expression): Expression {\r\n    return {name: exp.name, text: exp.text};\r\n}","import {isProjectObject, Project} from \"./project\";\r\nimport {FileDialog} from \"../utils/fileDialog\";\r\nimport {saveAs} from \"file-saver\";\r\n\r\n/**\r\n * Class for loading and saving all project data as {@link Project} objects.\r\n * @category Project\r\n * @public\r\n */\r\nexport class ProjectStoreManager {\r\n\r\n    /**\r\n     * Loads asynchronously the project from a .rachel (JSON) file selected by the user.\r\n     * The file must contain the representation of the project object.\r\n     * Returned string values always use '\\n' as line separator.\r\n     *\r\n     * @return loaded project as a Promise {@type Promise<Project>}\r\n     * @public\r\n     */\r\n    public static load(): Promise<Project> {\r\n        return new Promise<Project>((resolve, reject) => {\r\n            FileDialog.openFile(\".rachel\").then(file => {\r\n                if (file.text === null) {\r\n                    reject(\"Reading of the content of the file \" + file.name + \" failed.\");\r\n                }\r\n                else if (file.name.match(/\\.rachel$/)) {\r\n                    // replaces line separators to expected '\\n'\r\n                    file.text = file.text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n')\r\n                        .replace(/\\t/g, \"    \");\r\n                    let obj = JSON.parse(file.text);\r\n                    const result: string = isProjectObject(obj);\r\n                    if (result === \"OK\") {\r\n                        const project: Project = obj;\r\n                        resolve(project);\r\n                    }\r\n                    else {\r\n                        reject(\"Invalid structure of the JSON file. \" + result)\r\n                    }\r\n                }\r\n                else {\r\n                    reject(\"Please select a JSON file to load a project relation from.\");\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves the given Project into the .rachel (JSON) file.\r\n     *\r\n     * @param project the Project object with all project data {@type Project}\r\n     * @param filename name of the downloaded file (without extension, .rachel is added) {@type string}\r\n     * @public\r\n     */\r\n    public static save(project: Project, filename: string): void {\r\n        const blob = new Blob([JSON.stringify(project)], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, filename + '.rachel');\r\n    }\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport JSZip from \"jszip\";\r\nimport {saveAs} from \"file-saver\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {RATreeNode} from \"../ratree/raTreeNode\";\r\nimport {UnaryNode} from \"../ratree/unaryNode\";\r\nimport {ProjectionNode} from \"../ratree/projectionNode\";\r\nimport {RenameNode} from \"../ratree/renameNode\";\r\nimport {SelectionNode} from \"../ratree/selectionNode\";\r\nimport {BinaryNode} from \"../ratree/binaryNode\";\r\nimport {AntijoinNode} from \"../ratree/antijoinNode\";\r\nimport {CartesianProductNode} from \"../ratree/cartesianProductNode\";\r\nimport {DivisionNode} from \"../ratree/divisionNode\";\r\nimport {OuterJoinNode} from \"../ratree/outerJoinNode\";\r\nimport {NaturalJoinNode, NaturalJoinType} from \"../ratree/naturalJoinNode\";\r\nimport {SetOperationNode} from \"../ratree/setOperationNode\";\r\nimport {formatDate} from \"../utils/dateUtils\";\r\nimport {ThetaJoinNode, ThetaJoinType} from \"../ratree/thetaJoinNode\";\r\nimport {isProjectObject, Project} from \"../project/project\";\r\nimport {ExprParser} from \"../expression/exprParser\";\r\nimport {StoredRelation, StoredRelationData} from \"../relation/storedRelation\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {MessageBox} from \"../components/messageBox\";\r\n\r\n/**\r\n * Class for processing multiple input .rachel project files and generating their reports.\r\n * @category Batch\r\n * @public\r\n */\r\nexport class BatchProcessor {\r\n\r\n    /**\r\n     * Opens file dialog and processes project files selected by the user. For each .rachel file creates a textual evaluation\r\n     * report.\r\n     *\r\n     * @param filename name of the downloaded zip file - individual reports has names derived from their original files {@type string}\r\n     * @public\r\n     */\r\n    public static process(filename: string): void {\r\n        FileDialog.openFiles(\".rachel\").then(files => {\r\n            console.log(files.length + ' files loaded to BatchProcessor');\r\n            console.time(\"Batch duration\");\r\n\r\n            let reports: {name: string, text: string}[] = [];\r\n            let processed: number = 0;\r\n            let skipped: number = 0;\r\n\r\n            /**\r\n             * Processes a file on the given index and calls the processing of the next file.\r\n             * If all files were processed, calls downloadReports().\r\n             */\r\n            const processNext = (i: number) => {\r\n                if (i >= files.length) {\r\n                    return downloadReports();\r\n                }\r\n                const file = files[i];\r\n                if (file.text === null) {\r\n                    reports.push({\r\n                        name: file.name + '-eval-report.txt',\r\n                        text: \"ERROR: Source file cannot be loaded.\"\r\n                    });\r\n                    skipped += 1;\r\n                    console.warn('Null read from ' + file.name);\r\n                }\r\n                else if (file.name.match(/\\.rachel$/)) {\r\n                    // @ts-ignore - file.text cannot be null now\r\n                    reports.push(BatchProcessor.processFile(file));\r\n                    processed += 1;\r\n                }\r\n                else {\r\n                    reports.push({\r\n                        name: file.name + '-eval-report.txt',\r\n                        text: \"ERROR: Source file is not a .rachel file, but: \" + file.name\r\n                    });\r\n                    skipped += 1;\r\n                    console.warn('Unsupported filetype: ' + file.name);\r\n                }\r\n                MessageBox.message(\"Batch in progress... \" + (processed + skipped) + \"/\" + files.length);\r\n                setTimeout(() => processNext(i + 1), 0);\r\n            }\r\n\r\n            /**\r\n             * Downloads created reports.\r\n             */\r\n            const downloadReports = () => {\r\n                const zip: JSZip = JSZip();\r\n                reports.forEach(report => {\r\n                    zip.file(report.name, report.text);\r\n                })\r\n                zip.generateAsync({type: \"blob\"}).then(content => {\r\n                    saveAs(content, filename + \".zip\");\r\n                    console.log(\"Batch finished: \" + processed + \" files processed, \" + skipped + \" skipped.\");\r\n                    MessageBox.message(\"Batch finished: \" + processed + \" files processed, \" + skipped + \" skipped.\");\r\n                }).catch(err => {\r\n                    MessageBox.error(\"Batch results saving error: \" + err.message);\r\n                });\r\n                console.timeEnd(\"Batch duration\");\r\n            }\r\n\r\n            processNext(0);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Tries to parse Project object from given file.text. If successful, parses relations in the project, evaluates\r\n     * expressions in the project and generates textual report: header (see reportHeader()),\r\n     * formatted relations (see formatRelations()) and formatted expressions (see processExpression()).\r\n     */\r\n    private static processFile = (file: {name: string, text: string}): {name: string, text: string} => {\r\n        const project: Project = JSON.parse(file.text);\r\n        const status = isProjectObject(project);\r\n        if (status !== \"OK\") {\r\n            return {name: file.name.slice(0, -4) + '-eval-report.txt', text: \"Invalid JSON file: \" + status};\r\n        }\r\n        const relations: Map<string, Relation> = BatchProcessor.parseRelations(project.relations, project.nullValuesSupport);\r\n        const exprParser: ExprParser = new ExprParser(relations, project.nullValuesSupport);\r\n\r\n        const exprCount: number = project.expressions.length;\r\n        const reports = project.expressions.map(e => BatchProcessor.processExpression(e, exprParser));\r\n        const ops: OperationsCount = addOperations(...reports.map(r => r.counts));\r\n        const errors: number = reports.reduce((agg, report) => agg + report.error, 0);\r\n\r\n        return {\r\n            name: file.name.slice(0, -7) + '-eval-report.txt',\r\n            text: BatchProcessor.reportHeader(exprCount, errors, ops, project.nullValuesSupport) +\r\n                  BatchProcessor.formatRelations(project.relations) +\r\n                  sectionLine + \"\\n\\nQUERIES (\" + exprCount + \")\\n\\n\" +\r\n                  reports.map(r => r.text).join('')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates Relation representation for given StoredRelationData array.\r\n     */\r\n    private static parseRelations(storedData: StoredRelationData[], nullValuesSupport: boolean): Map<string, Relation> {\r\n        const map: Map<string, Relation> = new Map();\r\n        storedData.forEach(data => {\r\n            try {\r\n                const storedRelation: StoredRelation = StoredRelation.fromData(data, nullValuesSupport);\r\n                if (storedRelation.isValid()) {\r\n                    map.set(storedRelation.getName(), storedRelation.createRelation());\r\n                }\r\n            }\r\n            catch (ignored) {}\r\n        });\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * Processes the given expression in the context of the given parser. Returns a formatted expression and its result\r\n     * (or error), a count of used RA operations and 0/1 error indicator.\r\n     */\r\n    private static processExpression = (expr: Expression, parser: ExprParser): {text: string, counts: OperationsCount, error: number} => {\r\n        try {\r\n            const evaluationTree = parser.parse(expr.text);\r\n            const counts: OperationsCount = operationsOfTree(evaluationTree);\r\n            const relation: Relation = evaluationTree.getResult();\r\n            return {\r\n                text: contentLine + '\\n' + expr.name + '\\n\\n' + expr.text + '\\n\\n' + relation.contentString() + '\\n\\n\\n',\r\n                counts: counts,\r\n                error: 0\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                text: contentLine + '\\n' + expr.name + '\\n\\n' + expr.text + '\\n\\nERROR: ' + err.message + '\\n\\n\\n',\r\n                counts: zeroOperations(),\r\n                error: 1\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the header of the report. The header contains the time of the report, count of expressions and errors,\r\n     * count of used operations and null values support info.\r\n     *\r\n     * @param expressions count of expressions\r\n     * @param errors count of errors\r\n     * @param operations count of operations\r\n     * @param nullValuesSupport whether null values are supported\r\n     */\r\n    private static reportHeader = (expressions: number, errors: number, operations: OperationsCount, nullValuesSupport: boolean): string => {\r\n        const total: number = totalOperations(operations);\r\n        const binary: number = binaryOperations(operations);\r\n        const unary: number = unaryOperations(operations);\r\n        return sectionLine + '\\n\\nRachel project report from ' + formatDate(new Date()) + '\\n\\n' + sectionLine + '\\n\\n' +\r\n            'Expressions: ' + expressions + '    Errors: ' + errors + '\\n\\n' +\r\n            'Used operations (' + total + ' in total: ' + binary + ' binary, ' + unary + ' unary):\\n' +\r\n            '    Selection: ' + operations.selection + '\\n' +\r\n            '    Projection: ' + operations.projection + '\\n' +\r\n            '    Rename: ' + operations.rename + '\\n\\n' +\r\n            '    Set Operations: ' + operations.setOperation + '\\n\\n' +\r\n            '    Natural join: ' + operations.natural + '\\n' +\r\n            '    Cartesian product: ' + operations.cartesian + '\\n' +\r\n            '    Semijoin: ' + operations.semijoin + '\\n' +\r\n            '    Antijoin: ' + operations.antijoin + '\\n' +\r\n            '    Theta Join: ' + operations.thetaJoin + '\\n' +\r\n            '    Theta Semijoin: ' + operations.thetaSemijoin + '\\n\\n' +\r\n            '    Outer Join: ' + operations.outerJoin + '\\n\\n' +\r\n            '    Division: ' + operations.division + '\\n\\n' +\r\n            'Null values ' + (nullValuesSupport ? 'ALLOWED.\\n\\n' : 'FORBIDDEN.\\n\\n');\r\n    }\r\n\r\n    /**\r\n     * Returns formatted string for the given StoredRelationsData array.\r\n     */\r\n    private static formatRelations = (storedData: StoredRelationData[]): string => {\r\n        const inlines = storedData.map(data => {\r\n            return data.name + \"(\" + data.columnNames.join(\", \") + \")\\n\"\r\n        }).join('');\r\n        return sectionLine + \"\\n\\nTABLES (\" + storedData.length + \")\\n\\n\" + inlines + \"\\n\" +\r\n            storedData.map(data => contentLine + \"\\n\" + data.name + '\\n\\n' + StoredRelation.format(data)).join('');\r\n    }\r\n}\r\n\r\nconst sectionLine: string = \"################################################################################\";\r\nconst contentLine: string = \"--------------------------------------------------------------------------------\";\r\n\r\n/**\r\n * Counts of all supported relational algebra operations.\r\n */\r\ninterface OperationsCount {\r\n    antijoin: number,\r\n    cartesian: number,\r\n    division: number,\r\n    natural: number,\r\n    outerJoin: number,\r\n    projection: number,\r\n    rename: number,\r\n    selection: number,\r\n    semijoin: number,\r\n    setOperation: number,\r\n    thetaJoin: number,\r\n    thetaSemijoin: number,\r\n}\r\n\r\n/**\r\n * Creates zero counts for all operations.\r\n */\r\nfunction zeroOperations(): OperationsCount {\r\n    return addOperations();\r\n}\r\n\r\n/**\r\n * Adds given OperationsCounts together.\r\n */\r\nfunction addOperations(...counts: OperationsCount[]): OperationsCount {\r\n    return {\r\n        antijoin: counts.reduce((agg, count) => agg + count.antijoin, 0),\r\n        cartesian: counts.reduce((agg, count) => agg + count.cartesian, 0),\r\n        division: counts.reduce((agg, count) => agg + count.division, 0),\r\n        natural: counts.reduce((agg, count) => agg + count.natural, 0),\r\n        outerJoin: counts.reduce((agg, count) => agg + count.outerJoin, 0),\r\n        projection: counts.reduce((agg, count) => agg + count.projection, 0),\r\n        rename: counts.reduce((agg, count) => agg + count.rename, 0),\r\n        selection: counts.reduce((agg, count) => agg + count.selection, 0),\r\n        semijoin: counts.reduce((agg, count) => agg + count.semijoin, 0),\r\n        setOperation: counts.reduce((agg, count) => agg + count.setOperation, 0),\r\n        thetaJoin: counts.reduce((agg, count) => agg + count.thetaJoin, 0),\r\n        thetaSemijoin: counts.reduce((agg, count) => agg + count.thetaSemijoin, 0),\r\n    }\r\n}\r\n\r\n/**\r\n * Sums all operation counts.\r\n */\r\nfunction totalOperations(o: OperationsCount): number {\r\n    return binaryOperations(o) + unaryOperations(o);\r\n}\r\n\r\n/**\r\n * Sums all binary operation counts.\r\n */\r\nfunction binaryOperations(o: OperationsCount): number {\r\n    return o.antijoin + o.cartesian + o.division + o.natural + o.outerJoin + o.semijoin + o.setOperation + o.thetaJoin + o.thetaSemijoin;\r\n}\r\n\r\n/**\r\n * Sums all unary operation counts.\r\n */\r\nfunction unaryOperations(o: OperationsCount): number {\r\n    return o.projection + o.rename + o.selection;\r\n}\r\n\r\n/**\r\n * Counts all operations used in the given tree.\r\n */\r\nfunction operationsOfTree(tree: RATreeNode): OperationsCount {\r\n    if (tree instanceof UnaryNode) {\r\n        return addOperations(operationOfUnaryNode(tree), operationsOfTree(tree.getSubtree()));\r\n    }\r\n    if (tree instanceof BinaryNode) {\r\n        return addOperations(operationOfBinaryNode(tree), operationsOfTree(tree.getLeftSubtree()), operationsOfTree(tree.getRightSubtree()));\r\n    }\r\n    // no subtree - relation node\r\n    return zeroOperations();\r\n}\r\n\r\n/**\r\n * Returns OperationsCount with one given unary operation count set to 1, other operators to 0.\r\n */\r\nfunction operationOfUnaryNode(node: UnaryNode): OperationsCount {\r\n    let ret: OperationsCount = zeroOperations();\r\n    if (node instanceof ProjectionNode) {\r\n        ret.projection = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof RenameNode) {\r\n        ret.rename = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof SelectionNode) {\r\n        ret.selection = 1;\r\n        return ret;\r\n    }\r\n    return ret;\r\n}\r\n\r\n/**\r\n * Returns OperationsCount with one given binary operation count set to 1, other operators to 0.\r\n */\r\nfunction operationOfBinaryNode(node: BinaryNode): OperationsCount {\r\n    let ret: OperationsCount = zeroOperations();\r\n    if (node instanceof AntijoinNode) {\r\n        ret.antijoin = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof CartesianProductNode) {\r\n        ret.cartesian = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof DivisionNode) {\r\n        ret.division = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof OuterJoinNode) {\r\n        ret.outerJoin = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof NaturalJoinNode) {\r\n        if (node.getType() === NaturalJoinType.natural) {\r\n            ret.natural = 1;\r\n        }\r\n        else {\r\n            ret.semijoin = 1;\r\n        }\r\n        return ret;\r\n    }\r\n    if (node instanceof SetOperationNode) {\r\n        ret.setOperation = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof ThetaJoinNode) {\r\n        if (node.getType() === ThetaJoinType.full) {\r\n            ret.thetaJoin = 1;\r\n        }\r\n        else {\r\n            ret.thetaSemijoin = 1;\r\n        }\r\n        return ret;\r\n    }\r\n    return ret;\r\n}","/**\r\n * Formats given date to: dd.mm.yyyy hh:mm.\r\n *\r\n * @param date date to format {@type Date}\r\n * @return formatted date {@type string}\r\n * @category Utils\r\n * @public\r\n */\r\nexport function formatDate(date: Date): string {\r\n    return String(date.getDate()).padStart(2, '0') + '.' + String(date.getMonth() + 1).padStart(2, '0') + '.' +\r\n        String(date.getFullYear()) + ' ' +\r\n        String(date.getHours()).padStart(2, '0') + ':' + String(date.getMinutes()).padStart(2, '0');\r\n}","import React from \"react\";\r\nimport './css/editRelationTable.css';\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {NNToSMap} from \"../types/nnToSMap\";\r\n\r\n/**\r\n * Props of EditRelationTable component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface EditRelationTableProps {\r\n    /**\r\n     * stored representation of the relation to be edited\r\n     * @type StoredRelation\r\n     * @public\r\n     */\r\n    relation: StoredRelation,\r\n    /**\r\n     * handler of column name change\r\n     * @type function\r\n     * @public\r\n     */\r\n    onColumnNameChange: (columnName: string, columnIndex: number) => void,\r\n    /**\r\n     * handler of column type change\r\n     * @type function\r\n     * @public\r\n     */\r\n    onColumnTypeChange: (columnType: SupportedColumnType, columnIndex: number) => void,\r\n    /**\r\n     * handler of row input change\r\n     * @type function\r\n     * @public\r\n     */\r\n    onRowInputChange: (input: string, columnIndex: number, rowIndex: number) => void,\r\n    /**\r\n     * handler of adding new row\r\n     * @type function\r\n     * @public\r\n     */\r\n    onNewRow: (onDone: () => void) => void,\r\n    /**\r\n     * handler of adding new column\r\n     * @type function\r\n     * @public\r\n     */\r\n    onNewColumn: (onDone: () => void) => void,\r\n    /**\r\n     * handler of deleting the row of given index\r\n     * @type function\r\n     * @public \r\n     */\r\n    onDeleteRow: (rowIndex: number) => void,\r\n    /**\r\n     * handler of deleting the column of given index\r\n     * @type function\r\n     * @public\r\n     */\r\n    onDeleteColumn: (columnIndex: number) => void,\r\n    /**\r\n     * handler of input with Ctrl key\r\n     * @type function\r\n     * @public \r\n     */\r\n    onCtrlInput: (ev: React.KeyboardEvent) => void\r\n}\r\n\r\ninterface EditRelationTableState {\r\n    selectedColumn: number | undefined,\r\n    selectedRow: \"names\" | \"types\" | number | undefined\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\nconst cellPaddingSides: number = Number(cssConstants.getPropertyValue('--cell-padding-sides-num'));\r\nconst inputMarginSides: number = Number(cssConstants.getPropertyValue('--input-margin-sides-num'));\r\n\r\n/**\r\n * Table for editing a relation relation. It supports adding new columns and rows and editing all relation (column names,\r\n * column types and row inputs).\r\n * Accepts {@link EditRelationTableProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class EditRelationTable extends React.Component<EditRelationTableProps, EditRelationTableState> {\r\n    // reference to the table container div\r\n    private readonly containerRef: React.RefObject<HTMLDivElement>;\r\n    // reference to the head row with columns names\r\n    private readonly tableHeadRowRef: React.RefObject<HTMLTableRowElement>;\r\n    // width of cells in head (with deducted padding) to set proper inputs width to not resize the table\r\n    private columnWidths: number[] = [];\r\n\r\n    constructor(props: EditRelationTableProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedColumn: undefined,\r\n            selectedRow: undefined\r\n        }\r\n        this.containerRef = React.createRef<HTMLDivElement>();\r\n        this.tableHeadRowRef = React.createRef<HTMLTableRowElement>();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // clicking in the window blurs the selected input (if clicked into a cell, event propagation is stopped to not blur\r\n        window.addEventListener('click', () => {\r\n            this.setSelectedInput(undefined, undefined);\r\n        });\r\n        this.componentDidUpdate();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const headRow = this.tableHeadRowRef.current;\r\n        if (headRow !== null) {\r\n            // cells without the first (line number) and last (add column button)\r\n            const cells = [...headRow.cells].slice(1, -1);\r\n            this.columnWidths = cells.map(cell => cell.clientWidth - 2 * (cellPaddingSides + inputMarginSides));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes column width if the resized input element does not fit in it anymore.\r\n     */\r\n    private handleInputResize = (inputElement: EventTarget & HTMLInputElement, column: number) => {\r\n        // handles larger width\r\n        if (inputElement.scrollWidth > this.columnWidths[column]) {\r\n            this.columnWidths[column] = inputElement.scrollWidth;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns error of the relation to edit.\r\n     */\r\n    private getErrors = (): NNToSMap => {\r\n        return this.props.relation.getErrors();\r\n    }\r\n\r\n    /**\r\n     * Sets selected input column and row to given values.\r\n     */\r\n    private setSelectedInput = (column: number | undefined, row: \"names\" | \"types\" | number | undefined): void => {\r\n        this.setState({\r\n            selectedColumn: column,\r\n            selectedRow: row\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves selected input to right if it is defined and not in the last column.\r\n     */\r\n    private moveSelectedInputRight = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not last column was selected\r\n            if (selectedColumn < this.props.relation.getColumnCount() - 1) {\r\n                this.setState({selectedColumn: selectedColumn + 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input to left if it is defined and not in the first column.\r\n     */\r\n    private moveSelectedInputLeft = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not first column was selected\r\n            if (selectedColumn > 0) {\r\n                this.setState({selectedColumn: selectedColumn - 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input up if it is defined and not in the first row.\r\n     */\r\n    private moveSelectedInputUp = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not first row was selected\r\n            if (typeof selectedRow === \"number\") {\r\n                if (selectedRow === 0) {\r\n                    this.setState({selectedRow: \"names\"});\r\n                }\r\n                else {\r\n                    this.setState({selectedRow: selectedRow - 1});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input down if it is defined and not in the last row.\r\n     */\r\n    private moveSelectedInputDown = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            if (selectedRow === \"names\" && this.props.relation.getRowCount() > 0) {\r\n                this.setState({selectedRow: 0});\r\n            }\r\n            // if not last row was selected\r\n            if (typeof selectedRow === \"number\" && selectedRow < this.props.relation.getRowCount() - 1) {\r\n                this.setState({selectedRow: selectedRow + 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Catches key inputs with special effects in tht table.\r\n     */\r\n    private handleKeyDown = (event: React.KeyboardEvent): void => {\r\n        if (event.key === \"Enter\" || event.key === \"Esc\" || event.key === \"Escape\") {\r\n            this.setSelectedInput(undefined, undefined);\r\n        }\r\n        else if (event.key === \"Tab\" || (event.ctrlKey && event.key === \"ArrowRight\")) {\r\n            this.moveSelectedInputRight();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowLeft\") {\r\n            this.moveSelectedInputLeft();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowUp\") {\r\n            this.moveSelectedInputUp();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowDown\") {\r\n            this.moveSelectedInputDown();\r\n            event.preventDefault();\r\n        }\r\n        if (event.ctrlKey) {\r\n            this.props.onCtrlInput(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the change of the column name, column type or row input to the parent element.\r\n     * When row = \"types\", it is expected that value is of SupportedColumnType type.\r\n     * Tabulators are replaced by 4 spaces.\r\n     */\r\n    private handleChange = (value: string, column: number, row: \"names\" | \"types\" | number): void => {\r\n        value = value.replace(/\\t/g, \"    \");\r\n        if (row === \"names\") {\r\n            this.props.onColumnNameChange(value, column);\r\n        }\r\n        else if (row === \"types\") {\r\n            // @ts-ignore - should be ensured before method call\r\n            this.props.onColumnTypeChange(value, column);\r\n        }\r\n        else {\r\n            this.props.onRowInputChange(value, column, row);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the relation and scrolls to it.\r\n     */\r\n    private handleNewColumn = (): void => {\r\n        this.props.onNewColumn(() => {\r\n            // @ts-ignore\r\n            this.containerRef.current.scrollTo(this.containerRef.current.clientWidth, this.containerRef.current.scrollTop)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the relation and scrolls to it.\r\n     */\r\n    private handleNewRow = (): void => {\r\n        this.props.onNewRow(() => {\r\n            // @ts-ignore\r\n            this.containerRef.current.scrollTo(this.containerRef.current.scrollLeft, this.containerRef.current.clientHeight)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the column at given index.\r\n     */\r\n    private handleDeleteColumn = (column: number): void => {\r\n        this.props.onDeleteColumn(column);\r\n    }\r\n\r\n    /**\r\n     * Deletes the row at given index.\r\n     */\r\n    private handleDeleteRow = (row: number): void => {\r\n        this.props.onDeleteRow(row);\r\n    }\r\n\r\n    /**\r\n     * Creates a text input bind to handling change of given column and row.\r\n     */\r\n    private createInput = (value: string, column: number, row: \"names\" | \"types\" | number) => {\r\n        return (\r\n            <input\r\n                type='text'\r\n                className={'text-input'}\r\n                spellCheck={false}\r\n                value={value}\r\n                onChange={(e) => {\r\n                    this.handleChange(e.target.value, column, row);\r\n                    this.handleInputResize(e.target, column);\r\n                }}\r\n                autoFocus={true}\r\n                style={{width: this.columnWidths[column] + \"px\"}}\r\n            />\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a tooltip with given text.\r\n     */\r\n    private createTooltip(text: string, style?: React.CSSProperties) {\r\n        return (<span className={\"tooltip\"} style={style}>{text}</span>)\r\n    }\r\n\r\n    /**\r\n     * Creates a button for deleting rows or columns.\r\n     */\r\n    private createDeleteButton = (callback: () => void) => {\r\n        return (<button className=\"delete-row-or-column-button\" onClick={callback}>&#10006;</button>);\r\n    }\r\n\r\n    /**\r\n     * Creates content of the first row of the table with column names.\r\n     * If the table is editable, additional blank column is added for \"add column\" button in next rows.\r\n     */\r\n    private createNamesRow() {\r\n        const rowData = this.props.relation.getColumnNames().map((columnName, columnIndex) => {\r\n            let content: string | JSX.Element = columnName;\r\n            if (this.state.selectedColumn === columnIndex && this.state.selectedRow === \"names\") {\r\n                content = this.createInput(columnName, columnIndex, \"names\");\r\n            }\r\n            let span: null | JSX.Element = null;\r\n            let className: string = \"name-th\";\r\n            const error = this.getErrors().get(\"name\", columnIndex);\r\n            if (error !== undefined) {\r\n                span = this.createTooltip(error, {top: \"90%\", bottom: \"auto\"});\r\n                className += \" error-input\";\r\n            }\r\n            return (\r\n                <th key={columnIndex}\r\n                    className={className}\r\n                    onClick={ev => {\r\n                        this.setSelectedInput(columnIndex, \"names\");\r\n                        ev.stopPropagation();\r\n                    }}\r\n                >{content}{span}</th>\r\n            )});\r\n        // pushes \"add column\" button in last column\r\n        rowData.push(\r\n            <td key='add-column'\r\n                rowSpan={2}\r\n                style={{width: \"24px\", border: \"none\", padding: \"1px\"}}>\r\n                <button onClick={this.handleNewColumn}\r\n                    style={{width: \"100%\", height: \"100%\"}}><strong>+</strong></button>\r\n            </td>);\r\n        return (\r\n            <><td className=\"row-number-td\"/>{rowData}</>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates content of the second row of the table with column types.\r\n     * If the table is editable, \"add column\" button is added in the last column with row span to the end of the table.\r\n     */\r\n    private createTypesRow() {\r\n        const rowData = this.props.relation.getColumnTypes().map((columnType, columnIndex) => {\r\n            const content = (\r\n                <select value={columnType}\r\n                    onChange={(e) => this.handleChange(e.target.value, columnIndex, \"types\")}>\r\n                    <option>number</option>\r\n                    <option>string</option>\r\n                    <option>boolean</option>\r\n                </select>\r\n            );\r\n            return (\r\n                <th key={columnIndex}\r\n                    className=\"type-th\"\r\n                >{content}{this.createDeleteButton(() => this.handleDeleteColumn(columnIndex))}</th>\r\n            )});\r\n        return (\r\n            <><td className=\"row-number-td\"/>{rowData}</>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a data rows of the table.\r\n     */\r\n    private createRows() {\r\n        // creates default row if no exists\r\n        if (this.props.relation.getRows().length === 0) {\r\n            return null;\r\n        }\r\n        const rows: string[][] = this.props.relation.getRows();\r\n        // creates all rows if any\r\n        return rows.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n                <td className=\"row-number-td\">\r\n                    {rowIndex + 1}\r\n                    {this.createDeleteButton(() => this.handleDeleteRow(rowIndex))}\r\n                </td>\r\n                {row.map((value, columnIndex) => {\r\n                    let content: string | JSX.Element = value;\r\n                    if (this.state.selectedColumn === columnIndex && this.state.selectedRow === rowIndex) {\r\n                        content = this.createInput(value, columnIndex, rowIndex);\r\n                    }\r\n                    let span: null | JSX.Element = null;\r\n                    let className: string = \"\";\r\n                    const error = this.getErrors().get(rowIndex, columnIndex);\r\n                    if (error !== undefined) {\r\n                        span = this.createTooltip(error);\r\n                        className = \"error-input\";\r\n                    }\r\n                    return (\r\n                        <td key={columnIndex}\r\n                            className={className}\r\n                            onClick={ev => {\r\n                                this.setSelectedInput(columnIndex, rowIndex);\r\n                                ev.stopPropagation();\r\n                            }}\r\n                        >{content}{span}</td>\r\n                    )})}\r\n            </tr>\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Creates the last row of the table with button for adding rows.\r\n     */\r\n    private createAddRow() {\r\n        return (\r\n            <tr key='add-row'>\r\n                <td key='add-row-column'\r\n                    className=\"add-row-td\">\r\n                    <button onClick={this.handleNewRow}><strong>+</strong></button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let divClassName: string = \"edit-table-container scrollbar-container\";\r\n        let tableClassName: string = \"edit-table\";\r\n\r\n        return (\r\n            <div\r\n                className={divClassName}\r\n                ref={this.containerRef}\r\n                onKeyDown={this.handleKeyDown}>\r\n                <table className={tableClassName}>\r\n                    <thead>\r\n                        <tr ref={this.tableHeadRowRef}>{this.createNamesRow()}</tr>\r\n                        <tr>{this.createTypesRow()}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.createRows()}\r\n                        {this.createAddRow()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {Relation} from \"../relation/relation\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {EditRelationTable} from \"./editRelationTable\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {TextInput} from \"./textInput\";\r\nimport {isForbiddenRelationName} from \"../utils/keywords\";\r\nimport {StringUtils} from \"../utils/stringUtils\";\r\nimport {MessageBox} from \"./messageBox\";\r\nimport {LanguageDef} from \"../language/language\";\r\n\r\n/**\r\n * Props of RelationsSection component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface RelationsSectionProps {\r\n    /**\r\n     * all stored relations\r\n     * @type StoredRelation[]\r\n     * @public\r\n     */\r\n    storedRelations: StoredRelation[],\r\n    /**\r\n     * index of the current selected relation\r\n     * @type number\r\n     * @public\r\n     */\r\n    storedRelationIndex: number,\r\n    /**\r\n     * all currently loaded relations in the application\r\n     * @type Relation[]\r\n     * @public\r\n     */\r\n    loadedRelations: Relation[],\r\n    /**\r\n     * handler of change of the name of the current selected relation\r\n     * @type function\r\n     * @public\r\n     */\r\n    onRelationNameChange: (newName: string) => void,\r\n    /**\r\n     * handler of change of the name of the column at given index in the current selected relation\r\n     * @type function\r\n     * @public\r\n     */\r\n    onColumnNameChange: (columnName: string, columnIndex: number) => void,\r\n    /**\r\n     * handler of change of the type of the column at given index in the current selected relation\r\n     * @type function\r\n     * @public\r\n     */\r\n    onColumnTypeChange: (columnType: SupportedColumnType, columnIndex: number) => void,\r\n    /**\r\n     * handler of change of the row input at given column/row index in the current selected relation\r\n     * @type function\r\n     * @public\r\n     */\r\n    onRowInputChange: (input: string, columnIndex: number, rowIndex: number) => void,\r\n    /**\r\n     * handler of adding a new row in the current selected relation\r\n     * @type function\r\n     * @public\r\n     */\r\n    onNewRow: (onDone: () => void) => void,\r\n    /**\r\n     * handler of adding a new column in the current selected relation\r\n     * @type function\r\n     * @public\r\n     */\r\n    onNewColumn: (onDone: () => void) => void,\r\n    /**\r\n     * handler of deleting the row on given index\r\n     * @type function\r\n     * @public\r\n     */\r\n    onDeleteRow: (rowIndex: number) => void,\r\n    /**\r\n     * handler of deleting the column on given index\r\n     * @type function\r\n     * @public\r\n     */\r\n    onDeleteColumn: (columnIndex: number) => void,\r\n    /**\r\n     * handler of selecting a different relation as current\r\n     * @type function\r\n     * @public\r\n     */\r\n    onSelectDifferentRelation: (newIndex: number) => void,\r\n    /**\r\n     * handler of moving a relation on a new position using drag and drop\r\n     * @type function\r\n     * @public\r\n     */\r\n    onDragRelation: (from: number, to: number) => void,\r\n    /**\r\n     * handler of creating a new relation\r\n     * @type function\r\n     * @public\r\n     */\r\n    onNewRelation: () => void,\r\n    /**\r\n     * handler of loading the current selected relation into the application\r\n     * @type function\r\n     * @public\r\n     */\r\n    onLoadRelation: (onDone: (msg: string) => void) => void,\r\n    /**\r\n     * handler of deleting the current stored relation\r\n     * @type function\r\n     * @public\r\n     */\r\n    onDeleteStoredRelation: () => void,\r\n    /**\r\n     * handler of reverting the current relation to its last saved (valid) state\r\n     * @type function\r\n     * @public\r\n     */\r\n    onRevertRelation: () => void,\r\n    /**\r\n     * handler of loading all valid relations into the application\r\n     * @type function\r\n     * @public\r\n     */\r\n    onLoadAllRelations: (onDone: (msg: string) => void) => void,\r\n    /**\r\n     * handler of deleting the loaded relations\r\n     * @type function\r\n     * @public\r\n     */\r\n    onRemoveLoadedRelations: (onDone: (msg: string) => void) => void,\r\n    /**\r\n     * handler of saving the stored relations into the files\r\n     * @type function\r\n     * @public\r\n     */\r\n    onExportRelations: (onDone: (msg: string) => void) => void,\r\n    /**\r\n     * handler of loading new relations from files\r\n     * @type function\r\n     * @public\r\n     */\r\n    onImportRelations: (onDone: (msg: string) => void) => void,\r\n    /**\r\n     * whether to support null values\r\n     * @type boolean\r\n     * @public\r\n     */\r\n    nullValuesSupport: boolean,\r\n    /**\r\n     * current application language\r\n     * @type LanguageDef\r\n     * @public\r\n     */\r\n    language: LanguageDef\r\n}\r\n\r\ninterface RelationsSectionState {\r\n    sectionClicked: boolean\r\n}\r\n\r\n/**\r\n * Identifier of elements drag-and-dropped from the RelationSection.\r\n */\r\nconst dndId: string = \"R\";\r\n\r\n/**\r\n * Section to type the RA expression. It contains textarea for relations definition and control buttons.\r\n * Accepts {@link RelationsSectionProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class RelationsSection extends React.Component<RelationsSectionProps, RelationsSectionState> {\r\n\r\n    constructor(props: RelationsSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns selected stored relation.\r\n     */\r\n    private getCurRel = (): StoredRelation => {\r\n        return this.props.storedRelations[this.props.storedRelationIndex];\r\n    }\r\n\r\n    /**\r\n     * Passes change to the parent element if isShowingStored = true. Otherwise, changes the state.loadedRelationIndex.\r\n     */\r\n    private handleSelectDifferentRelation(index: number): void {\r\n        this.props.onSelectDifferentRelation(index);\r\n    }\r\n\r\n    /**\r\n     * Passes change of the relation name to the parent element.\r\n     */\r\n    private handleRelationNameChange = (name: string) => {\r\n        this.props.onRelationNameChange(name);\r\n    }\r\n\r\n    /**\r\n     * Loads the selected relation to the application if there are no errors in it. Otherwise, displays a message to user.\r\n     */\r\n    private loadRelation = () => {\r\n        if (this.getCurRel().isValid()) {\r\n            this.props.onLoadRelation(MessageBox.message);\r\n        }\r\n        else {\r\n            MessageBox.error(\"Cannot use the invalid relation. Check errors and try again.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the load all relations call to the parent.\r\n     */\r\n    private loadAllRelations = () => {\r\n        this.props.onLoadAllRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the export stored relations call to the parent.\r\n     */\r\n    private exportRelations = () => {\r\n        this.props.onExportRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the import stored relations call to the parent.\r\n     */\r\n    private importRelations = () => {\r\n        this.props.onImportRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the call to delete current selected stored relation.\r\n     */\r\n    private deleteRelation = () => {\r\n        this.props.onDeleteStoredRelation();\r\n    }\r\n\r\n    private revertRelation = () => {\r\n        this.props.onRevertRelation();\r\n    }\r\n\r\n    /**\r\n     * Passes the create new stored relation call to the parent.\r\n     */\r\n    private newRelation = () => {\r\n        this.props.onNewRelation();\r\n    }\r\n\r\n    /**\r\n     * Passes the remove loaded relations call to the parent.\r\n     */\r\n    private removeLoadedRelations = () => {\r\n        this.props.onRemoveLoadedRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Handles input with Ctrl key pressed from relation table.\r\n     */\r\n    private handleCtrlInput = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            this.loadRelation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates menu buttons. Buttons for relations with errors are highlighted.\r\n     */\r\n    private createRelationMenuButtons = () => {\r\n        return this.props.storedRelations.map((rel, i) => {\r\n            const className: string = (this.props.storedRelationIndex === i ? \"button-clicked\" : \"\");\r\n            const actuality: string = rel.isActual() ? \"\" : \"*\";\r\n            const style = rel.isValid() ? {} : {border: \"2px solid #fd3030\"};\r\n            return (\r\n                <button\r\n                    key={i}\r\n                    onClick={() => this.handleSelectDifferentRelation(i)}\r\n                    className={className}\r\n                    style={style}\r\n                    draggable={true}\r\n                    onDragStart={e => e.dataTransfer.setData(\"text/plain\", dndId + String(i))}\r\n                    onDragOver={e => e.preventDefault()}\r\n                    onDrop={e => this.handleDragDrop(e, i)}\r\n                >{actuality + rel.getName()}</button>\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Requests relation move when the drag ends.\r\n     */\r\n    // @ts-ignore\r\n    private handleDragDrop = (e: DragEvent<HTMLDivElement>, i: number) => {\r\n        e.preventDefault();\r\n        const data = e.dataTransfer.getData(\"text/plain\");\r\n        const fromIndex = Number(data.slice(1));\r\n        if (data.charAt(0) === dndId && !isNaN(fromIndex)) {\r\n            this.props.onDragRelation(fromIndex, i);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const lang = this.props.language.relationSection;\r\n\r\n        const createButton = (text: string, onClick: () => void, tooltip: string, style?: React.CSSProperties) => {\r\n            return (<TooltipButton\r\n                key={text}\r\n                text={text}\r\n                onClick={onClick}\r\n                style={style}\r\n                tooltip={tooltip}\r\n            />);\r\n        }\r\n\r\n        // the relation cannot be renamed to forbidden relation names and other currently used relation names\r\n        const forbiddenRelationNames: string[] = this.props.storedRelations\r\n            .filter((sr, i) => i !== this.props.storedRelationIndex)\r\n            .map(sr => sr.getName());\r\n        const forbiddenNamesFunction = (text: string): boolean => {\r\n            if (forbiddenRelationNames.indexOf(text) > -1) {\r\n                return true;\r\n            }\r\n            return !StringUtils.isName(text) || isForbiddenRelationName(text);\r\n        }\r\n\r\n        return (\r\n            <section className=\"page-section\">\r\n                <header>\r\n                    <h2>{lang.relationSectionHeader}</h2>\r\n                    {createButton(lang.loadAllButton, this.loadAllRelations, lang.loadAllButtonTooltip)}\r\n                    {createButton(lang.removeLoadedButton, this.removeLoadedRelations, lang.removeLoadedButtonTooltip)}\r\n                    {createButton(lang.importButton, this.importRelations, lang.importButtonTooltip)}\r\n                    {createButton(lang.exportButton, this.exportRelations, lang.exportButtonTooltip)}\r\n                </header>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    {this.createRelationMenuButtons()}\r\n                    <button onClick={this.newRelation}\r\n                        style={{minWidth: \"0\", marginLeft: \"10px\", padding: \"2px 6px 1px 6px\"}}>\r\n                        <strong>+</strong>\r\n                    </button>\r\n                </menu>\r\n\r\n                <EditRelationTable\r\n                    relation={this.getCurRel()}\r\n\r\n                    onColumnNameChange={this.props.onColumnNameChange}\r\n                    onColumnTypeChange={this.props.onColumnTypeChange}\r\n                    onRowInputChange={this.props.onRowInputChange}\r\n                    onNewRow={this.props.onNewRow}\r\n                    onNewColumn={this.props.onNewColumn}\r\n                    onDeleteRow={this.props.onDeleteRow}\r\n                    onDeleteColumn={this.props.onDeleteColumn}\r\n\r\n                    onCtrlInput={this.handleCtrlInput}\r\n                />\r\n\r\n                <menu className=\"page-section-management-menu\">\r\n                    <TooltipButton\r\n                        text={lang.loadButton}\r\n                        onClick={this.loadRelation}\r\n                        className={\"action-button\"}\r\n                        style={{marginRight: \"40px\"}}\r\n                        tooltip={lang.loadButtonTooltip}\r\n                    />\r\n                    <TextInput\r\n                        value={this.getCurRel().getName()}\r\n                        buttonText={lang.renameButton}\r\n                        onSubmit={this.handleRelationNameChange}\r\n                        forbidden={forbiddenNamesFunction}\r\n                        id=\"relation-name-input\"\r\n                    />\r\n                    {createButton(lang.deleteButton, this.deleteRelation, lang.deleteButtonTooltip)}\r\n                    {createButton(lang.revertButton, this.revertRelation,\r\n                        lang.revertButtonTooltip + \" (\" + this.getCurRel().getRevertName() + \")\")}\r\n                </menu>\r\n            </section>\r\n        );\r\n    }\r\n}","interface SendData {\r\n    access_token: string,\r\n    subject: string,\r\n    text: string\r\n}\r\n\r\n/**\r\n * Class for sending emails. Powered by https://postmail.invotes.com/.\r\n * TypeScript version of JavaScript Copy & Paste Example from PostMail webpage.\r\n */\r\nexport class Mail {\r\n\r\n    /**\r\n     * Creates a mailer with given Mail access token.\r\n     *\r\n     * @param accessToken token which specifies Mail receiver of mails\r\n     */\r\n    constructor(readonly accessToken: string) {}\r\n\r\n    /**\r\n     * Sends given subject and body of the email to the Mail receiver.\r\n     *\r\n     * @param subject subject of the mail\r\n     * @param body body of the mail\r\n     */\r\n    public send(subject: string, body: string): void {\r\n        const data_js: SendData = {\r\n            access_token: this.accessToken,\r\n            subject: subject,\r\n            text: body\r\n        };\r\n\r\n        const request = new XMLHttpRequest();\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n            } else if(request.readyState === 4) {\r\n                console.log(\"failed creating XMLHttpRequest in Mail.send: \" + request.response);\r\n            }\r\n        };\r\n\r\n        let params = Mail.toParams(data_js);\r\n        request.open(\"POST\", \"https://postmail.invotes.com/send\", true);\r\n        request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n        request.send(params);\r\n    }\r\n\r\n    private static toParams(data: SendData): string {\r\n        return encodeURIComponent(\"access_token\") + \"=\" + encodeURIComponent(data.access_token) + \"&\" +\r\n            encodeURIComponent(\"subject\") + \"=\" + encodeURIComponent(data.subject) + \"&\" +\r\n                encodeURIComponent(\"text\") + \"=\" + encodeURIComponent(data.text);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Relation} from '../relation/relation';\r\nimport {RATreeNode} from \"../ratree/raTreeNode\";\r\nimport {ExpressionSection} from \"./expressionSection\";\r\nimport {ResultSection} from \"./resultSection\";\r\nimport {ExpressionStoreManager} from \"../expression/expressionStoreManager\";\r\nimport {ManagementSection} from \"./managementSection\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {ProjectStoreManager} from \"../project/projectStoreManager\";\r\nimport {language, LanguageDef, SupportedLanguage} from \"../language/language\";\r\nimport {LocalStorage} from \"../utils/localStorage\";\r\nimport {BatchProcessor} from \"../batch/batchProcessor\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {RelationsSection} from \"./relationsSection\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {RelationStoreManager} from \"../relation/relationStoreManager\";\r\nimport {Mail} from \"../utils/mail\";\r\nimport {POSTMAIL_ACCESS_TOKEN} from \"../postMailAccessToken\";\r\nimport {copyProject, Project} from \"../project/project\";\r\nimport {getSamples} from \"../project/samples\";\r\n\r\n/**\r\n * Props of MainScreen component.\r\n * @category Components\r\n * @public\r\n */\r\ninterface MainScreenProps {}\r\n\r\ninterface MainScreenState {\r\n    samples: { name: string, project: Project }[],\r\n\r\n    loadedRelations: Map<string, Relation>,\r\n    storedRelations: StoredRelation[],\r\n    selectedRelation: number,\r\n\r\n    expressions: Expression[],\r\n    selectedExpression: number,\r\n\r\n    evaluationTreeRoot: RATreeNode | null,\r\n    evaluatedExpressionName: string,\r\n\r\n    nullValuesSupport: boolean,\r\n    csvValueSeparator: CsvValueSeparator,\r\n    language: LanguageDef,\r\n    darkTheme: boolean\r\n}\r\n\r\n/**\r\n * Main component of Rachel web page. It wraps all page sections and passes messages between them.\r\n * Accepts {@link MainScreenProps} props.\r\n * @category Components\r\n * @public\r\n */\r\nexport class MainScreen extends Component<MainScreenProps, MainScreenState> {\r\n\r\n    private readonly expressionSectionRef: React.RefObject<ExpressionSection>;\r\n\r\n    constructor(props: MainScreenProps) {\r\n        super(props);\r\n\r\n        // sets body template by settings from local storage\r\n        document.body.classList.toggle('body-dark', LocalStorage.getDarkTheme());\r\n        document.body.classList.toggle('body-light', !LocalStorage.getDarkTheme());\r\n\r\n        const initRelationData = {\r\n            name: \"Relation\",\r\n            columnNames: [\"Column1\", \"Column2\", \"Column3\"],\r\n            columnTypes: [\"number\", \"string\", \"boolean\"],\r\n            rows: [\r\n                ['', '', '']\r\n            ],\r\n            columnCount: 3,\r\n            rowCount: 1\r\n        };\r\n\r\n        this.state = {\r\n            samples: getSamples(),\r\n\r\n            loadedRelations: new Map<string, Relation>(),\r\n            storedRelations: [ StoredRelation.fromData(initRelationData, true) ],\r\n            selectedRelation: 0,\r\n\r\n            expressions: [ {name: \"Expression 1\", text: \"\"} ],\r\n            selectedExpression: 0,\r\n\r\n            evaluationTreeRoot: null,\r\n            evaluatedExpressionName: \"\",\r\n\r\n            nullValuesSupport: true,\r\n            csvValueSeparator: LocalStorage.getCsvValueSeparator(),\r\n            language: language(),\r\n            darkTheme: LocalStorage.getDarkTheme()\r\n        }\r\n        this.expressionSectionRef = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * Reports an error to the author of the application via email.\r\n     *\r\n     * @param err unexpected error\r\n     */\r\n    private reportUnexpectedError = (err: Error): void => {\r\n        const postMail: Mail = new Mail(POSTMAIL_ACCESS_TOKEN);\r\n        let body: string = \"Unexpected error \" + err.name + \" in Rachel application.\" +\r\n            \"\\n\\nMessage:\\n\" + err.message +\r\n            \"\\n\\nDate:\\n\" + new Date().toString() +\r\n            \"\\n\\nStack trace:\\n\" + err.stack +\r\n\r\n            \"\\n\\nLoaded relations: ----------------------------\\n\" +\r\n            [...this.state.loadedRelations.values()].map(relation => {\r\n                return relation.getName() + \"\\n\" + relation.contentString();\r\n            }).join(\"\\n\\n\") +\r\n\r\n            \"\\n\\nStored relations: ----------------------------\" +\r\n            \"\\nSelected relation (1-index): \" + (this.state.selectedRelation + 1) + \"\\n\\n\" +\r\n            this.state.storedRelations.map(rel => StoredRelation.format(rel)).join(\"\\n\\n\") +\r\n\r\n            \"\\n\\nExpressions: ----------------------------\" +\r\n            \"\\nSelected expression (1-index): \" + (this.state.selectedExpression + 1) + \"\\n\\n\" +\r\n            this.state.expressions.map(expr => expr.text).join(\"\\n\\n###\\n\\n\") +\r\n\r\n            \"\\n\\nEvaluation tree:\\n\" + this.state.evaluationTreeRoot?.printInLine() +\r\n\r\n            \"\\n\\nOther state: ----------------------------\" +\r\n            \"\\ncsvValueSeparator: \" + this.state.csvValueSeparator +\r\n            \"\\nlanguage:          \" + this.state.language +\r\n            \"\\nnullValuesSupport: \" + this.state.nullValuesSupport +\r\n            \"\\ndarkTheme:         \" + this.state.darkTheme;\r\n\r\n        postMail.send(\"Rachel application unexpected error\", body);\r\n        console.error('Unexpected error: ' + err.stack);\r\n    }\r\n\r\n    /**\r\n     * Overwrites the current project data with the given one.\r\n     *\r\n     * @param project\r\n     */\r\n    private loadProject = (project: Project): void => {\r\n        this.setState({\r\n            loadedRelations: new Map<string, Relation>(),\r\n            storedRelations: project.relations.map(r => StoredRelation.fromData(r, project.nullValuesSupport)),\r\n            selectedRelation: 0,\r\n            expressions: project.expressions,\r\n            nullValuesSupport: project.nullValuesSupport,\r\n            selectedExpression: 0,\r\n            evaluationTreeRoot: null,\r\n            evaluatedExpressionName: \"\"\r\n        }, () => {\r\n            console.log(\"Project loaded.\");\r\n            this.updateExpressionsErrors();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds number after the given name if it already exists in stored relation.\r\n     */\r\n    private ensureUniqueRelationName = (name: string): string => {\r\n        if (this.state.storedRelations.map(sr => sr.getName()).indexOf(name) > -1) {\r\n            for (let i = 2; true; ++i) {\r\n                if (this.state.storedRelations.map(sr => sr.getName()).indexOf(name + i) === -1) {\r\n                    name += i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return name;\r\n    }\r\n\r\n    /****************************************** MANAGEMENT SECTION HANDLERS ******************************************/\r\n\r\n    /**\r\n     * Processes multiple selected files with expressions by the user and saves the reports of the evaluation in textual\r\n     * files.\r\n     */\r\n    private handleBatch = () => {\r\n        BatchProcessor.process('rachel-eval-results');\r\n    }\r\n\r\n    /**\r\n     * Opens a file dialog and lets the user choose a .rachel (JSON) file with project to load.\r\n     */\r\n    private handleLoadProject = (): void => {\r\n        ProjectStoreManager.load().then(this.loadProject).catch(console.warn);\r\n    }\r\n\r\n    /**\r\n     * Saves the project relation to the .rachel (JSON) file.\r\n     */\r\n    private handleSaveProject = (): void => {\r\n        try {\r\n            ProjectStoreManager.save({\r\n                relations: this.state.storedRelations.map(sr => sr.toDataObject()),\r\n                expressions: this.state.expressions,\r\n                nullValuesSupport: this.state.nullValuesSupport\r\n                }, \"project\");\r\n            console.log(\"Project saved.\");\r\n        }\r\n        catch (err) {\r\n            console.warn(\"Project saving failed: \" + err.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles loading a sample project.\r\n     */\r\n    private handleLoadSampleProject = (sample: Project): void => {\r\n        this.loadProject(copyProject(sample));\r\n    }\r\n\r\n    /**\r\n     * Changes the support of the null values in relations.\r\n     *\r\n     * @param nullValuesSupport new support of the null values in relations\r\n     */\r\n    private handleNullValuesSupportChange = (nullValuesSupport: boolean): void => {\r\n        this.state.storedRelations.forEach(sr => sr.setNullValuesSupport(nullValuesSupport));\r\n        // null values change can change validity of the relations, therefore set as not actual\r\n        this.setState({nullValuesSupport: nullValuesSupport}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Changes the value separator used in generated CSV files.\r\n     *\r\n     * @param csvValueSeparator new value separator used in generated CSV files\r\n     */\r\n    private handleCsvValueSeparatorChange = (csvValueSeparator: CsvValueSeparator): void => {\r\n        LocalStorage.setCsvValueSeparator(csvValueSeparator);\r\n        this.setState({csvValueSeparator: csvValueSeparator});\r\n    }\r\n\r\n    /**\r\n     * Changes the language of the application.\r\n     *\r\n     * @param lang new language of the application\r\n     */\r\n    private handleLanguageChange = (lang: SupportedLanguage): void => {\r\n        LocalStorage.setLanguage(lang);\r\n        // updates language of errors in stored relations\r\n        this.state.storedRelations.forEach(r => r.recomputeErrors());\r\n        this.setState({language: language()});\r\n    }\r\n\r\n    /**\r\n     * Changes the dark/light mode of the application.\r\n     *\r\n     * @param darkTheme true if dark theme is on\r\n     */\r\n    private handleDarkThemeChange = (darkTheme: boolean) => {\r\n        LocalStorage.setDarkTheme(darkTheme);\r\n        this.setState({darkTheme: darkTheme});\r\n        document.body.classList.toggle( 'body-dark', darkTheme);\r\n        document.body.classList.toggle( 'body-light', !darkTheme);\r\n    }\r\n\r\n    /******************************************* RELATION SECTION HANDLERS *******************************************/\r\n\r\n    private handleRelationNameChange = (name: string): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setName(name);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationColumnNameChange = (columnName: string, columnIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setColumnName(columnName, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationColumnTypeChange = (columnType: SupportedColumnType, columnIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setColumnType(columnType, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationRowInputChange = (input: string, columnIndex: number, rowIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setRowInput(input, rowIndex, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationNewRow = (onDone: () => void): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].addNewRow();\r\n        // forces update\r\n        this.setState({}, onDone);\r\n    }\r\n\r\n    private handleRelationNewColumn = (onDone: () => void): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].addNewColumn();\r\n        // forces update\r\n        this.setState({}, onDone);\r\n    }\r\n\r\n    private handleRelationDeleteRow = (rowIndex: number): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].deleteRow(rowIndex);\r\n        // forces update\r\n        this.setState({});\r\n    }\r\n\r\n    private handleRelationDeleteColumn = (columnIndex: number): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].deleteColumn(columnIndex);\r\n        // forces update\r\n        this.setState({});\r\n    }\r\n\r\n    /**\r\n     * Selects a new relation from the relations list as the current one.\r\n     */\r\n    private handleSelectDifferentRelation = (newIndex: number): void => {\r\n        this.setState({selectedRelation: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Moves a relation from the given \"from\" index to the given \"to\" index.\r\n     */\r\n    private handleDragRelation = (from: number, to: number): void => {\r\n        // dragging left\r\n        if (from > to) {\r\n            const before = this.state.storedRelations.slice(0, to);\r\n            const moved = this.state.storedRelations.slice(to, from);\r\n            const fromValue = this.state.storedRelations[from];\r\n            const after = this.state.storedRelations.slice(from + 1);\r\n            const newArray = [...before, fromValue, ...moved, ...after];\r\n            this.setState({storedRelations: newArray, selectedRelation: to});\r\n        }\r\n        // dragging right\r\n        else if (from < to) {\r\n            const before = this.state.storedRelations.slice(0, from);\r\n            const fromValue = this.state.storedRelations[from];\r\n            const moved = this.state.storedRelations.slice(from + 1, to + 1);\r\n            const after = this.state.storedRelations.slice(to + 1);\r\n            const newArray = [...before, ...moved, fromValue, ...after];\r\n            this.setState({storedRelations: newArray, selectedRelation: to});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new empty relation and adds it in the relation list.\r\n     */\r\n    private handleCreateNewRelation = (): void => {\r\n        // inserts a new empty relation in the array\r\n        const newIndex: number = this.state.selectedRelation + 1;\r\n        let name: string = this.ensureUniqueRelationName(\"NewRelation\");\r\n        this.state.storedRelations.splice(newIndex, 0, StoredRelation.new(name, this.state.nullValuesSupport));\r\n        this.setState({selectedRelation: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Deletes the current relation from the relations list (or clears it if it is the last relation in the list).\r\n     */\r\n    private handleDeleteRelation = (): void => {\r\n        // if there is the last relation, only clears it\r\n        if (this.state.storedRelations.length === 1) {\r\n            this.setState({storedRelations: [StoredRelation.new(\"Relation\", this.state.nullValuesSupport)]});\r\n            return;\r\n        }\r\n        const selected: number = this.state.selectedRelation;\r\n        this.state.storedRelations.splice(selected, 1);\r\n        if (selected === this.state.storedRelations.length) {\r\n            this.setState({selectedRelation: selected - 1}, this.updateExpressionsErrors);\r\n        }\r\n        else {\r\n            // forces update\r\n            this.setState({}, this.updateExpressionsErrors);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reverts the current selected stored relation to its last loaded state.\r\n     */\r\n    private handleRevertRelation = (): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].revert();\r\n            return {storedRelations};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all relations loaded in the application.\r\n     */\r\n    private handleRemoveLoadedRelations = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        const previous = this.state.loadedRelations.size;\r\n        this.state.loadedRelations.clear();\r\n        this.state.storedRelations.forEach(sr => sr.setActual(false));\r\n        onDone(previous + lang.deleteLoadedRelations);\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Saves the relations list in a textual file.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleExportRelations = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        try {\r\n            RelationStoreManager.save(this.state.storedRelations, \"relations\", this.state.csvValueSeparator);\r\n            onDone(this.state.storedRelations.length + lang.relationsExportOK);\r\n        }\r\n        catch (err) {\r\n            onDone(lang.relationsExportErr + err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the relations list from the textual file selected by the user.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleImportRelations = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        RelationStoreManager.load(this.state.nullValuesSupport).then(info => {\r\n            const countBefore: number = this.state.storedRelations.length;\r\n            // loads relations to application\r\n            info.relations.forEach(relation => {\r\n                const name = this.ensureUniqueRelationName(relation.getName());\r\n                relation.setName(name);\r\n                this.state.storedRelations.push(relation);\r\n            });\r\n            if (info.relations.length > 0) {\r\n                // shows first loaded relation\r\n                this.setState({selectedRelation: countBefore});\r\n            }\r\n            onDone(info.relations.length + lang.relationsImport[0] + info.skipped + lang.relationsImport[1])\r\n        });\r\n    }\r\n\r\n    private handleLoadRelation = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        const currRelation: StoredRelation = this.state.storedRelations[this.state.selectedRelation];\r\n        currRelation.setActual(true);\r\n        this.state.loadedRelations.set(currRelation.getName(), currRelation.createRelation());\r\n        const msgPart2: string = this.state.loadedRelations.size === 0 ? lang.loadedRelationsTotalNo :\r\n            this.state.loadedRelations.size + lang.loadedRelationsTotalSome + [...this.state.loadedRelations.keys()].join(', ') + \".\";\r\n        onDone(lang.loadRelationNew + \"\\n\" + msgPart2);\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    private handleLoadAllRelations = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        let loaded: number = 0;\r\n        let skipped: number = 0;\r\n        this.state.storedRelations.forEach(sr => {\r\n            if (sr.isValid()) {\r\n                sr.setActual(true);\r\n                this.state.loadedRelations.set(sr.getName(), sr.createRelation());\r\n                ++loaded;\r\n            }\r\n            else {\r\n                ++skipped;\r\n            }\r\n        });\r\n        const msgPart2: string = this.state.loadedRelations.size === 0 ? lang.loadedRelationsTotalNo :\r\n            this.state.loadedRelations.size + lang.loadedRelationsTotalSome + [...this.state.loadedRelations.keys()].join(', ') + \".\";\r\n        onDone(loaded + lang.loadAllRelationsNew[0] + skipped + lang.loadAllRelationsNew[1] + \"\\n\" + msgPart2);\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /****************************************** EXPRESSION SECTION HANDLERS ******************************************/\r\n\r\n    private updateExpressionsErrors = (): void => {\r\n        const expressionSection = this.expressionSectionRef.current;\r\n        if (expressionSection !== null) {\r\n            expressionSection.updateErrorsAndParentheses();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves evaluation tree for the evaluated RA expression.\r\n     */\r\n    private handleExprEval = (tree: RATreeNode): void => {\r\n        this.setState({\r\n            evaluationTreeRoot: tree,\r\n            evaluatedExpressionName: this.state.expressions[this.state.selectedExpression].name\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the text of the current expression and sets it as not actual.\r\n     */\r\n    private handleExprTextChange = (name: string, text: string): void => {\r\n        this.setState(state => {\r\n            let expressions: Expression[] = state.expressions;\r\n            expressions[state.selectedExpression] = {name: name, text: text};\r\n            return { expressions: expressions }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Selects a new expression from the expression list as the current one.\r\n     */\r\n    private handleSelectDifferentExpression = (newIndex: number): void => {\r\n        this.setState({ selectedExpression: newIndex }, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Moves a expression from the given \"from\" index to the given \"to\" index.\r\n     */\r\n    private handleDragExpression = (from: number, to: number): void => {\r\n        // dragging left\r\n        if (from > to) {\r\n            const before = this.state.expressions.slice(0, to);\r\n            const moved = this.state.expressions.slice(to, from);\r\n            const fromValue = this.state.expressions[from];\r\n            const after = this.state.expressions.slice(from + 1);\r\n            const newArray = [...before, fromValue, ...moved, ...after];\r\n            this.setState({expressions: newArray, selectedExpression: to});\r\n        }\r\n        // dragging right\r\n        else if (from < to) {\r\n            const before = this.state.expressions.slice(0, from);\r\n            const fromValue = this.state.expressions[from];\r\n            const moved = this.state.expressions.slice(from + 1, to + 1);\r\n            const after = this.state.expressions.slice(to + 1);\r\n            const newArray = [...before, ...moved, fromValue, ...after];\r\n            this.setState({expressions: newArray, selectedExpression: to});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new empty expression and adds it in the expression list.\r\n     */\r\n    private handleCreateNewExpression = (): void => {\r\n        // inserts a new empty expression in the array\r\n        const newIndex: number = this.state.selectedExpression + 1;\r\n        this.state.expressions.splice(newIndex, 0, {name: \"New expression\", text: \"\"});\r\n        this.setState({selectedExpression: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Deletes the current expression from the expression list (or clears it if it is the last expression in the list).\r\n     */\r\n    private handleDeleteExpression = (onDone: () => void): void => {\r\n        // if there is the last expression, only clears it\r\n        if (this.state.expressions.length === 1) {\r\n            return this.handleExprTextChange(\"Expression 1\", \"\");\r\n        }\r\n        const selected: number = this.state.selectedExpression;\r\n        this.state.expressions.splice(selected, 1);\r\n        if (selected === this.state.expressions.length) {\r\n            this.setState({selectedExpression: selected - 1}, onDone);\r\n        }\r\n        else {\r\n            // forces update\r\n            this.setState({}, onDone);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the expression list in a textual file.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleExportExpressions = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        try {\r\n            ExpressionStoreManager.save(this.state.expressions, 'expressions');\r\n            onDone(lang.expressionsExportOK);\r\n        }\r\n        catch (err) {\r\n            onDone(lang.expressionsExportErr + err.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the expression list from the textual file selected by the user.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleImportExpressions = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        ExpressionStoreManager.load().then(info => {\r\n            this.state.expressions.push(...info.expressions);\r\n            this.setState({});\r\n            onDone(info.expressions.length + lang.expressionsImport[0] + info.loadedFiles + lang.expressionsImport[1] +\r\n                + info.skippedExpressions + lang.expressionsImport[2] + info.skippedFiles + lang.expressionsImport[3]);\r\n        });\r\n    }\r\n\r\n    /******************************************** RESULT SECTION HANDLERS ********************************************/\r\n\r\n    /**\r\n     * Adds the given relation to defined relations.\r\n     *\r\n     * @return message and its color (red for errors, black for information)\r\n     */\r\n    private addResultRelation = (relation: Relation): void => {\r\n        const name = this.ensureUniqueRelationName(\"Evaluated\");\r\n        const storedRelation = StoredRelation.fromRelation(name, relation, this.state.nullValuesSupport);\r\n        this.state.storedRelations.push(storedRelation);\r\n        this.setState({selectedRelation: this.state.storedRelations.length - 1});\r\n    }\r\n\r\n    /***************************************************** RENDER *****************************************************/\r\n\r\n    public render() {\r\n        let resultSection = null;\r\n        if (this.state.evaluationTreeRoot !== null) {\r\n            resultSection = (\r\n                <ResultSection\r\n                    evaluationTreeRoot={this.state.evaluationTreeRoot}\r\n                    expressionName={this.state.evaluatedExpressionName}\r\n\r\n                    onAddResult={this.addResultRelation}\r\n                    onUnexpectedError={this.reportUnexpectedError}\r\n\r\n                    csvValueSeparator={this.state.csvValueSeparator}\r\n                    darkTheme={this.state.darkTheme}\r\n                    language={this.state.language}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <main>\r\n                <ManagementSection\r\n                    onBatch={this.handleBatch}\r\n                    onLoadProject={this.handleLoadProject}\r\n                    onSaveProject={this.handleSaveProject}\r\n                    onLoadSample={this.handleLoadSampleProject}\r\n\r\n                    csvValueSeparator={this.state.csvValueSeparator}\r\n                    language={this.state.language}\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                    darkTheme={this.state.darkTheme}\r\n\r\n                    onCsvValueSeparatorChange={this.handleCsvValueSeparatorChange}\r\n                    onLanguageChange={this.handleLanguageChange}\r\n                    onNullValuesSupportChange={this.handleNullValuesSupportChange}\r\n                    onDarkThemeChange={this.handleDarkThemeChange}\r\n                />\r\n\r\n                <RelationsSection\r\n                    storedRelations={this.state.storedRelations}\r\n                    storedRelationIndex={this.state.selectedRelation}\r\n\r\n                    loadedRelations={[...this.state.loadedRelations.values()]}\r\n\r\n                    onRelationNameChange={this.handleRelationNameChange}\r\n                    onColumnNameChange={this.handleRelationColumnNameChange}\r\n                    onColumnTypeChange={this.handleRelationColumnTypeChange}\r\n                    onRowInputChange={this.handleRelationRowInputChange}\r\n                    onNewRow={this.handleRelationNewRow}\r\n                    onNewColumn={this.handleRelationNewColumn}\r\n                    onDeleteRow={this.handleRelationDeleteRow}\r\n                    onDeleteColumn={this.handleRelationDeleteColumn}\r\n\r\n                    onSelectDifferentRelation={this.handleSelectDifferentRelation}\r\n                    onDragRelation={this.handleDragRelation}\r\n                    onNewRelation={this.handleCreateNewRelation}\r\n                    onLoadRelation={this.handleLoadRelation}\r\n                    onDeleteStoredRelation={this.handleDeleteRelation}\r\n                    onRevertRelation={this.handleRevertRelation}\r\n\r\n                    onLoadAllRelations={this.handleLoadAllRelations}\r\n                    onRemoveLoadedRelations={this.handleRemoveLoadedRelations}\r\n                    onExportRelations={this.handleExportRelations}\r\n                    onImportRelations={this.handleImportRelations}\r\n\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                    language={this.state.language}\r\n                />\r\n\r\n                <ExpressionSection\r\n                    ref={this.expressionSectionRef}\r\n\r\n                    expressions={this.state.expressions}\r\n                    currentExpressionIndex={this.state.selectedExpression}\r\n                    relations={this.state.loadedRelations}\r\n\r\n                    onChange={this.handleExprTextChange}\r\n                    onEval={this.handleExprEval}\r\n\r\n                    onSelectDifferentExpression={this.handleSelectDifferentExpression}\r\n                    onDragExpression={this.handleDragExpression}\r\n                    onNewExpression={this.handleCreateNewExpression}\r\n                    onDeleteExpression={this.handleDeleteExpression}\r\n                    onExportExpressions={this.handleExportExpressions}\r\n                    onImportExpressions={this.handleImportExpressions}\r\n\r\n                    onUnexpectedError={this.reportUnexpectedError}\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                    darkTheme={this.state.darkTheme}\r\n                    language={this.state.language}\r\n                />\r\n\r\n                {resultSection}\r\n            </main>\r\n        );\r\n    }\r\n}","export const POSTMAIL_ACCESS_TOKEN: string = \"5uog26ex8q9qu7sqib8ea0qd\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {MainScreen} from \"./components/mainScreen\";\r\n\r\n/**\r\n * @license The software is Licensed under the MIT License\r\n *\r\n * Copyright (c) Lukáš Kotlík\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\r\n * to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions\r\n * of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\r\n * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n * ********* Used, Licensed third party code: *********\r\n *\r\n * JSZIP - Create, read and edit .zip files with Javascript\r\n * Version: 3.5.0\r\n * https://github.com/Stuk/jszip\r\n * MIT License - Copyright (c) 2009-2016 Stuart Knightley, David Duponchel, Franz Buchinger, António Afonso\r\n *\r\n * visx - visualization components\r\n * visx/group - version: 1.0.0\r\n * visx/hierarchy - version: 1.0.0\r\n * visx/shape - version: 1.4.0\r\n * visx/responsive - version: 1.3.0\r\n * visx/tooltip - version: 1.3.0\r\n * https://github.com/airbnb/visx\r\n * MIT License - Copyright (c) 2017-2018 Harrison Shoff\r\n *\r\n * export-svg-with-styles - Turn your SVGs to PNGs\r\n * Version: 0.0.4\r\n * https://www.npmjs.com/package/export-svg-with-styles\r\n * MIT License - Copyright (c) 2019 Mathew Leland\r\n *\r\n * FileSaver.js - An HTML5 saveAs() FileSaver implementation\r\n * Version: 2.0.5\r\n * https://github.com/eligrey/FileSaver.js\r\n * MIT License - Copyright (c) 2016 Eli Grey\r\n *\r\n * Lodash - A modern JavaScript utility library delivering modularity, performance, & extras.\r\n * Version: 4.17.20\r\n * https://github.com/lodash/lodash\r\n * MIT License - Copyright JS Foundation and other contributors <https://js.foundation/>\r\n * Based on Underscore.js, copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors <http://underscorejs.org/>\r\n * This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/lodash/lodash\r\n *\r\n * React - A declarative, efficient, and flexible JavaScript library for building user interfaces.\r\n * Version: 16.13.1\r\n * https://github.com/facebook/react\r\n * MIT License - Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * Jest - Delightful JavaScript Testing.\r\n * Version: 26.6.0\r\n * https://github.com/facebook/jest\r\n * MIT License - Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * create-react-app - Set up a modern web app by running one command.\r\n * Version: 3.4.1\r\n * https://github.com/facebook/create-react-app\r\n * MIT License - Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * TypeScript - TypeScript is a superset of JavaScript that compiles to clean JavaScript output.\r\n * Version: 3.7.5\r\n * https://github.com/microsoft/TypeScript\r\n * Apache License 2.0\r\n *\r\n * JSDoc - An API documentation generator for JavaScript.\r\n * Version: 3.6.6\r\n * https://github.com/jsdoc/jsdoc\r\n * Apache License 2.0\r\n *\r\n * better-docs - Beautiful toolbox for jsdoc generated documentation - with 'typescript', `category` and `component` plugins\r\n * Version: 2.3.2\r\n * https://github.com/SoftwareBrothers/better-docs\r\n * MIT License - Copyright 2019 SoftwareBrothers.co\r\n *\r\n * ********* Used, not Licensed, free to use code and services: *********\r\n *\r\n * PostMail - Send email from JavaScript or static HTML without backend code\r\n * https://postmail.invotes.com/\r\n */\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <MainScreen/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();","export function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}"],"sourceRoot":""}