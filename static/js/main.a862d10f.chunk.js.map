{"version":3,"sources":["serviceWorker.ts","components/tooltipButton.tsx","error/errorWithTextRange.ts","utils/localStorage.ts","language/language.ts","language/en.ts","language/cs.ts","error/raSyntaxError.ts","error/raSemanticError.ts","utils/fontUtils.ts","utils/whisperUtils.ts","components/xTextArea.tsx","utils/math.ts","relation/relation.ts","error/codeError.ts","error/errorFactory.ts","expression/exprTokens.ts","utils/stringUtils.ts","ratree/raTreeNode.ts","ratree/relationNode.ts","types/indexedString.ts","utils/indexedStringUtils.ts","ratree/unaryNode.ts","relation/row.ts","ratree/projectionNode.ts","utils/keywords.ts","types/isToISMap.ts","vetree/comparingOperator.ts","ratree/renameNode.ts","vetree/veTreeNode.ts","vetree/logicalOperator.ts","vetree/computingOperator.ts","vetree/literalValue.ts","vetree/referenceValue.ts","expression/valueTokens.ts","expression/valueParser.ts","ratree/binaryNode.ts","ratree/raTreeTools.ts","ratree/antijoinNode.ts","ratree/selectionNode.ts","ratree/outerJoinNode.ts","ratree/cartesianProductNode.ts","ratree/divisionNode.ts","ratree/naturalJoinNode.ts","ratree/setOperationNode.ts","ratree/thetaJoinNode.ts","expression/exprParser.ts","ratree/raTreeFactory.ts","components/textInput.tsx","components/messageBox.ts","components/expressionSection.tsx","components/resultRelationTable.tsx","components/evaluationTree.tsx","utils/fileDialog.ts","types/nnToSMap.ts","relation/storedRelation.ts","relation/columnType.ts","relation/relationStoreManager.ts","types/csvSupport.ts","components/resultSection.tsx","expression/expressionStoreManager.ts","project/samples.ts","components/managementSection.tsx","project/project.ts","expression/expression.ts","project/projectStoreManager.ts","batch/batchProcessor.ts","utils/dateUtils.ts","components/editRelationTable.tsx","components/relationsSection.tsx","utils/mail.ts","components/mainScreen.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TooltipButton","className","this","props","onClick","style","text","tooltipClassName","tooltipStyle","event","stopPropagation","preventDefault","tooltip","React","Component","ErrorWithTextRange","msg","range","Error","insertRangeIfUndefined","err","undefined","defaultLanguage","defaultDarkMode","LocalStorage","storageSupported","storedSeparator","localStorage","getItem","setItem","csvValueSeparator","x","allSupportedLanguages","includes","language","darkTheme","warn","isInit","init","String","Storage","EN","abbr","relationErrors","emptyColumn","duplicitColumn","keywordColumn","invalidColumn","unsupportedNull","invalidNumber","invalidBoolean","codeErrors","resultSection_nodeIndexNotFound","resultSection_evalError","resultSection_nullRelationToSave","resultSection_nullRelationToAdd","row_absentColumn","valueParser_unexpectedToken","exprParser_unexpectedToken","exprParser_thetaJoinBranchError","exprParser_projectionBranchError","semanticErrors","exprParser_relationNotDefined","binaryNode_commonColumns","setOperationNode_notEqualColumns","divisionNode_rightColumnsNotSubset","divisionNode_rightColumnsNotProperSubset","renameNode_absentOriginalColumn","renameNode_changeToDuplicit","projectionNode_absentColumn","referenceValue_absentColumn","semanticError","syntaxErrors","exprParser_emptyStringGiven","exprParser_outerJoinWhenNullNotSupported","exprParser_unexpectedPart","exprParser_bothBranchesError","exprParser_invalidExpression","exprParser_invalidParentheses","exprParser_invalidStart","exprParser_invalidEnd","exprParser_relationAfterRelation","exprParser_relationAfterUnary","exprParser_relationAfterClosing","exprParser_unaryAfterBinary","exprParser_unaryAfterOpening","exprParser_binaryAfterBinary","exprParser_binaryAfterOpening","exprParser_openingAfterRelation","exprParser_openingAfterUnary","exprParser_openingAfterClosing","exprParser_closingAfterBinary","exprParser_closingAfterOpening","valueParser_emptyInput","valueParser_unsupportedNull","valueParser_unexpectedPart","valueParser_missingOpeningParenthesis","valueParser_missingClosingParenthesis","valueParser_invalidExpression","valueParser_invalidStart","valueParser_invalidEnd","valueParser_literalAfterLiteral","valueParser_literalAfterReference","valueParser_literalAfterClosing","valueParser_referenceAfterLiteral","valueParser_referenceAfterReference","valueParser_referenceAfterClosing","valueParser_notAfterLiteral","valueParser_notAfterReference","valueParser_notAfterClosing","valueParser_binaryAfterOperator","valueParser_binaryAfterOpening","valueParser_openingAfterLiteral","valueParser_openingAfterReference","valueParser_openingAfterClosing","valueParser_closingAfterOperator","valueParser_closingAfterOpening","stringUtils_missingClosingChar","stringUtils_charNotFound","renameNode_missingArrow","renameNode_invalidNewName","renameNode_keywordNewName","renameNode_multipleRenameOfTheColumn","selectionNode_resultNotBoolean","thetaJoinNode_resultNotBoolean","comparingOperator_differentInputTypes","computingOperator_inputTypesNotNumbers","logicalOperator_leftInputNotBoolean","logicalOperator_rightInputNotBoolean","syntaxError","userMessages","loadedRelationsTotalNo","loadedRelationsTotalSome","loadRelationNew","loadAllRelationsNew","deleteLoadedRelations","relationsExportOK","relationsExportErr","relationsImport","expressionsExportOK","expressionsExportErr","expressionsImport","operations","selection","projection","rename","union","intersection","difference","naturalJoin","cartesianProduct","leftSemiJoin","rightSemiJoin","leftAntijoin","rightAntijoin","thetaJoin","leftThetaSemiJoin","rightThetaSemiJoin","fullOuterJoin","leftOuterJoin","rightOuterJoin","division","managementSection","batchButton","loadButton","saveButton","samplesButton","samplesMenuTitle","settingsButton","settingsNullValues","settingsNullValuesAllowed","settingsNullValuesForbidden","settingsCSVSeparator","settingsCSVSeparatorSemicolon","settingsCSVSeparatorComma","settingsTheme","settingsThemeLight","settingsThemeDark","settingsLanguage","aboutButton","relationSection","relationSectionHeader","loadAllButton","loadAllButtonTooltip","removeLoadedButton","removeLoadedButtonTooltip","importButton","importButtonTooltip","exportButton","exportButtonTooltip","loadButtonTooltip","renameButton","deleteButton","deleteButtonTooltip","revertButton","revertButtonTooltip","expressionSection","expressionSectionHeader","evaluateButton","evaluateButtonTooltip","expressionTextareaPlaceholder","comment","resultSection","resultSectionHeader","exportEvalTreeButton","exportEvalTreeButtonTooltip","evalTreeTitle","resultRelationTitle","intermediateRelationTitle","addButton","addButtonTooltip","exportRelationButton","exportRelationButtonTooltip","languageMap","Map","lang","get","getLanguage","RASyntaxError","captureStackTrace","name","RASemanticError","computeFontSizeInPx","fontFamily","fontSize","div","document","createElement","setAttribute","innerText","documentElement","appendChild","divWidth","clientWidth","divHeight","clientHeight","remove","fontWidth","length","fontHeight","getStartOfWordBeforeIndex","str","index","prefixText","slice","i","charAt","cssConstants","getComputedStyle","querySelector","getPropertyValue","lineHeight","Number","numsBackgroundLight","numsBackgroundDark","numsColorLight","numsColorDark","XTextArea","textarea","start","selectionStart","end","selectionEnd","setSelectionRange","activeElement","id","focus","getElementById","table","classList","add","tr","td1","td2","ta","mouseIsDown","placeholder","value","canvas","width","canvasWidth","canvasLines","whisperDiv","isShown","selectedIndex","changeSelected","indexDiff","setSelected","newIndex","n","m","childElementCount","children","getSelectedWhisper","paintLineNumbers","height","ctx","getContext","fillStyle","fillRect","scrollHeight","font","linesCount","fillText","e","update","lines","createWhisper","whispers","hideWhisper","innerHTML","forEach","whisper","onclick","ondblclick","insertCurrentSelectedWhisper","onChange","notAutoShowWhisper","moveWhisper","cursorLineAndColumn","getPositionLineAndColumn","cursorDistanceFromTATotalTop","line","cursorDistanceFromTATotalLeft","column","yPos","scrollTop","xPos","scrollLeft","getBoundingClientRect","y","innerHeight","currWhisper","beforeAdd","afterAdd","newCursorPos","errorDivs","moveErrors","highlight","startLine","rangeLength","startColumn","innerWidth","messageSpan","updateErrors","ranges","pushHighlight","parentElement","push","createHighlightDiv","getLineLength","addEventListener","onscroll","onmousedown","onmouseup","onmousemove","oninput","ev","target","onkeydown","key","ctrlKey","cursor","onCtrlInput","errors","prevProps","position","textBeforeCursor","lastNewLine","lastIndexOf","newLinesFound","lineStart","lineEnd","newEvent","MouseEvent","type","dispatchEvent","span","Relation","columns","columnNames","rows","finishedSchema","hasColumn","hasFinishedSchema","set","some","cn","f","row","isEqual","getTypes","finishSchema","finish","r","equals","map","s","join","columnTypes","getOrderedPrintValues","longest","d","pad","ss","padEnd","repeat","other","Set","CodeError","ErrorFactory","params","assertParamsCount","joinStringArrays","expectedCount","a","b","aLen","toConcat","Array","concat","ExprToken","getRange","ParenthesisToken","OpeningParenthesis","ClosingParenthesis","RelationToken","UnaryOperatorToken","BinaryOperatorToken","precedence","precedenceLevelF","precedenceLevelD","precedenceLevelE","precedenceLevelA","precedenceLevelB","precedenceLevelC","StringUtils","split","every","c","isLetter","isNameChar","res","exec","toLowerCase","toUpperCase","isDigit","test","first","second","substring","char","digitFound","dotFound","backslashes","curChar","escape","depth","inQuotes","nesting","escapeCount","indexOf","charFound","insideQuotes","RATreeNode","resultRelation","eval","RelationNode","relation","cursorIndex","result","getName","IndexedString","chars","startIndex","arr","ic","separator","separatorIndexes","empty","new","isEmpty","isNaN","NaN","getFirstNonNaNIndex","getLastNonNaNIndex","RangeError","sepLen","strSplit","prefixSum","strSplitLenMinusOne","ps","indexAt","_start","_end","newFromArray","trimStr","trim","strings","is","searchString","startsWith","endsWith","searchValue","replaceValue","replace","fromIndex","regexp","filter","lastIndex","getLastIndex","IndexedStringUtils","isWord","toString","isName","isWhitespacesOnly","isNumber","strParts","nextWord","nextName","nextNonWhitespacePart","nextNumber","nextQuotedString","nextBorderedPart","skippedStr","skipWhitespacesAndChar","getNonNaNRange","splitToLines","toJoin","UnaryNode","subtree","Row","types","values","finished","keys","has","orderedColumns","ret","codeError","ProjectionNode","stringRange","part","isEvaluated","source","getResult","projectedIndexed","parseProjection","projected","p","forEachColumn","addColumn","getRows","newRow","getColumns","getValues","addValue","addRow","fakeEval","getColumnNames","absent","strName","printInLine","getOperationSymbol","forbiddenColumnNames","forbiddenRelationNames","isForbiddenColumnName","ComparingOperatorType","ISToISMap","keyValue","delete","clear","size","RenameNode","doThrow","handleError","parts","words","w","beforeError","afterError","changes","parseChanges","toChange","newName","returned","regexMatch","duplicit","after","before","beforeStr","afterStr","VETreeNode","LogicalOperatorType","ComparingOperator","operator","left","right","equal","nonEqual","less","more","lessOrEqual","moreOrEqual","leftResult","rightResult","ComputingOperatorType","LogicalOperator","and","or","not","LiteralValue","ReferenceValue","columnName","getValue","getType","ComputingOperator","plus","minus","multiplication","ValueToken","OperatorToken","LogicalNotToken","LogicalAndToken","LogicalOrToken","ComputingMultiplicationToken","ComputingDivisionToken","ComputingPlusToken","ComputingMinusToken","ComparingToken","OpeningParentheses","ClosingParentheses","LiteralToken","ReferenceToken","ValueParser","nullValuesSupport","tokens","parseTokens","assertValidInfixTokens","simplify","rpn","toRPN","rpnToVETree","token","rest","i2","token1","token2","notIndexes","indexesToRemove","t","rpnQueue","operatorsStack","pop","curToken","rpnToVETreeRecursive","deduct","multiply","divide","JSON","stringify","BinaryNode","leftSubtree","rightSubtree","depthSearch","root","findIndexInTree","node","getSubtree","leftSearch","getLeftSubtree","getRightSubtree","getTreeDepth","Math","max","isInRangeAndNotInQuotes","len","cursorIndexInStr","AntijoinType","SelectionNode","boolExpr","parse","bool","newResult","fakeParse","OuterJoinType","AntijoinNode","rowsToKeep","rowsToHelp","leftSource","rightSource","commonColumns","lc","keptRow","helpRow","fakeEvalBinary","CartesianProductNode","leftRow","rightRow","leftColumn","DivisionNode","leftColumns","rightColumns","getSchemaString","resultColumns","getNamesSchemaString","leftRows","rightRows","testRow","lr","entries","NaturalJoinType","OuterJoinNode","full","SetOperationType","NaturalJoinNode","leftSemi","natural","rightSemi","ThetaJoinType","SetOperationNode","typeStr","getOperationName","rr","AssertType","ThetaJoinNode","condition","bothSourceColumns","booleanResult","sourceColumns","RATreeFactory","unaryClass","expr","binaryClass","ExprParser","relations","indexedExpr","deleteCommentLines","THROW_STRICT","rpnToRATree","fakeParseTokens","NOT_THROW","innerResult","selectionExpected","alternativeTokens","errorAlternative","message","rightThetaSemijoin","errorRange","leftSemijoin","rightSemijoin","leftThetaSemijoin","THROW_NOT_STRICT","ignored","restStartIndex","getNextIndexOrNaN","recursiveReturn","operatorEndIndex","containsAny","relationStartIndex","relationEndIndex","missing","splice","rpnToRATreeRecursive","createUnary","createBinary","TextInput","inputRef","handleChange","disable","forbidden","setState","buttonDisable","handleKeyDown","handleSubmit","current","blur","onSubmit","createRef","ref","spellCheck","autoComplete","onKeyDown","disabled","buttonText","boxMargin","MessageBox","box","visibility","onmouseenter","clearHideTimeout","onmouseleave","setHideTimeout","paragraph","button","hideBox","moveBox","body","firstElementChild","toggle","display","hideTimeout","hideIntervalId","setTimeout","clearTimeout","ExpressionSection","textAreaRef","lastChange","lastWhisperAndErrorsUpdate","whispersAndErrorsUpdateRate","getCurExpr","evalExpr","tree","expressions","currentExpressionIndex","onEval","errorRanges","er","showError","newExpression","onNewExpression","deleteExpression","onDeleteExpression","exportExpressions","onExportExpressions","importExpressions","onImportExpressions","addSpecialString","shift","getSelection","firstPart","secondPart","newPosition","newStr","handleExprChange","setSelection","onDone","Date","now","handleCtrlInput","updateWhispersAndErrors","textArea","isFocused","fakeParseResult","wordBeforeCursor","helpArray","likelihood","wordStart","wordEnd","sort","help","sortWhispers","handleExprNameChange","onUnexpectedError","sectionClicked","setInterval","onSelectDifferentExpression","ops","createButton","createOpButton","buttonGroupMargin","marginRight","handleSelectDifferentExpression","minWidth","marginLeft","padding","ResultRelationTable","getOrderByText","orderDir","orderBy","prevState","snapshot","updateOrderBy","getRowsCount","colSpan","sortCol","aValue","bValue","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","localeCompare","headerRow","createHeaderRow","createRows","EvaluationTree","TreeComponent","raTree","selected","nodeHeight","backgroundColorLight","backgroundColorDark","textColorLight","textColorDark","selectedNodeColorLight","unselectedNodeColorLight","selectedNodeColorDark","unselectedNodeColorDark","TreeNodeComponent","useTooltip","tooltipOpen","showTooltip","hideTooltip","nodeWidth","data","title","symbol","Group","top","rx","fill","onMouseOver","tooltipLeft","tooltipTop","onMouseOut","dy","textAnchor","pointerEvents","treeDepth","margin","bottom","yMax","xMax","indexes","parseTreeForDisplayHelper","maxNodeTextLength","parseTreeForDisplay","hierarchy","Tree","links","link","LinkVertical","stroke","strokeWidth","strokeOpacity","descendants","FileDialog","accept","Promise","resolve","element","fileInput","firstChild","file","files","reader","FileReader","onload","readAsText","click","openFilesHelper","fileInfo","readFile","NNToSMap","entry","parseKey","StoredRelation","columnCount","rowCount","actual","revertState","toDataObject","recomputeErrors","isStoredRelationData","rel","checkColumnNames","checkRowInput","columnIndex","reduce","agg","rowIndex","input","lower","_","rowInput","addNewColumn","columnType","checkColumnTypes","obj","isArray","o","isSupportedColumnType","RelationStoreManager","openFiles","skipped","csvToRelation","createValidName","filename","valueSeparator","zip","JSZip","relationToCsv","generateAsync","content","saveAs","blob","Blob","findValueSeparator","nextRowInput","inString","names","getColumnTypes","ResultSection","sectionRef","getCurrentRelation","currentNode","evaluationTreeRoot","handleSelectedNodeChange","exportEvalTreeAsPng","svg","rect","options","expressionName","downloadSVG","exportRelation","save","fromRelation","addRelation","onAddResult","relationType","selectedNode","tableTitle","ExpressionStoreManager","skippedExpressions","loadedFiles","skippedFiles","splitExpressionNameAndText","firstNewLineIndex","firstRow","textContent","samples","project","getSamples","ManagementSection","onBatch","onLoadProject","onSaveProject","samplesMenu","sample","onLoadSample","createSamplesButton","settingsMenu","checked","onNullValuesSupportChange","htmlFor","onCsvValueSeparatorChange","onDarkModeChange","onLanguageChange","createSettingsButton","href","isProjectObject","isExpression","copyProject","proj","exp","ProjectStoreManager","reject","openFile","BatchProcessor","time","reports","processed","downloadReports","report","timeEnd","processNext","processFile","storedData","storedRelation","fromData","isValid","createRelation","status","parseRelations","exprParser","exprCount","processExpression","addOperations","counts","reportHeader","formatRelations","sectionLine","parser","evaluationTree","operationsOfTree","contentLine","contentString","zeroOperations","date","total","binaryOperations","unaryOperations","binary","unary","getDate","padStart","getMonth","getFullYear","getHours","getMinutes","setOperation","cartesian","semijoin","antijoin","thetaSemijoin","outerJoin","inlines","format","count","operationOfUnaryNode","operationOfBinaryNode","cellPaddingSides","inputMarginSides","EditRelationTable","containerRef","tableHeadRowRef","columnWidths","handleInputResize","inputElement","scrollWidth","getErrors","setSelectedInput","selectedColumn","selectedRow","moveSelectedInputRight","getColumnCount","moveSelectedInputLeft","moveSelectedInputUp","moveSelectedInputDown","getRowCount","onColumnNameChange","onColumnTypeChange","onRowInputChange","handleNewColumn","onNewColumn","scrollTo","handleNewRow","onNewRow","handleDeleteColumn","onDeleteColumn","handleDeleteRow","onDeleteRow","createInput","autoFocus","createDeleteButton","callback","componentDidUpdate","headRow","cells","cell","rowData","createTooltip","rowSpan","border","createNamesRow","createTypesRow","createAddRow","RelationsSection","getCurRel","storedRelations","storedRelationIndex","handleRelationNameChange","onRelationNameChange","loadRelation","onLoadRelation","loadAllRelations","onLoadAllRelations","exportRelations","onExportRelations","importRelations","onImportRelations","deleteRelation","onDeleteStoredRelation","revertRelation","onRevertRelation","newRelation","onNewRelation","deleteAllLoadedRelations","onDeleteLoadedRelations","createRelationMenuButtons","actuality","isActual","handleSelectDifferentRelation","onSelectDifferentRelation","sr","getRevertName","Mail","accessToken","subject","data_js","access_token","request","XMLHttpRequest","onreadystatechange","readyState","response","toParams","open","setRequestHeader","send","encodeURIComponent","MainScreen","expressionSectionRef","reportUnexpectedError","postMail","stack","loadedRelations","selectedRelation","selectedExpression","loadProject","evaluatedExpressionName","updateExpressionsErrors","ensureUniqueRelationName","handleBatch","process","handleLoadProject","load","handleSaveProject","handleLoadSampleProject","handleNullValuesSupportChange","setNullValuesSupport","handleCsvValueSeparatorChange","setCsvValueSeparator","handleLanguageChange","setLanguage","handleDarkModeChange","setDarkMode","setName","handleRelationColumnNameChange","setColumnName","handleRelationColumnTypeChange","setColumnType","handleRelationRowInputChange","setRowInput","handleRelationNewRow","addNewRow","handleRelationNewColumn","handleRelationDeleteRow","deleteRow","handleRelationDeleteColumn","deleteColumn","handleCreateNewRelation","handleDeleteRelation","handleRevertRelation","revert","handleDeleteLoadedRelations","previous","setActual","handleExportRelations","handleImportRelations","info","countBefore","handleLoadRelation","currRelation","msgPart2","handleLoadAllRelations","loaded","handleExprEval","handleExprTextChange","handleCreateNewExpression","handleDeleteExpression","handleExportExpressions","handleImportExpressions","addResultRelation","getDarkMode","getCsvValueSeparator","ReactDOM","render","StrictMode","URL","origin","fetch","headers","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a862d10f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\ninterface TooltipButtonProps {\r\n    // text on the button\r\n    text: string,\r\n    // handler of the button click\r\n    onClick: () => void,\r\n    // css class of the button\r\n    className: string,\r\n    // inline styling for button\r\n    style?: React.CSSProperties,\r\n\r\n    // text of the tooltip\r\n    tooltip: string,\r\n    // css class of the tooltip\r\n    tooltipClassName: string,\r\n    // inline styling for tooltip\r\n    tooltipStyle?: React.CSSProperties,\r\n}\r\n\r\ninterface TooltipButtonState {\r\n}\r\n\r\n/**\r\n * Button with a tooltip text.\r\n */\r\nexport class TooltipButton extends React.Component<TooltipButtonProps, TooltipButtonState> {\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                className={this.props.className}\r\n                onClick={this.props.onClick}\r\n                style={this.props.style}\r\n                >{this.props.text}\r\n                <span\r\n                    className={this.props.tooltipClassName}\r\n                    style={this.props.tooltipStyle}\r\n                    onClick={event => {\r\n                        event.stopPropagation();\r\n                        event.preventDefault();\r\n                    }}\r\n                >{this.props.tooltip}</span>\r\n            </button>\r\n        );\r\n    }\r\n}","/**\r\n * Error with optional text range of the error.\r\n */\r\nexport default class ErrorWithTextRange extends Error {\r\n    constructor(msg: string, public range?: {start: number, end: number} | undefined) {\r\n        super(msg);\r\n    }\r\n}\r\n\r\n/**\r\n * If the given error is ErrorWithTextRange instance and has undefined range, sets its range to given value.\r\n * Returns (possibly modified) input error.\r\n *\r\n * @param err\r\n * @param range\r\n */\r\nexport function insertRangeIfUndefined<T>(err: T, range: {start: number, end: number} | undefined): T {\r\n    if (err instanceof ErrorWithTextRange && err.range === undefined) {\r\n        err.range = range;\r\n    }\r\n    return err;\r\n}","import {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {isSupportedLanguage, SupportedLanguage} from \"../language/language\";\r\n\r\nconst defaultCsvValueSeparator: CsvValueSeparator = \";\";\r\nconst defaultLanguage: SupportedLanguage = \"EN\";\r\nconst defaultDarkMode: string = \"false\";\r\n\r\n/**\r\n * Static class for maintaining the access to local storage of the browser. It handles user settings:\r\n * saving file type, csv value separator, language, light/dark theme of the application.\r\n * If the local storage is not used, it uses the application memory and the default values.\r\n */\r\nexport class LocalStorage {\r\n\r\n    private static isInit: boolean = false;\r\n    private static storageSupported: boolean = typeof(Storage) !== \"undefined\";\r\n\r\n    private static csvValueSeparator: CsvValueSeparator;\r\n    private static language: SupportedLanguage;\r\n    private static darkTheme: string;\r\n\r\n    /**\r\n     * Initializes the LocalStorage. If there are the requested values, loads them to application memory.\r\n     * If the local storage is not supported, uses the default values.\r\n     */\r\n    private static init(): void {\r\n        if (LocalStorage.storageSupported) {\r\n            const storedSeparator = localStorage.getItem(\"csvValueSeparator\");\r\n            if (storedSeparator !== \";\" && storedSeparator !== \",\") {\r\n                console.log(\"csvValueSeparator not found in localStorage and set to default\");\r\n                localStorage.setItem(\"csvValueSeparator\", defaultCsvValueSeparator);\r\n                LocalStorage.csvValueSeparator = defaultCsvValueSeparator;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.csvValueSeparator = localStorage.getItem(\"csvValueSeparator\");\r\n            }\r\n            if (!isSupportedLanguage(localStorage.getItem(\"language\"))) {\r\n                console.log(\"language not found in localStorage and set to default\");\r\n                localStorage.setItem(\"language\", defaultLanguage);\r\n                LocalStorage.language = defaultLanguage;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.language = localStorage.getItem(\"language\");\r\n            }\r\n\r\n            if (localStorage.getItem(\"darkTheme\") !== \"true\" && localStorage.getItem(\"darkTheme\") !== \"false\") {\r\n                console.log(\"darkTheme not found in localStorage and set to default\");\r\n                localStorage.setItem(\"darkTheme\", defaultDarkMode);\r\n                LocalStorage.darkTheme = defaultDarkMode;\r\n            }\r\n            else {\r\n                // @ts-ignore\r\n                LocalStorage.darkTheme = localStorage.getItem(\"darkTheme\");\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"LocalStorage not supported in the browser. Default values used.\");\r\n            LocalStorage.csvValueSeparator = defaultCsvValueSeparator;\r\n            LocalStorage.language = defaultLanguage;\r\n            LocalStorage.darkTheme = defaultDarkMode;\r\n        }\r\n        LocalStorage.isInit = true;\r\n    }\r\n\r\n    public static getCsvValueSeparator(): CsvValueSeparator {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.csvValueSeparator;\r\n    }\r\n\r\n    public static setCsvValueSeparator(csvValueSeparator: CsvValueSeparator): void {\r\n        LocalStorage.csvValueSeparator = csvValueSeparator;\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"csvValueSeparator\", csvValueSeparator);\r\n        }\r\n    }\r\n\r\n    public static getLanguage(): SupportedLanguage {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.language;\r\n    }\r\n\r\n    public static setLanguage(language: SupportedLanguage): void {\r\n        LocalStorage.language = language;\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"language\", language);\r\n        }\r\n    }\r\n\r\n    public static getDarkMode(): boolean {\r\n        if (!LocalStorage.isInit) {\r\n            LocalStorage.init();\r\n        }\r\n        return LocalStorage.darkTheme === \"true\";\r\n    }\r\n\r\n    public static setDarkMode(darkTheme: boolean): void {\r\n        LocalStorage.darkTheme = String(darkTheme);\r\n        if (LocalStorage.storageSupported) {\r\n            localStorage.setItem(\"darkTheme\", String(darkTheme));\r\n        }\r\n    }\r\n}","import {LocalStorage} from \"../utils/localStorage\";\r\nimport {EN} from \"./en\";\r\nimport {CS} from \"./cs\";\r\nimport {CodeErrorMessages} from \"../error/codeError\";\r\nimport {SemanticErrorMessages} from \"../error/raSemanticError\";\r\nimport {SyntaxErrorMessages} from \"../error/raSyntaxError\";\r\n\r\n/**\r\n * IF YOU WANT TO ADD A NEW LANGUAGE, READ THIS:\r\n *\r\n * Adding a language is simple, follow these steps:\r\n * 1) Copy the \"en.ts\" file in this package and name it as the lowercase new language abbreviation, e.g., \"cs.ts\"\r\n * 2) Rename the language definition object to the uppercase language abbreviation, e.g., \"CS\"\r\n * 3) Translate the messages in the new file. Some messages are split into an array - if you are not sure what to\r\n * write in each part, see its usage or other languages.\r\n * 4) Add the uppercase language abbreviation, e.g., \"CS\", in the allSupportedLanguages array in this file.\r\n * 5) Import your language definition in this file, e.g., \"import {CS} from \"./cs\";\"\r\n * 6) Add the imported language definition into languageMap map in this file, e.g., \"[\"CS\", CS],\"\r\n * 7) (voluntary) Create a project sample in your language in /project/samples.ts - you can translate existing samples.\r\n * 8) Test whether the application works.\r\n */\r\n\r\n/**\r\n * All languages supported in the application.\r\n * NOTE FOR NEW LANGUAGES: If you define a new language file \"lang.ts\", add \"LANG\" to this array.\r\n */\r\nexport const allSupportedLanguages = (<L extends string>(arr: L[]) => arr)([\"EN\", \"CS\"]);\r\n\r\n/**\r\n * Textual description of supported value separators.\r\n */\r\nexport type SupportedLanguage = (typeof allSupportedLanguages)[number];\r\n\r\n/**\r\n * Definition of a language for Rachel.\r\n * NOTE FOR NEW LANGUAGES: If you want to define a new language, it must be through this interface in a new file in\r\n * this package (see en.ts file as an example of English language definition).\r\n */\r\nexport interface LanguageDef {\r\n    /**\r\n     * Abbreviation of the language\r\n     */\r\n    abbr: SupportedLanguage,\r\n    /**\r\n     * Description of errors in relation definitions.\r\n     */\r\n    relationErrors: {\r\n        emptyColumn: string,\r\n        duplicitColumn: string,\r\n        keywordColumn: string,\r\n        invalidColumn: string,\r\n\r\n        unsupportedNull: string,\r\n        invalidNumber: string,\r\n        invalidBoolean: string,\r\n    },\r\n    /**\r\n     * Description of unexpected errors.\r\n     */\r\n    codeErrors: CodeErrorMessages,\r\n    /**\r\n     * Description of semantic errors in expressions.\r\n     */\r\n    semanticErrors: SemanticErrorMessages,\r\n    semanticError: string,\r\n    /**\r\n     * Description of syntactic errors in expressions.\r\n     */\r\n    syntaxErrors: SyntaxErrorMessages,\r\n    syntaxError: string,\r\n    /**\r\n     * Info messages for the user in pop-up message box.\r\n     */\r\n    userMessages: {\r\n        loadedRelationsTotalNo: string,\r\n        loadedRelationsTotalSome: string,\r\n        loadRelationNew: string,\r\n        // 2 parts expected - see English language as an example\r\n        loadAllRelationsNew: string[],\r\n        deleteLoadedRelations: string,\r\n\r\n        relationsExportOK: string,\r\n        relationsExportErr: string,\r\n        // 2 parts expected - see English language as an example\r\n        relationsImport: string[],\r\n\r\n        expressionsExportOK: string,\r\n        expressionsExportErr: string,\r\n        // 4 parts expected - see English language as an example\r\n        expressionsImport: string[]\r\n    },\r\n    /**\r\n     * Names of RA operations.\r\n     */\r\n    operations: {\r\n        selection: string,\r\n        projection: string,\r\n        rename: string,\r\n        union: string,\r\n        intersection: string,\r\n        difference: string,\r\n        naturalJoin: string,\r\n        cartesianProduct: string,\r\n        leftSemiJoin: string,\r\n        rightSemiJoin: string,\r\n        leftAntijoin: string,\r\n        rightAntijoin: string,\r\n        thetaJoin: string,\r\n        leftThetaSemiJoin: string,\r\n        rightThetaSemiJoin: string,\r\n        fullOuterJoin: string,\r\n        leftOuterJoin: string,\r\n        rightOuterJoin: string,\r\n        division: string\r\n    }\r\n    /**\r\n     * Description of elements in management section.\r\n     */\r\n    managementSection: {\r\n        batchButton: string,\r\n        loadButton: string,\r\n        saveButton: string,\r\n\r\n        samplesButton: string,\r\n        samplesMenuTitle: string,\r\n\r\n        settingsButton: string,\r\n        settingsNullValues: string,\r\n        settingsNullValuesAllowed: string,\r\n        settingsNullValuesForbidden: string,\r\n        settingsCSVSeparator: string,\r\n        settingsCSVSeparatorSemicolon: string,\r\n        settingsCSVSeparatorComma: string,\r\n        settingsTheme: string,\r\n        settingsThemeLight: string,\r\n        settingsThemeDark: string,\r\n        settingsLanguage: string,\r\n\r\n        aboutButton: string\r\n    },\r\n    /**\r\n     * Description of elements in relation section.\r\n     */\r\n    relationSection: {\r\n        relationSectionHeader: string,\r\n\r\n        loadAllButton: string,\r\n        loadAllButtonTooltip: string,\r\n        removeLoadedButton: string,\r\n        removeLoadedButtonTooltip: string,\r\n        importButton: string,\r\n        importButtonTooltip: string,\r\n        exportButton: string,\r\n        exportButtonTooltip: string,\r\n\r\n        loadButton: string,\r\n        loadButtonTooltip: string,\r\n        renameButton: string,\r\n        deleteButton: string,\r\n        deleteButtonTooltip: string,\r\n        revertButton: string,\r\n        revertButtonTooltip: string\r\n    },\r\n    /**\r\n     * Description of elements in expression section.\r\n     */\r\n    expressionSection: {\r\n        expressionSectionHeader: string,\r\n\r\n        importButton: string,\r\n        importButtonTooltip: string,\r\n        exportButton: string,\r\n        exportButtonTooltip: string,\r\n\r\n        evaluateButton: string,\r\n        evaluateButtonTooltip: string,\r\n        renameButton: string,\r\n        deleteButton: string,\r\n        deleteButtonTooltip: string,\r\n\r\n        expressionTextareaPlaceholder: string,\r\n\r\n        comment: string,\r\n    }\r\n    /**\r\n     * Description of elements in result section.\r\n     */\r\n    resultSection: {\r\n        resultSectionHeader: string,\r\n\r\n        exportEvalTreeButton: string,\r\n        exportEvalTreeButtonTooltip: string,\r\n        evalTreeTitle: string,\r\n\r\n        resultRelationTitle: string,\r\n        intermediateRelationTitle: string,\r\n        addButton: string,\r\n        addButtonTooltip: string,\r\n        exportRelationButton: string,\r\n        exportRelationButtonTooltip: string,\r\n    }\r\n}\r\n\r\n/**\r\n * Map of supported languages to their definition.\r\n * NOTE FOR NEW LANGUAGES: If you define a new language, add its definition mapping here.\r\n */\r\nconst languageMap: Map<SupportedLanguage, LanguageDef> = new Map<SupportedLanguage, LanguageDef>([\r\n    [\"EN\", EN],\r\n    [\"CS\", CS],\r\n]);\r\n\r\n/**\r\n * Returns true if the given value is a supported language.\r\n */\r\nexport function isSupportedLanguage(x: any): boolean {\r\n    return allSupportedLanguages.includes(x);\r\n}\r\n\r\n/**\r\n * Returns definition of the current select language.\r\n */\r\nexport function language(): LanguageDef {\r\n    const lang = languageMap.get(LocalStorage.getLanguage());\r\n    if (lang === undefined) {\r\n        return EN;\r\n    }\r\n    return lang;\r\n}","import {LanguageDef} from \"./language\";\r\nimport {CodeErrorMessages} from \"../error/codeError\";\r\nimport {SemanticErrorMessages} from \"../error/raSemanticError\";\r\nimport {SyntaxErrorMessages} from \"../error/raSyntaxError\";\r\n\r\n/**\r\n * English messages for CodeErrors mapped by their error codes.\r\n */\r\nconst codeErrors: CodeErrorMessages = {\r\n    resultSection_nodeIndexNotFound:\r\n        [\"ResultSection.getCurrentRelation: Selected node index in evaluation tree not found.\"],\r\n    resultSection_evalError:\r\n        [\"ResultSection.getCurrentRelation: Evaluation error in result section: \", /* error */ \".\"],\r\n    resultSection_nullRelationToSave:\r\n        [\"ResultSection.saveResultRelation: Result relation is null when tried to save it.\"],\r\n    resultSection_nullRelationToAdd:\r\n        [\"ResultSection.handleAddRelation: Result relation is null when tried to add it.\"],\r\n\r\n    row_absentColumn:\r\n        [\"Row.getOrderedValues: Column \", /* column */ \" is absent in row with columns: \", /* column */ \".\"],\r\n\r\n    valueParser_unexpectedToken:\r\n        [\"ValueParser.rpnToVETreeRecursive: Unexpected token: \", /* token */ \".\"],\r\n\r\n    exprParser_unexpectedToken:\r\n        [\"ExprParser.isValidSequence: Unexpected token: \", /* token */ \".\"],\r\n    exprParser_thetaJoinBranchError:\r\n        [\"ExprParser.parseTokensForWhisper: Error in theta join branch: \", /* error */ \".\"],\r\n    exprParser_projectionBranchError:\r\n        [\"ExprParser.parseTokensForWhisper: Error in projection branch: \", /* error */ \".\"]\r\n};\r\n\r\n/**\r\n * English messages for RASemanticErrors mapped by their error codes.\r\n */\r\nconst semanticErrors: SemanticErrorMessages = {\r\n    exprParser_relationNotDefined: [\"Relation \\\"\", /* relation */ \"\\\" is not defined. Check relations definitions.\"],\r\n\r\n    binaryNode_commonColumns: [\"Source relations for \", /* operator */ \" have common columns \\\"\", /* columns */ \"\\\".\"],\r\n    setOperationNode_notEqualColumns:\r\n        [\"Source relations \\\"\", /* left */ \"\\\" and \\\"\", /* right */ \"\\\" for set \", /* operation */ \" do not have the same column sets.\"],\r\n    divisionNode_rightColumnsNotSubset:\r\n        [\"Right source relation schema \\\"\", /* schema */ \"\\\" is not a subset of the left source relation schema \\\"\", /* schema */ \"\\\".\"],\r\n    divisionNode_rightColumnsNotProperSubset:\r\n        [\"Right source relation schema \\\"\", /* schema */ \"\\\" is not a proper subset of the left source relation schema \\\"\",\r\n        /* schema */ \". There must exist a column in the left relation which is not present in the right relation.\"],\r\n    renameNode_absentOriginalColumn: [\"Invalid rename, column \\\"\", /* column */ \"\\\" does not exist in the source relation.\"],\r\n    renameNode_changeToDuplicit: [\"Invalid rename, new column name \\\"\", /* column */ \"\\\" is duplicit in the changed relation.\"],\r\n    projectionNode_absentColumn: [\"Invalid projection of the column \\\"\", /* column */ \"\\\". It does not exist in the source relation.\"],\r\n\r\n    referenceValue_absentColumn: [\"Column \\\"\", /* column */ \"\\\" is absent in a schema with columns: \", /* columns */ \".\"]\r\n};\r\n\r\n/**\r\n * English messages for RASyntaxErrors mapped by their error codes.\r\n */\r\nconst syntaxErrors: SyntaxErrorMessages = {\r\n    exprParser_emptyStringGiven: [\"Cannot parse an expression from an empty string.\"],\r\n    exprParser_outerJoinWhenNullNotSupported: [\"Found \", /* outer join */ \" when null values are not supported.\"],\r\n    exprParser_unexpectedPart: [\"Unexpected part \\\"\", /* part */ \"\\\" in RA expression.\"],\r\n    exprParser_bothBranchesError: [\"All combinations throw error in \\\"\", /* part */ \"\\\". When treated as projection:\\n\",\r\n        /* error */ \"\\nWhen treated as theta join:\\n\", /* error */ \"\"],\r\n    exprParser_invalidExpression: [\"Given string is not a valid expression.\"],\r\n    exprParser_invalidParentheses: [\"Invalid structure of parentheses in the expression.\"],\r\n    exprParser_invalidStart: [\"RA expression cannot start with \", /* start */ \".\"],\r\n    exprParser_invalidEnd: [\"RA expression cannot end with \", /* end */ \".\"],\r\n    exprParser_relationAfterRelation: [\"Relation \\\"\", /* relation */ \"\\\" after relation \\\"\", /* relation */\"\\\".\"],\r\n    exprParser_relationAfterUnary: [\"Relation \\\"\", /* relation */ \"\\\" after unary operator \\\"\", /* unary */ \"\\\".\"],\r\n    exprParser_relationAfterClosing: [\"Relation \\\"\", /* relation */ \"\\\" after closing parenthesis.\"],\r\n    exprParser_unaryAfterBinary: [\"Unary operator \\\"\", /* unary */ \"\\\" after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    exprParser_unaryAfterOpening: [\"Unary operator \\\"\", /* unary */ \"\\\" after opening parenthesis.\"],\r\n    exprParser_binaryAfterBinary: [\"Binary operator \\\"\", /* unary */ \"\\\" after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    exprParser_binaryAfterOpening: [\"Binary operator \\\"\", /* binary */ \"\\\" after opening parenthesis.\"],\r\n    exprParser_openingAfterRelation: [\"Opening parentheses after relation \\\"\", /* relation */ \"\\\".\"],\r\n    exprParser_openingAfterUnary: [\"Opening parentheses after unary operator \\\"\", /* unary */ \"\\\".\"],\r\n    exprParser_openingAfterClosing: [\"Opening parentheses after closing parentheses.\"],\r\n    exprParser_closingAfterBinary: [\"Closing parentheses after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    exprParser_closingAfterOpening: [\"Closing parentheses after opening parentheses.\"],\r\n\r\n    valueParser_emptyInput: [\"An empty string given as a condition.\"],\r\n    valueParser_unsupportedNull: [\"Null constant used when null values are not supported.\"],\r\n    valueParser_unexpectedPart: [\"Unexpected part \\\"\", /* part */ \"\\\" in expression.\"],\r\n    valueParser_missingOpeningParenthesis: [\"Missing opening parenthesis '(' in an expression.\"],\r\n    valueParser_missingClosingParenthesis: [\"Missing closing parenthesis ')' in an expression.\"],\r\n    valueParser_invalidExpression: [\"Given string is not a valid expression.\"],\r\n    valueParser_invalidStart: [\"Expression cannot start with \\\"\", /* start */ \"\\\".\"],\r\n    valueParser_invalidEnd: [\"Expression cannot end with \\\"\", /* end */ \"\\\".\"],\r\n    valueParser_literalAfterLiteral: [\"Literal \\\"\", /* literal */ \"\\\" after literal \\\"\", /* literal */ \"\\\".\"],\r\n    valueParser_literalAfterReference: [\"Literal \\\"\", /* literal */ \"\\\" after reference to column \\\"\", /* column */ \"\\\".\"],\r\n    valueParser_literalAfterClosing: [\"Literal \\\"\", /* literal */ \"\\\" after closing parentheses.\"],\r\n    valueParser_referenceAfterLiteral: [\"Reference to column \\\"\", /* column */ \"\\\" after literal \\\"\", /* literal */ \"\\\".\"],\r\n    valueParser_referenceAfterReference: [\"Reference to column \\\"\", /* column */ \"\\\" after reference to column \\\"\", /* column */ \"\\\".\"],\r\n    valueParser_referenceAfterClosing: [\"Reference to column \\\"\", /* column */ \"\\\" after closing parentheses.\"],\r\n    valueParser_notAfterLiteral: [\"Logical not operator \\\"\", /* not */ \"\\\" after literal \\\"\", /* literal */ \"\\\".\"],\r\n    valueParser_notAfterReference: [\"Logical not operator \\\"\", /* not */ \"\\\" after reference to column \\\"\", /* column */ \"\\\".\"],\r\n    valueParser_notAfterClosing: [\"Logical not operator \\\"\", /* not */ \"\\\" after closing parentheses.\"],\r\n    valueParser_binaryAfterOperator: [\"Binary operator \\\"\", /* binary */ \"\\\" after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    valueParser_binaryAfterOpening: [\"Binary operator \\\"\", /* binary */ \"\\\" after opening parentheses.\"],\r\n    valueParser_openingAfterLiteral: [\"Opening parentheses after literal \\\"\", /* literal */ \"\\\".\"],\r\n    valueParser_openingAfterReference: [\"Opening parentheses after reference to column \\\"\", /* column */ \"\\\".\"],\r\n    valueParser_openingAfterClosing: [\"Opening parentheses after closing parentheses.\"],\r\n    valueParser_closingAfterOperator: [\"Closing parentheses after binary operator \\\"\", /* binary */ \"\\\".\"],\r\n    valueParser_closingAfterOpening: [\"Closing parentheses after opening parentheses.\"],\r\n\r\n    stringUtils_missingClosingChar: [\"Missing '\", /* opening char */ \"' after opening '\", /* closing char */ \"'.\"],\r\n    stringUtils_charNotFound: [\"Expected \\\"\", /* char */ \"\\\" not found.\"],\r\n\r\n    renameNode_missingArrow: [\"Invalid rename, use \\\"OldName -> NewName\\\" format separated by commas.\"],\r\n    renameNode_invalidNewName: [\"Invalid rename to \\\"\", /* name */\r\n        \"\\\". New column name must contain letters, numbers and underscores only and start with a letter or an underscore.\"],\r\n    renameNode_keywordNewName: [\"Invalid rename to \\\"\", /* name */ \"\\\". New column name cannot be a keyword.\"],\r\n    renameNode_multipleRenameOfTheColumn: [\"Multiple rename of column \\\"\", /* name */ \"\\\".\"],\r\n\r\n    selectionNode_resultNotBoolean: [\"Result of the selection condition \", /* condition */ \" is not a boolean value, but \", /* type */ \".\"],\r\n    thetaJoinNode_resultNotBoolean: [\"Result of the theta join condition \", /* condition */ \" is not a boolean value, but \", /* type */ \".\"],\r\n\r\n    comparingOperator_differentInputTypes: [\"Inputs for \\\"\", /* operator */ \"\\\"  have different types \", /* type */ \" and \", /* type */ \".\"],\r\n    computingOperator_inputTypesNotNumbers: [\"Inputs for \\\"\", /* operator */ \"\\\" are not both numbers, they are \", /* type */ \" and \", /* type */ \".\"],\r\n    logicalOperator_leftInputNotBoolean: [\"Left input value for \\\"\", /* operator */ \"\\\" is not a boolean, but \", /* type */ \".\"],\r\n    logicalOperator_rightInputNotBoolean: [\"Right input value for \\\"\", /* operator */ \"\\\" is not a boolean, but \", /* type */ \".\"]\r\n};\r\n\r\nexport const EN: LanguageDef = {\r\n    abbr: \"EN\",\r\n\r\n    relationErrors: {\r\n        emptyColumn: \"Column name cannot be empty\",\r\n        duplicitColumn: \"Duplicit column name\",\r\n        keywordColumn: \"Column name cannot be a keyword\",\r\n        invalidColumn: \"Invalid characters in column name\",\r\n\r\n        unsupportedNull: \"Null values are not supported\",\r\n        invalidNumber: \"Given string is not a number\",\r\n        invalidBoolean: \"Given string is not a boolean\"\r\n    },\r\n\r\n    codeErrors: codeErrors,\r\n\r\n    semanticErrors: semanticErrors,\r\n    semanticError: \"Semantic error: \",\r\n\r\n    syntaxErrors: syntaxErrors,\r\n    syntaxError: \"Syntax error: \",\r\n\r\n    userMessages: {\r\n        loadedRelationsTotalNo: \"No relations loaded in the application at the moment.\",\r\n        loadedRelationsTotalSome: \" relations loaded at the moment: \",\r\n        loadRelationNew: \"Relation loaded to application.\",\r\n        loadAllRelationsNew: [/* number of loaded */ \" relations loaded to application, \", /* number of skipped */ \" skipped for errors.\"],\r\n        deleteLoadedRelations: \" relations deleted.\",\r\n\r\n        relationsExportOK: \"Relations saved.\",\r\n        relationsExportErr: \"Relations saving failed: \",\r\n        relationsImport: [/* number of loaded */ \" relations loaded, \", /* number of skipped */ \" files skipped.\"],\r\n\r\n        expressionsExportOK: \"Expressions saved.\",\r\n        expressionsExportErr: \"Expressions saving failed: \",\r\n        expressionsImport: [/* number of expressions */ \" expressions loaded from \", /* number of files */ \" files (\",\r\n        /* number of skipped expressions */ \" expressions skipped, \", /* number of skipped files */ \" files skipped).\"]\r\n    },\r\n\r\n    operations: {\r\n        selection: \"Selection\",\r\n        projection: \"Projection\",\r\n        rename: \"Rename\",\r\n        union: \"Union\",\r\n        intersection: \"Intersection\",\r\n        difference: \"Difference\",\r\n        naturalJoin: \"Natural join\",\r\n        cartesianProduct: \"Cartesian product\",\r\n        leftSemiJoin: \"Left semijoin\",\r\n        rightSemiJoin: \"Right semijoin\",\r\n        leftAntijoin: \"Left antijoin\",\r\n        rightAntijoin: \"Right antijoin\",\r\n        thetaJoin: \"Theta join\",\r\n        leftThetaSemiJoin: \"Left theta semijoin\",\r\n        rightThetaSemiJoin: \"Right theta semijoin\",\r\n        fullOuterJoin: \"Full outer join\",\r\n        leftOuterJoin: \"Left outer join\",\r\n        rightOuterJoin: \"Right outer join\",\r\n        division: \"Division\"\r\n    },\r\n\r\n    managementSection: {\r\n        batchButton: \"Batch\",\r\n        loadButton: \"Load\",\r\n        saveButton: \"Save\",\r\n        samplesButton: \"Samples\",\r\n        samplesMenuTitle: \"Prepared sample projects\",\r\n        settingsButton: \"Settings\",\r\n        settingsNullValues: \"Null values\",\r\n        settingsNullValuesAllowed: \"allowed\",\r\n        settingsNullValuesForbidden: \"forbidden\",\r\n        settingsCSVSeparator: \"CSV separator\",\r\n        settingsCSVSeparatorSemicolon: \"semicolon\",\r\n        settingsCSVSeparatorComma: \"comma\",\r\n        settingsTheme: \"Theme\",\r\n        settingsThemeLight: \"light\",\r\n        settingsThemeDark: \"dark\",\r\n        settingsLanguage: \"Language\",\r\n        aboutButton: \"About\"\r\n    },\r\n\r\n    relationSection: {\r\n        relationSectionHeader: \"Relations\",\r\n        loadAllButton: \"Load all\",\r\n        loadAllButtonTooltip: \"Loads all valid relation into the application\",\r\n        removeLoadedButton: \"Remove loaded\",\r\n        removeLoadedButtonTooltip: \"Removes all loaded relations\",\r\n        importButton: \"Import\",\r\n        importButtonTooltip: \"Adds new relations from files\",\r\n        exportButton: \"Export\",\r\n        exportButtonTooltip: \"Saves stored relations to files\",\r\n        loadButton: \"Load\",\r\n        loadButtonTooltip: \"Loads the relation into the application\",\r\n        renameButton: \"Rename\",\r\n        deleteButton: \"Delete\",\r\n        deleteButtonTooltip: \"Deletes the relation\",\r\n        revertButton: \"Revert\",\r\n        revertButtonTooltip: \"Reverts to last loaded state\"\r\n    },\r\n\r\n    expressionSection: {\r\n        expressionSectionHeader: \"Expressions\",\r\n\r\n        importButton: \"Import\",\r\n        importButtonTooltip: \"Adds new expressions from a file\",\r\n        exportButton: \"Export\",\r\n        exportButtonTooltip: \"Saves expressions to a file\",\r\n\r\n        evaluateButton: \"Evaluate\",\r\n        evaluateButtonTooltip: \"Evaluates selected RA expression\",\r\n        renameButton: \"Rename\",\r\n        deleteButton: \"Delete\",\r\n        deleteButtonTooltip: \"Deletes selected RA expression\",\r\n\r\n        expressionTextareaPlaceholder: \"Write RA expression here...\",\r\n\r\n        comment: \"Comment\"\r\n    },\r\n\r\n    resultSection: {\r\n        resultSectionHeader: \"Result\",\r\n\r\n        exportEvalTreeButton: \"Export\",\r\n        exportEvalTreeButtonTooltip: \"Saves the evaluation tree as a picture\",\r\n        evalTreeTitle: \"Evaluation tree of\",\r\n\r\n        resultRelationTitle: \"Result relation\",\r\n        intermediateRelationTitle: \"Intermediate relation\",\r\n        addButton: \"Add\",\r\n        addButtonTooltip: \"Adds the given relation to stored ones\",\r\n        exportRelationButton: \"Export\",\r\n        exportRelationButtonTooltip: \"Saves the given relation to a file\",\r\n    }\r\n}","import {LanguageDef} from \"./language\";\r\nimport {EN} from \"./en\";\r\nimport {SyntaxErrorMessages} from \"../error/raSyntaxError\";\r\nimport {SemanticErrorMessages} from \"../error/raSemanticError\";\r\n\r\n/**\r\n * Czech messages for RASemanticErrors mapped by their error codes.\r\n */\r\nconst semanticErrors: SemanticErrorMessages = {\r\n    exprParser_relationNotDefined: [\"Relace \\\"\", \"\\\" není definována. Zkontrolujte definice relací.\"],\r\n\r\n    binaryNode_commonColumns: [\"Vstupní relace pro \", \" mají společné sloupce \\\"\", \"\\\".\"],\r\n    setOperationNode_notEqualColumns: [\"Vstupní relace \\\"\", \"\\\" a \\\"\", \"\\\" pro množinové \", \" nemají stejné schéma.\"],\r\n    divisionNode_rightColumnsNotSubset:\r\n        [\"Schéma pravé vstupní relace \\\"\", \"\\\" není podmnožinou schématu levé vstupní relace \\\"\", \"\\\".\"],\r\n    divisionNode_rightColumnsNotProperSubset:\r\n        [\"Schéma pravé vstupní relace \\\"\", \"\\\" není vlastní podmnožinou schématu levé vstupní relace \\\"\",\r\n        \". V levé relaci musí existovat sloupec, který neexistuje v pravé relaci.\"],\r\n    renameNode_absentOriginalColumn: [\"Nepovolené přejmenování, sloupec \\\"\", \"\\\" neexistuje ve vstupní relaci.\"],\r\n    renameNode_changeToDuplicit: [\"Nepovolené přejmenování, nový název sloupce \\\"\", \"\\\" je duplicitní ve změněné relaci.\"],\r\n    projectionNode_absentColumn: [\"Nepovolená projekce sloupce \\\"\", \"\\\". Tento sloupec neexistuje ve vstupní relaci.\"],\r\n\r\n    referenceValue_absentColumn: [\"Sloupec \\\"\", \"\\\" neexistuje ve schématu se sloupci \", \".\"]\r\n};\r\n\r\n/**\r\n * Czech messages for RASyntaxErrors mapped by their error codes.\r\n */\r\nconst syntaxErrors: SyntaxErrorMessages = {\r\n    exprParser_emptyStringGiven: [\"Výraz nelze parsovat z prázdného řetězce.\"],\r\n    exprParser_outerJoinWhenNullNotSupported: [\"Nalezeno \", \", přestože null hodnoty jsou zakázány.\"],\r\n    exprParser_unexpectedPart: [\"Nečekaná část \\\"\", \"\\\" v RA výrazu.\"],\r\n    exprParser_bothBranchesError: [\"Všechny kombinace způsobují chybu v \\\"\", \"\\\". Považováno za projekci:\\n\",\r\n        \"\\nPovažováno za theta spojení:\\n\", \"\"],\r\n    exprParser_invalidExpression: [\"Daný výraz není korektní výraz relační algebry.\"],\r\n    exprParser_invalidParentheses: [\"Chybné uzávorkování ve výrazu.\"],\r\n    exprParser_invalidStart: [\"RA výraz nemůže začínat na \", \".\"],\r\n    exprParser_invalidEnd: [\"RA výraz nemůže končit na \", \".\"],\r\n    exprParser_relationAfterRelation: [\"Relace \\\"\", \"\\\" po relaci \\\"\", \"\\\".\"],\r\n    exprParser_relationAfterUnary: [\"Relace \\\"\", \"\\\" po unárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_relationAfterClosing: [\"Relace \\\"\", \"\\\" po uzavírací závorce.\"],\r\n    exprParser_unaryAfterBinary: [\"Unární operátor \\\"\", \"\\\" po binárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_unaryAfterOpening: [\"Unární operátor \\\"\", \"\\\" po otevírací závorce.\"],\r\n    exprParser_binaryAfterBinary: [\"Binární operátor \\\"\", \"\\\" po binárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_binaryAfterOpening: [\"Binární operátor \\\"\", \"\\\" po otevírací závorce.\"],\r\n    exprParser_openingAfterRelation: [\"Otevírací závorka po relaci \\\"\", \"\\\".\"],\r\n    exprParser_openingAfterUnary: [\"Otevírací závorka po unárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_openingAfterClosing: [\"Otevírací závorka po uzavírací závorce.\"],\r\n    exprParser_closingAfterBinary: [\"Uzavírací závorka po binárním operátoru \\\"\", \"\\\".\"],\r\n    exprParser_closingAfterOpening: [\"Uzavírací závorka po otevírací závorce.\"],\r\n\r\n    valueParser_emptyInput: [\"Jako podmínka nemůže být prázdný řetězec.\"],\r\n    valueParser_unsupportedNull: [\"Nalezena null konstanta, přestože null hodnoty jsou zakázány.\"],\r\n    valueParser_unexpectedPart: [\"Nečekaná část \\\"\", \"\\\" ve výrazu.\"],\r\n    valueParser_missingOpeningParenthesis: [\"Chybějící otevírací závorka ve výrazu.\"],\r\n    valueParser_missingClosingParenthesis: [\"Chybějící uzavírací závorka ve výrazu.\"],\r\n    valueParser_invalidExpression: [\"Daný výraz není korektní.\"],\r\n    valueParser_invalidStart: [\"Výraz nemůže začínat na \\\"\", \"\\\".\"],\r\n    valueParser_invalidEnd: [\"Výraz nemůže končit na \\\"\", \"\\\".\"],\r\n    valueParser_literalAfterLiteral: [\"Konstanta \\\"\", \"\\\" po konstantě \\\"\", \"\\\".\"],\r\n    valueParser_literalAfterReference: [\"Konstanta \\\"\", \"\\\" po referenci sloupce \\\"\", \"\\\".\"],\r\n    valueParser_literalAfterClosing: [\"Konstanta \\\"\", \"\\\" po uzavírací závorce.\"],\r\n    valueParser_referenceAfterLiteral: [\"Reference sloupce \\\"\", \"\\\" po konstantě \\\"\", \"\\\".\"],\r\n    valueParser_referenceAfterReference: [\"Reference sloupce \\\"\", \"\\\" po referenci sloupce \\\"\", \"\\\".\"],\r\n    valueParser_referenceAfterClosing: [\"Reference sloupce \\\"\", \"\\\" po uzavírací závorce.\"],\r\n    valueParser_notAfterLiteral: [\"Logická negace \\\"\", \"\\\" po konstantě \\\"\", \"\\\".\"],\r\n    valueParser_notAfterReference: [\"Logická negace \\\"\", \"\\\" po referenci sloupce \\\"\", \"\\\".\"],\r\n    valueParser_notAfterClosing: [\"Logická negace \\\"\", \"\\\" po uzavírací závorce.\"],\r\n    valueParser_binaryAfterOperator: [\"Binární operátor \\\"\", \"\\\" po binárním operátoru \\\"\", \"\\\".\"],\r\n    valueParser_binaryAfterOpening: [\"Binární operátor \\\"\", \"\\\" po otevírací závroce.\"],\r\n    valueParser_openingAfterLiteral: [\"Otevírací závorka po konstantě \\\"\", \"\\\".\"],\r\n    valueParser_openingAfterReference: [\"Otevírací závorka po referenci sloupce \\\"\", \"\\\".\"],\r\n    valueParser_openingAfterClosing: [\"Otevírací závorka po uzavírací závorce.\"],\r\n    valueParser_closingAfterOperator: [\"Uzavírací závorka po binárním operátoru \\\"\", \"\\\".\"],\r\n    valueParser_closingAfterOpening: [\"Uzavírací závorka po otevírací závroce.\"],\r\n\r\n    stringUtils_missingClosingChar: [\"Chybějící '\", \"' po úvodní '\", \"'.\"],\r\n    stringUtils_charNotFound: [\"Očekávaný znak \\\"\", \"\\\" nenalezen.\"],\r\n\r\n    renameNode_missingArrow: [\"Chybné přejmenování, použijte formát \\\"StarýNázev -> NovýNázev\\\" oddělený čárkami.\"],\r\n    renameNode_invalidNewName: [\"Chybné přejmenování na \\\"\",\r\n        \"\\\". Nový název sloupce musí obsahovat pouze písmena, čísla a podtržítka a začínat písmenem nebo podtržítkem.\"],\r\n    renameNode_keywordNewName: [\"Chybné přejmenování na \\\"\", \"\\\". Nový název nemůže být klíčové slovo.\"],\r\n    renameNode_multipleRenameOfTheColumn: [\"Vícenásobné přejmenování sloupce \\\"\", \"\\\".\"],\r\n\r\n    selectionNode_resultNotBoolean: [\"Výsledek podmínky v selekci \", \" není boolean, ale \", \".\"],\r\n    thetaJoinNode_resultNotBoolean: [\"Výsledek podmínky v theta joinu \", \" není boolean, ale \", \".\"],\r\n\r\n    comparingOperator_differentInputTypes: [\"Vstupy pro \\\"\", \"\\\" nemají stejné typy, ale \", \" a \", \".\"],\r\n    computingOperator_inputTypesNotNumbers: [\"Vstupy pro \\\"\", \"\\\" nejsou čísla, ale \", \" a \", \".\"],\r\n    logicalOperator_leftInputNotBoolean: [\"Levý vstup logického operátoru \\\"\", \"\\\" není boolean, ale \", \".\"],\r\n    logicalOperator_rightInputNotBoolean: [\"Pravý vstup logického operátoru \\\"\", \"\\\" není boolean, ale \", \".\"],\r\n};\r\n\r\nexport const CS: LanguageDef = {\r\n    abbr: \"CS\",\r\n\r\n    relationErrors: {\r\n        emptyColumn: \"Název sloupce nemůže být prázdný\",\r\n        duplicitColumn: \"Duplicitní název sloupce\",\r\n        keywordColumn: \"Název sloupce nemůže být klíčové slovo\",\r\n        invalidColumn: \"Nepovolené znaky v názvu sloupce\",\r\n\r\n        unsupportedNull: \"Null hodonoty nejsou podporovány\",\r\n        invalidNumber: \"Daný řetězec není číslo\",\r\n        invalidBoolean: \"Daný řetězec není boolean\",\r\n    },\r\n\r\n    codeErrors: EN.codeErrors,\r\n\r\n    semanticErrors: semanticErrors,\r\n    semanticError: \"Sémantická chyba: \",\r\n\r\n    syntaxErrors: syntaxErrors,\r\n    syntaxError: \"Syntaktická chyba: \",\r\n\r\n    userMessages: {\r\n        loadedRelationsTotalNo: \"Nyní nejsou v aplikaci nahrané žádné relace.\",\r\n        loadedRelationsTotalSome: \" relací celkově nahráno v aplikaci: \",\r\n        loadRelationNew: \"Relace nahrána do aplikace.\",\r\n        loadAllRelationsNew: [/* number of loaded */ \" relací nahráno do aplikace, \", /* number of skipped */ \" přeskočeno kvůli chybám.\"],\r\n        deleteLoadedRelations: \" relací odebráno.\",\r\n\r\n        relationsExportOK: \"Relace staženy.\",\r\n        relationsExportErr: \"Stahování relací selhalo: \",\r\n        relationsImport: [\" relací nahráno, \", \" souborů přeskočeno.\"],\r\n\r\n        expressionsExportOK: \"Výrazy staženy do souboru.\",\r\n        expressionsExportErr: \"Stahování výrazů selhalo: \",\r\n        expressionsImport: [/* number of expressions */ \" výrazů nahráno z \", /* number of files */ \" souborů (\",\r\n            /* number of skipped expressions */ \" výrazů přeskočeno, \", /* number of skipped files */ \" souborů přeskočeno).\"]\r\n    },\r\n\r\n    operations: {\r\n        selection: \"Selekce\",\r\n        projection: \"Projekce\",\r\n        rename: \"Přejmenování\",\r\n        union: \"Sjednocení\",\r\n        intersection: \"Průnik\",\r\n        difference: \"Rozdíl\",\r\n        naturalJoin: \"Přirozené spojení\",\r\n        cartesianProduct: \"Kartézský součin\",\r\n        leftSemiJoin: \"Levé vnitřní spojení\",\r\n        rightSemiJoin: \"Pravé vnitřní spojení\",\r\n        leftAntijoin: \"Levý antijoin\",\r\n        rightAntijoin: \"Pravý antijoin\",\r\n        thetaJoin: \"Theta spojení\",\r\n        leftThetaSemiJoin: \"Levé theta spojení\",\r\n        rightThetaSemiJoin: \"Pravé theta spojení\",\r\n        fullOuterJoin: \"Plné vnější spojení\",\r\n        leftOuterJoin: \"Levé vnější spojení\",\r\n        rightOuterJoin: \"Pravé vnější spojení\",\r\n        division: \"Dělení\"\r\n    },\r\n\r\n    managementSection: {\r\n        batchButton: \"Batch\",\r\n        loadButton: \"Nahrát\",\r\n        saveButton: \"Uložit\",\r\n        samplesButton: \"Ukázky\",\r\n        samplesMenuTitle: \"Připravené vzorové projekty\",\r\n        settingsButton: \"Nastavení\",\r\n        settingsNullValues: \"Null hodnoty\",\r\n        settingsNullValuesAllowed: \"povoleny\",\r\n        settingsNullValuesForbidden: \"zakázány\",\r\n        settingsCSVSeparator: \"CSV oddělovač\",\r\n        settingsCSVSeparatorSemicolon: \"středník\",\r\n        settingsCSVSeparatorComma: \"čárka\",\r\n        settingsTheme: \"Režim\",\r\n        settingsThemeLight: \"světlý\",\r\n        settingsThemeDark: \"tmavý\",\r\n        settingsLanguage: \"Jazyk\",\r\n        aboutButton: \"O aplikaci\"\r\n    },\r\n\r\n    relationSection: {\r\n        relationSectionHeader: \"Relace\",\r\n        loadAllButton: \"Nahrát všechny\",\r\n        loadAllButtonTooltip: \"Nahraje všechny bezchybné relace do aplikace\",\r\n        removeLoadedButton: \"Odebrat nahrané\",\r\n        removeLoadedButtonTooltip: \"Odebere všechny nahrané relace z aplikace\",\r\n        importButton: \"Import\",\r\n        importButtonTooltip: \"Nahraje nové relace ze souborů\",\r\n        exportButton: \"Export\",\r\n        exportButtonTooltip: \"Stáhne editované relace do souborů\",\r\n        loadButton: \"Nahrát\",\r\n        loadButtonTooltip: \"Nahraje relaci do aplikace\",\r\n        renameButton: \"Přejmenovat\",\r\n        deleteButton: \"Odstranit\",\r\n        deleteButtonTooltip: \"Odstraní vybranou relaci\",\r\n        revertButton: \"Obnovit\",\r\n        revertButtonTooltip: \"Obnoví relaci do posledního nahraného stavu\"\r\n    },\r\n\r\n    expressionSection: {\r\n        expressionSectionHeader: \"Výrazy\",\r\n\r\n        importButton: \"Import\",\r\n        importButtonTooltip: \"Nahraje nové výrazy ze souboru\",\r\n        exportButton: \"Export\",\r\n        exportButtonTooltip: \"Stáhne výrazy do souboru\",\r\n\r\n        evaluateButton: \"Vyhodnotit\",\r\n        evaluateButtonTooltip: \"Vyhodnotí vybraný relační výraz\",\r\n        renameButton: \"Přejmenovat\",\r\n        deleteButton: \"Odstranit\",\r\n        deleteButtonTooltip: \"Odstraní vybraný relační výraz\",\r\n\r\n        expressionTextareaPlaceholder: \"Zde napište svůj relační výraz...\",\r\n\r\n        comment: \"Komentář\"\r\n    },\r\n\r\n    resultSection: {\r\n        resultSectionHeader: \"Výsledek\",\r\n\r\n        exportEvalTreeButton: \"Export\",\r\n        exportEvalTreeButtonTooltip: \"Uloží evaluační strom jako obrázek\",\r\n        evalTreeTitle: \"Evaluační strom pro\",\r\n\r\n        resultRelationTitle: \"Výsledná relace\",\r\n        intermediateRelationTitle: \"Mezivýsledná relace\",\r\n        addButton: \"Přidat\",\r\n        addButtonTooltip: \"Přidá zvolenou relaci mezi editované\",\r\n        exportRelationButton: \"Export\",\r\n        exportRelationButtonTooltip: \"Stáhne zvolenou relaci do souboru\",\r\n    }\r\n}","import ErrorWithTextRange from \"./errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Codes for RASyntaxErrors.\r\n * The description is a string array - between its members are inserted error parameters (names of invalid relations: string[],\r\n * invalid input parts, etc.). See english language definition for expected structure of each error description.\r\n */\r\nexport interface SyntaxErrorMessages {\r\n    // expects 1 part\r\n    exprParser_emptyStringGiven: string[],\r\n    // expects 2 parts\r\n    exprParser_outerJoinWhenNullNotSupported: string[],\r\n    // expects 2 parts\r\n    exprParser_unexpectedPart: string[],\r\n    // expects 4 parts\r\n    exprParser_bothBranchesError: string[],\r\n    // expects 1 part\r\n    exprParser_invalidExpression: string[],\r\n    // expects 1 part\r\n    exprParser_invalidParentheses: string[],\r\n    // expects 2 parts\r\n    exprParser_invalidStart: string[],\r\n    // expects 2 parts\r\n    exprParser_invalidEnd: string[],\r\n    // expects 3 parts\r\n    exprParser_relationAfterRelation: string[],\r\n    // expects 3 parts\r\n    exprParser_relationAfterUnary: string[],\r\n    // expects 2 parts\r\n    exprParser_relationAfterClosing: string[],\r\n    // expects 3 parts\r\n    exprParser_unaryAfterBinary: string[],\r\n    // expects 2 parts\r\n    exprParser_unaryAfterOpening: string[],\r\n    // expects 3 parts\r\n    exprParser_binaryAfterBinary: string[],\r\n    // expects 2 parts\r\n    exprParser_binaryAfterOpening: string[],\r\n    // expects 2 parts\r\n    exprParser_openingAfterRelation: string[],\r\n    // expects 2 parts\r\n    exprParser_openingAfterUnary: string[],\r\n    // expects 1 part\r\n    exprParser_openingAfterClosing: string[],\r\n    // expects 2 parts\r\n    exprParser_closingAfterBinary: string[],\r\n    // expects 1 part\r\n    exprParser_closingAfterOpening: string[],\r\n\r\n    // expects 1 part\r\n    valueParser_emptyInput: string[],\r\n    // expects 1 part\r\n    valueParser_unsupportedNull: string[],\r\n    // expects 2 parts\r\n    valueParser_unexpectedPart: string[],\r\n    // expects 1 part\r\n    valueParser_missingOpeningParenthesis: string[],\r\n    // expects 1 part\r\n    valueParser_missingClosingParenthesis: string[],\r\n    // expects 1 part\r\n    valueParser_invalidExpression: string[],\r\n    // expects 2 parts\r\n    valueParser_invalidStart: string[],\r\n    // expects 2 parts\r\n    valueParser_invalidEnd: string[],\r\n    // expects 3 parts\r\n    valueParser_literalAfterLiteral: string[],\r\n    // expects 3 parts\r\n    valueParser_literalAfterReference: string[],\r\n    // expects 2 parts\r\n    valueParser_literalAfterClosing: string[],\r\n    // expects 3 parts\r\n    valueParser_referenceAfterLiteral: string[],\r\n    // expects 3 parts\r\n    valueParser_referenceAfterReference: string[],\r\n    // expects 2 parts\r\n    valueParser_referenceAfterClosing: string[],\r\n    // expects 3 parts\r\n    valueParser_notAfterLiteral: string[],\r\n    // expects 3 parts\r\n    valueParser_notAfterReference: string[],\r\n    // expects 2 parts\r\n    valueParser_notAfterClosing: string[],\r\n    // expects 3 parts\r\n    valueParser_binaryAfterOperator: string[],\r\n    // expects 2 parts\r\n    valueParser_binaryAfterOpening: string[],\r\n    // expects 2 parts\r\n    valueParser_openingAfterLiteral: string[],\r\n    // expects 2 parts\r\n    valueParser_openingAfterReference: string[],\r\n    // expects 1 part\r\n    valueParser_openingAfterClosing: string[],\r\n    // expects 2 parts\r\n    valueParser_closingAfterOperator: string[],\r\n    // expects 1 part\r\n    valueParser_closingAfterOpening: string[],\r\n\r\n    // expects 3 parts\r\n    stringUtils_missingClosingChar: string[],\r\n    // expects 2 parts\r\n    stringUtils_charNotFound: string[],\r\n\r\n    // expects 1 part\r\n    renameNode_missingArrow: string[],\r\n    // expects 2 parts\r\n    renameNode_invalidNewName: string[],\r\n    // expects 2 parts\r\n    renameNode_keywordNewName: string[],\r\n    // expects 2 parts\r\n    renameNode_multipleRenameOfTheColumn: string[],\r\n\r\n    // expects 3 parts\r\n    selectionNode_resultNotBoolean: string[],\r\n    // expects 3 parts\r\n    thetaJoinNode_resultNotBoolean: string[],\r\n\r\n    // expects 4 parts\r\n    comparingOperator_differentInputTypes: string[],\r\n    // expects 4 parts\r\n    computingOperator_inputTypesNotNumbers: string[],\r\n    // expects 3 parts\r\n    logicalOperator_leftInputNotBoolean: string[],\r\n    // expects 3 parts\r\n    logicalOperator_rightInputNotBoolean: string[]\r\n}\r\n\r\n/**\r\n * Syntax error in an expression structure.\r\n */\r\nexport default class RASyntaxError extends ErrorWithTextRange {\r\n    /**\r\n     * @param msg Adds \"Syntax error: \" before given message\r\n     * @param range optional text range of the error\r\n     */\r\n    constructor(msg: string, range: {start: number, end: number} | undefined) {\r\n        super(language().syntaxError + msg, range);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, RASyntaxError);\r\n        }\r\n        this.name = 'RASyntaxError';\r\n    }\r\n}","import ErrorWithTextRange from \"./errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Codes for RASemanticErrors.\r\n * The description is a string array - between its members are inserted error parameters (names of invalid relations,\r\n * invalid input parts, etc.). See english language definition for expected structure of each error description.\r\n */\r\nexport interface SemanticErrorMessages {\r\n    // expects 2 parts\r\n    exprParser_relationNotDefined: string[],\r\n\r\n    // expects 3 parts\r\n    binaryNode_commonColumns: string[],\r\n    // expects 4 parts\r\n    setOperationNode_notEqualColumns: string[],\r\n    // expects 3 parts\r\n    divisionNode_rightColumnsNotSubset: string[],\r\n    // expects 3 parts\r\n    divisionNode_rightColumnsNotProperSubset: string[],\r\n    // expects 2 parts\r\n    renameNode_absentOriginalColumn: string[],\r\n    // expects 2 parts\r\n    renameNode_changeToDuplicit: string[],\r\n    // expects 2 parts\r\n    projectionNode_absentColumn: string[],\r\n\r\n    // expects 3 parts\r\n    referenceValue_absentColumn: string[]\r\n}\r\n\r\n/**\r\n * Semantic error in an expression structure.\r\n */\r\nexport default class RASemanticError extends ErrorWithTextRange {\r\n    /**\r\n     * @param msg Adds \"Semantic error: \" before given message\r\n     * @param range optional text range of the error\r\n     */\r\n    constructor(msg: string, range: {start: number, end: number} | undefined) {\r\n        super(language().semanticError + msg, range);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, RASemanticError);\r\n        }\r\n        this.name = 'RASemanticError';\r\n    }\r\n}","/**\r\n * Computes width (average on sample of characters) and its height of the given font with given size in pixels.\r\n *\r\n * @param fontFamily\r\n * @param fontSize\r\n */\r\nexport function computeFontSizeInPx(fontFamily: string, fontSize: string): {fontWidth: number, fontHeight: number} {\r\n    const text: string = \"0123456789qwertyuiopasdfghjkllzxcvbnmQWERTYUIOOPASDFGHJKLLZXCVBNM!@#$%^&*()_+[];',./\";\r\n    const div = document.createElement(\"div\");\r\n    div.setAttribute('style', `font-family: ${fontFamily}; font-size: ${fontSize}; position: absolute; white-space: nowrap;`);\r\n    div.innerText = text;\r\n    document.documentElement.appendChild(div);\r\n    const divWidth: number = div.clientWidth;\r\n    const divHeight: number = div.clientHeight;\r\n    div.remove();\r\n    return { fontWidth: divWidth / text.length, fontHeight: divHeight };\r\n}","/**\r\n * Returns start index of the word before given index in the given string.\r\n *\r\n * @param str\r\n * @param index\r\n */\r\nexport function getStartOfWordBeforeIndex(str: string, index: number): number {\r\n    const prefixText: string = str.slice(0, index);\r\n    let i: number = prefixText.length - 1;\r\n    while (true) {\r\n        // if non-name-character is reached\r\n        if (!prefixText.charAt(i).match(/\\w/)) {\r\n            ++i;\r\n            break;\r\n        }\r\n        if (i === 0) {\r\n            break;\r\n        }\r\n        --i;\r\n    }\r\n    return i;\r\n}\r\n\r\n/**\r\n * Returns sorted given array of whispers with respect to given last word before cursor.\r\n * Matched word parts in the whispers are highlighted by CSS span. Not-matched words are made grey.\r\n */\r\nexport function sortWhispers(whispers: string[], wordBeforeCursor: string): string[] {\r\n    // values for sorting whispers\r\n    const startsWithWord: number = 2;\r\n    const containsWord: number = 1;\r\n    // creates help array with whisper likelihoods and highlighted matched parts\r\n    const helpArray: {whisper: string, likelihood: number}[] = whispers.map(whisper => {\r\n        let likelihood = 0;\r\n        const wordStart = whisper.toLowerCase().indexOf(wordBeforeCursor.toLowerCase());\r\n        if (wordStart > -1) {\r\n            likelihood += wordStart === 0 ? startsWithWord : containsWord;\r\n            const wordEnd = wordStart + wordBeforeCursor.length;\r\n            whisper = whisper.slice(0, wordStart) + \"<span class='whisper-matched-word'>\" +\r\n                whisper.slice(wordStart, wordEnd) + \"</span>\" + whisper.slice(wordEnd);\r\n        }\r\n        if (likelihood === 0) {\r\n            whisper = \"<span class='whisper-rejected-word'>\" + whisper + \"</span>\"\r\n        }\r\n        return {whisper, likelihood};\r\n    });\r\n    if (wordBeforeCursor !== \"\") {\r\n        helpArray.sort((x, y) => y.likelihood - x.likelihood);\r\n    }\r\n    return helpArray.map(help => help.whisper);\r\n}","import React from \"react\";\r\nimport './css/xTextArea.css';\r\nimport {mod} from \"../utils/math\";\r\nimport {computeFontSizeInPx} from \"../utils/fontUtils\";\r\nimport {getStartOfWordBeforeIndex} from \"../utils/whisperUtils\";\r\n\r\ninterface XTextAreaProps {\r\n    // id of the component\r\n    id: string;\r\n    // current text content of the textarea\r\n    text: string;\r\n    // text to be shown as textarea placeholder\r\n    placeholder: string;\r\n    // error messages and ranges to be highlighted in text area\r\n    errors: {start: number, end: number, msg: string}[];\r\n    // strings whispered to the user to be added at the current position\r\n    whispers: string[];\r\n    // handler of text change\r\n    onChange: (text: string, cursorIndex: number) => void;\r\n    // handler of input with Ctrl key\r\n    onCtrlInput: (ev: KeyboardEvent) => void;\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean;\r\n}\r\n\r\ninterface XTextAreaState {}\r\n\r\n/**\r\n * HTMLTextAreaElement extended for painting number lines, inserting strings given from parent and whispering.\r\n */\r\ntype ExtendedHTMLTextArea = HTMLTextAreaElement & {\r\n    /**\r\n     * (Re)paints line numbers next to textarea.\r\n     *\r\n     * @param darkTheme style to be applied to numbers\r\n     */\r\n    paintLineNumbers: (darkTheme: boolean) => void,\r\n    // reference to canvas element used to paint line numbers\r\n    canvasLines: HTMLCanvasElement,\r\n    // true when the mouse button is clicked down\r\n    mouseIsDown: boolean,\r\n\r\n    /**\r\n     * Updates textarea content to the given value. Updates number of lines.\r\n     */\r\n    update: (value: string, darkTheme: boolean) => void,\r\n    // number of lines in the textarea\r\n    linesCount: number,\r\n\r\n    /**\r\n     * Whispers given array of strings to the user at the current cursor position.\r\n     *\r\n     * @param toWhisper\r\n     */\r\n    createWhisper: (whispers: string[]) => void,\r\n    /**\r\n     * Moves the WhisperDiv to be located next to the current cursor position.\r\n     * The WhisperDiv is moved only if the whisperDiv.isShown is true.\r\n     */\r\n    moveWhisper: () => void,\r\n    /**\r\n     * Hides the WhisperDiv (whisperDiv.isShown is set to false).\r\n     */\r\n    hideWhisper: () => void,\r\n    /**\r\n     * Inserts current selected whisper.\r\n     *\r\n     * @param onChange callback to the parent after text change\r\n     */\r\n    insertCurrentSelectedWhisper: (onChange: (text: string, cursorIndex: number) => void) => void,\r\n    // true when the whisper should not be shown automatically (e.g., after pressing Enter)\r\n    notAutoShowWhisper: boolean,\r\n    // reference to whisper div\r\n    whisperDiv: WhisperDiv,\r\n\r\n    /**\r\n     * Creates error div elements for given ranges.\r\n     */\r\n    updateErrors: (ranges: {start: number, end: number, msg: string}[]) => void,\r\n    /**\r\n     * Moves error div elements to current position.\r\n     */\r\n    moveErrors: () => void,\r\n    // div elements for highlighting errors\r\n    errorDivs: ErrorDiv[]\r\n};\r\n\r\n/**\r\n * HTMLDivElement extended by functions for easy whispering.\r\n */\r\ntype WhisperDiv = HTMLDivElement & {\r\n    // true when the whisper should be shown\r\n    isShown: boolean,\r\n    // index of the selected whisper\r\n    selectedIndex: number,\r\n    /**\r\n     * Updates selected whisper by given difference. Removes highlights from previous highlighted whisper and\r\n     * highlights the new selected. The new index is modulo actual whisper count. The function does nothing, when\r\n     * there no whispers at the moment.\r\n     *\r\n     * @param indexDiff\r\n     */\r\n    changeSelected: (indexDiff: number) => void,\r\n    /**\r\n     * Updates selected whisper to given index. Removes highlights from previous highlighted whisper and\r\n     * highlights the new selected. The new index is modulo actual whisper count. The function does nothing, when\r\n     * there no whispers at the moment.\r\n     *\r\n     * @param newIndex\r\n     */\r\n    setSelected: (newIndex: number) => void,\r\n    /**\r\n     * Returns current selected whisper or undefined, when no whisper is selected.\r\n     */\r\n    getSelectedWhisper: () => string | undefined\r\n};\r\n\r\ntype ErrorDiv = HTMLDivElement & {\r\n    startLine: number,\r\n    startColumn: number,\r\n    rangeLength: number,\r\n    messageSpan: HTMLSpanElement\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\n\r\nconst fontSize: string = cssConstants.getPropertyValue('--x-textarea-font-size');\r\nconst fontFamily: string = cssConstants.getPropertyValue('--x-textarea-font-family');\r\nconst {fontWidth} = computeFontSizeInPx(fontFamily, fontSize);\r\nconst lineHeight: number = Number(cssConstants.getPropertyValue('--x-textarea-line-height'));\r\nconst numsBackgroundLight: string = cssConstants.getPropertyValue('--light-color-b');\r\nconst numsBackgroundDark: string = cssConstants.getPropertyValue('--dark-color-b');\r\nconst numsColorLight: string = cssConstants.getPropertyValue('--text-color-light');\r\nconst numsColorDark: string = cssConstants.getPropertyValue('--text-color-dark');\r\nconst canvasWidth: number = 24;\r\n\r\n/**\r\n * TextArea extended by line numbers and text highlighting. The component is maintained by JavaScript HTML functions,\r\n * not by React.\r\n */\r\nexport class XTextArea extends React.Component<XTextAreaProps, XTextAreaState> {\r\n    // @ts-ignore - always set before usage in componentDidMount\r\n    private textarea: ExtendedHTMLTextArea;\r\n\r\n    /**\r\n     * Returns current text area selection start and end.\r\n     */\r\n    public getSelection(): {start: number, end: number} {\r\n        return {start: this.textarea.selectionStart, end: this.textarea.selectionEnd};\r\n    }\r\n\r\n    /**\r\n     * Sets text area selection start and end. If end is not given, start value is used as end value as well.\r\n     *\r\n     * @param start\r\n     * @param end\r\n     */\r\n    public setSelection(start: number, end?: number): void {\r\n        this.textarea.setSelectionRange(start, end ? end : start);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the textarea has focus.\r\n     */\r\n    public isFocused(): boolean {\r\n        return document.activeElement !== null && document.activeElement.id === this.props.id + '-ta';\r\n    }\r\n\r\n    /**\r\n     * The text area gains focus in the window.\r\n     */\r\n    public focus(): void {\r\n        this.textarea.focus();\r\n    }\r\n\r\n    /**\r\n     * The component is build by JavaScript HTML functions after mount of the empty div in render function.\r\n     */\r\n    componentDidMount() {\r\n        const props: Readonly<XTextAreaProps> = this.props;\r\n        // @ts-ignore - gets parent div\r\n        const div: HTMLDivElement = document.getElementById(props.id);\r\n\r\n        // LAYOUT (table with 1 row and 2 columns)\r\n        const table = document.createElement('table');\r\n        table.setAttribute('cellspacing','0');\r\n        table.setAttribute('cellpadding','0');\r\n        table.classList.add('x-textarea-table');\r\n        const tr = document.createElement('tr');\r\n        const td1 = document.createElement('td');\r\n        td1.setAttribute('id', props.id + '-td1');\r\n        td1.classList.add('x-textarea-table-td1');\r\n        const td2 = document.createElement('td');\r\n        td2.classList.add('x-textarea-table-td2');\r\n        tr.appendChild(td1);\r\n        tr.appendChild(td2);\r\n        table.appendChild(tr);\r\n\r\n        // TEXTAREA\r\n        // @ts-ignore - extended later in componentDidMount\r\n        const ta: ExtendedHTMLTextArea = document.createElement('textarea');\r\n        ta.setAttribute('id', props.id + '-ta');\r\n        ta.setAttribute('spellcheck', 'false');\r\n        ta.mouseIsDown = false;\r\n        ta.setAttribute('placeholder', this.props.placeholder);\r\n        ta.classList.add('x-textarea', 'scrollbar-container');\r\n        ta.value = props.text;\r\n\r\n        // TEXTAREA NUMBERS (Canvas)\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = canvasWidth + 4;    // must not set width & height in css !!!\r\n        canvas.classList.add('x-textarea-canvas');\r\n        ta.canvasLines = canvas;\r\n        td1.appendChild(canvas);\r\n        td2.appendChild(ta);\r\n        div.appendChild(table);\r\n\r\n        // TEXTAREA WHISPER DIV\r\n        // @ts-ignore - extended later in componentDidMount\r\n        const whisperDiv: WhisperDiv = document.createElement('div');\r\n        whisperDiv.classList.add('whisper-div');\r\n        whisperDiv.isShown = false;\r\n        whisperDiv.selectedIndex = -1;\r\n        whisperDiv.changeSelected = function (indexDiff: number) {\r\n            this.setSelected(this.selectedIndex + indexDiff);\r\n        }\r\n        whisperDiv.setSelected = function (newIndex: number) {\r\n            if (this.childElementCount > 0) {\r\n                // removes selected highlight from previous selected whisper (if it is valid)\r\n                if (this.selectedIndex > -1 && this.selectedIndex < this.childElementCount) {\r\n                    this.children[this.selectedIndex].classList.remove(\"selected-whisper\");\r\n                }\r\n                // updates the index modulo child count\r\n                this.selectedIndex = mod(newIndex, this.childElementCount);\r\n                // adds selected highlight\r\n                this.children[this.selectedIndex].classList.add(\"selected-whisper\");\r\n            }\r\n        }\r\n        whisperDiv.getSelectedWhisper = function (): string | undefined {\r\n            if (this.selectedIndex > -1 && this.childElementCount > 0) {\r\n                // @ts-ignore\r\n                return this.children[this.selectedIndex].innerText;\r\n            }\r\n            return undefined;\r\n        }\r\n        ta.whisperDiv = whisperDiv;\r\n        td2.appendChild(whisperDiv);\r\n\r\n        // Line numbers rendering inspired by: https://www.w3schools.com/code/tryit.asp?filename=G68VMFWS12UH,\r\n        // Nikola Bozovic, nigerija@gmail.com\r\n        ta.paintLineNumbers = function(darkTheme: boolean): void {\r\n            try {\r\n                const canvas = this.canvasLines;\r\n                if (canvas.height !== this.clientHeight) {\r\n                    canvas.height = this.clientHeight; // on resize\r\n                }\r\n                // @ts-ignore\r\n                const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\r\n                ctx.fillStyle = darkTheme ? numsBackgroundDark : numsBackgroundLight;\r\n                ctx.fillRect(0, 0, canvasWidth + 2, this.scrollHeight + 1);\r\n                ctx.fillStyle = darkTheme ? numsColorDark : numsColorLight;\r\n                ctx.font = fontSize + \" \" + fontFamily;\r\n                for (let i = 0; i < this.linesCount; i++) {\r\n                    const text = \"\" + (i + 1);  // line number\r\n                    ctx.fillText(text,canvasWidth - (text.length * 8), 19 + (i * lineHeight));\r\n                }\r\n            }\r\n            catch(e) {\r\n                console.log('XTextArea paintLineNumbers error: ' + e);\r\n            }\r\n        };\r\n\r\n        ta.update = function (value: string, darkTheme: boolean) {\r\n            this.value = value;\r\n            // computes lines count\r\n            let lines: number = 1;\r\n            for (let i = 0; i < value.length; ++i) {\r\n                if (value.charAt(i) === \"\\n\") {\r\n                    ++lines;\r\n                }\r\n            }\r\n            this.linesCount = lines;\r\n            // set height to fit all lines\r\n            this.style.height = (lines * lineHeight + 8) + \"px\";\r\n            // if the horizontal scrollbar is visible, fits it into the height\r\n            if (this.scrollHeight > this.clientHeight) {\r\n                this.style.height = (this.scrollHeight + lineHeight + 10) + \"px\";\r\n            }\r\n            this.paintLineNumbers(darkTheme);\r\n        }\r\n\r\n        ta.createWhisper = function (whispers: string[]): void {\r\n            if (whispers.length === 0) {\r\n                this.hideWhisper();\r\n            }\r\n            else {\r\n                this.whisperDiv.innerHTML = \"\";\r\n                whispers.forEach((whisper, i) => {\r\n                    const div = document.createElement(\"div\");\r\n                    div.innerHTML = whisper;\r\n                    div.onclick = event => {\r\n                        this.focus();\r\n                        this.whisperDiv.setSelected(i);\r\n                        event.stopPropagation();\r\n                    };\r\n                    div.ondblclick = event => {\r\n                        this.focus();\r\n                        this.insertCurrentSelectedWhisper(props.onChange);\r\n                        this.notAutoShowWhisper = true;\r\n                        event.stopPropagation();\r\n                    };\r\n                    this.whisperDiv.appendChild(div);\r\n                });\r\n                // selects the first whisper after change\r\n                this.whisperDiv.setSelected(0);\r\n                // needs to be set to true before moveWhisper call\r\n                this.whisperDiv.isShown = true;\r\n                // sets the div position\r\n                this.moveWhisper();\r\n            }\r\n        }\r\n\r\n        ta.moveWhisper = function () {\r\n            // updates only if the whisper is shown\r\n            if (this.whisperDiv.isShown) {\r\n                // finds cursor position in the whole string\r\n                const cursorLineAndColumn = getPositionLineAndColumn(this.value, this.selectionEnd);\r\n                // computes position of the bottom end of the cursor relative to the text\r\n                const cursorDistanceFromTATotalTop: number = (cursorLineAndColumn.line + 1) * lineHeight;\r\n                const cursorDistanceFromTATotalLeft: number = cursorLineAndColumn.column * fontWidth;\r\n                const yPos: number = cursorDistanceFromTATotalTop - this.scrollTop;\r\n                const xPos: number = cursorDistanceFromTATotalLeft - this.scrollLeft + 4;\r\n                // shows the div at computed position if the cursor is visible\r\n                if (0 <= yPos && yPos < this.clientHeight && 0 <= xPos && xPos < this.clientWidth) {\r\n                    // if the div is in the upper part of the screen, shows it under the cursor\r\n                    if (this.getBoundingClientRect().y + yPos <= window.innerHeight / 2) {\r\n                        this.whisperDiv.setAttribute('style', `display: block; top: ${yPos + 4}px; left: ${xPos}px;`);\r\n                    }\r\n                    // if the div is in the lower part of the screen, shows it above the cursor\r\n                    else {\r\n                        this.whisperDiv.setAttribute('style',\r\n                            `display: block; bottom: ${this.getBoundingClientRect().height - yPos + lineHeight}px; left: ${xPos}px;`);\r\n                    }\r\n                }\r\n                // hides the div if the cursor is not visible (but DOES NOT SET whisperDiv.isShown to false to re-appear it again)\r\n                else {\r\n                    this.whisperDiv.setAttribute('style', `display: none;`);\r\n                }\r\n            }\r\n        }\r\n\r\n        ta.hideWhisper = function () {\r\n            //whisperDiv.innerHTML = '';\r\n            this.whisperDiv.setAttribute('style', 'display: none;');\r\n            this.whisperDiv.isShown = false;\r\n        }\r\n\r\n        ta.insertCurrentSelectedWhisper = function (onChange: (text: string, cursorIndex: number) => void) {\r\n            const currWhisper: string | undefined = this.whisperDiv.getSelectedWhisper();\r\n            if (currWhisper !== undefined) {\r\n                const i: number = getStartOfWordBeforeIndex(this.value, this.selectionEnd);\r\n                const beforeAdd: string = this.value.slice(0, i);\r\n                const afterAdd: string = this.value.slice(this.selectionEnd);\r\n                const newCursorPos: number = i + currWhisper.length;\r\n                onChange(beforeAdd + currWhisper + afterAdd, newCursorPos);\r\n                this.setSelectionRange(newCursorPos, newCursorPos);\r\n                this.hideWhisper();\r\n            }\r\n        }\r\n\r\n        ta.notAutoShowWhisper = false;\r\n\r\n        // TEXTAREA ERROR RANGE HIGHLIGHTS\r\n        ta.errorDivs = [];\r\n\r\n        ta.moveErrors = function () {\r\n            this.errorDivs.forEach(highlight => {\r\n                // computes position of the highlight relative to the text\r\n                const yPos: number = (highlight.startLine + 1) * lineHeight + 1 - this.scrollTop;\r\n                // shows the div at computed position if the line is visible\r\n                if (1 < yPos && yPos < this.clientHeight) {\r\n                    let width: number = highlight.rangeLength * fontWidth;\r\n                    let xPos: number = highlight.startColumn * fontWidth + 7 - this.scrollLeft;\r\n                    // if the whole highlight is out of the width, does not display it\r\n                    if (xPos > this.clientWidth || xPos + width < 3) {\r\n                        highlight.setAttribute('style', `display: none;`);\r\n                    }\r\n                    else {\r\n                        // updates position of highlights starting before first visible column\r\n                        if (xPos < 3) {\r\n                            width += xPos - 3;\r\n                            xPos = 3;\r\n                        }\r\n                        // updates width of highlights ending after last visible column\r\n                        if (xPos + width > this.clientWidth) {\r\n                            width = this.clientWidth - xPos;\r\n                        }\r\n                        // updates the position of message span when the highlight is on the right side of the screen\r\n                        if (this.getBoundingClientRect().x + xPos >= window.innerWidth / 2) {\r\n                            highlight.messageSpan.setAttribute('style', `right: 50%; left: unset;`);\r\n                        }\r\n                        highlight.setAttribute('style', `display: block; top: ${yPos}px; left: ${xPos}px; width: ${width}px`);\r\n                    }\r\n                }\r\n                // hides the div if the line is not visible\r\n                else {\r\n                    highlight.setAttribute('style', `display: none;`);\r\n                }\r\n            });\r\n        }\r\n\r\n        ta.updateErrors = function (ranges: {start: number, end: number, msg: string}[]) {\r\n            // removes old highlight divs\r\n            this.errorDivs.forEach(highlight => {\r\n                highlight.remove();\r\n            });\r\n            this.errorDivs = [];\r\n\r\n            // appends the highlight div as textarea child and adds it to highlights array\r\n            const pushHighlight = (highlight: ErrorDiv) => {\r\n                // @ts-ignore - adds it to the parent element\r\n                this.parentElement.appendChild(highlight);\r\n                this.errorDivs.push(highlight);\r\n            }\r\n\r\n            ranges.forEach(range => {\r\n                // finds highlight start and end lines and columns\r\n                const start = getPositionLineAndColumn(this.value, range.start);\r\n                const end = getPositionLineAndColumn(this.value, range.end);\r\n                // error on one line only\r\n                if (start.line === end.line) {\r\n                    pushHighlight(createHighlightDiv(start.line, start.column, end.column - start.column,\r\n                        range.msg, this));\r\n                }\r\n                // error on multiple lines\r\n                else {\r\n                    // pushes first line part - from error start to line end\r\n                    pushHighlight(createHighlightDiv(start.line, start.column,\r\n                        getLineLength(this.value, start.line) - start.column, range.msg, this));\r\n                    // pushes middle lines\r\n                    for (let line = start.line + 1; line < end.line; ++line) {\r\n                        pushHighlight(createHighlightDiv(line, 0, getLineLength(this.value, line),\r\n                            range.msg, this));\r\n                    }\r\n                    // pushes last line part - from line start to error end\r\n                    pushHighlight(createHighlightDiv(end.line, 0, end.column, range.msg, this));\r\n                }\r\n            });\r\n\r\n            // moves highlight to current positions\r\n            this.moveErrors();\r\n        }\r\n\r\n        // handles whisper div position when scrolling on page\r\n        window.addEventListener('scroll', () => ta.moveWhisper());\r\n        window.addEventListener('resize', () => {\r\n            ta.moveWhisper();\r\n            ta.moveErrors();\r\n        });\r\n        window.addEventListener('click', () => ta.hideWhisper());\r\n        ta.onscroll     = () => {\r\n            ta.paintLineNumbers(this.props.darkTheme);\r\n            ta.moveWhisper();\r\n            ta.moveErrors();\r\n        };\r\n        //ta.addEventListener(\"focusout\", () => ta.hideWhisper());\r\n        ta.onmousedown  = event => {\r\n            ta.mouseIsDown = true;\r\n            event.stopPropagation();\r\n        }\r\n        ta.onmouseup    = () => {\r\n            ta.mouseIsDown = false;\r\n            ta.paintLineNumbers(this.props.darkTheme);\r\n        };\r\n        ta.onmousemove  = () => {\r\n            if (ta.mouseIsDown) ta.paintLineNumbers(this.props.darkTheme);\r\n        };\r\n        ta.oninput      = (ev) => {\r\n            // @ts-ignore\r\n            this.props.onChange(ev.target.value, ev.target.selectionStart);\r\n        }\r\n        // prevents default behavior of special keys input when whisperDiv is shown, passes key event to the parent\r\n        ta.onkeydown    = (ev) => {\r\n            if (ta.whisperDiv.isShown) {\r\n                if (ev.key === \"ArrowDown\") {\r\n                    ta.whisperDiv.changeSelected(1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"ArrowUp\") {\r\n                    ta.whisperDiv.changeSelected(-1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"PageDown\") {\r\n                    // moves selected whisper to bottom\r\n                    ta.whisperDiv.setSelected(-1);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"PageUp\") {\r\n                    // moves selected whisper to top\r\n                    ta.whisperDiv.setSelected(0);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"End\" || ev.key === \"Home\") {\r\n                    ta.hideWhisper();\r\n                    // keeps default behaviour\r\n                }\r\n                if (ev.key === \"Escape\" || ev.key === \"Esc\") {\r\n                    ta.hideWhisper();\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Enter\" && !ev.ctrlKey) {\r\n                    ta.insertCurrentSelectedWhisper(this.props.onChange);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Enter\" && ev.ctrlKey) {\r\n                    ta.hideWhisper();\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"Tab\") {\r\n                    ta.insertCurrentSelectedWhisper(this.props.onChange);\r\n                    ev.preventDefault();\r\n                }\r\n                if (ev.key === \"ArrowLeft\") {\r\n                    const cursor = (ta.selectionStart === 0) ? 0 : (ta.selectionStart - 1);\r\n                    // forces update to recompute whispers if needed\r\n                    this.props.onChange(ta.value, cursor);\r\n                    // keeps default behaviour\r\n                }\r\n                if (ev.key === \"ArrowRight\") {\r\n                    const cursor = (ta.selectionStart === ta.value.length) ? ta.selectionStart : ta.selectionStart + 1;\r\n                    // forces update to recompute whispers if needed\r\n                    this.props.onChange(ta.value, cursor);\r\n                    // keeps default behaviour\r\n                }\r\n            }\r\n            if (ev.key === \"Enter\" || ev.key === \"Tab\") {\r\n                // does not show whisper after pressing Enter or Tab\r\n                ta.notAutoShowWhisper = true;\r\n            }\r\n            if (ev.key === \"Backspace\" && !ta.whisperDiv.isShown) {\r\n                // does not show whisper after pressing Backspace when it is closed\r\n                ta.notAutoShowWhisper = true;\r\n            }\r\n            if (ev.ctrlKey) {\r\n                if (ev.key === \" \") {\r\n                    if (ta.whisperDiv.isShown) {\r\n                        ta.hideWhisper();\r\n                    }\r\n                    else {\r\n                        this.props.onChange(ta.value, ta.selectionStart);\r\n                    }\r\n                }\r\n                this.props.onCtrlInput(ev);\r\n            }\r\n        }\r\n\r\n        // make sure numbers are painted\r\n        ta.update(this.props.text, this.props.darkTheme);\r\n        // shows highlights\r\n        ta.updateErrors(this.props.errors);\r\n        this.textarea = ta;\r\n    }\r\n\r\n    /**\r\n     * Updates text content and component style.\r\n     */\r\n    componentDidUpdate(prevProps: Readonly<XTextAreaProps>) {\r\n        this.textarea.update(this.props.text, this.props.darkTheme);\r\n        if (prevProps.darkTheme !== this.props.darkTheme) {\r\n            this.textarea.paintLineNumbers(this.props.darkTheme);\r\n        }\r\n        // whispers\r\n        if (this.props.whispers !== prevProps.whispers) {\r\n            if (this.textarea.notAutoShowWhisper) {\r\n                this.textarea.notAutoShowWhisper = false;\r\n            }\r\n            else {\r\n                this.textarea.createWhisper(this.props.whispers);\r\n            }\r\n        }\r\n        // highlights error\r\n        if (this.props.errors !== undefined) {\r\n            this.textarea.updateErrors(this.props.errors);\r\n        }\r\n        // first undefined highlight removes 'x-textarea-err' from textarea.className to show selection with blue color\r\n        else if (this.props.errors !== prevProps.errors) {\r\n            this.textarea.classList.remove('x-textarea-err');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders only an empty div. Other maintaining is not provided by React.\r\n     */\r\n    public render() {\r\n        return <div id={this.props.id} className=\"x-textarea-div\" />;\r\n    }\r\n}\r\n\r\n/**\r\n * Computes line and column number for given position in text.\r\n */\r\nfunction getPositionLineAndColumn(text: string, position: number): {line: number, column: number} {\r\n    const textBeforeCursor: string = text.slice(0, position);\r\n    const line: number = (textBeforeCursor.match(/\\n/g) || []).length;\r\n    const lastNewLine: number = textBeforeCursor.lastIndexOf('\\n');\r\n    const column: number = textBeforeCursor.length - lastNewLine - 1;\r\n    return {line, column};\r\n}\r\n\r\n/**\r\n * Returns number of characters on the given line.\r\n */\r\nfunction getLineLength(text: string, line: number): number {\r\n    let newLinesFound = 0;\r\n    let lineStart = 0;  // index of line-th newline\r\n    let lineEnd = 0;    // index of (line+1)-th newline\r\n    for (let i = 0; i < text.length; ++i) {\r\n        if (text.charAt(i) === '\\n') {\r\n            ++newLinesFound;\r\n            if (newLinesFound === line) {\r\n                lineStart = i;\r\n            }\r\n            else if (newLinesFound === line + 1) {\r\n                lineEnd = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (lineEnd === 0) {\r\n        lineEnd = text.length; // handles case of last line in text\r\n    }\r\n    return lineEnd - lineStart;\r\n}\r\n\r\n/**\r\n * Creates a div for highlighting text in the given textarea.\r\n */\r\nfunction createHighlightDiv(startLine: number, startColumn: number, rangeLength: number, msg: string,\r\n                            textarea: ExtendedHTMLTextArea): ErrorDiv {\r\n    // @ts-ignore\r\n    const highlight: ErrorDiv = document.createElement('div');\r\n    highlight.classList.add(\"x-textarea-highlight\");\r\n    highlight.startLine = startLine;\r\n    highlight.startColumn = startColumn;\r\n    highlight.rangeLength = rangeLength;\r\n    // dispatches click event to not block textarea underneath highlights\r\n    highlight.onclick = (ev: MouseEvent) => {\r\n        const newEvent: MouseEvent = new MouseEvent(ev.type, {...ev});\r\n        textarea.dispatchEvent(newEvent);\r\n        ev.stopPropagation();\r\n    }\r\n    const span: HTMLSpanElement = document.createElement('span');\r\n    span.classList.add(\"highlight-tooltip\");\r\n    span.innerText = msg;\r\n    highlight.messageSpan = span;\r\n    highlight.appendChild(span);\r\n    return highlight;\r\n}","/**\r\n * Modulo operation with positive result for negative numbers (as % in JavaScript can give negative results).\r\n *\r\n * @param n base number\r\n * @param m dividing number\r\n */\r\nexport function mod(n: number, m: number) {\r\n    return ((n % m) + m) % m;\r\n}","import Row from \"./row\";\r\nimport {SupportedColumnType} from \"./columnType\";\r\nimport { isEqual } from \"lodash\";\r\n\r\n/**\r\n * Relation from relational algebra. It contains relational schema (set of columns' names and types)\r\n * and relation's relation (set of rows).\r\n */\r\nexport default class Relation {\r\n\r\n    public readonly name: string;\r\n    private columns = new Map<string, SupportedColumnType>();\r\n    private columnNames: string[] = []; // array to have an ordered printing of columns\r\n    private rows: Row[] = [];\r\n    private finishedSchema = false;\r\n\r\n    /**\r\n     * Creates an empty relation of the given name.\r\n     *\r\n     * @param name name of the relation\r\n     */\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Returns name of the relation.\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * @return true if the relational schema is finished (no more columns can be added)\r\n     */\r\n    public hasFinishedSchema(): boolean {\r\n        return this.finishedSchema;\r\n    }\r\n\r\n    /**\r\n     * Sets the relational schema finished (no more columns can be added).\r\n     */\r\n    public finishSchema(): void {\r\n        this.finishedSchema = true;\r\n    }\r\n\r\n    /**\r\n     * Adds a column to a relational schema if the relational schema is not finished yet.\r\n     *\r\n     * @param name name of the column\r\n     * @param type type of the column\r\n     * @return true if the column was added (relation did not contain a column with the same name before)\r\n     */\r\n    public addColumn(name: string, type: SupportedColumnType): boolean {\r\n        if (!this.hasColumn(name) && !this.hasFinishedSchema()) {\r\n            this.columns.set(name, type);\r\n            this.columnNames.push(name);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the relation has a column with the same name\r\n     * (NOTE: type of the column does not matter).\r\n     *\r\n     * @param name Column name to be checked\r\n     * @return true if the relation has a column with the same name\r\n     */\r\n    public hasColumn(name: string): boolean {\r\n        return this.columnNames.some(cn => cn === name);\r\n    }\r\n\r\n    /**\r\n     * @return map (name -> value) of columns' values in a relation.\r\n     */\r\n    public getColumns(): Map<string, SupportedColumnType> {\r\n        return this.columns;\r\n    }\r\n\r\n    /**\r\n     * @param f function to be applied for each column in the relation\r\n     */\r\n    public forEachColumn(f: (type: SupportedColumnType, name: string) => void): void {\r\n        return this.columns.forEach(f);\r\n    }\r\n\r\n    /**\r\n     * @return array of column names in a relation.\r\n     */\r\n    public getColumnNames(): string[] {\r\n        return this.columnNames;\r\n    }\r\n\r\n    /**\r\n     * @return Number of columns in a relation.\r\n     */\r\n    public getColumnsCount(): number {\r\n        return this.columnNames.length;\r\n    }\r\n\r\n    /**\r\n     * Adds a row to a relation. The row must have the same column set as the relation. If the row was added,\r\n     * sets the row finished and returns true. Also the relational schema of this relation\r\n     * is set finished (no more columns can be added). If the row was not added, returns false.\r\n     * NOTE: Rows in a relation cannot be duplicit, adding a duplicit row returns true, but only one is kept.\r\n     *\r\n     * @param row row to be added\r\n     * @return true if the row was added, false otherwise\r\n     */\r\n    public addRow(row: Row): boolean {\r\n        if (isEqual(row.getTypes(), this.columns)) {\r\n            this.finishSchema();\r\n            row.finish();\r\n            if (!this.rows.some(r => r.equals(row))) {\r\n                this.rows.push(row);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @return array of rows in a relation.\r\n     */\r\n    public getRows(): Row[] {\r\n        return this.rows;\r\n    }\r\n\r\n    /**\r\n     * @return Number of rows in a relation.\r\n     */\r\n    public getRowsCount(): number {\r\n        return this.rows.length;\r\n    }\r\n\r\n    /**\r\n     * Returns a relational schema in a format: RelationName(ColumnOneName: ColumnOneType, ...) - both column names\r\n     * and column types are used.\r\n     *\r\n     * @return relational schema as a string\r\n     */\r\n    public getSchemaString(): string {\r\n        return this.name + \"(\" + [...this.columns].map(s => s[0] + \": \" + s[1]).join(\", \") + \")\";\r\n    }\r\n\r\n    /**\r\n     * Returns a relational schema in a format: RelationName(ColumnOneName, ...) - only column names are used.\r\n     *\r\n     * @return relational schema as a string\r\n     */\r\n    public getNamesSchemaString(): string {\r\n        return this.name + \"(\" + this.columnNames.join(\", \") + \")\";\r\n    }\r\n\r\n    /**\r\n     * Returns a formatted string representation of the relation content (column names, column types and rows).\r\n     *\r\n     * @return string representation of the relation\r\n     */\r\n    public contentString(): string {\r\n        // @ts-ignore - prepares array representation of types and rows\r\n        const columnTypes: SupportedColumnType[] = this.columnNames.map(name => this.columns.get(name));\r\n        const rows = [...this.rows].map(row => row.getOrderedPrintValues(this.columnNames));\r\n        // finds longest inputs in each column\r\n        const longest = this.columnNames.map(n => n.length);\r\n        columnTypes.forEach((type, i) => {\r\n            if (type.length > longest[i]) {\r\n                longest[i] = type.length;\r\n            }\r\n        })\r\n        rows.forEach(r => {\r\n            r.forEach((d, i) => {\r\n                if (longest[i] < d.length) {\r\n                    longest[i] = d.length;\r\n                }\r\n            });\r\n        });\r\n        // function for end-padding strings with spaces\r\n        const pad = (ss: string[]) => ss.map((s, i) => s.padEnd(longest[i], \" \")).join(' | ');\r\n        return pad(this.columnNames) + '\\n' +\r\n            pad(columnTypes) + '\\n' +\r\n            longest.map(n => \"-\".repeat(n)).join(\"-+-\") + '\\n' +\r\n            rows.map(r => pad(r)).join('\\n');\r\n    }\r\n\r\n    /**\r\n     * Custom equals function for testing purposes.\r\n     *\r\n     * @param other\r\n     */\r\n    public equals(other: any): boolean {\r\n        if (other instanceof Relation) {\r\n            return this.name === other.name &&\r\n                isEqual(this.columns, other.columns) &&\r\n                isEqual(new Set(this.rows), new Set(other.rows));\r\n        }\r\n        return false;\r\n    }\r\n}","/**\r\n * Codes for CodeErrors.\r\n * The description is a string array - between its members are inserted error parameters (names of invalid relations,\r\n * invalid input parts, etc.). See english language definition for expected structure of each error description.\r\n */\r\nexport interface CodeErrorMessages {\r\n    // expects 1 part\r\n    resultSection_nodeIndexNotFound: string[],\r\n    // expects 2 part\r\n    resultSection_evalError: string[],\r\n    // expects 1 part\r\n    resultSection_nullRelationToSave: string[],\r\n    // expects 1 part\r\n    resultSection_nullRelationToAdd: string[],\r\n\r\n    // expects 3 parts\r\n    row_absentColumn: string[],\r\n\r\n    // expects 2 parts\r\n    valueParser_unexpectedToken: string[],\r\n\r\n    // expects 2 parts\r\n    exprParser_unexpectedToken: string[],\r\n    // expects 2 parts\r\n    exprParser_thetaJoinBranchError: string[],\r\n    // expects 2 parts\r\n    exprParser_projectionBranchError: string[]\r\n}\r\n\r\n/**\r\n * Error caused by fatal error in code of the application.\r\n */\r\nexport default class CodeError extends Error {\r\n    constructor(msg: string) {\r\n        super(msg);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, CodeError);\r\n        }\r\n        this.name = 'CodeError';\r\n    }\r\n}","import RASemanticError from \"./raSemanticError\";\r\nimport RASyntaxError from \"./raSyntaxError\";\r\nimport CodeError from \"./codeError\";\r\n\r\n/**\r\n * Factory for creating custom application errors: CodeError, RASemanticError, RASyntaxError.\r\n * It creates an error message by given error code and string parameters.\r\n */\r\nexport class ErrorFactory {\r\n\r\n    /**\r\n     * Creates a new code error. Params are used to join error messages. See CodeErrorMessages interface definition.\r\n     *\r\n     * @param msg predefined error description\r\n     * @param params textual specification\r\n     */\r\n    public static codeError(msg: string[], ...params: string[]): CodeError {\r\n        assertParamsCount(msg.length - 1, params);\r\n        return new CodeError(joinStringArrays(msg, params));\r\n    }\r\n\r\n    /**\r\n     * Creates a new RASemanticError. Params are used to join error messages. See SemanticErrorMessages interface definition.\r\n     *\r\n     * @param msg predefined error description\r\n     * @param range text range of the error in the input when defined\r\n     * @param params textual specification\r\n     */\r\n    public static semanticError(msg: string[], range: {start: number, end: number} | undefined, ...params: string[]): RASemanticError {\r\n        assertParamsCount(msg.length - 1, params);\r\n        return new RASemanticError(joinStringArrays(msg, params), range);\r\n    }\r\n\r\n    /**\r\n     * Creates a new RASyntaxError. Params are used to join error messages. See SyntaxErrorMessages interface definition.\r\n     *\r\n     * @param msg predefined error description\r\n     * @param range text range of the error in the input when defined\r\n     * @param params textual specification\r\n     */\r\n    public static syntaxError(msg: string[], range: {start: number, end: number} | undefined, ...params: string[]): RASyntaxError {\r\n        assertParamsCount(msg.length - 1, params);\r\n        return new RASyntaxError(joinStringArrays(msg, params), range);\r\n    }\r\n}\r\n\r\n/**\r\n * Extends the given params array with empty strings to have the length of expectedCount. When the initial length of the\r\n * given params array is same or greater, the array is not changed.\r\n *\r\n * @param expectedCount\r\n * @param params\r\n */\r\nexport function assertParamsCount(expectedCount: number, params: string[]): void {\r\n    if (params.length !== expectedCount) {\r\n        console.log(\"Unexpected params count, expected \" + expectedCount + \", given \" + params.length);\r\n        while (params.length < expectedCount) {\r\n            params.push(\"\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Joins given string arrays [a1, a2, ..., an] and [b1, b2, ..., bn-1] to one string \"a1b1a2b2...an-1bn-1an\".\r\n * WARNING: a.length is expected to be at least 1. b.length is expected to be at least \"a.length - 1\".\r\n *\r\n * @param a array of length at least 1\r\n * @param b array of length at least \"a.length - 1\"\r\n */\r\nexport function joinStringArrays(a: string[], b: string[]): string {\r\n    const aLen: number = a.length;\r\n    const toConcat: string[] = Array<string>(2 * aLen - 2);\r\n    for (let i = 1; i < aLen; i++) {\r\n        toConcat[2 * i - 2] = b[i - 1];\r\n        toConcat[2 * i - 1] = a[i];\r\n    }\r\n    return a[0].concat(...toConcat);\r\n}","import {BinaryNodeClass} from \"../ratree/binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {UnaryNodeClass} from \"../ratree/unaryNode\";\r\n\r\n/**\r\n * Abstract parent class for all RATokens.\r\n */\r\nexport abstract class ExprToken {\r\n    protected constructor(public readonly str: IndexedString) {\r\n    }\r\n\r\n    /**\r\n     * Gets token start and end index in the text (if the token has IndexedString representation) or undefined.\r\n     */\r\n    public getRange(): {start: number, end: number} | undefined {\r\n        return this.str.getRange();\r\n    }\r\n}\r\n\r\n/**\r\n * Parentheses.\r\n */\r\nexport abstract class ParenthesisToken extends ExprToken {}\r\n\r\nexport class OpeningParenthesis extends ParenthesisToken {\r\n    public constructor(str: IndexedString) {\r\n        super(str);\r\n    }\r\n}\r\n\r\nexport class ClosingParenthesis extends ParenthesisToken {\r\n    public constructor(str: IndexedString) {\r\n        super(str);\r\n    }\r\n}\r\n\r\n/**\r\n * Relation reference.\r\n */\r\nexport class RelationToken extends ExprToken {\r\n    public constructor(name: IndexedString) {\r\n        super(name);\r\n    }\r\n}\r\n\r\n/**\r\n * Unary operators.\r\n */\r\nexport class UnaryOperatorToken extends ExprToken {\r\n\r\n    public static selection(selection: IndexedString) {\r\n        return new UnaryOperatorToken(selection, \"selection\");\r\n    }\r\n\r\n    public static projection(projection: IndexedString) {\r\n        return new UnaryOperatorToken(projection, \"projection\");\r\n    }\r\n\r\n    public static rename(rename: IndexedString) {\r\n        return new UnaryOperatorToken(rename, \"rename\");\r\n    }\r\n\r\n    private constructor(str: IndexedString, public readonly type: UnaryNodeClass) {\r\n        super(str);\r\n    }\r\n}\r\n\r\n/**\r\n * Precedence values for binary operators (highest to lowest). As there is no fixed precedence order for RA and set\r\n * operation, we chose the following.\r\n */\r\nconst precedenceLevelA: number = 10;\r\nconst cartesianPrecedence: number = precedenceLevelA;\r\nconst naturalPrecedence: number = precedenceLevelA;\r\nconst thetaPrecedence: number = precedenceLevelA;\r\n\r\nconst precedenceLevelB: number = precedenceLevelA - 1;\r\nconst semiPrecedence: number = precedenceLevelB;\r\nconst antiPrecedence: number = precedenceLevelB;\r\nconst thetaSemiPrecedence: number = precedenceLevelB;\r\n\r\nconst precedenceLevelC: number = precedenceLevelB - 1;\r\nconst outerPrecedence: number = precedenceLevelC;\r\n\r\nconst precedenceLevelD: number = precedenceLevelC - 1;\r\nconst divisionPrecedence: number = precedenceLevelD;\r\n\r\nconst precedenceLevelE: number = precedenceLevelD - 1;\r\nconst intersectionPrecedence: number = precedenceLevelE;\r\n\r\nconst precedenceLevelF: number = precedenceLevelE - 1;\r\nconst differencePrecedence: number = precedenceLevelF;\r\n\r\nconst precedenceLevelG: number = precedenceLevelF - 1;\r\nconst unionPrecedence: number = precedenceLevelG;\r\n\r\n/**\r\n * Binary operators.\r\n */\r\nexport class BinaryOperatorToken extends ExprToken {\r\n\r\n    static naturalJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, naturalPrecedence, \"natural join\");\r\n    }\r\n\r\n    static cartesianProduct(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, cartesianPrecedence, \"cartesian product\");\r\n    }\r\n\r\n    static union(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, unionPrecedence, \"union\");\r\n    }\r\n\r\n    static intersection(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, intersectionPrecedence, \"intersection\");\r\n    }\r\n\r\n    static difference(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, differencePrecedence, \"difference\");\r\n    }\r\n\r\n    static leftSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, semiPrecedence, \"left semijoin\");\r\n    }\r\n\r\n    static rightSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, semiPrecedence, \"right semijoin\");\r\n    }\r\n\r\n    static leftAntijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, antiPrecedence, \"left antijoin\");\r\n    }\r\n\r\n    static rightAntijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, antiPrecedence, \"right antijoin\");\r\n    }\r\n\r\n    static thetaJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaPrecedence, \"theta join\");\r\n    }\r\n\r\n    static leftThetaSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaSemiPrecedence, \"left theta semijoin\");\r\n    }\r\n\r\n    static rightThetaSemijoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, thetaSemiPrecedence, \"right theta semijoin\");\r\n    }\r\n\r\n    static fullOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"full outer join\");\r\n    }\r\n\r\n    static leftOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"left outer join\");\r\n    }\r\n\r\n    static rightOuterJoin(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, outerPrecedence, \"right outer join\");\r\n    }\r\n\r\n    static division(str: IndexedString): BinaryOperatorToken {\r\n        return new BinaryOperatorToken(str, divisionPrecedence, \"division\");\r\n    }\r\n\r\n    private constructor(str: IndexedString, public readonly precedence: number, public readonly type: BinaryNodeClass) {\r\n        super(str);\r\n    }\r\n}","import {ErrorFactory} from \"../error/errorFactory\";\r\nimport RASyntaxError from \"../error/raSyntaxError\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Class providing general helper functions for strings.\r\n */\r\nexport default class StringUtils {\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains letters only and has length at least 1\r\n     */\r\n    public static isWord(str: string): boolean {\r\n        return str.length > 0 && str.split(\"\").every(c => StringUtils.isLetter(c));\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains letters, numbers and underscores only, has length at least 1 and starts with\r\n     * a letter or an underscore\r\n     */\r\n    public static isName(str: string): boolean {\r\n        if (str.length === 0) {\r\n            return false;\r\n        }\r\n        if (!StringUtils.isLetter(str.charAt(0)) && str.charAt(0) !== '_') {\r\n            return false;\r\n        }\r\n        return str.split(\"\").every(c => StringUtils.isNameChar(c));\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains whitespaces only\r\n     */\r\n    public static isWhitespacesOnly(str: string): boolean {\r\n        const regex = /\\s*/;\r\n        const res = regex.exec(str);\r\n        return res === null ? false : res[0] === str;\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a letter\r\n     */\r\n    public static isLetter(c: string): boolean {\r\n        return c.length === 1 && c.toLowerCase() !== c.toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a letter, a number or an underscore\r\n     */\r\n    public static isNameChar(c: string): boolean {\r\n        return StringUtils.isLetter(c) || StringUtils.isDigit(c) || c === '_';\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a digit\r\n     */\r\n    public static isDigit(c: string): boolean {\r\n        return c.length === 1 && c.match(/\\d/) !== null;\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string represents a decimal number\r\n     */\r\n    public static isNumber(str: string): boolean {\r\n        return /^[-]?[\\d]+([.][\\d]+)?$/.test(str);\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of letters and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, as a word is returned an empty string.\r\n     *\r\n     * @param str string to be split\r\n     * @return split string in a pair { word, rest }\r\n     */\r\n    public static nextWord(str: string): { first: string, second: string } {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (!StringUtils.isLetter(str.charAt(i))) {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of letters, numbers and underscores, which starts with a letter or\r\n     * an underscore and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, or an underscore, as a name is returned an empty string.\r\n     *\r\n     * @param str string to be split\r\n     * @return split string in a pair { name, rest }\r\n     */\r\n    public static nextName(str: string): { first: string, second: string } {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        if (!StringUtils.isLetter(str.charAt(0)) && str.charAt(0) !== '_') {\r\n            return { first: \"\", second: str };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            const char: string = str.charAt(i);\r\n            if (!StringUtils.isLetter(char) && !StringUtils.isDigit(char) && char !== '_') {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting sequence of non-whitespace characters and its rest and returns these parts in a pair.\r\n     *\r\n     * @param str string to be split\r\n     * @return split string in a pair { word, rest }\r\n     */\r\n    public static nextNonWhitespacePart(str: string): { first: string, second: string } {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (str.charAt(i).match(/\\s/)) {\r\n                return { first: str.substring(0, i), second: str.substring(i)};\r\n            }\r\n            ++i;\r\n        }\r\n        return { first: str, second: \"\"};\r\n    }\r\n\r\n    /**\r\n     * Splits given string to a starting number and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a digit, as a number is returned an empty string.\r\n     *\r\n     * @param str string to be split\r\n     * @return split string in a pair (word, rest)\r\n     */\r\n    static nextNumber(str: string): { first: string, second: string } {\r\n        if (str === \"\") {\r\n            return { first: \"\", second: \"\" };\r\n        }\r\n        let i: number = 0;\r\n        // string starts with '-' sign\r\n        if (str.charAt(0) === '-') {\r\n            // if there is a digit after '-', shifts the start\r\n            if (str.length > 1 && StringUtils.isDigit(str.charAt(1))) {\r\n                i = 1;\r\n            }\r\n            // there is no digit\r\n            else {\r\n                return { first: \"\", second: str };\r\n            }\r\n        }\r\n        let digitFound: boolean = false;\r\n        let dotFound: boolean = false;\r\n        while (i < str.length) {\r\n            if (StringUtils.isDigit(str.charAt(i))) {\r\n                digitFound = true;\r\n                ++i;\r\n            }\r\n            else if (str.charAt(i) === '.') {\r\n                // second dot or a dot without previous digits\r\n                if (dotFound || !digitFound) {\r\n                    break;\r\n                }\r\n                else {\r\n                    dotFound = true;\r\n                    ++i;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        const numStr = str.substring(0, i);\r\n        const rest = str.substring(i);\r\n        return { first: numStr, second: rest };\r\n    }\r\n\r\n    /**\r\n     * Splits the given string into starting quoted part and the rest. Quotes can be escaped by an odd count of\r\n     * backslashes.\r\n     * NOTE: When the closing quote is not found until the rest of the line, unclosed string is returned\r\n     * => the error is not thrown, it is only added to the return object.\r\n     * NOTE: First character of the string is expected to be '\"'.\r\n     *\r\n     * @param str string to be split\r\n     * @return pair of the starting bordered part and the rest\r\n     */\r\n    static nextQuotedString(str: string): { first: string, second: string, error: RASyntaxError | undefined } {\r\n        let i: number = 1;\r\n        // backslashes escape the quote character only in odd count\r\n        let backslashes: number = 0;\r\n        while (i < str.length) {\r\n            const curChar = str.charAt(i);\r\n            // increases index for using \"i\" in slicing\r\n            ++i;\r\n            // found quote - changes ignoring of special chars\r\n            if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                return { first: str.slice(0, i), second: str.slice(i), error: undefined };\r\n            }\r\n            // end of line breaks the string\r\n            if (curChar === '\\n') {\r\n                return {\r\n                    first: str.slice(0, i),\r\n                    second: str.slice(i),\r\n                    error: ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_missingClosingChar,\r\n                        undefined, '\"', '\"')\r\n                };\r\n            }\r\n            // updates backslash count\r\n            if (curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n        }\r\n        return {\r\n            first: str,\r\n            second: \"\",\r\n            error: ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_missingClosingChar,\r\n                undefined, '\"', '\"')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Splits the string to the starting bordered part and the rest and returns these parts in a pair.\r\n     * If there is only one ending character and it differs from the starting one, nested bordering is supported.\r\n     * Characters after an odd count of escape characters are ignored and cannot start or end a bordered part.\r\n     * Starting and ending characters in quoted part are ignored, quotes can be escaped by an odd count of backslashes.\r\n     * NOTE: First character of the string is expected to be 'start'.\r\n     * NOTE: Should not be used for slicing quoted strings, use nextQuotedString instead.\r\n     * NOTE: It is expected, that there are no comments in the given string.\r\n     *\r\n     * @param str string to be split\r\n     * @param start starting character of the string and also starting character of the bordered part (one character)\r\n     * @param end ending characters of the bordered part (one or more characters)\r\n     * @param escape character which makes next character being ignored (default '\\0')\r\n     * @return pair of the starting bordered part and the rest\r\n     */\r\n    static nextBorderedPart(str: string, start: string, end: string, escape: string = '\\0'): { first: string, second: string } {\r\n        let depth: number = 1;\r\n        let i: number = 1;\r\n        // to ignore special characters in quoted part\r\n        let inQuotes: boolean = false;\r\n        // nested bordering is supported if there is only one ending character\r\n        const nesting: boolean = end.length === 1;\r\n        // backslashes escape the quote character only in odd count\r\n        let backslashes: number = 0;\r\n        // escape characters escape the end character only in odd count\r\n        let escapeCount: number = 0;\r\n        while (i < str.length) {\r\n            const curChar = str.charAt(i);\r\n            // checks end of the part (before checking start for a case when start == end)\r\n            if (end.indexOf(curChar) > -1 && (escapeCount % 2) === 0 && !inQuotes) {\r\n                --depth;\r\n            }\r\n            // checks start of the bordered part (if only one ending character was given)\r\n            else if (curChar === start && (escapeCount % 2) === 0 && nesting && !inQuotes) {\r\n                ++depth;\r\n            }\r\n            // found quote - changes ignoring of special chars\r\n            else if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                inQuotes = !inQuotes;\r\n            }\r\n            // updates escape chars count\r\n            if (curChar === escape) {\r\n                ++escapeCount;\r\n            }\r\n            else {\r\n                escapeCount = 0;\r\n            }\r\n            // updates backslash count\r\n            if (curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            // increases index for using \"i\" in slicing\r\n            ++i;\r\n            if (depth === 0) {\r\n                return { first: str.slice(0, i), second: str.slice(i) };\r\n            }\r\n        }\r\n        throw ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_missingClosingChar, undefined,\r\n            end.split('').join(\"' / '\"), start);\r\n    }\r\n\r\n    /**\r\n     * Skips all whitespaces and exactly one given character and returns rest of the string.\r\n     * If the string does not match this pattern, throws error.\r\n     *\r\n     * @param str string to be skipped in\r\n     * @param char char to be skipped exactly one time (expected to be string of length 1)\r\n     * @return given string without starting sequence of whitespaces and exactly one char\r\n     */\r\n    public static skipWhitespacesAndChar(str: string, char: string): string {\r\n        let charFound: boolean = false;\r\n        let i: number = 0;\r\n        while (i < str.length) {\r\n            if (str.charAt(i).match(/\\s/)) {\r\n                ++i;\r\n            }\r\n            else if (str.charAt(i) === char && !charFound) {\r\n                charFound = true;\r\n                ++i;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (!charFound) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.stringUtils_charNotFound, undefined, char);\r\n        }\r\n        return str.substring(i);\r\n    }\r\n\r\n    /**\r\n     * Deletes all line contents after '//'.\r\n     *\r\n     * @param str string to be deleted comments in\r\n     */\r\n    public static deleteCommentLines(str: string) {\r\n        return str.split('\\n').map(line => {\r\n            let insideQuotes: boolean = false;\r\n            let backslashes: number = 0;\r\n            for (let i = 0; i < line.length; ++i) {\r\n                const curChar = line.charAt(i);\r\n                // quotes found\r\n                if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                    insideQuotes = !insideQuotes;\r\n                }\r\n                if (insideQuotes && curChar === '\\\\') {\r\n                    ++backslashes;\r\n                }\r\n                else {\r\n                    backslashes = 0;\r\n                }\r\n                // double-backslash found outside quotes\r\n                if (!insideQuotes && curChar === '/' && i > 0 && line.charAt(i - 1) === '/') {\r\n                    return line.slice(0, i - 1);\r\n                }\r\n            }\r\n            return line;\r\n        }).join('\\n');\r\n    }\r\n}","import Relation from \"../relation/relation\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Abstract general node of the relational algebra syntactic tree.\r\n */\r\nexport default abstract class RATreeNode {\r\n\r\n    protected resultRelation: Relation | undefined;\r\n\r\n    protected constructor() {\r\n    }\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * After successful call, this.resultRelation must be set to valid Relation.\r\n     */\r\n    public abstract eval(): void;\r\n\r\n    /**\r\n     * Evaluates the RA query in this node and its subtree.\r\n     * It searches for given cursor index in parametrized nodes and if it finds it, returns the available columns.\r\n     * Otherwise returns the result relation schema (only column names, no rows).\r\n     * When an error occurs, it is faked to work, and adds it to the errors array.\r\n     *\r\n     * @return resulting relation schema gained by evaluating this node and its subtree or found columns to whisper\r\n     */\r\n    public abstract fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]};\r\n\r\n    /**\r\n     * @return true if this node and its subtree was already evaluated\r\n     */\r\n    public isEvaluated(): boolean {\r\n        return this.resultRelation !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the resulting relation. The node and its subtree is evaluated if it was not evaluated before.\r\n     *\r\n     * @return resulting relation gained by evaluating this node and its subtree\r\n     */\r\n    public getResult(): Relation {\r\n        if (this.resultRelation === undefined) {\r\n            this.eval();\r\n        }\r\n        // @ts-ignore\r\n        return this.resultRelation;\r\n    }\r\n\r\n    /**\r\n     * Creates a string with a structure of the RA tree in one line.\r\n     *\r\n     * @return string with a structure of the RA tree in one line\r\n     */\r\n    public abstract printInLine(): string;\r\n\r\n    /**\r\n     * Return the word name of the RA operation of the node.\r\n     * Example: returns \"Selection\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node\r\n     */\r\n    public abstract getOperationName(): string;\r\n\r\n    /**\r\n     * Return the symbolic representation of the RA operation of the node.\r\n     * Example: returns \"(some + expr = 15)\" for SelectionNode.\r\n     *\r\n     * @return name of the RA operation of the node\r\n     */\r\n    public abstract getOperationSymbol(): string;\r\n}","import Relation from \"../relation/relation\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Leave node of the relational algebra syntactic tree with reference to a source relation.\r\n */\r\nexport default class RelationNode extends RATreeNode {\r\n\r\n    public constructor(relation: Relation) {\r\n        super();\r\n        this.resultRelation = relation;\r\n    }\r\n\r\n    public eval(): void {\r\n        // nothing to evaluate\r\n    }\r\n\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        // @ts-ignore\r\n        return {result: this.resultRelation, whispers: [], errors: []};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        // @ts-ignore\r\n        return this.resultRelation.getName();\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        // @ts-ignore\r\n        return this.resultRelation.getName();\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return \"\";\r\n    }\r\n}","/**\r\n * String representation with index of each character. Provides some usual string functions.\r\n */\r\nexport class IndexedString {\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing the given string. StartIndex is used as the offset for indexes.\r\n     * When the startIndex is omitted, 0 is used. When NaN is given, all indexes are NaN.\r\n     * Indexes of the characters are (0 + startIndex, ..., str.length - 1 + startIndex).\r\n     * NOTE: Each character has its own index. That means '\\r\\n' line separator has two indexes. For expected behavior, use\r\n     * '\\n' separator instead.\r\n     *\r\n     * @param str string\r\n     * @param startIndex\r\n     */\r\n    public static new(str: string, startIndex: number = 0): IndexedString {\r\n        return new IndexedString(str, str.split('').map((char, index) => {return {char: char, index: index + startIndex}}));\r\n    }\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing an empty string \"\".\r\n     */\r\n    public static empty(): IndexedString {\r\n        return new IndexedString('', []);\r\n    }\r\n\r\n    /**\r\n     * Creates a new IndexedString instance representing the given array of IndexedChars.\r\n     *\r\n     * @param arr IndexedChar array\r\n     */\r\n    public static newFromArray(arr: IndexedChar[]): IndexedString {\r\n        return new IndexedString(arr.map(ic => ic.char).join(''), arr);\r\n    }\r\n\r\n    /**\r\n     * Joins given array of IndexedStrings with given separator. Inserted separators have indexed given from the\r\n     * separatorIndexes array. NOTE: separatorIndexes array is expected to have length at least \"arr.length - 1\".\r\n     *\r\n     * @param arr array to join\r\n     * @param separator separator string\r\n     * @param separatorIndexes\r\n     */\r\n    public static join(arr: IndexedString[], separator: string, separatorIndexes: number[]): IndexedString {\r\n        if (arr.length === 0) {\r\n            return IndexedString.empty();\r\n        }\r\n        if (arr.length === 1) {\r\n            return arr[0];\r\n        }\r\n        const toConcat: IndexedString[] = Array<IndexedString>(2 * arr.length - 2);\r\n        for (let i = 1; i < arr.length; i++) {\r\n            toConcat[2 * i - 2] = IndexedString.new(separator, separatorIndexes[i - 1]);\r\n            toConcat[2 * i - 1] = arr[i];\r\n        }\r\n        return arr[0].concat(...toConcat);\r\n    }\r\n\r\n    /**\r\n     * Private constructor to ensure compatible string and IndexCharArray.\r\n     *\r\n     * @param str string representation\r\n     * @param chars IndexedChar representation\r\n     */\r\n    private constructor(private readonly str: string, private readonly chars: IndexedChar[]) { }\r\n\r\n    /**\r\n     * Returns string representation of the IndexedString.\r\n     */\r\n    public toString(): string {\r\n        return this.str;\r\n    }\r\n\r\n    /**\r\n     * Returns length of the string.\r\n     */\r\n    public length(): number {\r\n        return this.str.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the IndexedString represents an empty string \"\".\r\n     */\r\n    public isEmpty(): boolean {\r\n        return this.length() === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns IndexedChar array representing the IndexedString.\r\n     * The array is reference to inner IndexedString structure.\r\n     */\r\n    public getChars(): IndexedChar[] {\r\n        return this.chars;\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the first character of the IndexedString. Returns undefined if empty.\r\n     */\r\n    public getFirstIndex(): number | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.chars[0].index;\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the last character of the IndexedString. Returns undefined if empty.\r\n     */\r\n    public getLastIndex(): number | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.chars[this.length() - 1].index;\r\n    }\r\n\r\n    /**\r\n     * Returns the first non-NaN index of a character of the IndexedString. Returns undefined if empty.\r\n     * If all indexes are NaN, NaN is returned.\r\n     */\r\n    public getFirstNonNaNIndex(): number | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        for (let i = 0; i < this.length(); i++) {\r\n            if (!isNaN(this.chars[i].index)) {\r\n                return this.chars[i].index;\r\n            }\r\n        }\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * Returns the last non-NaN index of a character of the IndexedString. Returns undefined if empty.\r\n     * If all indexes are NaN, NaN is returned.\r\n     */\r\n    public getLastNonNaNIndex(): number | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        for (let i = this.length() - 1; i >= 0; i--) {\r\n            if (!isNaN(this.chars[i].index)) {\r\n                return this.chars[i].index;\r\n            }\r\n        }\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * Returns indexes of the first and the last character of the IndexedString. Returns undefined if empty.\r\n     */\r\n    public getRange(): {start: number, end: number} | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return { start: this.chars[0].index, end: this.chars[this.length() - 1].index };\r\n    }\r\n\r\n    /**\r\n     * Returns the first and the last non-NaN indexes of characters of the IndexedString. Returns undefined if empty or\r\n     * if all indexes are NaN.\r\n     */\r\n    public getNonNaNRange(): {start: number, end: number} | undefined {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        // @ts-ignore\r\n        const start: number = this.getFirstNonNaNIndex();\r\n        // returns undefined when all indexes are NaN\r\n        if (isNaN(start)) {\r\n            return undefined;\r\n        }\r\n        // @ts-ignore\r\n        const end: number = this.getLastNonNaNIndex();\r\n        return { start: start, end: end };\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the character at the given index. Throws RangeError if the index is\r\n     * out of IndexedString bounds.\r\n     *\r\n     * @param index\r\n     */\r\n    public charAt(index: number): string {\r\n        if (index < 0 || index >= this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return this.chars[index].char;\r\n    }\r\n\r\n    /**\r\n     * Returns an original position index of the character at the given current index. Throws RangeError if the given index is\r\n     * out of IndexedString bounds.\r\n     *\r\n     * @param index\r\n     */\r\n    public indexAt(index: number): number {\r\n        if (index < 0 || index >= this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return this.chars[index].index;\r\n    }\r\n\r\n    /**\r\n     * Split a string into substrings using the specified separator and return them as an array.\r\n     * It does not accept RegEx separators and array limit as built-in string.\r\n     *\r\n     * @param separator string separator\r\n     */\r\n    public split(separator: string): IndexedString[] {\r\n        if (this.isEmpty()) {\r\n            if (separator === '') {\r\n                return [];\r\n            }\r\n            return [IndexedString.empty()];\r\n        }\r\n        const sepLen: number = separator.length;\r\n        const strSplit: string[] = this.str.split(separator);\r\n        const prefixSum: number[] = Array<number>(strSplit.length);\r\n        prefixSum[0] = 0;\r\n        for (let i = 1; i < strSplit.length; i++) {\r\n            prefixSum[i] = prefixSum[i - 1] + strSplit[i - 1].length + sepLen;\r\n        }\r\n\r\n        return strSplit.map((strSplit, index) => {\r\n            return new IndexedString(strSplit, this.chars.slice(prefixSum[index], prefixSum[index] + strSplit.length));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Split a string into substrings using the '\\n' separator and return them as an array.\r\n     * Also, it returns indexes of removed '\\n's.\r\n     */\r\n    public splitToLines(): {split: IndexedString[], separatorIndexes: number[]} {\r\n        if (this.isEmpty()) {\r\n            return {split: [IndexedString.empty()], separatorIndexes: []};\r\n        }\r\n        const strSplit: string[] = this.str.split('\\n');\r\n        const strSplitLenMinusOne = strSplit.length - 1;\r\n        const prefixSum: number[] = Array<number>(strSplit.length);\r\n        const separatorIndexes: number[] = Array<number>(strSplit.length - 1);\r\n        prefixSum[0] = 0;\r\n        for (let i = 0; i < strSplitLenMinusOne; i++) {\r\n            const ps = prefixSum[i] + strSplit[i].length + 1;\r\n            separatorIndexes[i] = this.indexAt(ps - 1);\r\n            prefixSum[i + 1] = ps;\r\n        }\r\n\r\n        const split = strSplit.map((strSplit, index) => {\r\n            return new IndexedString(strSplit, this.chars.slice(prefixSum[index], prefixSum[index] + strSplit.length));\r\n        });\r\n        return {split, separatorIndexes};\r\n    }\r\n\r\n    /**\r\n     * Returns a section of a IndexedString.\r\n     *\r\n     * @param start The index of the beginning of the specified portion of stringObj.\r\n     * @param end The index of the end of the specified portion of IndexedString. The substring includes the characters\r\n     * up to, but not including, the character indicated by end. If this value is not specified, the substring\r\n     * continues to the end of IndexedString.\r\n     */\r\n    public slice(start: number, end?: number): IndexedString {\r\n        const _start = start < 0 ? this.length() + start : start;\r\n        const _end = end !== undefined ? (end < 0 ? this.length() + end : end) : this.length();\r\n        if (_start > _end || _start < 0 || _end > this.length()) {\r\n            throw new RangeError();\r\n        }\r\n        return IndexedString.newFromArray(this.chars.slice(_start, _end));\r\n    }\r\n\r\n    /**\r\n     * Removes the leading and trailing white space and line terminator characters from a string.\r\n     */\r\n    public trim(): IndexedString {\r\n        const trimStr: string = this.str.trim();\r\n        if (trimStr === '') {\r\n            return new IndexedString('', []);\r\n        }\r\n        const start: number = this.str.indexOf(trimStr.charAt(0));\r\n        return IndexedString.newFromArray(this.chars.slice(start, start + trimStr.length));\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the concatenation of this IndexedString with multiple other.\r\n     *\r\n     * @param strings The IndexedStrings to append to the end of the string.\r\n     */\r\n    public concat(...strings: IndexedString[]) {\r\n        return IndexedString.newFromArray(this.chars.concat(...strings.map(is => is.chars)));\r\n    }\r\n\r\n    /**\r\n     * Returns true if the searchString sequence is the same as the corresponding\r\n     * elements of this object starting at position. Otherwise returns false.\r\n     *\r\n     * @param searchString\r\n     * @param position\r\n     */\r\n    public startsWith(searchString: string, position?: number | undefined): boolean {\r\n        return this.str.startsWith(searchString, position);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the searchString sequence is the same as the corresponding\r\n     * elements of this object starting at endPosition – searchString.length. Otherwise returns false.\r\n     *\r\n     * @param searchString\r\n     * @param position\r\n     */\r\n    public endsWith(searchString: string, position?: number | undefined): boolean {\r\n        return this.str.endsWith(searchString, position);\r\n    }\r\n\r\n    /**\r\n     * Replaces text in a string, using a regular expression or search string.\r\n     * NOTE: Returns built-in string.\r\n     *\r\n     * @param searchValue A string or RegEx to search for.\r\n     * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n     */\r\n    public replace(searchValue: string | RegExp, replaceValue: string): string {\r\n        return this.str.replace(searchValue, replaceValue);\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the first occurrence of a substring.\r\n     *\r\n     * @param searchValue The substring to search for in the string\r\n     * @param fromIndex The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n     */\r\n    public indexOf(searchValue: string, fromIndex?: number): number {\r\n        return this.str.indexOf(searchValue, fromIndex);\r\n    }\r\n\r\n    /**\r\n     * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n     *\r\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n     */\r\n    public match(regexp: string | RegExp): RegExpMatchArray | null {\r\n        return this.str.match(regexp);\r\n    }\r\n\r\n    /**\r\n     * Creates a deep copy of the IndexedString.\r\n     */\r\n    public copy(): IndexedString {\r\n        return new IndexedString(this.str, this.chars.map(ic => {return {char: ic.char, index: ic.index}}));\r\n    }\r\n\r\n    /**\r\n     * Returns deep copy of the string with all whitespaces removed.\r\n     */\r\n    public removeWhitespaces(): IndexedString {\r\n        return new IndexedString(this.str.replace(/\\s/g, ''), this.chars\r\n            .filter(ic => {return !/\\s/.test(ic.char)})\r\n            .map(ic => {return {char: ic.char, index: ic.index}})\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns next index of the string (this.getLastIndex() + 1), if last index of the string is a number.\r\n     * Otherwise, returns NaN.\r\n     */\r\n    public getNextIndexOrNaN(): number {\r\n        const lastIndex = this.getLastIndex();\r\n        return lastIndex === undefined ? NaN : lastIndex + 1;\r\n    }\r\n\r\n    /**\r\n     * Returns true if it contains any of the characters from string chars. Otherwise, returns false.\r\n     */\r\n    public containsAny(chars: string): boolean {\r\n        for (let i = 0; i < chars.length; ++i) {\r\n            if (this.str.indexOf(chars[i]) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Indexed representation of one character.\r\n * WARNING: It is always assumed that IndexedChar.char is a string of length 1.\r\n */\r\nexport interface IndexedChar {\r\n    char: string,\r\n    index: number\r\n}","import {IndexedString} from \"../types/indexedString\";\r\nimport StringUtils from \"./stringUtils\";\r\nimport {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport RASyntaxError from \"../error/raSyntaxError\";\r\n\r\n/**\r\n * Class providing general helper functions for IndexedString.\r\n */\r\nexport default class IndexedStringUtils {\r\n\r\n    /**\r\n     * @param str Checked indexed string\r\n     * @return true if the string contains letters only and has length at least 1\r\n     */\r\n    public static isWord(str: IndexedString): boolean {\r\n        return StringUtils.isWord(str.toString());\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains letters, numbers and underscores only, has length at least 1 and starts with\r\n     * a letter or an underscore\r\n     */\r\n    public static isName(str: IndexedString): boolean {\r\n        return StringUtils.isName(str.toString());\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string contains whitespaces only\r\n     */\r\n    public static isWhitespacesOnly(str: IndexedString): boolean {\r\n        return StringUtils.isWhitespacesOnly(str.toString());\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a letter\r\n     */\r\n    public static isLetter(c: IndexedString): boolean {\r\n        return StringUtils.isLetter(c.toString());\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a letter, a number or an underscore\r\n     */\r\n    public static isNameChar(c: IndexedString): boolean {\r\n        return StringUtils.isNameChar(c.toString());\r\n    }\r\n\r\n    /**\r\n     * @param c Checked character\r\n     * @return true if the given string has length one and the character is a digit\r\n     */\r\n    public static isDigit(c: IndexedString): boolean {\r\n        return StringUtils.isDigit(c.toString());\r\n    }\r\n\r\n    /**\r\n     * @param str Checked string\r\n     * @return true if the string represents a decimal number\r\n     */\r\n    public static isNumber(str: IndexedString): boolean {\r\n        return StringUtils.isNumber(str.toString());\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of letters and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, as a word is returned an empty string.\r\n     *\r\n     * @param str indexed string to be split\r\n     * @return split indexed string in a pair { word, rest }\r\n     */\r\n    public static nextWord(str: IndexedString): { first: IndexedString, second: IndexedString } {\r\n        const strParts: { first: string, second: string } = StringUtils.nextWord(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of letters, numbers and underscores, which starts with a letter or\r\n     * an underscore and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a letter, or an underscore, as a name is returned an empty string.\r\n     *\r\n     * @param str string to be split\r\n     * @return split indexed string in a pair { name, rest }\r\n     */\r\n    public static nextName(str: IndexedString): { first: IndexedString, second: IndexedString } {\r\n        const strParts: { first: string, second: string } = StringUtils.nextName(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting sequence of non-whitespace characters and its rest and returns these\r\n     * parts in a pair.\r\n     *\r\n     * @param str string to be split\r\n     * @return split indexed string in a pair { name, rest }\r\n     */\r\n    public static nextNonWhitespacePart(str: IndexedString): { first: IndexedString, second: IndexedString } {\r\n        const strParts: { first: string, second: string } = StringUtils.nextNonWhitespacePart(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits given indexed string to a starting number and its rest and returns these parts in a pair.\r\n     * NOTE: if the string does not start with a digit, as a number is returned an empty string.\r\n     *\r\n     * @param str indexed string to be split\r\n     * @return split indexed string in a pair (word, rest)\r\n     */\r\n    static nextNumber(str: IndexedString): { first: IndexedString, second: IndexedString } {\r\n        const strParts: { first: string, second: string } = StringUtils.nextNumber(str.toString());\r\n        return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n    }\r\n\r\n    /**\r\n     * Splits the given indexed string into starting quoted part and the rest. Quotes can be escaped by an odd count of\r\n     * backslashes.\r\n     * NOTE: When the closing quote is not found until the rest of the line, unclosed string is returned\r\n     * => the error is not thrown, it is only added to the return object.\r\n     * NOTE: First character of the string is expected to be '\"'.\r\n     *\r\n     * @param str string to be split\r\n     * @return pair of the starting bordered part and the rest\r\n     */\r\n    static nextQuotedString(str: IndexedString): { first: IndexedString, second: IndexedString, error: RASyntaxError | undefined } {\r\n        const strParts: { first: string, second: string, error: RASyntaxError | undefined } = StringUtils.nextQuotedString(str.toString());\r\n        const startIndex = str.getFirstNonNaNIndex();\r\n        if (startIndex !== undefined) {\r\n            strParts.error = insertRangeIfUndefined(strParts.error, {start: startIndex, end: startIndex});\r\n        }\r\n        return {\r\n            first: str.slice(0, strParts.first.length),\r\n            second: str.slice(strParts.first.length),\r\n            error: strParts.error\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Splits the indexed string to the starting bordered part and the rest and returns these parts in a pair.\r\n     * If there is only one ending character and it differs from the starting one, nested bordering is supported.\r\n     * Characters after escape character are ignored and cannot start or end a bordered part.\r\n     * Starting and ending characters in quoted part are ignored.\r\n     * NOTE: First character of the string is expected to be 'start'.\r\n     * NOTE: Should not be used for slicing quoted strings, use nextQuotedString instead.\r\n     * NOTE: It is expected, that there are no comments in the given string.\r\n     *\r\n     * @param str indexed string to be split\r\n     * @param start starting character of the string and also starting character of the bordered part (one character)\r\n     * @param end ending characters of the bordered part (one or more characters)\r\n     * @param escape character which makes next character being ignored (default '\\0')\r\n     * @return pair of the starting bordered part and the rest as indexed strings\r\n     */\r\n    static nextBorderedPart(str: IndexedString, start: string, end: string, escape: string = '\\0'):\r\n        { first: IndexedString, second: IndexedString } {\r\n        try {\r\n            const strParts: { first: string, second: string } = StringUtils.nextBorderedPart(str.toString(), start, end, escape);\r\n            return { first: str.slice(0, strParts.first.length), second: str.slice(strParts.first.length)};\r\n        }\r\n        catch (err) {\r\n            const startIndex = str.getFirstNonNaNIndex();\r\n            if (startIndex !== undefined) {\r\n                throw insertRangeIfUndefined(err, {start: startIndex, end: startIndex});\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Skips all whitespaces and exactly one given character and returns rest of the string.\r\n     * If the string does not match this pattern, throws error.\r\n     *\r\n     * @param str string to be skipped in\r\n     * @param char char to be skipped exactly one time (expected to be string of length 1)\r\n     * @return given string without starting sequence of whitespaces and exactly one char\r\n     */\r\n    public static skipWhitespacesAndChar(str: IndexedString, char: string): IndexedString {\r\n        try {\r\n            const skippedStr: string = StringUtils.skipWhitespacesAndChar(str.toString(), char);\r\n            return str.slice(str.length() - skippedStr.length);\r\n        }\r\n        catch (err) {\r\n            throw insertRangeIfUndefined(err, str.getNonNaNRange());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes all lines, where two first non-whitespace characters are '//'.\r\n     *\r\n     * @param str indexed string to be deleted comments in\r\n     */\r\n    public static deleteCommentLines(str: IndexedString) {\r\n        const {split, separatorIndexes} = str.splitToLines();\r\n        const toJoin = split.map(line => {\r\n            let insideQuotes: boolean = false;\r\n            let backslashes: number = 0;\r\n            for (let i = 0; i < line.length(); ++i) {\r\n                const curChar = line.charAt(i);\r\n                // quotes found\r\n                if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                    insideQuotes = !insideQuotes;\r\n                }\r\n                if (insideQuotes && curChar === '\\\\') {\r\n                    ++backslashes;\r\n                }\r\n                else {\r\n                    backslashes = 0;\r\n                }\r\n                // double-backslash found outside quotes\r\n                if (!insideQuotes && curChar === '/' && i > 0 && line.charAt(i - 1) === '/') {\r\n                    return line.slice(0, i - 1);\r\n                }\r\n            }\r\n            return line;\r\n        });\r\n        return IndexedString.join(toJoin, '\\n', separatorIndexes);\r\n    }\r\n}","import RATreeNode from \"./raTreeNode\";\r\n\r\n/**\r\n * Classes extending unary node.\r\n */\r\nexport type UnaryNodeClass = \"rename\" | \"projection\" | \"selection\";\r\n\r\n/**\r\n * Abstract node of the relational algebra syntactic tree with one subtree.\r\n */\r\nexport default abstract class UnaryNode extends RATreeNode {\r\n\r\n    protected subtree: RATreeNode;\r\n\r\n    protected constructor(subtree: RATreeNode) {\r\n        super();\r\n        this.subtree = subtree;\r\n    }\r\n\r\n    public getSubtree(): RATreeNode {\r\n        return this.subtree;\r\n    }\r\n}","import {ColumnContent, SupportedColumnType} from \"./columnType\";\r\nimport {isEqual} from \"lodash\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Row stores a set of columns' values in a relation.\r\n */\r\nexport default class Row {\r\n\r\n    private readonly types = new Map<string, SupportedColumnType>();\r\n    private values = new Map<string, ColumnContent>();\r\n    private finished: boolean;\r\n\r\n    /**\r\n     * Creates a new row with given columns. Given column set is final, no more column can be added.\r\n     * Given columns' values are set to null. They can be set to a new value by addColumn function, as long as the row\r\n     * is not set finished.\r\n     *\r\n     * @param columns set of columns in a row\r\n     */\r\n    public constructor(columns: Map<string, SupportedColumnType>) {\r\n        // adds empty columns\r\n        columns.forEach((value, name) => {\r\n            this.values.set(name, null);\r\n        });\r\n        this.types = columns;\r\n        this.finished = false;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the row is finished and no more column change is possible.\r\n     *\r\n     * @return true if the row is finished\r\n     */\r\n    public isFinished(): boolean {\r\n        return this.finished;\r\n    }\r\n\r\n    /**\r\n     * Sets the row as finished, no more changes in column values are possible.\r\n     */\r\n    public finish(): void {\r\n        this.finished = true;\r\n    }\r\n\r\n    /**\r\n     * Gets name of all columns in a row.\r\n     *\r\n     * @return set of all columns' names\r\n     */\r\n    public getColumnNames(): IterableIterator<string> {\r\n        return this.types.keys();\r\n    }\r\n\r\n    /**\r\n     * Adds a value to the row. If the addition succeeded, returns true. It can fail, if the row is finished,\r\n     * if there is no column of the given name or if there is a column with the name, but different type.\r\n     *\r\n     * @param name name of the column\r\n     * @param value new value of the column\r\n     * @return true if addition succeeded\r\n     */\r\n    public addValue(name: string, value: ColumnContent): boolean {\r\n        // finished row or not present column\r\n        if (this.finished || !this.types.has(name)) {\r\n            return false;\r\n        }\r\n        let givenType = typeof value;\r\n        // null can be set all column types\r\n        if (value !== null && givenType !== this.types.get(name)) {\r\n            return false;\r\n        }\r\n        this.values.set(name, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the value (possibly null) of the column with the given name. If there is no column with this name, undefined is returned.\r\n     *\r\n     * @param name name of the column\r\n     * @return value of the column or undefined if there is no such column\r\n     */\r\n    public getValue(name: string): ColumnContent | undefined {\r\n        return this.values.get(name);\r\n    }\r\n\r\n    /**\r\n     * Returns the type of the given column or undefined if the column is absent.\r\n     *\r\n     * @param name name of the column\r\n     * @return the type of the column\r\n     */\r\n    public getType(name: string): SupportedColumnType | undefined {\r\n        return this.types.get(name);\r\n    }\r\n\r\n    /**\r\n     * Gets types of all columns.\r\n     *\r\n     * @return map of columns (name -> type)\r\n     */\r\n    public getTypes(): Map<string, SupportedColumnType> {\r\n        return this.types;\r\n    }\r\n\r\n    /**\r\n     * Gets values of all columns.\r\n     *\r\n     * @return map of columns (name -> value)\r\n     */\r\n    public getValues(): Map<string, ColumnContent> {\r\n        return this.values;\r\n    }\r\n\r\n    /**\r\n     * Returns values of all columns ordered by given array of column names. OrderedColumns are expected to be from the\r\n     * relation that contains the row. The returned values are converted to string type. String column values are\r\n     * changed to printing representation - escaped '\\\\' and '\"' are returned without the escape '\\\\'.\r\n     *\r\n     * @param orderedColumns order of columns to be returned\r\n     * @return ordered array of values\r\n     */\r\n    public getOrderedPrintValues(orderedColumns: string[]): string[] {\r\n        let ret: string[] = [];\r\n        orderedColumns.forEach(column => {\r\n            const value = this.values.get(column);\r\n            const type = this.types.get(column);\r\n            // should be handled before call\r\n            if (value === undefined || type === undefined) {\r\n                throw ErrorFactory.codeError(language().codeErrors.row_absentColumn, column, [...this.types.values()].join(', '));\r\n            }\r\n            if (type === \"string\") {\r\n                const str = String(value).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n                ret.push(str);\r\n            }\r\n            else {\r\n                ret.push(String(value));\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Custom equals function.\r\n     *\r\n     * @param other\r\n     */\r\n    public equals(other: Object): boolean {\r\n        if (other instanceof Row) {\r\n            return isEqual(this.types, other.types) && isEqual(this.values, other.values);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import UnaryNode from \"./unaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Projection node of the relational algebra syntactic tree.\r\n */\r\nexport default class ProjectionNode extends UnaryNode {\r\n\r\n    private readonly projection: IndexedString;\r\n    private readonly stringRange: { start: number, end: number } | undefined;\r\n\r\n    /**\r\n     * Expects the projection string to start with '[' and end with ']'.\r\n     *\r\n     * @param projection\r\n     * @param subtree\r\n     */\r\n    constructor(projection: IndexedString, subtree: RATreeNode) {\r\n        super(subtree);\r\n        this.projection = projection;\r\n        this.stringRange = projection.getRange();\r\n    }\r\n\r\n    /**\r\n     * Parses projection string to set of projected columns.\r\n     * If doThrow is true, throws found errors. Otherwise, adds found errors to given errors array.\r\n     */\r\n    private parseProjection(): Set<IndexedString> {\r\n        const ret: Set<IndexedString> = new Set<IndexedString>();\r\n        // @ts-ignore\r\n        let str: IndexedString = this.projection.slice(1, -1);\r\n        let parts: IndexedString[] = str.split(\",\");\r\n        parts.forEach(part => ret.add(part.trim()));\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Expectations: projected names are subset of source schema\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const source: Relation = this.subtree.getResult();\r\n        const projectedIndexed: IndexedString[] = [...this.parseProjection()];\r\n        // checks if projected columns really exist in source relation\r\n        projectedIndexed.forEach(name => {\r\n            if (!source.hasColumn(name.toString())) {\r\n                throw ErrorFactory.semanticError(language().semanticErrors.projectionNode_absentColumn,\r\n                    name.getRange(), name.toString());\r\n            }\r\n        });\r\n\r\n        const projected: string[] = projectedIndexed.map(p => p.toString());\r\n        const result: Relation = new Relation(source.getName() + \"[...]\");\r\n        // projection of relational schema\r\n        source.forEachColumn((type, name) => {\r\n            if (projected.indexOf(name) > -1) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // projection of relation rows\r\n        source.getRows().forEach(row => {\r\n             let newRow: Row = new Row(result.getColumns());\r\n             row.getValues().forEach((value, name) => {\r\n                 if (projected.indexOf(name) > -1) {\r\n                     newRow.addValue(name, value);\r\n                 }\r\n             });\r\n             result.addRow(newRow);\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: projected names are subset of source schema\r\n     * Returned schema: intersection of projected names and source schema\r\n     * Second possible approach would be to return all projected names - less strict.\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        let source: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.subtree.fakeEval(cursorIndex);\r\n        // checks whether the cursor is in this projection block - saves current available columns\r\n        let whispers = source.whispers;\r\n        if (this.stringRange !== undefined && this.stringRange.start < cursorIndex && cursorIndex <= this.stringRange.end) {\r\n            whispers = source.result.getColumnNames();\r\n        }\r\n        // adds errors from current expression\r\n        const errors = source.errors;\r\n        const projected: Set<IndexedString> = this.parseProjection();\r\n        // creates relational schema - \"projected columns\"\r\n        const result: Relation = new Relation(source.result.name + \"[...]\");\r\n        // adds only projected, which exist in source\r\n        const absent: IndexedString[] = [];\r\n        projected.forEach(name => {\r\n            const strName = name.toString();\r\n            if (source.result.hasColumn(strName)) {\r\n                // @ts-ignore - strName must be in the source now\r\n                result.addColumn(strName, source.result.getColumns().get(strName));\r\n            }\r\n            else {\r\n                absent.push(name);\r\n            }\r\n        });\r\n        absent.forEach(column => {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.projectionNode_absentColumn,\r\n                column.getRange(), column.toString()));\r\n        });\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return language().operations.projection;\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.projection.replace(/\\s+/g, ' ');\r\n    }\r\n}","import {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Lowercase reserved keywords which cannot be used for column names. They are:\r\n * - Null value: null\r\n * - Boolean values: true, false\r\n * - Empty string: \"\"\r\n */\r\nconst forbiddenColumnNames: string[] = [\"null\", \"true\", \"false\", \"\"];\r\n\r\n/**\r\n * Reserved keywords which cannot be used for relation names. They are:\r\n * - First characters of outer joins: F, L, R\r\n * - Empty string: \"\"\r\n */\r\nconst forbiddenRelationNames: string[] = [\"F\", \"L\", \"R\", \"\"];\r\n\r\n/**\r\n * Returns lowercase reserved keywords which cannot be used for column names. They are:\r\n * - Null value: null\r\n * - Boolean values: true, false\r\n * - Empty string: \"\"\r\n */\r\nexport function getForbiddenColumnNames(): string[] {\r\n    return forbiddenColumnNames;\r\n}\r\n\r\n/**\r\n * Returns reserved keywords which cannot be used for relation names. They are:\r\n * - First characters of outer joins: F, L, R, f, l, r\r\n * - Empty string: \"\"\r\n */\r\nexport function getForbiddenRelationNames(): string[] {\r\n    return forbiddenRelationNames;\r\n}\r\n\r\n/**\r\n * Returns true if the given string is forbidden as a column name.\r\n */\r\nexport function isForbiddenColumnName(str: string | IndexedString): boolean {\r\n    return forbiddenColumnNames.indexOf(str.toString().toLowerCase()) > -1;\r\n}\r\n\r\n/**\r\n * Returns true if the given string is forbidden as a relation name.\r\n */\r\nexport function isForbiddenRelationName(str: string | IndexedString): boolean {\r\n    // does not use to lower because forbidden names are upper\r\n    return forbiddenRelationNames.indexOf(str.toString()) > -1;\r\n}","import {IndexedString} from \"./indexedString\";\r\n\r\ninterface KeyValue {\r\n    key: IndexedString,\r\n    value: IndexedString\r\n}\r\n\r\n/**\r\n * Wrapper of JavaScript Map object to provide usage of object IndexedString as a key for IndexedString values.\r\n */\r\nexport class ISToISMap {\r\n    private map: Map<string, KeyValue> = new Map<string, KeyValue>();\r\n\r\n    public get(key: string | IndexedString): IndexedString | undefined {\r\n        const keyValue = this.map.get(key.toString());\r\n        return keyValue === undefined ? undefined : keyValue.value;\r\n    }\r\n\r\n    public set(key: IndexedString, value: IndexedString): void {\r\n        this.map.set(key.toString(), {key, value});\r\n    }\r\n\r\n    public delete(key: IndexedString): boolean {\r\n        return this.map.delete(key.toString());\r\n    }\r\n\r\n    public has(key: string | IndexedString): boolean {\r\n        return this.map.has(key.toString());\r\n    }\r\n\r\n    public clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    public size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    public forEach(f: (value: IndexedString, row: IndexedString, index?: number) => void): void {\r\n        [...this.map.values()].forEach((keyValue, index) => f(keyValue.value, keyValue.key, index));\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Types of ComparingOperator class.\r\n */\r\nexport enum ComparingOperatorType {\r\n    equal,\r\n    nonEqual,\r\n    less,\r\n    more,\r\n    lessOrEqual,\r\n    moreOrEqual\r\n}\r\n\r\n/**\r\n * Comparing operator compares two values and returns boolean.\r\n */\r\nexport class ComparingOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of equality type (type = ComparingOperatorType.equal).\r\n     *\r\n     * @param operator used string representation of equality operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of equality type\r\n     */\r\n    public static equal(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.equal, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of non-equality type (type = ComparingOperatorType.nonEqual).\r\n     *\r\n     * @param operator used string representation of non-equality operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of non-equality type\r\n     */\r\n    public static nonEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.nonEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of less type (type = ComparingOperatorType.less).\r\n     *\r\n     * @param operator used string representation of less operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of less type\r\n     */\r\n    public static less(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.less, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of more type (type = ComparingOperatorType.more).\r\n     *\r\n     * @param operator used string representation of more operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of more type\r\n     */\r\n    public static more(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.more, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of less-or-equal type (type = ComparingOperatorType.lessOrEqual).\r\n     *\r\n     * @param operator used string representation of less-or-equal operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of less-or-equal type\r\n     */\r\n    public static lessOrEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.lessOrEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator instance of more-or-equal type (type = ComparingOperatorType.moreOrEqual).\r\n     *\r\n     * @param operator used string representation of more-or-equal operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     * @return new ComparingOperator instance of more-or-equal type\r\n     */\r\n    public static moreOrEqual(operator: IndexedString, left: VETreeNode, right: VETreeNode): ComparingOperator {\r\n        return new ComparingOperator(ComparingOperatorType.moreOrEqual, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates new ComparingOperator of the given type.\r\n     *\r\n     * @param type ComparingOperator type\r\n     * @param operator used string representation of the operator\r\n     * @param left left subtree producing a value\r\n     * @param right right subtree producing a value\r\n     */\r\n    public constructor(private readonly type: ComparingOperatorType, private readonly operator: IndexedString,\r\n                       private readonly left: VETreeNode, private readonly right: VETreeNode) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluate the node and its subtrees and compares their value results to produce a boolean value. It needs to\r\n     * receive results of the same type from its subtrees.\r\n     * NOTE: If one of the subtrees' results is null, only equality and non-equality are valid. Other comparing\r\n     * operations returns always false.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes\r\n     * @return boolean comparing left and right subtrees' values\r\n     */\r\n    public eval(source: Row): { value: boolean, type: \"boolean\" } {\r\n        const leftResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.left.eval(source);\r\n        const rightResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.right.eval(source);\r\n\r\n        if (leftResult.type !== \"null\" && rightResult.type !== \"null\" && leftResult.type !== rightResult.type) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.comparingOperator_differentInputTypes,\r\n                this.operator.getRange(), this.operator.toString(), leftResult.type, rightResult.type);\r\n        }\r\n\r\n        // if both values are null but both types are not null, returns false\r\n        if (leftResult.value === null && rightResult.value === null && leftResult.type !== \"null\" && rightResult.type !== \"null\") {\r\n            return {value: false, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.equal) {\r\n            return {value: leftResult.value === rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.nonEqual) {\r\n            // if any value of non-null type is null, returns false\r\n            if ((leftResult.value === null && leftResult.type !== \"null\") || (rightResult.value === null && rightResult.type !== \"null\")) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value !== rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.less) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value < rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.more) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value > rightResult.value, type: \"boolean\"};\r\n        }\r\n        if (this.type === ComparingOperatorType.lessOrEqual) {\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value <= rightResult.value, type: \"boolean\"};\r\n        }\r\n        // if (this.type === ComparingOperatorType.moreOrEqual)\r\n            if (leftResult.value === null || rightResult.value === null) {\r\n                return {value: false, type: \"boolean\"};\r\n            }\r\n            return {value: leftResult.value >= rightResult.value, type: \"boolean\"};\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"(\" + this.left.toString() + \" \" + this.operator.toString() + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import UnaryNode from \"./unaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\nimport Relation from \"../relation/relation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport Row from \"../relation/row\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {isForbiddenColumnName} from \"../utils/keywords\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {ISToISMap} from \"../types/isToISMap\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Renaming node of the relational algebra syntactic tree.\r\n */\r\nexport default class RenameNode extends UnaryNode {\r\n\r\n    private readonly rename: IndexedString;\r\n    private readonly stringRange: { start: number, end: number } | undefined;\r\n\r\n    /**\r\n     * Creates a new renaming node with given subtree.\r\n     * The rename string is expected to start with '<' and end with '>'.\r\n     *\r\n     * @param rename string describing each renaming\r\n     * @param subtree source subtree for renaming\r\n     */\r\n    public constructor(rename: IndexedString, subtree: RATreeNode) {\r\n        super(subtree);\r\n        this.rename = rename;\r\n        this.stringRange = rename.getRange();\r\n    }\r\n\r\n    private parseChanges(doThrow: boolean, errors: ErrorWithTextRange[] = []): ISToISMap {\r\n        const handleError = (error: SyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            } else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        const parts: IndexedString[] = this.rename.slice(1, -1).split(\",\");\r\n        const ret: ISToISMap = new ISToISMap();\r\n        for (let part of parts) {\r\n            // @ts-ignore\r\n            let words: IndexedString[] = part.split(\"->\").map(w => w.trim());\r\n            let beforeError = false; // true when there was an error in before in \"before -> after\"\r\n            let afterError = false;  // true when there was an error in after in \"before -> after\"\r\n            if (words.length !== 2) {\r\n                let range = part.getRange();\r\n                if (part.isEmpty() && this.stringRange !== undefined) {\r\n                    range = {start: this.stringRange.start, end: this.stringRange.start};\r\n                }\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.renameNode_missingArrow, range));\r\n                beforeError = true;\r\n                afterError = true;\r\n            }\r\n            if (!beforeError && ret.has(words[0])) {\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.renameNode_multipleRenameOfTheColumn,\r\n                    words[0].getRange(), words[0].toString()));\r\n                beforeError = true;\r\n            }\r\n            if (!afterError && !StringUtils.isName(words[1].toString())) {\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.renameNode_invalidNewName,\r\n                    words[1].getRange(), words[1].toString()));\r\n                afterError = true;\r\n            }\r\n            if (!afterError && isForbiddenColumnName(words[1])) {\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.renameNode_keywordNewName,\r\n                    words[1].getRange(), words[1].toString()));\r\n                afterError = true;\r\n            }\r\n            // if no error found, adds original rename pair\r\n            if (!beforeError && !afterError) {\r\n                ret.set(words[0], words[1]);\r\n            }\r\n            // if no before error, fakes rename \"before -> before\"\r\n            else if (!beforeError) {\r\n                ret.set(words[0], words[0]);\r\n            }\r\n            // if no after error, fakes rename \"\"\" -> before\", where empty string has undefined range\r\n            else if (!afterError) {\r\n                ret.set(IndexedString.empty(), words[0]);\r\n            }\r\n            // if both errors, adds nothing\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Expectations: original names in projection pair (original -> new) are subset of the source schema,\r\n     * new names with rest of the source schema contain no duplicity\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const changes: ISToISMap = this.parseChanges(true);\r\n        const source: Relation = this.subtree.getResult();\r\n        // check whether all columns to rename are in source relation\r\n        changes.forEach((value, key) => {\r\n             if (source.getColumnNames().indexOf(key.toString()) === -1) {\r\n                 throw ErrorFactory.semanticError(language().semanticErrors.renameNode_absentOriginalColumn,\r\n                     key.getRange(), key.toString());\r\n             }\r\n        });\r\n        // rename of relational schema\r\n        const result: Relation = new Relation(source.getName() + \"<...>\");\r\n        const toChange: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>();\r\n        // in first loop adds unchanged columns only\r\n        source.forEachColumn((type, name) => {\r\n            if (changes.has(name)) {\r\n                toChange.set(name, type);\r\n            }\r\n            else {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // in second loop adds changed columns\r\n        toChange.forEach((type, name) => {\r\n            // @ts-ignore (changes must contain 'name' key now)\r\n            if (!result.addColumn(changes.get(name).toString(), type)) {\r\n                const newName = changes.get(name);\r\n                throw ErrorFactory.semanticError(language().semanticErrors.renameNode_changeToDuplicit,\r\n                    this.rename.getRange(), newName ? newName.toString() : \"\");\r\n            }\r\n        });\r\n        // rename of relation rows\r\n        source.getRows().forEach(row => {\r\n            const newRow: Row = new Row(result.getColumns());\r\n            row.getValues().forEach((value, name) => {\r\n                const returned = changes.get(name);\r\n                if (typeof returned === \"undefined\") {\r\n                    newRow.addValue(name, value);\r\n                }\r\n                else {\r\n                    newRow.addValue(returned.toString(), value);\r\n                }\r\n            });\r\n            result.addRow(newRow);\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: original names in projection pair (original -> new) are subset of the source schema,\r\n     * new names with rest of the source schema contain no duplicity\r\n     * Returned schema: if the cursor is not after the arrow '->' returns\r\n     * (source schema minus originals) union (news whose originals were in source schema),\r\n     * otherwise returns empty array (does not whisper to what the user should rename)\r\n     * Second possible approach would be to return (source schema minus originals) union (news) - less strict.\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const source: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.subtree.fakeEval(cursorIndex);\r\n        // checks whether the cursor is in this rename block\r\n        let whispers = source.whispers;\r\n        if (this.stringRange !== undefined && this.stringRange.start < cursorIndex && cursorIndex <= this.stringRange.end) {\r\n            // if the last special character before cursor is '<' or ',' returns current available columns (subtree schema)\r\n            const beforeCursor: IndexedString = this.rename.slice(0, cursorIndex - this.stringRange.start).trim();\r\n            const regexMatch = beforeCursor.match(/.*[^\\w\\s]/);\r\n            if (regexMatch !== null && (regexMatch[0].endsWith('<') || regexMatch[0].endsWith(','))) {\r\n                whispers = source.result.getColumnNames();\r\n            }\r\n        }\r\n        // adds errors from current expression\r\n        const errors = source.errors;\r\n        const changes: ISToISMap = this.parseChanges(false, errors);\r\n        // creates relational schema - \"(source minus to-rename) union (renamed existing in source)\"\r\n        const result: Relation = new Relation(source.result.getName() + \"<...>\");\r\n        // in first loop adds source columns which are not in changes.keys\r\n        source.result.forEachColumn((type, name) => {\r\n            if (!changes.has(name)) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // in second loop adds changes.values whose changes.keys are in source\r\n        const absent: IndexedString[] = [];\r\n        const duplicit: IndexedString[] = [];\r\n        changes.forEach((after, before) => {\r\n            const beforeStr = before.toString();\r\n            const afterStr = after.toString();\r\n            if (!source.result.hasColumn(beforeStr) && !before.isEmpty()) {\r\n                absent.push(before);\r\n            }\r\n            // @ts-ignore source must have beforeStr now\r\n            else if(!result.addColumn(afterStr, source.result.getColumns().get(beforeStr))) {\r\n                duplicit.push(after);\r\n            }\r\n        });\r\n        absent.forEach(column => {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.renameNode_absentOriginalColumn,\r\n                column.getRange(), column.toString()));\r\n        });\r\n        duplicit.forEach(column => {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.renameNode_changeToDuplicit,\r\n                column.getRange(), column.toString()));\r\n        });\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return language().operations.rename;\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.rename.replace(/\\s+/g, ' ');\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\n\r\n/**\r\n * Abstract class for value-evaluating nodes producing new values.\r\n */\r\nexport abstract class VETreeNode {\r\n\r\n    /**\r\n     * Evaluates this value-evaluating tree.\r\n     *\r\n     * @param source row with values to be used to reference to\r\n     * @return evaluated value and its type\r\n     */\r\n    public abstract eval(source: Row): { value: ColumnContent, type: SupportedColumnType | \"null\" };\r\n\r\n    /**\r\n     * @return string representation of the value-evaluating tree\r\n     */\r\n    public abstract toString(): string;\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Types of LogicalOperator class.\r\n */\r\nenum LogicalOperatorType {\r\n    and,\r\n    or,\r\n    not\r\n}\r\n\r\n/**\r\n * Logical operator chains boolean values and produces new ones.\r\n */\r\nexport class LogicalOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates an 'and' logical operator.\r\n     *\r\n     * @param operator String representing an 'and' in input (used to printing)\r\n     * @param left Left subtree evaluating to a boolean value\r\n     * @param right Right subtree evaluating to a boolean value\r\n     */\r\n    public static and(operator: IndexedString, left: VETreeNode, right: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.and, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates an 'or' logical operator.\r\n     *\r\n     * @param operator String representing an 'or' in input (used to printing)\r\n     * @param left Left subtree evaluating to a boolean value\r\n     * @param right Right subtree evaluating to a boolean value\r\n     */\r\n    public static or(operator: IndexedString, left: VETreeNode, right: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.or, operator, left, right);\r\n    }\r\n\r\n    /**\r\n     * Creates a 'not' logical operator.\r\n     *\r\n     * @param operator String representing a 'not' in input (used to printing)\r\n     * @param subtree Subtree evaluating to a boolean value\r\n     */\r\n    public static not(operator: IndexedString, subtree: VETreeNode): LogicalOperator {\r\n        return new LogicalOperator(LogicalOperatorType.not, operator, subtree);\r\n    }\r\n\r\n    private constructor(private readonly type: LogicalOperatorType, private readonly operator: IndexedString,\r\n                        private readonly left: VETreeNode, private readonly right?: VETreeNode) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluates recursively subtrees and transforms their boolean results into a new boolean.\r\n     * If any subtree evaluates to string or number, throws error.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes\r\n     * @return boolean comparing left and right subtrees' values\r\n     */\r\n    public eval(source: Row): { value: boolean, type: \"boolean\" } {\r\n\r\n        const leftResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.left.eval(source);\r\n        if (leftResult.type !== \"boolean\") {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.logicalOperator_leftInputNotBoolean,\r\n                this.operator.getRange(), this.operator.toString(), leftResult.type);\r\n        }\r\n\r\n        if (this.type === LogicalOperatorType.not) {\r\n            if (leftResult.value === null) {\r\n                return { value: false, type: \"boolean\" };\r\n            }\r\n            return { value: !leftResult.value, type: \"boolean\" };\r\n        }\r\n        else {\r\n            // @ts-ignore (in and/or operations right subtree must exist)\r\n            const rightResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.right.eval(source);\r\n            if (rightResult.type !== \"boolean\") {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.logicalOperator_rightInputNotBoolean,\r\n                    this.operator.getRange(), this.operator.toString(), rightResult.type);\r\n            }\r\n\r\n            if (this.type === LogicalOperatorType.and) {\r\n                if (leftResult.value === null || rightResult.value === null) {\r\n                    return { value: false, type: \"boolean\" };\r\n                }\r\n                // @ts-ignore (they must be both booleans now)\r\n                return { value: leftResult.value && rightResult.value, type: \"boolean\" };\r\n            }\r\n            else /* if (this.type === LogicalOperatorType.or)*/ {\r\n                if (leftResult.value === null && rightResult.value === null) {\r\n                    return { value: false, type: \"boolean\" };\r\n                }\r\n                if (leftResult.value === null) {\r\n                    // @ts-ignore (it must be boolean now)\r\n                    return { value: rightResult.value, type: \"boolean\" };\r\n                }\r\n                if (rightResult.value === null) {\r\n                    // @ts-ignore (it must be boolean now)\r\n                    return { value: leftResult.value, type: \"boolean\" };\r\n                }\r\n                // @ts-ignore (they must be both booleans now)\r\n                return { value: leftResult.value || rightResult.value, type: \"boolean\" };\r\n            }\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.type === LogicalOperatorType.not) {\r\n            return this.operator.toString() + \"(\" + this.left.toString() + \")\";\r\n        }\r\n        // @ts-ignore (in and, or operations right subtree must exist)\r\n        return \"(\" + this.left.toString() + \" \" + this.operator.toString() + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Types of ComputingOperator class.\r\n */\r\nenum ComputingOperatorType {\r\n    plus = \"+\",\r\n    minus = \"-\",\r\n    multiplication = \"*\",\r\n    division = \"/\"\r\n}\r\n\r\n/**\r\n * Comparing operator takes two number values and returns a new computed number.\r\n */\r\nexport class ComputingOperator extends VETreeNode {\r\n\r\n    /**\r\n     * Creates an addition (+) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value\r\n     * @param right Right subtree evaluating to a number value\r\n     * @param range Range of the operator in the input string to highlight errors\r\n     */\r\n    public static add(left: VETreeNode, right: VETreeNode, range: {start: number, end: number} | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.plus, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a deduction (-) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value\r\n     * @param right Right subtree evaluating to a number value\r\n     * @param range Range of the operator in the input string to highlight errors\r\n     */\r\n    public static deduct(left: VETreeNode, right: VETreeNode, range: {start: number, end: number} | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.minus, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a multiplication (*) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value\r\n     * @param right Right subtree evaluating to a number value\r\n     * @param range Range of the operator in the input string to highlight errors\r\n     */\r\n    public static multiply(left: VETreeNode, right: VETreeNode, range: {start: number, end: number} | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.multiplication, left, right, range);\r\n    }\r\n\r\n    /**\r\n     * Creates a division (/) computing operator.\r\n     *\r\n     * @param left Left subtree evaluating to a number value\r\n     * @param right Right subtree evaluating to a number value\r\n     * @param range Range of the operator in the input string to highlight errors\r\n     */\r\n    public static divide(left: VETreeNode, right: VETreeNode, range: {start: number, end: number} | undefined): ComputingOperator {\r\n        return new ComputingOperator(ComputingOperatorType.division, left, right, range);\r\n    }\r\n\r\n    private constructor(private readonly type: ComputingOperatorType, private readonly left: VETreeNode,\r\n                        private readonly right: VETreeNode, private readonly range: {start: number, end: number} | undefined) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Evaluates recursively subtrees and transforms their number results into a new number.\r\n     * If any subtree evaluates to string or boolean, throws error.\r\n     * If any subtree evaluates to null, returns null.\r\n     *\r\n     * @param source row with actual values of columns recursively passed to leaf reference nodes\r\n     * @return number produced from subtrees with given operation, or null if any subtree returned null\r\n     */\r\n    public eval(source: Row): { value: number | null, type: \"number\" } {\r\n        const leftResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.left.eval(source);\r\n        const rightResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = this.right.eval(source);\r\n\r\n        if (leftResult.type !== \"number\" || rightResult.type !== \"number\") {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.computingOperator_inputTypesNotNumbers, this.range,\r\n                this.type, leftResult.type, rightResult.type);\r\n        }\r\n\r\n        if (leftResult.value === null || rightResult.value === null) {\r\n            return { value: null, type: \"number\" };\r\n        }\r\n\r\n        switch (this.type) {\r\n            case ComputingOperatorType.plus:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value + rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.minus:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value - rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.multiplication:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value * rightResult.value, type: \"number\" };\r\n            case ComputingOperatorType.division:\r\n                // @ts-ignore (ensured by first if)\r\n                return { value: leftResult.value / rightResult.value, type: \"number\" };\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"(\" + this.left.toString() + \" \" + this.type + \" \" + this.right.toString() + \")\";\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\n\r\n/**\r\n * Class storing literal value of number, string or null type.\r\n */\r\nexport class LiteralValue extends VETreeNode {\r\n\r\n    /**\r\n     * Creates a literal storing given value.\r\n     *\r\n     * @param value value to be returned by eval(...) function\r\n     * @param type type of the literal value\r\n     */\r\n    public constructor(private readonly value: ColumnContent, private readonly type: SupportedColumnType | \"null\") {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Returns stored value.\r\n     *\r\n     * @param source row with actual values of columns (note: not used in literals)\r\n     * @return stored value and its type\r\n     */\r\n    public eval(source: Row): { value: ColumnContent, type: SupportedColumnType | \"null\" } {\r\n        return { value: this.value, type: this.type };\r\n    }\r\n\r\n    public toString(): string {\r\n        if (this.value === null) {\r\n            return \"null\";\r\n        }\r\n        return this.value.toString();\r\n    }\r\n}","import Row from \"../relation/row\";\r\nimport {VETreeNode} from \"./veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Class storing reference to a column.\r\n */\r\nexport class ReferenceValue extends VETreeNode {\r\n\r\n    /**\r\n     * Creates a reference to the given column.\r\n     *\r\n     * @param columnName name of the column whose value is returned by eval(...) function\r\n     */\r\n    public constructor(private readonly columnName: IndexedString) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Returns value (expected to be string, number, or boolean) of the referenced column from given source row.\r\n     *\r\n     * @param source row with actual values of columns\r\n     * @return referenced value and its type\r\n     */\r\n    public eval(source: Row): { value: ColumnContent, type: SupportedColumnType } {\r\n        const value: ColumnContent | undefined = source.getValue(this.columnName.toString());\r\n        const type: SupportedColumnType | undefined = source.getType(this.columnName.toString());\r\n        if (value === undefined || type === undefined) {\r\n            throw ErrorFactory.semanticError(language().semanticErrors.referenceValue_absentColumn,\r\n                this.columnName.getRange(), this.columnName.toString(), [...source.getColumnNames()].join(', '));\r\n        }\r\n        return { value: value, type: type };\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.columnName.toString();\r\n    }\r\n}","import {ComparingOperatorType} from \"../vetree/comparingOperator\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Precedence value for all token types.\r\n */\r\nconst precedenceNot: number = 50;\r\nconst precedenceMulDiv: number = 30;\r\nconst precedencePlusMinus: number = 25;\r\nconst precedenceComparison: number = 20;\r\nconst precedenceAnd: number = 10;\r\nconst precedenceOr: number = 5;\r\n\r\n/**\r\n * Tokens used for parsing of string expression to BooleanEvaluating tree.\r\n */\r\nexport abstract class ValueToken {\r\n    protected constructor(public readonly str: IndexedString) {}\r\n\r\n    /**\r\n     * Gets token start and end index in the text (if the token has IndexedString representation) or undefined.\r\n     */\r\n    public getRange(): {start: number, end: number} | undefined {\r\n        return this.str.getNonNaNRange();\r\n    }\r\n}\r\n\r\nexport abstract class OperatorToken extends ValueToken {\r\n    protected constructor(str: IndexedString, readonly precedence: number) {\r\n        super(str);\r\n    }\r\n}\r\n\r\nexport class LogicalNotToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceNot);\r\n    }\r\n}\r\n\r\nexport class LogicalAndToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceAnd);\r\n    }\r\n}\r\n\r\nexport class LogicalOrToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceOr);\r\n    }\r\n}\r\n\r\nexport class ComputingMultiplicationToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceMulDiv);\r\n    }\r\n}\r\n\r\nexport class ComputingDivisionToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedenceMulDiv);\r\n    }\r\n}\r\n\r\nexport class ComputingPlusToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedencePlusMinus);\r\n    }\r\n}\r\n\r\nexport class ComputingMinusToken extends OperatorToken {\r\n    constructor(operator: IndexedString) {\r\n        super(operator, precedencePlusMinus);\r\n    }\r\n}\r\n\r\nexport class ComparingToken extends OperatorToken {\r\n    constructor(readonly type: ComparingOperatorType, operator: IndexedString) {\r\n        super(operator, precedenceComparison);\r\n    }\r\n}\r\n\r\nexport abstract class ParenthesisToken extends ValueToken {\r\n    protected constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class OpeningParentheses extends ParenthesisToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class ClosingParentheses extends ParenthesisToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(operator: IndexedString) {\r\n        super(operator);\r\n    }\r\n}\r\n\r\nexport class LiteralToken extends ValueToken {\r\n    constructor(str: IndexedString, readonly value: ColumnContent, readonly type: SupportedColumnType | \"null\") {\r\n        super(str);\r\n    }\r\n}\r\n\r\nexport class ReferenceToken extends ValueToken {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(columnName: IndexedString) {\r\n        super(columnName);\r\n    }\r\n}","import StringUtils from \"../utils/stringUtils\";\r\nimport {ComparingOperator, ComparingOperatorType} from \"../vetree/comparingOperator\";\r\nimport {LogicalOperator} from \"../vetree/logicalOperator\";\r\nimport {LiteralValue} from \"../vetree/literalValue\";\r\nimport {ReferenceValue} from \"../vetree/referenceValue\";\r\nimport {ComputingOperator} from \"../vetree/computingOperator\";\r\nimport {\r\n    ClosingParentheses,\r\n    ComparingToken,\r\n    ComputingDivisionToken,\r\n    ComputingMinusToken,\r\n    ComputingMultiplicationToken,\r\n    ComputingPlusToken,\r\n    LiteralToken,\r\n    LogicalAndToken,\r\n    LogicalNotToken,\r\n    LogicalOrToken,\r\n    OpeningParentheses,\r\n    OperatorToken,\r\n    ParenthesisToken,\r\n    ReferenceToken,\r\n    ValueToken\r\n} from \"./valueTokens\"\r\nimport {VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport IndexedStringUtils from \"../utils/indexedStringUtils\";\r\nimport ErrorWithTextRange, {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport RASyntaxError from \"../error/raSyntaxError\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * StringUtils of string infix boolean and algebraic expression to value-evaluating tree.\r\n */\r\nexport default class ValueParser {\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression into an value-evaluating tree and returns the tree.\r\n     * Uses Shunting-yard algorithm (first, it transforms the string into reverse polish notation).\r\n     * Supported expressions:\r\n     * - logical: and (&&, &), or (||, |), not (!, ~)\r\n     * - computing: addition (+), deduction (-), multiplication (*), division (/)\r\n     * - comparing: equal (==, =), non-equal (!=, <>), less (<), more (>), less-or-equal (<=), more-or-equal (>=)\r\n     * - literals: numbers (1, 5.02, etc.), strings (\"String\", \"With inner \\\" symbol\", etc.), nulls (null),\r\n     * booleans (true, false)\r\n     * - column references (ColumnNameAsStringWithoutQuotes, Id, etc.)\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @return VETreeNode tree (its root)\r\n     */\r\n    public static parse(str: IndexedString, nullValuesSupport: boolean): VETreeNode {\r\n        let tokens: ValueToken[] = ValueParser.parseTokens(str, nullValuesSupport, true);\r\n        this.assertValidInfixTokens(tokens, true);\r\n        tokens = this.simplify(tokens);\r\n        try {\r\n            const rpn: ValueToken[] = ValueParser.toRPN(tokens);\r\n            return ValueParser.rpnToVETree(rpn);\r\n        }\r\n        catch (err) {\r\n            throw insertRangeIfUndefined(err, str.getRange());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression and returns errors in it.\r\n     * For supported operations see ValueParser.parse().\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param columns\r\n     */\r\n    public static fakeParse(str: IndexedString, nullValuesSupport: boolean, columns: string[]): ErrorWithTextRange[] {\r\n        const errors: ErrorWithTextRange[] = [];\r\n        let tokens: ValueToken[] = ValueParser.parseTokens(str, nullValuesSupport, false, errors);\r\n        tokens.forEach(token => {\r\n            if (token instanceof ReferenceToken && columns.indexOf(token.str.toString()) === -1) {\r\n                errors.push(ErrorFactory.semanticError(language().semanticErrors.referenceValue_absentColumn,\r\n                    token.str.getRange(), token.str.toString(), columns.join(', ')));\r\n            }\r\n        })\r\n        this.assertValidInfixTokens(tokens, false, errors);\r\n        return errors;\r\n    }\r\n\r\n    /**\r\n     * Parses given string infix boolean and algebraic expression into an array of Tokens.\r\n     * Tokens are returned infix (in order parsed from string).\r\n     * If doThrow is true, found errors are thrown. Otherwise, they are added in errors array and ignored.\r\n     *\r\n     * @param str infix boolean and algebraic expression to be parsed\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param doThrow true if errors should be thrown\r\n     * @param errors array for storing not thrown errors\r\n     * @return infix array of parsed Tokens\r\n     */\r\n    public static parseTokens(str: IndexedString, nullValuesSupport: boolean, doThrow: boolean,\r\n                              errors: ErrorWithTextRange[] = []): ValueToken[] {\r\n        const handleError = (error: RASyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            }\r\n            else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        let rest: IndexedString = str.trim();\r\n        if (rest.isEmpty()) {\r\n            handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_emptyInput, undefined));\r\n        }\r\n        const tokens: ValueToken[] = [];\r\n        while (!rest.isEmpty()) {\r\n            // PARENTHESES\r\n            if (rest.startsWith('(')) {\r\n                tokens.push(new OpeningParentheses(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith(')')) {\r\n                tokens.push(new ClosingParentheses(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // COMPUTING OPERATORS\r\n            else if (rest.startsWith('+')) {\r\n                tokens.push(new ComputingPlusToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('-')) {\r\n                tokens.push(new ComputingMinusToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('*')) {\r\n                tokens.push(new ComputingMultiplicationToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('/')) {\r\n                tokens.push(new ComputingDivisionToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // COMPARING OPERATORS\r\n            else if (rest.startsWith('==')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.equal, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('=')) {     // NOTE: needs to be after '==' check\r\n                tokens.push(new ComparingToken(ComparingOperatorType.equal, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('!=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.nonEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<>')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.nonEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.lessOrEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('>=')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.moreOrEqual, rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('<')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.less, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('>')) {\r\n                tokens.push(new ComparingToken(ComparingOperatorType.more, rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // LOGICAL OPERATORS\r\n            else if (rest.startsWith('!') || rest.startsWith('~')\r\n                || rest.startsWith('\\u00ac')) { // NOTE: needs to be after '!=' check\r\n                tokens.push(new LogicalNotToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('&&')) {\r\n                tokens.push(new LogicalAndToken(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('&') || rest.startsWith('\\u2227')) { // NOTE: needs to be after '&&' check\r\n                tokens.push(new LogicalAndToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            else if (rest.startsWith('||')) {\r\n                tokens.push(new LogicalOrToken(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n            }\r\n            else if (rest.startsWith('|') || rest.startsWith('\\u2228')) { // NOTE: needs to be after '||' check\r\n                tokens.push(new LogicalOrToken(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n            }\r\n            // LITERALS\r\n            else if (rest.startsWith('\"')) {\r\n                const split = IndexedStringUtils.nextQuotedString(rest);\r\n                if (split.error !== undefined) {\r\n                    handleError(split.error);\r\n                }\r\n                const end = split.first.length() > 1 ? -1 : undefined;\r\n                const str = split.first.slice(1, end);\r\n                tokens.push(new LiteralToken(str, str.toString(), \"string\"));\r\n                rest = split.second;\r\n            }\r\n            else if (StringUtils.isDigit(rest.charAt(0))) {\r\n                let split = IndexedStringUtils.nextNumber(rest);\r\n                tokens.push(new LiteralToken(split.first, Number(split.first.toString()), \"number\"));\r\n                rest = split.second;\r\n            }\r\n            else if (rest.startsWith('null')) {\r\n                if (!nullValuesSupport) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_unsupportedNull,\r\n                        rest.slice(0, 4).getRange()));\r\n                }\r\n                tokens.push(new LiteralToken(rest.slice(0, 4), null, \"null\"));\r\n                rest = rest.slice(4);\r\n            }\r\n            else if (rest.startsWith('true') || rest.startsWith('True') || rest.startsWith('TRUE')) {\r\n                tokens.push(new LiteralToken(rest.slice(0, 4), true, \"boolean\"));\r\n                rest = rest.slice(4);\r\n            }\r\n            else if (rest.startsWith('false') || rest.startsWith('False') || rest.startsWith('FALSE')) {\r\n                tokens.push(new LiteralToken(rest.slice(0, 5), false, \"boolean\"));\r\n                rest = rest.slice(5);\r\n            }\r\n            // COLUMN REFERENCE\r\n            else if (StringUtils.isLetter(rest.charAt(0)) || rest.charAt(0) === '_') {\r\n                let split = IndexedStringUtils.nextName(rest);\r\n                tokens.push(new ReferenceToken(split.first));\r\n                rest = split.second;\r\n            }\r\n            // UNEXPECTED PART\r\n            else {\r\n                const split = IndexedStringUtils.nextNonWhitespacePart(rest);\r\n                handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_unexpectedPart,\r\n                    split.first.getRange(), split.first.toString()));\r\n                rest = rest.slice(split.first.length());\r\n            }\r\n            rest = rest.trim();\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * It checks whether all adjacent pairs of tokens are possible and if the array start and end are valid\r\n     * (e.i., it starts with '(', literal, column reference or '!' and it ends with ')', literal or column reference).\r\n     * If doThrow is true, found errors are thrown. Otherwise, they are added in errors array and ignored.\r\n     */\r\n    public static assertValidInfixTokens(tokens: ValueToken[], doThrow: boolean, errors: ErrorWithTextRange[] = []) {\r\n        if (tokens.length === 0) {\r\n            return;\r\n        }\r\n        \r\n        const handleError = (error: RASyntaxError) => {\r\n            if (doThrow) {\r\n                throw error;\r\n            }\r\n            else {\r\n                errors.push(error);\r\n            }\r\n        }\r\n        \r\n        // checks start of an array: it must start with '(', literal, reference or '!'\r\n        // it cannot start with binary operator or ')'\r\n        if ((tokens[0] instanceof ClosingParentheses) || ((tokens[0] instanceof OperatorToken) && !(tokens[0] instanceof LogicalNotToken))) {\r\n            handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_invalidStart,\r\n                tokens[0].getRange(), tokens[0].str.toString()));\r\n        }\r\n        // checks end of an array: it must end with ')', literal or reference\r\n        // it cannot end with operator or '('\r\n        if ((tokens[tokens.length - 1] instanceof OpeningParentheses) || (tokens[tokens.length - 1] instanceof OperatorToken)) {\r\n            handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_invalidEnd,\r\n                tokens[tokens.length - 1].getRange(), tokens[tokens.length - 1].str.toString()));\r\n        }\r\n        // checks adjacent pairs of tokens\r\n        let i2: number = 1;\r\n        while (i2 < tokens.length) {\r\n            const token1: ValueToken = tokens[i2 - 1];\r\n            const token2: ValueToken = tokens[i2];\r\n            ++i2;\r\n\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            if (token2 instanceof LiteralToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_literalAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_literalAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_literalAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof ReferenceToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_referenceAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_referenceAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_referenceAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof LogicalNotToken) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_notAfterLiteral,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_notAfterReference,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_notAfterClosing,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: literal, reference or ')'\r\n            // invalid predecessors: operator or '('\r\n            else if (token2 instanceof OperatorToken /* only binary (without LogicalNotToken) */ ) {\r\n                if (token1 instanceof OperatorToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_binaryAfterOperator,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof OpeningParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_binaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString()));\r\n                }\r\n            }\r\n            // valid predecessors: operator or '('\r\n            // invalid predecessors: literal, reference or ')'\r\n            else if (token2 instanceof OpeningParentheses) {\r\n                if (token1 instanceof LiteralToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_openingAfterLiteral,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ReferenceToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_openingAfterReference,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof ClosingParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_openingAfterClosing,\r\n                        token2.getRange()));\r\n                }\r\n            }\r\n            // valid predecessors: literal or reference\r\n            // invalid predecessors: operator, '(' or ')'\r\n            else if (token2 instanceof ClosingParentheses) {\r\n                if (token1 instanceof OperatorToken) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_closingAfterOperator,\r\n                        token2.getRange(), token1.str.toString()));\r\n                }\r\n                if (token1 instanceof OpeningParentheses) {\r\n                    handleError(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_closingAfterOpening,\r\n                        token2.getRange()));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Simplifies given token array in infix form. That means all groups of LogicalNotTokens ('!') are reduced to 1 or 0\r\n     * tokens (\"!\" => \"!\", \"!!\" => \"\", \"!!!\" => \"!\", \"!!!!\" => \"\", ...).\r\n     *\r\n     * @param tokens tokens to simplify\r\n     */\r\n    public static simplify(tokens: ValueToken[]): ValueToken[] {\r\n        const notIndexes: number[] = [];\r\n        const indexesToRemove: Set<number> = new Set<number>();\r\n        // finds indexes in tokens where '!'s are\r\n        tokens.forEach((token, i) => {\r\n            if (token instanceof LogicalNotToken) {\r\n                notIndexes.push(i);\r\n            }\r\n        });\r\n        for (let i = 1; i < notIndexes.length; ++i) {\r\n            // if there is \"x - 1\" and \"x\" next to each other, adds them to remove\r\n            if (notIndexes[i - 1] + 1 === notIndexes[i]) {\r\n                indexesToRemove.add(notIndexes[i - 1]);\r\n                indexesToRemove.add(notIndexes[i]);\r\n                notIndexes[i] = NaN; // sets to NaN to not remove possible third '!' in a row\r\n            }\r\n        }\r\n        if (indexesToRemove.size === 0) {\r\n            return tokens;\r\n        }\r\n        return tokens.filter((t, i) => !indexesToRemove.has(i));\r\n    }\r\n\r\n    /**\r\n     * Transforms given infix boolean and algebraic expression into postfix (reverse polish) form.\r\n     *\r\n     * @param tokens infix boolean and algebraic expression as Token array\r\n     * @return postfix (reverse polish) form of given array\r\n     */\r\n    public static toRPN(tokens: ValueToken[]): ValueToken[] {\r\n        const rpnQueue: ValueToken[] = [];\r\n        const operatorsStack: Array<OperatorToken | ParenthesisToken> = [];\r\n        tokens.forEach(token => {\r\n            if (token instanceof LiteralToken || token instanceof ReferenceToken) {\r\n                rpnQueue.push(token);\r\n            }\r\n            else if (token instanceof OperatorToken) {\r\n                while (operatorsStack.length > 0 && operatorsStack[operatorsStack.length - 1] instanceof OperatorToken) {\r\n                    // @ts-ignore (token must be of OperatorToken class)\r\n                    let other: OperatorToken = operatorsStack[operatorsStack.length - 1];\r\n                    // all used operators have left associativity\r\n                    if (token.precedence <= other.precedence) {\r\n                        // @ts-ignore (token must be present)\r\n                        rpnQueue.push(operatorsStack.pop());\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof OpeningParentheses) {\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof ClosingParentheses) {\r\n                while (true) {\r\n                    if (operatorsStack.length === 0) {\r\n                        throw ErrorFactory.syntaxError(language().syntaxErrors.valueParser_missingOpeningParenthesis,\r\n                            undefined);\r\n                    }\r\n                    if (operatorsStack[operatorsStack.length - 1] instanceof OpeningParentheses) {\r\n                        operatorsStack.pop();\r\n                        break;\r\n                    }\r\n                    // @ts-ignore (token must be present)\r\n                    rpnQueue.push(operatorsStack.pop());\r\n                }\r\n            }\r\n        });\r\n        while (operatorsStack.length > 0) {\r\n            // @ts-ignore (token must be present)\r\n            const curToken: ValueToken = operatorsStack.pop();\r\n            if (curToken instanceof OpeningParentheses) {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.valueParser_missingClosingParenthesis,\r\n                    undefined);\r\n            }\r\n            else {\r\n                rpnQueue.push(curToken);\r\n            }\r\n        }\r\n        return rpnQueue;\r\n    }\r\n\r\n    /**\r\n     * Creates a value-evaluating tree from the given array of tokens in reverse polish form.\r\n     * Wraps recursive function rpnToVETreeRecursive(tokens), when not all tokens are used, throws error.\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @return VETreeNode tree (its root)\r\n     */\r\n    public static rpnToVETree(tokens: ValueToken[]): VETreeNode {\r\n        const ret: VETreeNode = this.rpnToVETreeRecursive(tokens);\r\n        // not all tokens were used\r\n        if (tokens.length > 0) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.valueParser_invalidExpression, undefined);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates a value-evaluating tree from the given array of tokens in reverse polish form.\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @return VETreeNode tree (its root)\r\n     */\r\n    public static rpnToVETreeRecursive(tokens: ValueToken[]): VETreeNode {\r\n        if (tokens.length === 0) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.valueParser_invalidExpression, undefined);\r\n        }\r\n        // @ts-ignore (there must be a token)\r\n        const token: ValueToken = tokens.pop();\r\n        if (token instanceof LogicalNotToken) {\r\n            const subtree: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.not(token.str, subtree);\r\n        }\r\n        if (token instanceof LogicalAndToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.and(token.str, left, right);\r\n        }\r\n        if (token instanceof LogicalOrToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return LogicalOperator.or(token.str, left, right);\r\n        }\r\n        if (token instanceof ComparingToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return new ComparingOperator(token.type, token.str, left, right);\r\n        }\r\n        if (token instanceof LiteralToken) {\r\n            return new LiteralValue(token.value, token.type);\r\n        }\r\n        if (token instanceof ReferenceToken) {\r\n            return new ReferenceValue(token.str);\r\n        }\r\n        if (token instanceof ComputingPlusToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.add(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingMinusToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.deduct(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingMultiplicationToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.multiply(left, right, token.getRange());\r\n        }\r\n        if (token instanceof ComputingDivisionToken) {\r\n            const right: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            const left: VETreeNode = ValueParser.rpnToVETreeRecursive(tokens);\r\n            return ComputingOperator.divide(left, right, token.getRange());\r\n        }\r\n        // should never happen\r\n        throw ErrorFactory.codeError(language().codeErrors.valueParser_unexpectedToken, JSON.stringify(token));\r\n    }\r\n}","import RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\n\r\n/**\r\n * Classes extending binary node.\r\n */\r\nexport type BinaryNodeClass = \"left antijoin\" | \"right antijoin\" | \"cartesian product\" | \"division\" | \"natural join\"\r\n    | \"left outer join\" | \"right outer join\" | \"full outer join\" | \"left semijoin\" | \"right semijoin\" | \"union\"\r\n    | \"intersection\" | \"difference\" | \"theta join\" | \"left theta semijoin\" | \"right theta semijoin\";\r\n\r\n/**\r\n * Abstract node of the relational algebra syntactic tree with two subtrees.\r\n */\r\nexport default abstract class BinaryNode extends RATreeNode {\r\n\r\n    protected leftSubtree: RATreeNode;\r\n    protected rightSubtree: RATreeNode;\r\n\r\n    protected constructor(left: RATreeNode, right: RATreeNode) {\r\n        super();\r\n        this.leftSubtree = left;\r\n        this.rightSubtree = right;\r\n    }\r\n\r\n    public getLeftSubtree(): RATreeNode {\r\n        return this.leftSubtree;\r\n    }\r\n\r\n    public getRightSubtree(): RATreeNode {\r\n        return this.rightSubtree;\r\n    }\r\n\r\n    /**\r\n     * Fake evaluates left and right subtrees of the current not-parametrized binary node.\r\n     * If not, returns new simple faked schema with empty \"\" name:\r\n     * - type = union: returns union of source schemas\r\n     * - type = left: returns left source schema\r\n     * - type = right: returns right source schema\r\n     */\r\n    protected fakeEvalBinary(cursorIndex: number, type: \"union\" | \"left\" | \"right\"):\r\n        {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        // evaluates the subtrees\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        // creates return relation\r\n        const result: Relation = new Relation(\"\");\r\n        if (type === \"left\" || type === \"union\") {\r\n            left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (type === \"right\" || type === \"union\") {\r\n            right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        left.errors.push(...right.errors);\r\n        return {result, whispers: left.whispers.length !== 0 ? left.whispers : right.whispers, errors: left.errors};\r\n    }\r\n}","import RATreeNode from \"./raTreeNode\";\r\nimport UnaryNode from \"./unaryNode\";\r\nimport BinaryNode from \"./binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\n\r\n/**\r\n * Finds the root in the given tree with the given index with respect to depth first search. Root has index 0.\r\n *\r\n * @param root root of the searched tree\r\n * @param index index to be found\r\n * @return found root with given index or null if not found\r\n */\r\nexport function depthSearch(root: RATreeNode, index: number): RATreeNode | null {\r\n    let i: number = 0;\r\n    const findIndexInTree = (node: RATreeNode): RATreeNode | null => {\r\n        // wanted index found\r\n        if (i === index) {\r\n            return node;\r\n        }\r\n        i++;\r\n        if (node instanceof UnaryNode) {\r\n            return findIndexInTree(node.getSubtree());\r\n        }\r\n        if (node instanceof BinaryNode) {\r\n            const leftSearch = findIndexInTree(node.getLeftSubtree());\r\n            if (leftSearch === null) {\r\n                return findIndexInTree(node.getRightSubtree());\r\n            }\r\n            return leftSearch;\r\n        }\r\n        // end of the branch without the result\r\n        return null;\r\n    }\r\n    return findIndexInTree(root);\r\n}\r\n\r\n/**\r\n * Computes depth of the tree. One node has depth 0.\r\n *\r\n * @param root root of the tree to compute the depth for\r\n * @return tree depth\r\n */\r\nexport function getTreeDepth(root: RATreeNode): number {\r\n    if (root instanceof BinaryNode) {\r\n        const left: number = getTreeDepth(root.getLeftSubtree());\r\n        const right: number = getTreeDepth(root.getRightSubtree());\r\n        return Math.max(left, right) + 1;\r\n    }\r\n    if (root instanceof UnaryNode) {\r\n        return getTreeDepth(root.getSubtree()) + 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * Returns true, if the given cursor position is in the given range and it is not inside quotes.\r\n * Note: given range is expected to be computed from given string.\r\n */\r\nexport function isInRangeAndNotInQuotes(cursor: number, range: { start: number, end: number } | undefined, str: IndexedString): boolean {\r\n    if (range !== undefined && range.start < cursor && cursor <= range.end) {\r\n        const len = range.end - range.start;\r\n        const s = str.toString();\r\n        const cursorIndexInStr = cursor - range.start;\r\n        let insideQuotes: boolean = false;\r\n        let backslashes: number = 0;\r\n        for (let i = 0; i < len; ++i) {\r\n            const curChar = s.charAt(i);\r\n            // quotes found\r\n            if (curChar === '\"' && (backslashes % 2) === 0) {\r\n                insideQuotes = !insideQuotes;\r\n            }\r\n            if (insideQuotes && curChar === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            if (i === cursorIndexInStr - 1) {\r\n                // when the cursor was reached, returns true, when it is not in quotes\r\n                return !insideQuotes;\r\n            }\r\n        }\r\n        console.warn(\"isInRangeAndNotInQuotes outside range\")\r\n    }\r\n    return false;\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Types of antijoin node.\r\n */\r\nexport enum AntijoinType {\r\n    left = \"\\u22b3\",\r\n    right = \"\\u22b2\"\r\n}\r\n\r\n/**\r\n * Antijoin node of the relational algebra syntactic tree.\r\n */\r\nexport default class AntijoinNode extends BinaryNode {\r\n\r\n    private readonly type: AntijoinType;\r\n\r\n    public constructor(operator: AntijoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: none\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        let rowsToKeep: Row[];   // rows from the subtree, which have to be kept in result\r\n        let rowsToHelp: Row[];\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        if (this.type === AntijoinType.left) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n            rowsToKeep = leftSource.getRows();\r\n            rowsToHelp = rightSource.getRows();\r\n        }\r\n        else {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n            rowsToKeep = rightSource.getRows();\r\n            rowsToHelp = leftSource.getRows();\r\n        }\r\n        // join of relation rows\r\n        rowsToKeep.forEach(keptRow => {\r\n            let someMatch: boolean = rowsToHelp.some(helpRow => {\r\n                // if all common columns match, the row should not be added\r\n                return commonColumns.every(c => keptRow.getValue(c) === helpRow.getValue(c));\r\n            });\r\n            if (!someMatch) {\r\n                let newRow: Row = new Row(result.getColumns());\r\n                keptRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                result.addRow(newRow);\r\n            }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: none\r\n     * Returned schema: left/right source schema (for left/right antijoin)\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const type = this.type === AntijoinType.left ? \"left\" : \"right\";\r\n        return this.fakeEvalBinary(cursorIndex, type);\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        return this.type === AntijoinType.left ? lang.leftAntijoin : lang.rightAntijoin;\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import UnaryNode from \"./unaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport {VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport ValueParser from \"../expression/valueParser\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange, {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {isInRangeAndNotInQuotes} from \"./raTreeTools\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Selection node of the relational algebra syntactic tree.\r\n */\r\nexport default class SelectionNode extends UnaryNode {\r\n\r\n    private readonly selection: IndexedString;\r\n    private readonly stringRange: { start: number, end: number } | undefined;\r\n    private readonly nullValuesSupport: boolean;\r\n\r\n    /**\r\n     * Expects the selection string to start with '(' and end with ')'.\r\n     *\r\n     * @param selection\r\n     * @param subtree\r\n     * @param nullValuesSupport\r\n     */\r\n    public constructor(selection: IndexedString, subtree: RATreeNode, nullValuesSupport: boolean) {\r\n        super(subtree);\r\n        this.selection = selection;\r\n        this.stringRange = selection.getRange();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n    }\r\n\r\n    /**\r\n     * Expectations: condition is valid expression which evaluates to boolean\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n\r\n        let boolExpr: VETreeNode;\r\n        try {\r\n            boolExpr = ValueParser.parse(this.selection.slice(1, -1), this.nullValuesSupport);\r\n        }\r\n        catch (e) {\r\n            throw insertRangeIfUndefined(e, this.stringRange);\r\n        }\r\n\r\n        const source: Relation = this.subtree.getResult();\r\n        const result: Relation = new Relation(source.name + \"(...)\");\r\n        source.forEachColumn((type, name) => result.addColumn(name, type));\r\n\r\n        source.getRows().forEach(row => {\r\n            let bool: { value: ColumnContent, type: SupportedColumnType | \"null\" } = boolExpr.eval(row);\r\n            if (bool.type !== \"boolean\") {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.selectionNode_resultNotBoolean,\r\n                    this.stringRange, this.selection.replace(/\\s+/g, \" \"), bool.type);\r\n            }\r\n            if (bool.value) {\r\n                result.addRow(row);\r\n            }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: columns names used in the condition exists in source schema\r\n     * Returned schema: source schema\r\n     * Usage of absent column names does not affect returned schema.\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        let {result, whispers, errors} = this.subtree.fakeEval(cursorIndex);\r\n        const newResult = new Relation(result.getName() + \"(...)\");\r\n        result.forEachColumn((type, name) => {\r\n            newResult.addColumn(name, type);\r\n        });\r\n        result = newResult;\r\n        // checks whether the cursor is in this selection block (and not in the string) - saves current available columns\r\n        if (isInRangeAndNotInQuotes(cursorIndex, this.stringRange, this.selection)) {\r\n            whispers = result.getColumnNames();\r\n        }\r\n        // checks empty selection input\r\n        if (this.selection.toString().slice(1, -1).trim().length  === 0) {\r\n            errors.push(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_emptyInput, this.stringRange));\r\n        }\r\n        // adds errors from current expression\r\n        else {\r\n            errors.push(...ValueParser.fakeParse(this.selection.slice(1, -1), this.nullValuesSupport, result.getColumnNames()));\r\n        }\r\n        // result schema is the same as the source\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return this.subtree.printInLine() + this.getOperationSymbol();\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return language().operations.selection;\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.selection.replace(/\\s+/g, ' ');\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Types of outer join node.\r\n */\r\nexport enum OuterJoinType {\r\n    left = \"*L*\",\r\n    right = \"*R*\",\r\n    full = \"*F*\"\r\n}\r\n\r\n/**\r\n * Outer join node of the relational algebra syntactic tree.\r\n */\r\nexport default class OuterJoinNode extends BinaryNode {\r\n\r\n    private readonly type: OuterJoinType;\r\n\r\n    public constructor(operator: OuterJoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: none\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // join of relation rows\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        // adds naturally joined rows\r\n        leftRows.forEach(leftRow => {\r\n            rightRows.forEach(rightRow => {\r\n                // if all common columns have the same value\r\n                if (commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c))) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        // adds left source rows with right null values\r\n        if (this.type === OuterJoinType.left || this.type === OuterJoinType.full) {\r\n            leftRows.forEach(leftRow => {\r\n                let someMatch: boolean = rightRows.some(rightRow => {\r\n                    // if all common columns match, the row should not be added\r\n                    return commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c));\r\n                });\r\n                if (!someMatch) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        }\r\n        // adds right source rows with left null values\r\n        if (this.type === OuterJoinType.right || this.type === OuterJoinType.full) {\r\n            rightRows.forEach(rightRow => {\r\n                let someMatch: boolean = leftRows.some(leftRow => {\r\n                    // if all common columns match, the row should not be added\r\n                    return commonColumns.every(c => leftRow.getValue(c) === rightRow.getValue(c));\r\n                });\r\n                if (!someMatch) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        }\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: none\r\n     * Returned schema: union of source schemas (in all cases - full/left/right)\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        return this.fakeEvalBinary(cursorIndex, \"union\");\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        if (this.type === OuterJoinType.left) {\r\n            return lang.leftOuterJoin;\r\n        }\r\n        else if (this.type === OuterJoinType.right) {\r\n            return lang.rightOuterJoin;\r\n        }\r\n        else {\r\n            return lang.fullOuterJoin;\r\n        }\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Cartesian product node of the relational algebra syntactic tree.\r\n */\r\nexport default class CartesianProductNode extends BinaryNode {\r\n\r\n    public constructor(leftSubtree: RATreeNode, rightSubtree: RATreeNode, private stringRange: { start: number, end: number } | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: disjointness\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // join of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + \"\\u2a2f\" + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        rightSource.forEachColumn((type, name) => {\r\n            if (!result.addColumn(name, type)) {\r\n                throw ErrorFactory.semanticError(language().semanticErrors.binaryNode_commonColumns,\r\n                    this.stringRange, \"cartesian product\", name);\r\n            }\r\n        });\r\n        // join of relation rows\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                let newRow: Row = new Row(result.getColumns());\r\n                leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                result.addRow(newRow);\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: disjointness\r\n     * Returned schema: union of source schemas\r\n     * Returned fake schema is not affected when disjointness is not held\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]}{\r\n        // evaluates the subtrees\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        // creates return relation\r\n        const result: Relation = new Relation(\"\");\r\n        left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // checks errors\r\n        left.errors.push(...right.errors);\r\n        const commonColumns: string[] = [];\r\n        left.result.getColumnNames().forEach(leftColumn => {\r\n            if (right.result.hasColumn(leftColumn)) {\r\n                commonColumns.push(leftColumn);\r\n            }\r\n        });\r\n        if (commonColumns.length > 0) {\r\n            left.errors.push(ErrorFactory.semanticError(language().semanticErrors.binaryNode_commonColumns,\r\n                this.stringRange, \"cartesian product\", commonColumns.join('\", \"')));\r\n        }\r\n        return {result, whispers: left.whispers.length !== 0 ? left.whispers : right.whispers, errors: left.errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return language().operations.cartesianProduct;\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return \"⨯\";\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Division node of the relational algebra syntactic tree.\r\n */\r\nexport default class DivisionNode extends BinaryNode {\r\n\r\n    public constructor(leftSubtree: RATreeNode, rightSubtree: RATreeNode, private stringRange: { start: number, end: number } | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: right source schema is a proper subset of left source schema\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        const leftColumns: Map<string, SupportedColumnType> = leftSource.getColumns();\r\n        const rightColumns: Map<string, SupportedColumnType> = rightSource.getColumns();\r\n\r\n        if (![...rightColumns].every(value => leftColumns.has(value[0]) && leftColumns.get(value[0]) === value[1])) {\r\n            throw ErrorFactory.semanticError(language().semanticErrors.divisionNode_rightColumnsNotSubset,\r\n                this.stringRange, rightSource.getSchemaString(), leftSource.getSchemaString());\r\n        }\r\n\r\n        // difference of columns in left and right subtree\r\n        const resultColumns: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>();\r\n        leftColumns.forEach((type, name) => {\r\n           if (!rightColumns.has(name)) {\r\n               resultColumns.set(name, type);\r\n           }\r\n        });\r\n\r\n        if (resultColumns.size === 0) {\r\n            throw ErrorFactory.semanticError(language().semanticErrors.divisionNode_rightColumnsNotProperSubset,\r\n                this.stringRange, rightSource.getNamesSchemaString(), leftSource.getNamesSchemaString());\r\n        }\r\n\r\n        // join of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + \"\\u00f7\" + rightSource.getName() + \")\");\r\n        resultColumns.forEach((type, name) => result.addColumn(name, type));\r\n        // filter relation rows\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        leftRows.forEach(leftRow => {\r\n           if (rightRows.every(rightRow => {\r\n               // creates a row with left row's extra columns and right row's common columns\r\n               let testRow: Row = new Row(leftColumns);\r\n               // left row's extra columns\r\n               // @ts-ignore ('name' must be present in left row)\r\n               resultColumns.forEach((type, name) => testRow.addValue(name, leftRow.getValue(name)));\r\n               // right row's common columns\r\n               rightRow.getValues().forEach((type, name) => testRow.addValue(name, type));\r\n               // tests if the created row exists in left relation\r\n               return [...leftRows].some(lr => lr.equals(testRow));\r\n           })) {\r\n               let newRow: Row = new Row(result.getColumns());\r\n               // @ts-ignore ('name' must be present in left row)\r\n               resultColumns.forEach((value, name) => newRow.addValue(name, leftRow.getValue(name)));\r\n               result.addRow(newRow);\r\n           }\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: right source schema is a proper subset of left source schema\r\n     * Returned schema: left source schema minus right source schema\r\n     * Returned fake schema may be empty (right source schema may contain all left source columns).\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        const leftColumns = left.result.getColumns();\r\n        const rightColumns = right.result.getColumns();\r\n        // creates relation schema - \"left columns minus right columns\"\r\n        const resultColumns = new Map([...leftColumns.entries()].filter(([key, _]) => !rightColumns.has(key)));\r\n        const result = new Relation(\"(\" + left.result.getName() + \"\\u00f7\" + right.result.getName() + \")\");\r\n        resultColumns.forEach((type, name) => result.addColumn(name, type));\r\n        // checks errors in schema\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        if (![...rightColumns].every(value => leftColumns.has(value[0]) && leftColumns.get(value[0]) === value[1])\r\n            && left.result.getName() !== \"\") {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.divisionNode_rightColumnsNotSubset,\r\n                this.stringRange, right.result.getSchemaString(), left.result.getSchemaString()));\r\n        }\r\n        else if (resultColumns.size === 0 && left.result.getName() !== \"\") {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.divisionNode_rightColumnsNotProperSubset,\r\n                this.stringRange, right.result.getNamesSchemaString(), left.result.getNamesSchemaString()));\r\n        }\r\n        return {result, whispers: left.whispers.length !== 0 ? left.whispers : right.whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        return language().operations.division;\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return \"÷\";\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Types of natural join node.\r\n */\r\nexport enum NaturalJoinType {\r\n    natural = \"*\",\r\n    leftSemi = \"<*\",\r\n    rightSemi = \"*>\"\r\n}\r\n\r\n/**\r\n * Natural join or semi join node of the relational algebra syntactic tree.\r\n */\r\nexport default class NaturalJoinNode extends BinaryNode {\r\n\r\n    private readonly type: NaturalJoinType;\r\n\r\n    public constructor(operator: NaturalJoinType, leftSubtree: RATreeNode, rightSubtree: RATreeNode) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: none\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n        // intersection of columns in left and right subtree\r\n        const commonColumns: string[] = leftSource.getColumnNames().filter(lc => rightSource.hasColumn(lc));\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        if (this.type === NaturalJoinType.leftSemi || this.type === NaturalJoinType.natural) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === NaturalJoinType.rightSemi || this.type === NaturalJoinType.natural) {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // join of relation rows\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                // if all common columns have the same value\r\n                if ([...commonColumns].every(c => leftRow.getValue(c) === rightRow.getValue(c))) {\r\n                    let newRow: Row = new Row(result.getColumns());\r\n                    if (this.type === NaturalJoinType.leftSemi || this.type === NaturalJoinType.natural) {\r\n                        leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    if (this.type === NaturalJoinType.rightSemi || this.type === NaturalJoinType.natural) {\r\n                        rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: none\r\n     * Returned schema: left/right/both source schema (for left-semijoin/right-semijoin/natural join)\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        let type: \"union\" | \"left\" | \"right\" = \"union\";\r\n        if (this.type === NaturalJoinType.leftSemi) {\r\n            type = \"left\";\r\n        }\r\n        else if (this.type === NaturalJoinType.rightSemi) {\r\n            type = \"right\";\r\n        }\r\n        return this.fakeEvalBinary(cursorIndex, type);\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        if (this.type === NaturalJoinType.leftSemi) {\r\n            return lang.leftSemiJoin;\r\n        }\r\n        else if (this.type === NaturalJoinType.rightSemi) {\r\n            return lang.rightSemiJoin;\r\n        }\r\n        else {\r\n            return lang.naturalJoin;\r\n        }\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return \"*\";\r\n    }\r\n\r\n    public getType(): NaturalJoinType {\r\n        return this.type;\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport { isEqual } from \"lodash\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Types of set operation node.\r\n */\r\nexport enum SetOperationType {\r\n    union = \"\\u222a\",\r\n    intersection = \"\\u2229\",\r\n    difference = \"\\\\\"\r\n}\r\n\r\n/**\r\n * Set operation node of the relational algebra syntactic tree.\r\n */\r\nexport default class SetOperationNode extends BinaryNode {\r\n\r\n    private readonly type: SetOperationType;\r\n\r\n    public constructor(operator: SetOperationType, leftSubtree: RATreeNode, rightSubtree: RATreeNode,\r\n                       private stringRange: { start: number, end: number } | undefined) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.type = operator;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: equality\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n\r\n        if (!isEqual(leftSource.getColumns(), rightSource.getColumns())) {\r\n            let typeStr: string = this.getOperationName().toLowerCase();\r\n            throw ErrorFactory.semanticError(language().semanticErrors.setOperationNode_notEqualColumns,\r\n                this.stringRange, leftSource.getSchemaString(), rightSource.getSchemaString(), typeStr);\r\n        }\r\n        // copy of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type + rightSource.getName() + \")\");\r\n        leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        // change of relation rows\r\n        let resultRows: Row[];\r\n        const leftRows: Row[] = leftSource.getRows();\r\n        const rightRows: Row[] = rightSource.getRows();\r\n        if (this.type === SetOperationType.union) {\r\n            resultRows = [...leftRows, ...rightRows];\r\n        }\r\n        else if (this.type === SetOperationType.intersection) {\r\n            resultRows = [...leftRows].filter(lr => [...rightRows].some(rr => lr.equals(rr)));\r\n        }\r\n        else /* this.type === SetOperationType.difference */ {\r\n            resultRows = [...leftRows].filter(lr => ![...rightRows].some(rr => lr.equals(rr)));\r\n        }\r\n        resultRows.forEach(row => result.addRow(row));\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: equality\r\n     * Returned schema: intersection of source schemas\r\n     * Returned schema may be empty (when there is no common column in sources).\r\n     * Second possible approach would be to return union of source schemas (less strict).\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        // join of relational schema - \"left intersection right\"\r\n        const result: Relation = new Relation(\"(\" + left.result.getName() + this.type + right.result.getName() + \")\");\r\n        left.result.forEachColumn((type, name) => {\r\n            if (right.result.hasColumn(name)) {\r\n                result.addColumn(name, type);\r\n            }\r\n        });\r\n        // checks errors in schema\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        if (!isEqual(left.result.getColumns(), right.result.getColumns()) && left.result.getName() !== \"\" && right.result.getName() !== \"\") {\r\n            let typeStr: string = this.getOperationName().toLowerCase();\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.setOperationNode_notEqualColumns,\r\n                this.stringRange, left.result.getSchemaString(), right.result.getSchemaString(), typeStr));\r\n        }\r\n        return {result, whispers: left.whispers.length !== 0 ? left.whispers : right.whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        if (this.type === SetOperationType.union) {\r\n            return lang.union;\r\n        }\r\n        else if (this.type === SetOperationType.intersection) {\r\n            return lang.intersection;\r\n        }\r\n        else {\r\n            return lang.difference;\r\n        }\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.type;\r\n    }\r\n}","import BinaryNode from \"./binaryNode\";\r\nimport RATreeNode from \"./raTreeNode\";\r\nimport Relation from \"../relation/relation\";\r\nimport Row from \"../relation/row\";\r\nimport {ColumnContent, SupportedColumnType} from \"../relation/columnType\";\r\nimport {VETreeNode} from \"../vetree/veTreeNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport ValueParser from \"../expression/valueParser\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport ErrorWithTextRange, {insertRangeIfUndefined} from \"../error/errorWithTextRange\";\r\nimport {isInRangeAndNotInQuotes} from \"./raTreeTools\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Types of theta join node.\r\n */\r\nexport enum ThetaJoinType {\r\n    full = \"[]\",\r\n    left = \"<]\",\r\n    right = \"[>\"\r\n}\r\n\r\n/**\r\n * Theta join or theta semijoin node of the relational algebra syntactic tree.\r\n */\r\nexport default class ThetaJoinNode extends BinaryNode {\r\n\r\n    private readonly type: ThetaJoinType;\r\n    private readonly condition: IndexedString;\r\n    private readonly stringRange: { start: number, end: number } | undefined;\r\n    private readonly nullValuesSupport: boolean;\r\n\r\n    /**\r\n     * Expects the condition string to start with '<' and end with ']' or start with '[' and end with '>'.\r\n     */\r\n    public constructor(type: ThetaJoinType, condition: IndexedString,\r\n                       leftSubtree: RATreeNode, rightSubtree: RATreeNode, nullValuesSupport: boolean) {\r\n        super(leftSubtree, rightSubtree);\r\n        this.condition = condition;\r\n        this.stringRange = condition.getRange();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Expectations on source schemas: disjointness\r\n     * Other expectations: condition is valid expression which evaluates to boolean\r\n     */\r\n    public eval(): void {\r\n        if (this.isEvaluated()) {\r\n            return;\r\n        }\r\n\r\n        let boolExpr: VETreeNode;\r\n        try {\r\n            boolExpr = ValueParser.parse(this.condition.slice(1, -1), this.nullValuesSupport);   // slices brackets out\r\n        }\r\n        catch (e) {\r\n            throw insertRangeIfUndefined(e, this.stringRange);\r\n        }\r\n\r\n        const leftSource: Relation = this.leftSubtree.getResult();\r\n        const rightSource: Relation = this.rightSubtree.getResult();\r\n\r\n        leftSource.getColumnNames().forEach(leftColumn => {\r\n            if (rightSource.hasColumn(leftColumn)) {\r\n                throw ErrorFactory.semanticError(language().semanticErrors.binaryNode_commonColumns, this.stringRange,\r\n                    this.getOperationName().toLowerCase(), leftColumn);\r\n            }\r\n        });\r\n        // change of relational schema\r\n        const result: Relation = new Relation(\"(\" + leftSource.getName() + this.type.charAt(0) + \"...\" + this.type.charAt(1) + rightSource.getName() + \")\");\r\n        if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n            leftSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n            rightSource.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // combine columns of both source relations to use it in testing row\r\n        const bothSourceColumns: Map<string, SupportedColumnType> = new Map<string, SupportedColumnType>(leftSource.getColumns());\r\n        rightSource.forEachColumn((type, name) => bothSourceColumns.set(name, type));\r\n\r\n        leftSource.getRows().forEach(leftRow => {\r\n            rightSource.getRows().forEach(rightRow => {\r\n                const testRow: Row = new Row(bothSourceColumns);\r\n                leftRow.getValues().forEach((value, name) => testRow.addValue(name, value));\r\n                rightRow.getValues().forEach((value, name) => testRow.addValue(name, value));\r\n                // checks whether the combined row from both relations' columns satisfies the condition\r\n                let booleanResult: { value: ColumnContent, type: SupportedColumnType | \"null\" } = boolExpr.eval(testRow);\r\n                if (booleanResult.type !== \"boolean\") {\r\n                    throw ErrorFactory.syntaxError(language().syntaxErrors.thetaJoinNode_resultNotBoolean,\r\n                        this.stringRange, this.condition.replace(/\\s+/g, \" \"), booleanResult.type);\r\n                }\r\n                if (booleanResult.value) {\r\n                    const newRow: Row = new Row(result.getColumns());\r\n                    if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n                        leftRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n                        rightRow.getValues().forEach((value, name) => newRow.addValue(name, value));\r\n                    }\r\n                    result.addRow(newRow);\r\n                }\r\n            });\r\n        });\r\n        this.resultRelation = result;\r\n    }\r\n\r\n    /**\r\n     * Strict expectations: disjointness\r\n     * Returned schema: left/right/both source schema (for left/right/full semijoin)\r\n     * Returned fake schema is not affected when disjointness is not held\r\n     */\r\n    public fakeEval(cursorIndex: number): {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} {\r\n        const left: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.leftSubtree.fakeEval(cursorIndex);\r\n        const right: {result: Relation, whispers: string[], errors: ErrorWithTextRange[]} = this.rightSubtree.fakeEval(cursorIndex);\r\n        const sourceColumns: string[] = [];\r\n        sourceColumns.push(...left.result.getColumnNames());\r\n        sourceColumns.push(...right.result.getColumnNames());\r\n        // creates return relation\r\n        const result: Relation = new Relation(\"\");\r\n        if (this.type === ThetaJoinType.left || this.type === ThetaJoinType.full) {\r\n            left.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        if (this.type === ThetaJoinType.right || this.type === ThetaJoinType.full) {\r\n            right.result.forEachColumn((type, name) => result.addColumn(name, type));\r\n        }\r\n        // checks whether the cursor is in this condition block (and not in the string) - saves current available columns\r\n        let whispers = left.whispers.length !== 0 ? left.whispers : right.whispers;\r\n        if (isInRangeAndNotInQuotes(cursorIndex, this.stringRange, this.condition)) {\r\n            whispers = sourceColumns;\r\n        }\r\n        // adds errors from current expression\r\n        const errors = left.errors;\r\n        errors.push(...right.errors);\r\n        const commonColumns: string[] = [];\r\n        left.result.getColumnNames().forEach(leftColumn => {\r\n            if (right.result.hasColumn(leftColumn)) {\r\n                commonColumns.push(leftColumn);\r\n            }\r\n        });\r\n        if (commonColumns.length > 0 && this.stringRange !== undefined) {\r\n            errors.push(ErrorFactory.semanticError(language().semanticErrors.binaryNode_commonColumns,\r\n                {start: this.stringRange.start, end: this.stringRange.start},   // highlight only opening bracket\r\n                this.getOperationName().toLowerCase(), commonColumns.join('\", \"')));\r\n        }\r\n        // checks empty condition input\r\n        if (this.condition.toString().slice(1, -1).trim().length  === 0) {\r\n            errors.push(ErrorFactory.syntaxError(language().syntaxErrors.valueParser_emptyInput, this.stringRange));\r\n        }\r\n        else {\r\n            errors.push(...ValueParser.fakeParse(this.condition.slice(1, -1), this.nullValuesSupport, sourceColumns));\r\n        }\r\n        return {result, whispers, errors};\r\n    }\r\n\r\n    public printInLine(): string {\r\n        return \"(\" + this.leftSubtree.printInLine() + this.getOperationSymbol() + this.rightSubtree.printInLine() + \")\";\r\n    }\r\n\r\n    public getOperationName(): string {\r\n        const lang = language().operations;\r\n        if (this.type === ThetaJoinType.left) {\r\n            return lang.leftThetaSemiJoin;\r\n        }\r\n        else if (this.type === ThetaJoinType.right) {\r\n            return lang.rightThetaSemiJoin;\r\n        }\r\n        else {\r\n            return lang.thetaJoin;\r\n        }\r\n    }\r\n\r\n    public getOperationSymbol(): string {\r\n        return this.condition.replace(/\\s+/g, ' ');\r\n    }\r\n\r\n    public getType(): ThetaJoinType {\r\n        return this.type;\r\n    }\r\n}","import Relation from \"../relation/relation\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {\r\n    BinaryOperatorToken,\r\n    ClosingParenthesis,\r\n    ExprToken,\r\n    OpeningParenthesis,\r\n    ParenthesisToken,\r\n    RelationToken,\r\n    UnaryOperatorToken\r\n} from \"./exprTokens\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\nimport CodeError from \"../error/codeError\";\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport RelationNode from \"../ratree/relationNode\";\r\nimport {\r\n    IndexedString\r\n} from \"../types/indexedString\";\r\nimport IndexedStringUtils from \"../utils/indexedStringUtils\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport RATreeFactory from \"../ratree/raTreeFactory\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Assertion types for assertValidInfixTokens function.\r\n */\r\nenum AssertType {\r\n    NOT_THROW,\r\n    THROW_STRICT,\r\n    THROW_NOT_STRICT\r\n}\r\n\r\n/**\r\n * StringUtils of relational algebra expressions. Provides parsing function parse(String expr) and additional\r\n * helping functions and predicates. Uses IndexedString to describe error ranges in thrown errors.\r\n */\r\nexport class ExprParser {\r\n\r\n    /**\r\n     * Creates a parser with given source relations.\r\n     *\r\n     * @param relations Map with relations' names as keys and relation themselves as values used as source for leave nodes\r\n     * @param nullValuesSupport whether to support null values\r\n     */\r\n    public constructor(readonly relations: Map<string, Relation>, readonly nullValuesSupport: boolean) {}\r\n\r\n    /**\r\n     * Parses given relational algebra expression 'expr' and returns tree of RA operations.\r\n     * Expression is expected to respect following constraints:\r\n     * - all relation's and column's names contain letters, numbers and underscores only\r\n     * - all relation's and column's names start with a letter\r\n     * - used operations must be in a practical notation and be well-structured\r\n     * - comment begins with '//' and ends with newline\r\n     *\r\n     * Supported operations are:\r\n     * - projection of columns: Relation[projectedColumn1, ...]\r\n     * - selection of rows: Relation(condition)\r\n     * - rename of columns: Relation<oldName -> newName, ...>\r\n     * - cartesian product: A \\u2a2f B\r\n     * - natural join: A * B\r\n     * - theta join: A [condition] B\r\n     * - left and right semijoin: A <* B and A *> B\r\n     * - left and right antijoin: A \\u22b3 B and A \\u22b2 B\r\n     * - left and right theta semijoin: A <condition] B and A [condition> B\r\n     * - division: A \\u00f7 B\r\n     * - left, right and full outer join: A *L* B, A *R* B and A *F* B\r\n     * - union, intersection and difference: A \\u222a B, A \\u2229 B and A \\ B\r\n     *\r\n     * See ValueParser for condition constraints.\r\n     *\r\n     * @param expr relational algebra expression in expected format\r\n     * @return tree structure of 'expr'\r\n     */\r\n    public parse(expr: string): RATreeNode {\r\n        const indexedExpr = IndexedStringUtils.deleteCommentLines(IndexedString.new(expr));\r\n        if (indexedExpr.trim().isEmpty()) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_emptyStringGiven, undefined);\r\n        }\r\n        const tokens: ExprToken[] = this.parseTokens(indexedExpr);\r\n        this.assertValidInfixTokens(tokens, AssertType.THROW_STRICT);\r\n        const rpn: ExprToken[] = this.toRPN(tokens);\r\n        return this.rpnToRATree(rpn, true);\r\n    }\r\n\r\n    /**\r\n     * Parses given expression and finds words to whisper for the given cursorIndex.\r\n     * If the cursor is located next to any RA operator, returns list of all defined relation names.\r\n     * If the cursor is located inside any RA operator, which uses relation columns, returns list of available column\r\n     * names at given place.\r\n     * If a parsing error occurs, it is faked to work or ignored and reported in returning errors array.\r\n     */\r\n    public fakeParse(expr: string, cursorIndex: number): {whispers: string[], errors: ErrorWithTextRange[]} {\r\n        if (expr.trim() === \"\") {\r\n            return {whispers: [...this.relations.keys()], errors: []};\r\n        }\r\n        const indexedExpr = IndexedStringUtils.deleteCommentLines(IndexedString.new(expr));\r\n        const {whispers, tokens, errors} = this.fakeParseTokens(indexedExpr, cursorIndex);\r\n        // prevent errors in creation of RPN\r\n        if (tokens.length === 0) {\r\n            return {whispers: whispers, errors: errors};\r\n        }\r\n        // fakes found errors to valid parse\r\n        this.assertValidInfixTokens(tokens, AssertType.NOT_THROW, errors);\r\n        const rpn: ExprToken[] = this.toRPN(tokens);\r\n        const raTree: RATreeNode = this.rpnToRATree(rpn, false, errors);\r\n        // tries to find whispers inside RA operations with parameters\r\n        const innerResult: {whispers: string[], errors: ErrorWithTextRange[]} = raTree.fakeEval(cursorIndex);\r\n        errors.push(...innerResult.errors);\r\n        // if there are whispers from inner operators, returns them\r\n        if (innerResult.whispers.length > 0) {\r\n            return {whispers: innerResult.whispers, errors: errors};\r\n        }\r\n        // otherwise returns outer whispers (or empty array if no were found)\r\n        return {whispers: whispers, errors: errors};\r\n    }\r\n\r\n    /**\r\n     * Given expression string is expected to be without comment lines and not empty.\r\n     *\r\n     * @param expr IndexedString to parse the expression from\r\n     * @param selectionExpected true if next part \"(...)\" should be treated as a selection = last part\r\n     * was a relation or an unary operator (default false)\r\n     */\r\n    public parseTokens(expr: IndexedString, selectionExpected: boolean = false): ExprToken[] {\r\n        let tokens: ExprToken[] = [];\r\n        // alternative solution in case of finding \"[...]\"\r\n        let alternativeTokens: ExprToken[] = [];\r\n        let rest: IndexedString = expr.trim();\r\n\r\n        while (!rest.isEmpty()) {\r\n            // '(' can be a selection or a parentheses\r\n            if (rest.startsWith(\"(\")) {\r\n                const split = IndexedStringUtils.nextBorderedPart(rest, '(', ')');\r\n                // whole \"(...)\" part pushed as selection\r\n                if (selectionExpected) {\r\n                    tokens.push(UnaryOperatorToken.selection(split.first));\r\n                }\r\n                // inner of \"(...)\" part parsed as parentheses structure\r\n                else {\r\n                    tokens.push(new OpeningParenthesis(split.first.slice(0, 1)));\r\n                    tokens.push(...this.parseTokens(split.first.slice(1, -1)));\r\n                    tokens.push(new ClosingParenthesis(split.first.slice(-1)));\r\n                    selectionExpected = true;\r\n                }\r\n                rest = split.second;\r\n            }\r\n            // '[' can be a projection, theta join, or right theta semi join\r\n            else if (rest.startsWith(\"[\")) {\r\n                const split = IndexedStringUtils.nextBorderedPart(rest, '[', ']>');\r\n                // right theta semijoin found\r\n                if (split.first.endsWith('>')) {\r\n                    tokens.push(BinaryOperatorToken.rightThetaSemijoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // the expression cannot end with a theta join (right source expected)\r\n                else if (split.second.isEmpty()) {\r\n                    tokens.push(UnaryOperatorToken.projection(split.first));\r\n                    break;\r\n                }\r\n                // it is no known yet whether it is a projection or a theta join, recursively tries both possibilities\r\n                else {\r\n                    let errorAlternative: Error | undefined;\r\n                    let error: Error | undefined;\r\n\r\n                    // 1: treat as Theta join (it must copy tokens first)\r\n                    try {\r\n                        alternativeTokens.push(...tokens);\r\n                        alternativeTokens.push(BinaryOperatorToken.thetaJoin(split.first));\r\n                        alternativeTokens.push(...this.parseTokens(split.second, false));\r\n                    }\r\n                    catch (err) {\r\n                        if (err instanceof CodeError) {\r\n                            throw err;\r\n                        }\r\n                        errorAlternative = err;\r\n                    }\r\n\r\n                    // 2: treat as Projection\r\n                    try {\r\n                        tokens.push(UnaryOperatorToken.projection(split.first));\r\n                        tokens.push(...this.parseTokens(split.second, true));\r\n                    }\r\n                    catch (err) {\r\n                        if (err instanceof CodeError) {\r\n                            throw err;\r\n                        }\r\n                        error = err;\r\n                    }\r\n\r\n                    // both branches have error - reports it to user\r\n                    if (errorAlternative !== undefined && error !== undefined) {\r\n                        // when errors were the same, throws one of them\r\n                        if (errorAlternative.message === error.message) {\r\n                            throw error;\r\n                        }\r\n                        // when errors were different, joins them\r\n                        throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_bothBranchesError,\r\n                            undefined, split.first.toString(), error.message, errorAlternative.message);\r\n                    }\r\n                    // does not use alternative tokens after error\r\n                    if (errorAlternative !== undefined) {\r\n                        alternativeTokens = [];\r\n                    }\r\n                    // uses alternative tokens after error in second branch\r\n                    if (error !== undefined) {\r\n                        tokens = alternativeTokens;\r\n                        alternativeTokens = [];\r\n                    }\r\n                    // breaks the while - the rest was parsed recursively\r\n                    break;\r\n                }\r\n            }\r\n            // BINARY OPERATORS\r\n            else if (rest.startsWith(\"*F*\") || rest.startsWith(\"*L*\") || rest.startsWith(\"*R*\")) {\r\n                if (!this.nullValuesSupport) {\r\n                    let errorRange: {start: number, end: number} | undefined = undefined;\r\n                    if (rest.getFirstNonNaNIndex() !== undefined) {\r\n                        // @ts-ignore\r\n                        errorRange = {start: rest.getFirstNonNaNIndex(), end: rest.getFirstNonNaNIndex() + 2};\r\n                    }\r\n                    throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_outerJoinWhenNullNotSupported,\r\n                        errorRange, \"*F*\");\r\n                }\r\n                if (rest.startsWith(\"*F\")) {\r\n                    tokens.push(BinaryOperatorToken.fullOuterJoin(rest.slice(0, 3)));\r\n                }\r\n                else if (rest.startsWith(\"*L\")) {\r\n                    tokens.push(BinaryOperatorToken.leftOuterJoin(rest.slice(0, 3)));\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.rightOuterJoin(rest.slice(0, 3)));\r\n                }\r\n                rest = rest.slice(3);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"<*\")) {\r\n                tokens.push(BinaryOperatorToken.leftSemijoin(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"*>\")) {\r\n                tokens.push(BinaryOperatorToken.rightSemijoin(rest.slice(0, 2)));\r\n                rest = rest.slice(2);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"*\")) {\r\n                tokens.push(BinaryOperatorToken.naturalJoin(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u2a2f\")) {\r\n                tokens.push(BinaryOperatorToken.cartesianProduct(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u222a\")) {\r\n                tokens.push(BinaryOperatorToken.union(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u2229\")) {\r\n                tokens.push(BinaryOperatorToken.intersection(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\\\\")) {\r\n                tokens.push(BinaryOperatorToken.difference(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u22b3\")) {\r\n                tokens.push(BinaryOperatorToken.leftAntijoin(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u22b2\")) {\r\n                tokens.push(BinaryOperatorToken.rightAntijoin(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            else if (rest.startsWith(\"\\u00f7\")) {\r\n                tokens.push(BinaryOperatorToken.division(rest.slice(0, 1)));\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            // '<' can be a rename or left theta semi join - this \"if\" must be after <* and *>\r\n            else if (rest.startsWith('<')) {\r\n                const split = IndexedStringUtils.nextBorderedPart(rest, '<', '>]', '-');\r\n                if (split.first.endsWith('>')) {\r\n                    tokens.push(UnaryOperatorToken.rename(split.first));\r\n                    selectionExpected = true;\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.leftThetaSemijoin(split.first));\r\n                    selectionExpected = false;\r\n                }\r\n                rest = split.second;\r\n            }\r\n            // RELATION REFERENCE\r\n            else if (StringUtils.isLetter(rest.charAt(0)) || rest.charAt(0) === '_') {\r\n                const split = IndexedStringUtils.nextName(rest);\r\n                tokens.push(new RelationToken(split.first));\r\n                rest = split.second;\r\n                selectionExpected = true;\r\n            }\r\n            // UNEXPECTED PART\r\n            else {\r\n                const split = IndexedStringUtils.nextNonWhitespacePart(rest);\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_unexpectedPart,\r\n                    split.first.getRange(), split.first.toString());\r\n            }\r\n            rest = rest.trim();\r\n        }\r\n        // checks whether alternative tokens are valid when used\r\n        if (alternativeTokens.length > 0) {\r\n            try {\r\n                // assert not strict validity (because this can be in nested recursion call where some rules are not held)\r\n                this.assertValidInfixTokens(alternativeTokens, AssertType.THROW_NOT_STRICT, []);\r\n                // if error not thrown, returns alternative tokens\r\n                return alternativeTokens;\r\n            }\r\n            catch (ignored) {}\r\n        }\r\n        // when alternative tokens are not set or valid, returns tokens\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n     * Parses given expression to ExprToken array. While parsing, it tries to find cursor index and returns whispers.\r\n     * Parsing errors are not thrown but stored in errors array.\r\n     *\r\n     * @param expr IndexedString to parse the expression from\r\n     * @param cursorIndex\r\n     * @param selectionExpected true if next part \"(...)\" should be treated as a selection = last part\r\n     * was a relation or an unary operator (default false)\r\n     */\r\n    public fakeParseTokens(expr: IndexedString, cursorIndex: number, selectionExpected: boolean = false):\r\n        { tokens: ExprToken[], whispers: string[], errors: ErrorWithTextRange[] } {\r\n        let whispers: string[] = [];\r\n        let tokens: ExprToken[] = [];\r\n        let errors: ErrorWithTextRange[] = [];\r\n\r\n        let rest: IndexedString = expr;\r\n        while (!rest.isEmpty()) {\r\n            // checks whether the cursor was reached\r\n            const restStartIndex: number | undefined = rest.getFirstNonNaNIndex();\r\n            if (restStartIndex === cursorIndex) {\r\n                whispers = [...this.relations.keys()];\r\n            }\r\n\r\n            // '(' can be a selection or a parentheses\r\n            if (rest.startsWith(\"(\")) {\r\n                let split: {first: IndexedString, second: IndexedString};\r\n                try {\r\n                    split = IndexedStringUtils.nextBorderedPart(rest, '(', ')');\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (err) {\r\n                    // saves error\r\n                    if (err instanceof ErrorWithTextRange) {\r\n                        errors.push(err);\r\n                    }\r\n\r\n                    if (selectionExpected) {\r\n                        // it fakes the unclosed expression part as a selection operator\r\n                        // pushes space with valid index and parentheses with NaN index for expected behavior (error\r\n                        // indexing) in fakeEval in selection/theta join nodes and fakeEval in ValueParser\r\n                        tokens.push(UnaryOperatorToken.selection(rest.concat(IndexedString.newFromArray([\r\n                            {char: ' ', index: rest.getNextIndexOrNaN()}, {char: ')', index: NaN}]))));\r\n                    }\r\n                    else {\r\n                        // checks whether the cursor was reached after the opening parentheses\r\n                        if (restStartIndex === cursorIndex - 1) {\r\n                            whispers = [...this.relations.keys()];\r\n                        }\r\n\r\n                        // it fakes the unclosed expression as nested expression in parentheses\r\n                        tokens.push(new OpeningParenthesis(rest.slice(0, 1)));\r\n                        // parses inner part between parentheses\r\n                        const recursiveReturn = this.fakeParseTokens(rest.slice(1), cursorIndex);\r\n                        errors.push(...recursiveReturn.errors);\r\n                        whispers.push(...recursiveReturn.whispers);\r\n                        tokens.push(...recursiveReturn.tokens);\r\n                        // gives invalid index (NaN for not reporting errors with this imaginary parentheses\r\n                        tokens.push(new ClosingParenthesis(IndexedString.new(')', NaN)));\r\n                    }\r\n                    // breaks the while cycle because rest was parsed recursively\r\n                    break;\r\n                }\r\n\r\n                // whole \"(...)\" part pushed as selection\r\n                if (selectionExpected) {\r\n                    tokens.push(UnaryOperatorToken.selection(split.first));\r\n                }\r\n                // inner of \"(...)\" part parsed as parentheses structure\r\n                else {\r\n                    tokens.push(new OpeningParenthesis(split.first.slice(0, 1)));\r\n                    const recursiveReturn = this.fakeParseTokens(split.first.slice(1, -1), cursorIndex);\r\n                    errors.push(...recursiveReturn.errors);\r\n                    whispers.push(...recursiveReturn.whispers);\r\n                    tokens.push(...recursiveReturn.tokens);\r\n                    tokens.push(new ClosingParenthesis(split.first.slice(-1)));\r\n                    selectionExpected = true;\r\n                }\r\n                rest = split.second;\r\n            }\r\n            // '[' can be a projection, theta join, or right theta semi join\r\n            else if (rest.startsWith(\"[\")) {\r\n                let split: {first: IndexedString, second: IndexedString};\r\n                let error: boolean = false;\r\n                try {\r\n                    split = IndexedStringUtils.nextBorderedPart(rest, '[', ']>');\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (err) {\r\n                    error = true;\r\n                    // saves error\r\n                    if (err instanceof ErrorWithTextRange) {\r\n                        errors.push(err);\r\n                    }\r\n                    // it fakes the unclosed expression part as a projection operator\r\n                    split = {first: rest.concat(IndexedString.new(']', rest.getNextIndexOrNaN())), second: IndexedString.empty()};\r\n                }\r\n\r\n                // checks whether the cursor was reached\r\n                const operatorEndIndex: number | undefined = split.first.getLastNonNaNIndex();\r\n                if (!error && operatorEndIndex === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                // right theta semijoin found \"[...>\"\r\n                if (split.first.endsWith('>')) {\r\n                    tokens.push(BinaryOperatorToken.rightThetaSemijoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // if the next part contains any character from =<>+/*&|~\"()! it cannot be a valid Projection\r\n                else if (split.first.containsAny('=<>+/*&|~\"()!')) {\r\n                    tokens.push(BinaryOperatorToken.thetaJoin(split.first));\r\n                    selectionExpected = false;\r\n                    rest = split.second;\r\n                }\r\n                // else suppose it is a projection\r\n                else {\r\n                    tokens.push(UnaryOperatorToken.projection(split.first));\r\n                    selectionExpected = true;\r\n                    rest = split.second;\r\n                }\r\n            }\r\n            // BINARY OPERATORS\r\n            else if (rest.startsWith(\"*F*\") || rest.startsWith(\"*L*\") || rest.startsWith(\"*R*\")) {\r\n                const operator: IndexedString = rest.slice(0, 3);\r\n                // checks whether the cursor was reached\r\n                const operatorEndIndex: number | undefined = operator.getLastNonNaNIndex();\r\n                if (operatorEndIndex === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"*F\")) {\r\n                    tokens.push(BinaryOperatorToken.fullOuterJoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"*L\")) {\r\n                    tokens.push(BinaryOperatorToken.leftOuterJoin(operator));\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.rightOuterJoin(operator));\r\n                }\r\n                rest = rest.slice(3);\r\n                selectionExpected = false;\r\n            }\r\n            // operators of 2 characters\r\n            else if (rest.startsWith(\"<*\") || rest.startsWith(\"*>\")) {\r\n                const operator: IndexedString = rest.slice(0, 2);\r\n                // checks whether the cursor was reached\r\n                const operatorEndIndex: number | undefined = operator.getLastNonNaNIndex();\r\n                if (operatorEndIndex === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"<*\")) {\r\n                    tokens.push(BinaryOperatorToken.leftSemijoin(operator));\r\n                }\r\n                else {\r\n                    tokens.push(BinaryOperatorToken.rightSemijoin(operator));\r\n                }\r\n                rest = rest.slice(2);\r\n                selectionExpected = false;\r\n            }\r\n            // operators of 1 character\r\n            else if (\"*\\u2a2f\\u222a\\u2229\\\\\\u22b3\\u22b2\\u00f7\".indexOf(rest.charAt(0)) > -1) {\r\n                const operator: IndexedString = rest.slice(0, 1);\r\n                // checks whether the cursor was reached\r\n                const operatorEndIndex: number | undefined = operator.getLastNonNaNIndex();\r\n                if (operatorEndIndex === cursorIndex - 1) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                if (rest.startsWith(\"*\")) {\r\n                    tokens.push(BinaryOperatorToken.naturalJoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u2a2f\")) {\r\n                    tokens.push(BinaryOperatorToken.cartesianProduct(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u222a\")) {\r\n                    tokens.push(BinaryOperatorToken.union(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u2229\")) {\r\n                    tokens.push(BinaryOperatorToken.intersection(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\\\\")) {\r\n                    tokens.push(BinaryOperatorToken.difference(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u22b3\")) {\r\n                    tokens.push(BinaryOperatorToken.leftAntijoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u22b2\")) {\r\n                    tokens.push(BinaryOperatorToken.rightAntijoin(operator));\r\n                }\r\n                else if (rest.startsWith(\"\\u00f7\")) {\r\n                    tokens.push(BinaryOperatorToken.division(operator));\r\n                }\r\n                rest = rest.slice(1);\r\n                selectionExpected = false;\r\n            }\r\n            // '<' can be a rename or left theta semi join - this \"if\" must be after <*\r\n            else if (rest.startsWith('<')) {\r\n                try {\r\n                    const split = IndexedStringUtils.nextBorderedPart(rest, '<', '>]', '-');\r\n                    // checks whether the cursor was reached\r\n                    const operatorEndIndex: number | undefined = split.first.getLastNonNaNIndex();\r\n                    if (operatorEndIndex === cursorIndex - 1) {\r\n                        whispers = [...this.relations.keys()];\r\n                    }\r\n                    // found rename\r\n                    if (split.first.endsWith('>')) {\r\n                        tokens.push(UnaryOperatorToken.rename(split.first));\r\n                        selectionExpected = true;\r\n                    }\r\n                    // found left theta semi join\r\n                    else {\r\n                        tokens.push(BinaryOperatorToken.leftThetaSemijoin(split.first));\r\n                        selectionExpected = false;\r\n                    }\r\n                    rest = split.second;\r\n                }\r\n                // catches error from nextBorderedPart\r\n                catch (e) {\r\n                    // it fakes the unclosed expression part as a rename operator\r\n                    tokens.push(UnaryOperatorToken.rename(rest.concat(IndexedString.new('>', rest.getNextIndexOrNaN()))));\r\n                    // breaks the while cycle as all was used\r\n                    break;\r\n                }\r\n            }\r\n            // RELATION REFERENCE\r\n            else if (StringUtils.isLetter(rest.charAt(0)) || rest.charAt(0) === '_') {\r\n                const split = IndexedStringUtils.nextName(rest);\r\n\r\n                // checks whether the cursor was reached in the relation reference string\r\n                const relationStartIndex: number | undefined = split.first.getFirstNonNaNIndex();\r\n                const relationEndIndex: number | undefined = split.first.getLastNonNaNIndex();\r\n                if (typeof relationStartIndex === \"number\" && typeof relationEndIndex === \"number\" &&\r\n                    relationStartIndex <= cursorIndex - 1 && cursorIndex - 1 <= relationEndIndex) {\r\n                    whispers = [...this.relations.keys()];\r\n                }\r\n\r\n                tokens.push(new RelationToken(split.first));\r\n                rest = split.second;\r\n                selectionExpected = true;\r\n            }\r\n            // WHITE SPACE\r\n            else if (rest.charAt(0).match(/\\s/)) {\r\n                let i = 0;\r\n                while (i < rest.length() && rest.charAt(i).match(/\\s/)) {\r\n                    if (rest.indexAt(i) === cursorIndex - 1) {\r\n                        whispers = [...this.relations.keys()];\r\n                    }\r\n                    ++i;\r\n                }\r\n                rest = rest.slice(i);\r\n            }\r\n            // UNEXPECTED PART\r\n            else {\r\n                const split = IndexedStringUtils.nextNonWhitespacePart(rest);\r\n                errors.push(ErrorFactory.syntaxError(language().syntaxErrors.exprParser_unexpectedPart,\r\n                    split.first.getRange(), split.first.toString()));\r\n                // tries to skip first unexpected character\r\n                rest = rest.slice(split.first.length());\r\n            }\r\n        }\r\n        return { tokens, whispers, errors };\r\n    }\r\n\r\n    /**\r\n     * Checks the validity of the given infix token array.\r\n     * If the type is THROW_STRICT or THROW_NOT_STRICT, it throws found errors. Strict version checks the first\r\n     * token in the array, not strict version does not. In both throw version is the errors parameter ignored.\r\n     * If the type is NOT_THROW, it adds fake tokens if the array is not valid.\r\n     * Fake tokens are relations with empty name \"\", or natural joins \"*\", their error ranges are undefined.\r\n     * All faked errors are reported pushed in given errors array.\r\n     * Expects validly nested parentheses: yes \"(()())\", no \")()\", \")(\". Expects not empty array.\r\n     *\r\n     * @param tokens token array to check\r\n     * @param type type of the assertion\r\n     * @param errors array for pushing faked errors for NOT_THROW type\r\n     */\r\n    public assertValidInfixTokens(tokens: ExprToken[], type: AssertType, errors: ErrorWithTextRange[] = []): void {\r\n        /**\r\n         * Handles the error described by given error code, params and range. If doThrow is true, throws the described\r\n         * error. Otherwise, fakes it by inserting a new token at given index. The token is binary (natural join) if\r\n         * missing is \"binary\", otherwise, it is a relation with empty name.\r\n         */\r\n        const handleError = (index: number, missing: \"binary\" | \"relation\",\r\n                             msg: string[], range: {start: number, end: number} | undefined, ...params: string[]) => {\r\n            const error = ErrorFactory.syntaxError(msg, range, ...params);\r\n            if (type !== AssertType.NOT_THROW) {\r\n                throw error;\r\n            }\r\n            else if (missing === \"binary\") {\r\n                errors.push(error);\r\n                tokens.splice(index, 0, BinaryOperatorToken.naturalJoin(IndexedString.new(\"*\")));\r\n            }\r\n            else {\r\n                errors.push(error);\r\n                tokens.splice(index, 0, new RelationToken(IndexedString.new(\"\")));\r\n            }\r\n        }\r\n\r\n        if (type !== AssertType.THROW_NOT_STRICT) {\r\n            // checks start of an array: it must start with '(' or relation\r\n            if (tokens[0] instanceof UnaryOperatorToken || tokens[0] instanceof BinaryOperatorToken || tokens[0] instanceof ClosingParenthesis) {\r\n                handleError(0, \"relation\", language().syntaxErrors.exprParser_invalidStart,\r\n                    tokens[0].getRange(), tokens[0].str.toString());\r\n            }\r\n        }\r\n\r\n        // checks end of an array: it must end with ')', relation or an unary operator\r\n        if (tokens[tokens.length - 1] instanceof OpeningParenthesis || tokens[tokens.length - 1] instanceof BinaryOperatorToken) {\r\n            handleError(tokens.length, \"relation\", language().syntaxErrors.exprParser_invalidEnd,\r\n                tokens[tokens.length - 1].getRange(), tokens[tokens.length - 1].str.toString());\r\n        }\r\n\r\n        // checks adjacent pairs of tokens\r\n        let i2: number = 1;\r\n        while (i2 < tokens.length) {\r\n            const token1: ExprToken = tokens[i2 - 1];\r\n            const token2: ExprToken = tokens[i2];\r\n\r\n            // valid predecessors: binary operator or '('\r\n            if (token2 instanceof RelationToken) {\r\n                if (token1 instanceof RelationToken) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_relationAfterRelation,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof UnaryOperatorToken) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_relationAfterUnary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof ClosingParenthesis) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_relationAfterClosing,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof UnaryOperatorToken) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_unaryAfterBinary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_unaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof BinaryOperatorToken) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_binaryAfterBinary,\r\n                        token2.getRange(), token2.str.toString(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_binaryAfterOpening,\r\n                        token2.getRange(), token2.str.toString());\r\n                }\r\n            }\r\n            // valid predecessors: binary operator or '('\r\n            else if (token2 instanceof OpeningParenthesis) {\r\n                if (token1 instanceof RelationToken) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_openingAfterRelation,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof UnaryOperatorToken) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_openingAfterUnary,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof ClosingParenthesis) {\r\n                    handleError(i2, \"binary\", language().syntaxErrors.exprParser_openingAfterClosing,\r\n                        token2.getRange());\r\n                }\r\n            }\r\n            // valid predecessors: relation, unary operator or ')'\r\n            else if (token2 instanceof ClosingParenthesis) {\r\n                if (token1 instanceof BinaryOperatorToken) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_closingAfterBinary,\r\n                        token2.getRange(), token1.str.toString());\r\n                }\r\n                if (token1 instanceof OpeningParenthesis) {\r\n                    handleError(i2, \"relation\", language().syntaxErrors.exprParser_closingAfterOpening,\r\n                        token2.getRange());\r\n                }\r\n            }\r\n            else {\r\n                throw ErrorFactory.codeError(language().codeErrors.exprParser_unexpectedToken, JSON.stringify(token2));\r\n            }\r\n            ++i2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transforms given infix relation algebra expression into postfix (reverse polish) form.\r\n     * Throws error when invalid parentheses structure is given.\r\n     *\r\n     * @param tokens infix relational algebra expression as Token array\r\n     * @return postfix (reverse polish) form of given array\r\n     */\r\n    public toRPN(tokens: ExprToken[]): ExprToken[] {\r\n        const rpnQueue: ExprToken[] = [];\r\n        const operatorsStack: Array<BinaryOperatorToken | ParenthesisToken> = [];\r\n        tokens.forEach(token => {\r\n            if (token instanceof RelationToken || token instanceof UnaryOperatorToken) {\r\n                rpnQueue.push(token);\r\n            }\r\n            else if (token instanceof BinaryOperatorToken) {\r\n                while (operatorsStack.length > 0 && operatorsStack[operatorsStack.length - 1] instanceof BinaryOperatorToken) {\r\n                    // @ts-ignore (token must be of BinaryOperatorToken class)\r\n                    let other: BinaryOperatorToken = operatorsStack[operatorsStack.length - 1];\r\n                    // all used operators have left associativity\r\n                    if (token.precedence <= other.precedence) {\r\n                        // @ts-ignore (token must be present)\r\n                        rpnQueue.push(operatorsStack.pop());\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof OpeningParenthesis) {\r\n                operatorsStack.push(token);\r\n            }\r\n            else if (token instanceof ClosingParenthesis) {\r\n                while (true) {\r\n                    if (operatorsStack.length === 0) {\r\n                        throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_invalidParentheses,\r\n                            undefined);\r\n                    }\r\n                    if (operatorsStack[operatorsStack.length - 1] instanceof OpeningParenthesis) {\r\n                        operatorsStack.pop();\r\n                        break;\r\n                    }\r\n                    // @ts-ignore (token must be present)\r\n                    rpnQueue.push(operatorsStack.pop());\r\n                }\r\n            }\r\n        });\r\n        while (operatorsStack.length > 0) {\r\n            // @ts-ignore (token must be present)\r\n            const curToken: ExprToken = operatorsStack.pop();\r\n            if (curToken instanceof OpeningParenthesis) {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_invalidParentheses,\r\n                    undefined);\r\n            }\r\n            else {\r\n                rpnQueue.push(curToken);\r\n            }\r\n        }\r\n        return rpnQueue;\r\n    }\r\n\r\n    /**\r\n     * Creates a RA expression evaluating tree from the given array of tokens in reverse polish form.\r\n     * Wraps recursive function rpnToRATreeRecursive(tokens).\r\n     * Possible errors:\r\n     * - not all tokens were used (invalid RPN structure was given, should not happen if the previous infix structure\r\n     * was asserted/faked) - if doThrow = false, returns a RelationNode with an empty relation\r\n     * - reference to a relation which does not exist found - if doThrow = false, replaces it with an empty relation\r\n     *\r\n     * @param tokens value-evaluating expression in reverse polish form\r\n     * @param doThrow if true and an error occurs, throws an error, if false and an error occurs, fakes it and does\r\n     * not throw\r\n     * @param errors\r\n     * @return RATreeNode tree (its root)\r\n     */\r\n    public rpnToRATree(tokens: ExprToken[], doThrow: boolean, errors: ErrorWithTextRange[] = []): RATreeNode {\r\n        const ret: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n        // not all tokens were used\r\n        if (tokens.length > 0) {\r\n            if (doThrow) {\r\n                throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_invalidExpression, undefined);\r\n            }\r\n            else {\r\n                return new RelationNode(new Relation(\"\"));\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    public rpnToRATreeRecursive(tokens: ExprToken[], doThrow: boolean, errors: ErrorWithTextRange[]): RATreeNode {\r\n        if (tokens.length === 0) {\r\n            throw ErrorFactory.syntaxError(language().syntaxErrors.exprParser_invalidExpression, undefined);\r\n        }\r\n        // @ts-ignore (there must be a token)\r\n        const token: ExprToken = tokens.pop();\r\n        // RELATION REFERENCE\r\n        if (token instanceof RelationToken) {\r\n            const relation: Relation | undefined = this.relations.get(token.str.toString());\r\n            // when the relation does not exist, throws or fakes it with an empty relation\r\n            if (relation === undefined) {\r\n                const error = ErrorFactory.semanticError(language().semanticErrors.exprParser_relationNotDefined,\r\n                    token.getRange(), token.str.toString());\r\n                if (doThrow) {\r\n                    throw error;\r\n                }\r\n                else {\r\n                    errors.push(error);\r\n                    return new RelationNode(new Relation(\"\"));\r\n                }\r\n            }\r\n            return new RelationNode(relation);\r\n        }\r\n        // UNARY OPERATORS\r\n        if (token instanceof UnaryOperatorToken) {\r\n            const subtree: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            return RATreeFactory.createUnary(token.type, subtree, this.nullValuesSupport, token.str);\r\n        }\r\n        // BINARY OPERATORS\r\n        if (token instanceof BinaryOperatorToken) {\r\n            const right: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            const left: RATreeNode = this.rpnToRATreeRecursive(tokens, doThrow, errors);\r\n            return RATreeFactory.createBinary(token.type, left, right, this.nullValuesSupport, token.str);\r\n        }\r\n        // should never happen\r\n        throw ErrorFactory.codeError(language().codeErrors.exprParser_unexpectedToken, JSON.stringify(token));\r\n    }\r\n}\r\n","import RATreeNode from \"./raTreeNode\";\r\nimport ProjectionNode from \"./projectionNode\";\r\nimport RenameNode from \"./renameNode\";\r\nimport SelectionNode from \"./selectionNode\";\r\nimport UnaryNode, {UnaryNodeClass} from \"./unaryNode\";\r\nimport AntijoinNode, {AntijoinType} from \"./antijoinNode\";\r\nimport CartesianProductNode from \"./cartesianProductNode\";\r\nimport DivisionNode from \"./divisionNode\";\r\nimport OuterJoinNode, {OuterJoinType} from \"./outerJoinNode\";\r\nimport NaturalJoinNode, {NaturalJoinType} from \"./naturalJoinNode\";\r\nimport SetOperationNode, {SetOperationType} from \"./setOperationNode\";\r\nimport BinaryNode, {BinaryNodeClass} from \"./binaryNode\";\r\nimport {IndexedString} from \"../types/indexedString\";\r\nimport ThetaJoinNode, {ThetaJoinType} from \"./thetaJoinNode\";\r\n\r\n/**\r\n * Factory for creating unary and binary nodes of given class.\r\n */\r\nexport default class RATreeFactory {\r\n\r\n    /**\r\n     * Creates new unary node of given class.\r\n     *\r\n     * @param unaryClass wanted class\r\n     * @param subtree source subtree for a node\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param expr expression used to specify node's behavior\r\n     */\r\n    public static createUnary(unaryClass: UnaryNodeClass, subtree: RATreeNode,\r\n                              nullValuesSupport: boolean, expr: IndexedString): UnaryNode {\r\n        switch (unaryClass) {\r\n            case \"projection\":\r\n                return new ProjectionNode(expr, subtree);\r\n            case \"rename\":\r\n                return new RenameNode(expr, subtree);\r\n            case \"selection\":\r\n                return new SelectionNode(expr, subtree, nullValuesSupport);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new binary node of given class.\r\n     *\r\n     * @param binaryClass wanted class\r\n     * @param left left source subtree for a node\r\n     * @param right right source subtree for a node\r\n     * @param nullValuesSupport whether null values are supported\r\n     * @param expr expression used to specify node's behavior\r\n     */\r\n    public static createBinary(binaryClass: BinaryNodeClass, left: RATreeNode, right: RATreeNode,\r\n                               nullValuesSupport: boolean, expr: IndexedString): BinaryNode {\r\n        switch (binaryClass) {\r\n            case \"left antijoin\":\r\n                return new AntijoinNode(AntijoinType.left, left, right);\r\n            case \"right antijoin\":\r\n                return new AntijoinNode(AntijoinType.right, left, right);\r\n            case \"cartesian product\":\r\n                return new CartesianProductNode(left, right, expr.getRange());\r\n            case \"division\":\r\n                return new DivisionNode(left, right, expr.getRange());\r\n            case \"natural join\":\r\n                return new NaturalJoinNode(NaturalJoinType.natural, left, right);\r\n            case \"left outer join\":\r\n                return new OuterJoinNode(OuterJoinType.left, left, right);\r\n            case \"right outer join\":\r\n                return new OuterJoinNode(OuterJoinType.right, left, right);\r\n            case \"full outer join\":\r\n                return new OuterJoinNode(OuterJoinType.full, left, right);\r\n            case \"left semijoin\":\r\n                return new NaturalJoinNode(NaturalJoinType.leftSemi, left, right);\r\n            case \"right semijoin\":\r\n                return new NaturalJoinNode(NaturalJoinType.rightSemi, left, right);\r\n            case \"union\":\r\n                return new SetOperationNode(SetOperationType.union, left, right, expr.getRange());\r\n            case \"intersection\":\r\n                return new SetOperationNode(SetOperationType.intersection, left, right, expr.getRange());\r\n            case \"difference\":\r\n                return new SetOperationNode(SetOperationType.difference, left, right, expr.getRange());\r\n            case \"theta join\":\r\n                return new ThetaJoinNode(ThetaJoinType.full, expr, left, right, nullValuesSupport);\r\n            case \"left theta semijoin\":\r\n                return new ThetaJoinNode(ThetaJoinType.left, expr, left, right, nullValuesSupport);\r\n            case \"right theta semijoin\":\r\n                return new ThetaJoinNode(ThetaJoinType.right, expr, left, right, nullValuesSupport);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\n\r\ninterface TextInputProps {\r\n    // initial value for the input\r\n    value: string,\r\n    // text on the submit button\r\n    buttonText: string,\r\n    // handler of input submit\r\n    onSubmit: (text: string) => void,\r\n    // function which returns true for forbidden inputs which cannot be submitted\r\n    forbidden: (text: string) => boolean,\r\n\r\n    // id of the input\r\n    id: string\r\n}\r\n\r\ninterface TextInputState {\r\n    value: string,\r\n    buttonDisable: boolean\r\n}\r\n\r\n/**\r\n * Basic text input with submit button (without label). The input cannot be submit if the current value is forbidden.\r\n * All inserted tabulators are replaced by 4 spaces.\r\n */\r\nexport class TextInput extends React.Component<TextInputProps, TextInputState> {\r\n\r\n    private readonly inputRef: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: TextInputProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            buttonDisable: this.props.forbidden(this.props.value)\r\n        }\r\n        this.inputRef = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<TextInputProps>) {\r\n        if (prevProps.value !== this.props.value) {\r\n            this.setState({value: this.props.value});\r\n        }\r\n    }\r\n\r\n    private handleChange = (value: string): void => {\r\n        value = value.replace(/\\t/g, \"    \");\r\n        const disable: boolean = this.props.forbidden(value);\r\n        this.setState({\r\n            value: value,\r\n            buttonDisable: disable\r\n        });\r\n    }\r\n\r\n    private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n        if (event.key === \"Enter\") {\r\n            if (!this.state.buttonDisable) {\r\n                this.handleSubmit();\r\n            }\r\n        }\r\n        else if (event.key === \"Escape\" || event.key === \"Esc\") {\r\n            if (this.inputRef.current !== null) {\r\n                this.inputRef.current.blur();\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleSubmit = (): void => {\r\n        this.props.onSubmit(this.state.value);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <>\r\n                <input\r\n                    ref={this.inputRef}\r\n                    type='text'\r\n                    id={this.props.id}\r\n                    spellCheck={false}\r\n                    autoComplete={\"off\"}\r\n                    value={this.state.value}\r\n                    onChange={event => this.handleChange(event.target.value)}\r\n                    onKeyDown={this.handleKeyDown}\r\n                    className={'text-input'}\r\n                />\r\n                <button\r\n                    onClick={this.handleSubmit}\r\n                    disabled={this.state.buttonDisable}\r\n                >{this.props.buttonText}</button>\r\n            </>\r\n        );\r\n    }\r\n}","import \"./css/messageBox.css\"\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\nconst boxMargin: number = Number(cssConstants.getPropertyValue('--message-box-margin-num'));\r\n\r\nexport class MessageBox {\r\n\r\n    private static readonly hideTimeout: number = 5000;\r\n\r\n    private static box: HTMLDivElement = MessageBox.init();\r\n    private static hideIntervalId: NodeJS.Timeout;\r\n\r\n    private static init(): HTMLDivElement {\r\n        const box = document.createElement(\"div\");\r\n        box.classList.add(\"message-box\");\r\n        box.style.visibility = \"hidden\";\r\n        box.onmouseenter = () => {\r\n            MessageBox.clearHideTimeout();\r\n        }\r\n        box.onmouseleave = () => {\r\n            MessageBox.setHideTimeout();\r\n        }\r\n\r\n        const paragraph = document.createElement(\"p\");\r\n        box.appendChild(paragraph);\r\n\r\n        const button = document.createElement(\"button\");\r\n        button.innerText = \"\\u2716\";\r\n        button.onclick = () => {\r\n            MessageBox.hideBox();\r\n        }\r\n        box.appendChild(button);\r\n\r\n        window.addEventListener('resize', () => {\r\n            MessageBox.moveBox();\r\n        });\r\n\r\n        document.body.appendChild(box);\r\n        return box;\r\n    }\r\n\r\n    private static setHideTimeout = () => {\r\n        // clears previous hide interval\r\n        MessageBox.clearHideTimeout();\r\n        MessageBox.hideIntervalId = setTimeout(MessageBox.hideBox, MessageBox.hideTimeout);\r\n    }\r\n\r\n    private static clearHideTimeout = () => {\r\n        clearTimeout(MessageBox.hideIntervalId);\r\n    }\r\n\r\n    private static hideBox = () => {\r\n        MessageBox.box.style.visibility = \"hidden\";\r\n    }\r\n\r\n    private static moveBox = () => {\r\n        if (MessageBox.box.style.visibility === \"visible\") {\r\n            MessageBox.box.style.width = (document.body.clientWidth - 2 * boxMargin) + \"px\";\r\n        }\r\n    }\r\n\r\n    private static display(msg: string, error: boolean): void {\r\n        const box = MessageBox.box;\r\n        // @ts-ignore - first element is paragraph\r\n        box.firstElementChild.innerText = msg;\r\n        box.style.visibility = \"visible\";\r\n        box.classList.toggle(\"message-box-message\", !error);\r\n        box.classList.toggle(\"message-box-error\", error);\r\n        MessageBox.moveBox();\r\n        MessageBox.setHideTimeout();\r\n    }\r\n\r\n    /**\r\n     * Displays given message in a message box fixed on the page bottom.\r\n     */\r\n    public static message(msg: string): void {\r\n        MessageBox.display(msg, false);\r\n    }\r\n\r\n    /**\r\n     * Displays given error in a message box fixed on the page bottom.\r\n     */\r\n    public static error(msg: string): void {\r\n        MessageBox.display(msg, true);\r\n    }\r\n}","import React from \"react\";\r\nimport \"./css/expressionSection.css\"\r\nimport Relation from \"../relation/relation\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport RASyntaxError from \"../error/raSyntaxError\";\r\nimport RASemanticError from \"../error/raSemanticError\";\r\nimport {XTextArea} from \"./xTextArea\";\r\nimport {ExprParser} from \"../expression/exprParser\";\r\nimport {getStartOfWordBeforeIndex, sortWhispers} from \"../utils/whisperUtils\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {TextInput} from \"./textInput\";\r\nimport ErrorWithTextRange from \"../error/errorWithTextRange\";\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport {MessageBox} from \"./messageBox\";\r\nimport {LanguageDef} from \"../language/language\";\r\n\r\ninterface ExpressionSectionProps {\r\n    // available expressions\r\n    expressions: Expression[],\r\n    // index of the current selected expression in the expression list\r\n    currentExpressionIndex: number,\r\n\r\n    // loaded relations user as sources for expression evaluation\r\n    relations: Map<string, Relation>,\r\n\r\n    // handler of selecting different expression as current\r\n    onSelectDifferentExpression: (newIndex: number) => void,\r\n    // handler of creating the new expression\r\n    onNewExpression: () => void,\r\n    // handler of deleting the current expression\r\n    onDeleteExpression: (onDone: () => void) => void,\r\n    // handler of saving the expressions\r\n    onExportExpressions: (onDone: (msg: string) => void) => void,\r\n    // handler of loading the expressions\r\n    onImportExpressions: (onDone: (msg: string) => void) => void,\r\n\r\n    // handler of change in the current selected expression\r\n    onChange: (name: string, text: string) => void,\r\n    // handler of evaluation, it accepts the parsed tree from the expression text\r\n    onEval: (tree: RATreeNode) => void,\r\n    // handler of unexpected errors\r\n    onUnexpectedError: (e: Error) => void,\r\n\r\n    // whether to support null values\r\n    nullValuesSupport: boolean,\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean,\r\n    // current application language\r\n    language: LanguageDef\r\n}\r\n\r\ninterface ExpressionSectionState {\r\n    sectionClicked: boolean,\r\n    whispers: string[],\r\n    errors: {start: number, end: number, msg: string}[],\r\n    cursorIndex: number\r\n}\r\n\r\n/**\r\n * Section to edit, manage, and eval relational algebra expressions.\r\n */\r\nexport class ExpressionSection extends React.Component<ExpressionSectionProps, ExpressionSectionState> {\r\n\r\n    // reference to child textarea element\r\n    private readonly textAreaRef: React.RefObject<XTextArea>;\r\n    // timestamp of last expression text change\r\n    private lastChange: number = 0;\r\n    // timestamp of last display of whispers and errors\r\n    private lastWhisperAndErrorsUpdate: number = 0;\r\n    // update rate of whispers and errors (in ms)\r\n    private readonly whispersAndErrorsUpdateRate: number = 400;\r\n\r\n    constructor(props: ExpressionSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false,\r\n            whispers: [],\r\n            errors: [],\r\n            cursorIndex: 0\r\n        }\r\n        this.textAreaRef = React.createRef<XTextArea>();\r\n        setInterval(() => this.updateWhispersAndErrors(), this.whispersAndErrorsUpdateRate);\r\n    }\r\n\r\n    /**\r\n     * Updates displayed errors in the text area input.\r\n     */\r\n    public updateErrors = () => {\r\n        const text = this.getCurExpr().text;\r\n        const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n        const { errors } = exprParser.fakeParse(text, this.state.cursorIndex);\r\n        this.setState({\r\n            errors: errors.filter(err => err.range !== undefined)\r\n                // @ts-ignore\r\n                .map(err => {return {start: err.range.start, end: err.range.end + 1, msg: err.message}})\r\n        });\r\n    }\r\n\r\n    private getCurExpr(): Expression {\r\n        return this.props.expressions[this.props.currentExpressionIndex];\r\n    }\r\n\r\n    private handleSelectDifferentExpression(index: number): void {\r\n        this.setState({errors: []});\r\n        this.props.onSelectDifferentExpression(index);\r\n    }\r\n\r\n    private evalExpr = (): void => {\r\n        try {\r\n            const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n            const tree = exprParser.parse(this.props.expressions[this.props.currentExpressionIndex].text);\r\n            tree.eval();\r\n            this.setState({errors: []});\r\n            this.props.onEval(tree);\r\n        }\r\n        catch (err) {\r\n            if (err instanceof ErrorWithTextRange) {\r\n                if (err.range !== undefined) {\r\n                    // change end to also highlight the last char\r\n                    err.range.end += 1;\r\n                    this.setState(state => {\r\n                        const errorRanges = state.errors;\r\n                        // does not push duplicate error range\r\n                        if (errorRanges.every(er => er.start !== err.range.start || er.end !== err.range.end)) {\r\n                            errorRanges.push({...err.range, msg: err.message});\r\n                        }\r\n                        return {errors: errorRanges}\r\n                    });\r\n                }\r\n            }\r\n            this.showError(err);\r\n        }\r\n    }\r\n\r\n    private newExpression = (): void => {\r\n        this.props.onNewExpression();\r\n    }\r\n\r\n    private deleteExpression = (): void => {\r\n        this.props.onDeleteExpression(this.updateErrors);\r\n    }\r\n\r\n    private exportExpressions = (): void => {\r\n        this.props.onExportExpressions(MessageBox.message);\r\n    }\r\n\r\n    private importExpressions = (): void => {\r\n        this.setState({errors: []});\r\n        this.props.onImportExpressions((msg) => {\r\n            MessageBox.message(msg);\r\n            this.updateErrors();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds given special string into RA expression at the current cursor position.\r\n     *\r\n     * @param str string to be added\r\n     * @param shift move of the cursor from added string end position (to the beginning)\r\n     */\r\n    private addSpecialString = (str: string, shift: number): void => {\r\n        // @ts-ignore\r\n        const {start, end} = this.textAreaRef.current.getSelection();\r\n        const firstPart: string = this.getCurExpr().text.substring(0, start);\r\n        const secondPart: string = this.getCurExpr().text.substring(end);\r\n        const newPosition: number = firstPart.length + str.length - shift;\r\n        const newStr: string = firstPart + str + secondPart;\r\n        // updates text in textarea\r\n        this.handleExprChange(newStr, newPosition, () => {\r\n            // @ts-ignore - moves cursor to expected position\r\n            this.textAreaRef.current.setSelection(newPosition);\r\n            // @ts-ignore\r\n            this.textAreaRef.current.focus();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles change of expression text. Updates text and notifies the parent.\r\n     *\r\n     * @param text\r\n     * @param cursorIndex\r\n     * @param onDone callback after updating the state\r\n     */\r\n    private handleExprChange = (text: string, cursorIndex: number, onDone: () => void = () => {}): void => {\r\n        this.props.onChange(this.getCurExpr().name, text);  // must be called before setState for proper functionality of XTextArea\r\n        this.setState({cursorIndex: cursorIndex}, onDone);\r\n        this.lastChange = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Handles input with Ctrl key pressed from textarea.\r\n     */\r\n    private handleCtrlInput = (ev: KeyboardEvent): void => {\r\n        if (ev.key === \"Enter\") {\r\n            this.evalExpr();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shows current whispers and errors, if the text area is focused and there was a text change after last update.\r\n     */\r\n    private updateWhispersAndErrors = () => {\r\n        const textArea = this.textAreaRef.current;\r\n        if (textArea !== null && textArea.isFocused() && this.lastChange > this.lastWhisperAndErrorsUpdate) {\r\n            const text = this.getCurExpr().text;\r\n            const exprParser: ExprParser = new ExprParser(this.props.relations, this.props.nullValuesSupport);\r\n            const fakeParseResult = exprParser.fakeParse(text, this.state.cursorIndex);\r\n            const wordBeforeCursor: string = text.slice(getStartOfWordBeforeIndex(text, this.state.cursorIndex), this.state.cursorIndex);\r\n            const whispers = sortWhispers(fakeParseResult.whispers, wordBeforeCursor);\r\n            this.setState({\r\n                whispers: whispers,\r\n                errors: fakeParseResult.errors.filter(err => err.range !== undefined)\r\n                    // @ts-ignore\r\n                    .map(err => {return {start: err.range.start, end: err.range.end + 1, msg: err.message}})\r\n            });\r\n            this.lastWhisperAndErrorsUpdate = Date.now();\r\n        }\r\n    }\r\n\r\n    private handleExprNameChange = (name: string) => {\r\n        this.props.onChange(name, this.getCurExpr().text);\r\n    }\r\n\r\n    /**\r\n     * Handles and shows the given error. If the error is not of RASyntaxError or RASemanticError class, it is passed\r\n     * to the parent as unexpected error.\r\n     *\r\n     * @param err the error to handle\r\n     */\r\n    private showError = (err: Error) => {\r\n        // common user's errors\r\n        if (err instanceof RASyntaxError || err instanceof RASemanticError) {\r\n            MessageBox.error(err.message);\r\n        }\r\n        else {\r\n            this.props.onUnexpectedError(err);\r\n            MessageBox.error(\"UNEXPECTED ERROR: \" + err.message + \"\\n\" +\r\n                \"Please, help us and report your last actions, thank you!\");\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const lang = this.props.language.expressionSection;\r\n        const ops = this.props.language.operations;\r\n\r\n        const createExprMenuButtons = () => {\r\n            return this.props.expressions.map((expr, i) => {\r\n                const className: string = (this.props.currentExpressionIndex === i ? \"button-clicked\" : \"\");\r\n                return (<button\r\n                    key={i}\r\n                    onClick={() => this.handleSelectDifferentExpression(i)}\r\n                    className={className}\r\n                >{expr.name}</button>);\r\n            });\r\n        }\r\n\r\n        const createButton = (text: string, onClick: () => void, tooltip: string, style?: React.CSSProperties) => {\r\n            return (<TooltipButton\r\n                key={text}\r\n                text={text}\r\n                onClick={onClick}\r\n                className={\"\"}\r\n                style={style}\r\n                tooltip={tooltip}\r\n                tooltipClassName={\"tooltip\"}\r\n            />);\r\n        }\r\n\r\n        const createOpButton = (key: string, char: string, text: string, tooltip: string, shift: number, style: React.CSSProperties = {}) => {\r\n            return (<TooltipButton\r\n                key={key}\r\n                text={text}\r\n                onClick={() => this.addSpecialString(char, shift)}\r\n                className={\"\"}\r\n                tooltip={tooltip}\r\n                tooltipClassName={\"tooltip\"}\r\n                style={style}\r\n            />);\r\n        }\r\n        const buttonGroupMargin = {marginRight: \"10px\"};\r\n\r\n        return (\r\n            <section className=\"page-section\">\r\n                <header>\r\n                    <h2>{lang.expressionSectionHeader}</h2>\r\n                    {createButton(lang.importButton, this.importExpressions, lang.importButtonTooltip)}\r\n                    {createButton(lang.exportButton, this.exportExpressions, lang.exportButtonTooltip)}\r\n                </header>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    {createExprMenuButtons()}\r\n                    <button onClick={this.newExpression}\r\n                        style={{minWidth: \"0\", marginLeft: \"10px\", padding: \"2px 6px 1px 6px\"}}>\r\n                        <strong>+</strong>\r\n                    </button>\r\n                </menu>\r\n\r\n                <XTextArea\r\n                    ref={this.textAreaRef}\r\n                    id=\"expression-section-textarea\"\r\n                    text={this.getCurExpr().text}\r\n                    placeholder={lang.expressionTextareaPlaceholder}\r\n                    errors={this.state.errors}\r\n                    whispers={this.state.whispers}\r\n\r\n                    onChange={this.handleExprChange}\r\n                    onCtrlInput={this.handleCtrlInput}\r\n\r\n                    darkTheme={this.props.darkTheme}\r\n                />\r\n\r\n                <menu className=\"expressions-operators-menu\">\r\n                    {createOpButton(\"unary_a\", \"()\", \"()\", ops.selection, 1)}\r\n                    {createOpButton(\"unary_b\", \"[]\", \"[]\", ops.projection, 1)}\r\n                    {createOpButton(\"unary_c\", \"< -> >\", \"<>\", ops.rename, 5, buttonGroupMargin)}\r\n\r\n                    {createOpButton(\"set_a\", \"\\u222a\", \"\\u222a\", ops.union, 0)}\r\n                    {createOpButton(\"set_b\", \"\\u2229\", \"\\u2229\", ops.intersection, 0)}\r\n                    {createOpButton(\"set_c\", \"\\\\\", \"\\\\\", ops.difference, 0, buttonGroupMargin)}\r\n\r\n                    {createOpButton(\"inner_a\", \"*\", \"*\", ops.naturalJoin, 0)}\r\n                    {createOpButton(\"inner_b\", \"\\u2a2f\", \"\\u2a2f\", ops.cartesianProduct, 0)}\r\n                    {createOpButton(\"inner_c\", \"<*\", \"<*\", ops.leftSemiJoin, 0)}\r\n                    {createOpButton(\"inner_d\", \"*>\", \"*>\", ops.rightSemiJoin, 0)}\r\n                    {createOpButton(\"inner_e\", \"\\u22b3\", \"\\u22b3\", ops.leftAntijoin, 0)}\r\n                    {createOpButton(\"inner_f\", \"\\u22b2\", \"\\u22b2\", ops.rightAntijoin, 0)}\r\n                    {createOpButton(\"inner_g\", \"[]\", \"[]\", ops.thetaJoin, 1)}\r\n                    {createOpButton(\"inner_h\", \"<]\", \"<]\", ops.leftThetaSemiJoin, 1)}\r\n                    {createOpButton(\"inner_i\", \"[>\", \"[>\", ops.rightThetaSemiJoin, 1, buttonGroupMargin)}\r\n\r\n                    {this.props.nullValuesSupport && createOpButton(\"outer_a\", \"*F*\", \"*F*\", ops.fullOuterJoin, 0)}\r\n                    {this.props.nullValuesSupport && createOpButton(\"outer_b\", \"*L*\", \"*L*\", ops.leftOuterJoin, 0)}\r\n                    {this.props.nullValuesSupport && createOpButton(\"outer_c\", \"*R*\", \"*R*\", ops.rightOuterJoin, 0, buttonGroupMargin)}\r\n\r\n                    {createOpButton(\"division\", \"\\u00f7\", \"\\u00f7\", ops.division, 0, buttonGroupMargin)}\r\n\r\n                    {createOpButton(\"comment\", \"//\", \"//\", lang.comment, 0)}\r\n                </menu>\r\n\r\n                <menu className=\"page-section-management-menu\">\r\n                    <TooltipButton\r\n                        text={lang.evaluateButton}\r\n                        onClick={this.evalExpr}\r\n                        className={\"action-button\"}\r\n                        style={{marginRight: \"40px\"}}\r\n                        tooltip={lang.evaluateButtonTooltip}\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                    <TextInput\r\n                        value={this.getCurExpr().name}\r\n                        buttonText={lang.renameButton}\r\n                        onSubmit={this.handleExprNameChange}\r\n                        forbidden={() => false}\r\n                        id=\"expression-name-input\"\r\n                    />\r\n                    {createButton(lang.deleteButton, this.deleteExpression, lang.deleteButtonTooltip)}\r\n                </menu>\r\n            </section>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Relation from \"../relation/relation\";\r\nimport './css/resultRelationTable.css'\r\nimport Row from \"../relation/row\";\r\n\r\ninterface RelationTableProps {\r\n    // relation to be shown\r\n    relation: Relation\r\n}\r\n\r\ninterface RelationTableState {\r\n    // index of the column which is used to order the table (or -1 if none is used)\r\n    orderBy: number,\r\n    // 1 = ascending, -1 = descending\r\n    orderDir: number\r\n}\r\n\r\n/**\r\n * Table which shows given relation. The relation cannot be edited\r\n * Rows can be ordered by column values when the column header is clicked.\r\n * When the same column header is clicked for the second time, the order direction is changed (asc, des, asc, des, ...).\r\n */\r\nexport class ResultRelationTable extends React.Component<RelationTableProps, RelationTableState> {\r\n\r\n    constructor(props: RelationTableProps) {\r\n        super(props);\r\n        this.state = {\r\n            orderBy: -1,\r\n            orderDir: 1\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RelationTableProps>, prevState: Readonly<RelationTableState>, snapshot?: any) {\r\n        if (prevProps.relation !== this.props.relation) {\r\n            this.setState({\r\n                orderDir: 1,\r\n                orderBy: -1\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates ordering column or direction. If the given orderBy index is already selected, switches ASC/DESC order.\r\n     * Otherwise, sets ASC ordering by new orderBy column index.\r\n     */\r\n    private updateOrderBy(orderBy: number): void {\r\n        this.setState(state => {\r\n            if (state.orderBy === orderBy) {\r\n                return {\r\n                    orderDir: -state.orderDir,\r\n                    orderBy: orderBy\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    orderDir: 1,\r\n                    orderBy: orderBy\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    private getOrderByText = (): string => {\r\n        return this.state.orderDir === 1 ? \" ▼\" : \" ▲\";\r\n    }\r\n\r\n    /**\r\n     * Creates a header row for a table (with given column names).\r\n     *\r\n     * @param columns\r\n     */\r\n    private createHeaderRow(columns: string[]) {\r\n        return (\r\n            <tr>\r\n                <td className=\"row-number-td\"/>\r\n                {columns.map((columnName, index) => {\r\n                    const text: string = this.state.orderBy === index ?\r\n                        (columnName + this.getOrderByText()) : columnName;\r\n                    return <th key={index} onClick={() => this.updateOrderBy(index)}>{text}</th>\r\n                })}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates rows for a table. If there is no row in a resultRelation, returns one cell \"<<NO ROWS>>\".\r\n     *\r\n     * @param columns\r\n     */\r\n    private createRows(columns: string[]) {\r\n        // creates default row if no exists\r\n        if (this.props.relation.getRowsCount() === 0) {\r\n            return (\r\n                <tr key='1'>\r\n                    <td className=\"row-number-td\"/>\r\n                    <td key='1' colSpan={columns.length}>{'<<NO ROWS>>'}</td>\r\n                </tr>\r\n            );\r\n        }\r\n        const rows: Row[] = this.props.relation.getRows();\r\n        // sorts rows if orderBy is given (null values are after other values)\r\n        if (this.state.orderBy > -1 && this.state.orderBy < columns.length) {\r\n            const sortCol: string = columns[this.state.orderBy];\r\n            // @ts-ignore cannot be undefined\r\n            const type: \"string\" | \"number\" | \"boolean\" = rows[0].getType(sortCol);\r\n            if (type === \"number\") {\r\n                rows.sort((a, b) => {\r\n                    // @ts-ignore\r\n                    let aValue: number | null = a.getValue(sortCol);\r\n                    // @ts-ignore\r\n                    let bValue: number | null = b.getValue(sortCol);\r\n                    // a is null\r\n                    if (aValue === null && bValue !== null) {\r\n                        return this.state.orderDir * Number.MAX_SAFE_INTEGER;\r\n                    }\r\n                    // b is null\r\n                    if (aValue !== null && bValue === null) {\r\n                        return this.state.orderDir * Number.MIN_SAFE_INTEGER;\r\n                    }\r\n                    // no is null - compares as numbers\r\n                    if (aValue !== null && bValue !== null) {\r\n                        // @ts-ignore\r\n                        return this.state.orderDir * (a.getValue(sortCol) - b.getValue(sortCol));\r\n                    }\r\n                    // both are null\r\n                    return 0;\r\n                });\r\n            }\r\n            else {\r\n                rows.sort((a, b) => {\r\n                    // @ts-ignore\r\n                    let aValue: string | boolean | null = a.getValue(sortCol);\r\n                    // @ts-ignore\r\n                    let bValue: string | boolean | null = b.getValue(sortCol);\r\n                    // a is null\r\n                    if (aValue === null && bValue !== null) {\r\n                        return this.state.orderDir * Number.MAX_SAFE_INTEGER;\r\n                    }\r\n                    // b is null\r\n                    if (aValue !== null && bValue === null) {\r\n                        return this.state.orderDir * Number.MIN_SAFE_INTEGER;\r\n                    }\r\n                    // no is null - compares as strings\r\n                    if (aValue !== null && bValue !== null) {\r\n                        return this.state.orderDir * String(a.getValue(sortCol)).localeCompare(String(b.getValue(sortCol)));\r\n                    }\r\n                    // both are null\r\n                    return 0;\r\n                });\r\n            }\r\n        }\r\n        // creates all rows if any\r\n        return rows.map((row, index) => (\r\n            <tr key={index}>\r\n                <td className=\"row-number-td\">{index + 1}</td>\r\n                {row.getOrderedPrintValues(columns).map((value, index) => (\r\n                    <td key={index}>{value}</td>\r\n                ))}\r\n            </tr>\r\n        ));\r\n    }\r\n\r\n    render(){\r\n        // creates header row\r\n        const columns: string[] = this.props.relation.getColumnNames();\r\n        const headerRow = this.createHeaderRow(columns);\r\n        const rows = this.createRows(columns);\r\n\r\n        return (\r\n            <div className=\"result-table-container scrollbar-container\">\r\n                <table className=\"result-table\">\r\n                    <thead>\r\n                    {headerRow}\r\n                    </thead>\r\n                    <tbody>\r\n                    {rows}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { Group } from '@visx/group';\r\nimport { hierarchy, Tree } from '@visx/hierarchy';\r\nimport { HierarchyPointNode, HierarchyPointLink } from '@visx/hierarchy/lib/types';\r\nimport { LinkVertical } from '@visx/shape';\r\nimport ParentSize from \"@visx/responsive/lib/components/ParentSize\";\r\nimport {useTooltip} from '@visx/tooltip';\r\nimport './css/evaluationTree.css';\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport UnaryNode from \"../ratree/unaryNode\";\r\nimport BinaryNode from \"../ratree/binaryNode\";\r\nimport {getTreeDepth} from \"../ratree/raTreeTools\";\r\nimport {computeFontSizeInPx} from \"../utils/fontUtils\";\r\n\r\nexport const evalTreeSVGId: string = \"eval-tree-svg\";\r\n\r\ninterface EvaluationTreeProps {\r\n    // root of the evaluation tree to be displayed\r\n    tree: RATreeNode,\r\n    // index of the current selected node (with respect to depth first search)\r\n    selected: number,\r\n    // handler of click on nodes, it receives the index of the clicked node (with respect to depth first search)\r\n    onClick: (index: number) => void,\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean\r\n}\r\n\r\n/**\r\n * Component displaying an evaluation tree. The tree is interactive and handles clicking on the nodes.\r\n */\r\nexport class EvaluationTree extends React.Component<EvaluationTreeProps, {}> {\r\n    render() {\r\n        return (\r\n            <ParentSize>{({ width }) =>\r\n                <TreeComponent\r\n                    raTree={this.props.tree}\r\n                    selected={this.props.selected}\r\n                    width={width}\r\n                    onClick={this.props.onClick}\r\n                    darkTheme={this.props.darkTheme}\r\n                />}\r\n            </ParentSize>\r\n        );\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\n\r\nconst fontSize: string = cssConstants.getPropertyValue('--eval-tree-font-size');\r\nconst fontFamily: string = cssConstants.getPropertyValue('--eval-tree-font-family');\r\nconst {fontWidth, fontHeight} = computeFontSizeInPx(fontFamily, fontSize);\r\nconst nodePaddingX2: number = 24;\r\nconst nodeHeight = 2 * fontHeight + nodePaddingX2;\r\nconst maxNodeTextLength = 30;\r\n\r\nconst backgroundColorLight = cssConstants.getPropertyValue('--light-color-a');\r\nconst backgroundColorDark = cssConstants.getPropertyValue('--dark-color-a');\r\nconst textColorLight = cssConstants.getPropertyValue('--text-color-light');\r\nconst textColorDark = cssConstants.getPropertyValue('--text-color-dark');\r\nconst selectedNodeColorLight = cssConstants.getPropertyValue('--light-color-c');\r\nconst unselectedNodeColorLight = cssConstants.getPropertyValue('--light-color-b');\r\nconst selectedNodeColorDark = cssConstants.getPropertyValue('--dark-color-d');\r\nconst unselectedNodeColorDark = cssConstants.getPropertyValue('--dark-color-c');\r\n\r\ninterface DisplayTreeNode {\r\n    title: string;\r\n    symbol: string,\r\n    index: number;\r\n    children?: this[];\r\n}\r\n\r\n/**\r\n * Creates a DisplayTreeNode tree from the given RATreeNode tree.\r\n *\r\n * @param tree RATreeNode tree to parse to DisplayTreeNode tree\r\n * @return parsed DisplayTreeNode tree\r\n */\r\nfunction parseTreeForDisplay(tree: RATreeNode): DisplayTreeNode {\r\n    let indexes = 0;\r\n    function parseTreeForDisplayHelper(node: RATreeNode): DisplayTreeNode {\r\n        let symbol: string = node.getOperationSymbol();\r\n        if (symbol.length > maxNodeTextLength) {\r\n            symbol = symbol.slice(0, maxNodeTextLength - 4) + \"...\" + symbol.charAt(symbol.length - 1);\r\n        }\r\n\r\n        if (node instanceof UnaryNode) {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++,\r\n                children: [\r\n                    parseTreeForDisplayHelper(node.getSubtree())\r\n                ]\r\n            }\r\n        }\r\n        else if (node instanceof BinaryNode) {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++,\r\n                children: [\r\n                    parseTreeForDisplayHelper(node.getLeftSubtree()),\r\n                    parseTreeForDisplayHelper(node.getRightSubtree())\r\n                ]\r\n            }\r\n        }\r\n        else /* (tree instanceof RelationNode) */ {\r\n            return {\r\n                title: node.getOperationName(),\r\n                symbol: symbol,\r\n                index: indexes++\r\n            };\r\n        }\r\n    }\r\n    return parseTreeForDisplayHelper(tree);\r\n}\r\n\r\n/**\r\n * Component representing individual nodes of the displayed tree.\r\n *\r\n * Props:\r\n * - node: HierarchyPointNode<DisplayTreeNode>: node to be displayed wrapped as visx HierarchyPointNode.\r\n * - selected: boolean: boolean whether the given node is currently selected by the user\r\n * - onClick: (index: number) => void: handler of click on the node, it receives the index of the node (with\r\n * respect to depth first search)\r\n */\r\nfunction TreeNodeComponent({ node, selected, onClick, darkTheme }:\r\n                               { node: HierarchyPointNode<DisplayTreeNode>, selected: boolean, onClick: (index: number) => void, darkTheme: boolean }): JSX.Element {\r\n    const {\r\n        tooltipOpen, // true when mouse is over\r\n        showTooltip,\r\n        hideTooltip\r\n    } = useTooltip();\r\n\r\n    const handleMouseOver = () => {\r\n        showTooltip({ tooltipLeft: 0, tooltipTop: 0 });\r\n    };\r\n\r\n    // computes node width with respect to the text length and asserts it wider than taller\r\n    let nodeWidth = Math.max(node.data.title.length, node.data.symbol.length) * fontWidth + nodePaddingX2;\r\n    if (nodeWidth < nodeHeight) {\r\n        nodeWidth = nodeHeight;\r\n    }\r\n\r\n    return (\r\n        // top=y, left=x for vertical layout; top=x, left=y for horizontal layout\r\n        <Group top={node.y} left={node.x}>\r\n            <rect\r\n                height={nodeHeight} width={nodeWidth}\r\n                y={-nodeHeight / 2} x={-nodeWidth / 2} rx={20}\r\n                fill={darkTheme ?\r\n                    (selected ? selectedNodeColorDark : (tooltipOpen ? selectedNodeColorDark : unselectedNodeColorDark)) :\r\n                    (selected ? selectedNodeColorLight : (tooltipOpen ? selectedNodeColorLight : unselectedNodeColorLight))}\r\n                onClick={() => {\r\n                    onClick(node.data.index);\r\n                }}\r\n                cursor=\"pointer\"\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={hideTooltip}\r\n            />\r\n            <text\r\n                y=\"-4px\"\r\n                dy=\".2em\"\r\n                fontSize={fontSize}\r\n                fontFamily={fontFamily}\r\n                textAnchor=\"middle\"\r\n                style={{ pointerEvents: \"none\"}}\r\n                fill={darkTheme ? textColorDark : textColorLight}\r\n            >\r\n                {node.data.symbol === \"\" ?\r\n                    <tspan x=\"0\" dy=\".5em\">{node.data.title}</tspan> :\r\n                    (<>\r\n                        <tspan x=\"0\" dy=\"0\">{node.data.title}</tspan>\r\n                        <tspan x=\"0\" dy=\"1.2em\">{node.data.symbol}</tspan>\r\n                    </>)}\r\n            </text>\r\n        </Group>\r\n    );\r\n}\r\n\r\n/**\r\n * Internal component for displaying the evaluation tree. It uses visx Tree component.\r\n *\r\n * Props:\r\n * - tree: RATreeNode: root of the evaluation tree to be displayed\r\n * - selected: number: index of the current selected node (with respect to depth first search)\r\n * - width: number: width of the parent container\r\n * - onClick: (index: number) => void: handler of click on nodes, it receives the index of the clicked node (with\r\n * respect to depth first search)\r\n */\r\nfunction TreeComponent({raTree, selected, width, onClick, darkTheme}:\r\n                           {raTree: RATreeNode, selected: number, width: number, onClick: (index: number) => void, darkTheme: boolean}): JSX.Element | null {\r\n    const treeDepth: number = getTreeDepth(raTree);\r\n    // height = \"nodes height\" + \"gaps between nodes\" + \"margin up and under\"\r\n    const height = (treeDepth + 1) * nodeHeight + treeDepth * nodeHeight / 2 + nodeHeight;\r\n    const margin = { top: nodeHeight, left: 0 / 2, right: 0 / 2, bottom: nodeHeight };\r\n    const yMax = height - margin.top - margin.bottom;\r\n    const xMax = width - margin.left - margin.right;\r\n\r\n    const tree: DisplayTreeNode = parseTreeForDisplay(raTree);\r\n    const data = hierarchy<DisplayTreeNode>(tree);\r\n\r\n    return width < 10 ? null : (\r\n        <svg id=\"eval-tree-svg\" width={width} height={height}>\r\n            <rect width={width} height={height} rx={14} fill={darkTheme ? backgroundColorDark : backgroundColorLight} />\r\n            <Tree<DisplayTreeNode> root={data} size={[xMax, yMax]}>\r\n                {tree => (\r\n                    <Group top={margin.top} left={margin.left}>\r\n                        {tree.links().map((link, i) => (\r\n                            <LinkVertical<HierarchyPointLink<DisplayTreeNode>, HierarchyPointNode<DisplayTreeNode>>\r\n                                key={`cluster-link-${i}`}\r\n                                data={link}\r\n                                stroke={darkTheme ? textColorDark : textColorLight}\r\n                                strokeWidth=\"1\"\r\n                                strokeOpacity={1}\r\n                                fill=\"none\"\r\n                            />\r\n                        ))}\r\n                        {tree.descendants().map((node) => (\r\n                            <TreeNodeComponent\r\n                                key={`node-${node.data.index}`}\r\n                                node={node}\r\n                                selected={node.data.index === selected}\r\n                                onClick={onClick}\r\n                                darkTheme={darkTheme}\r\n                            />\r\n                        ))}\r\n                    </Group>\r\n                )}\r\n            </Tree>\r\n        </svg>\r\n    );\r\n}","export interface File {\r\n    name: string,\r\n    text: string | null\r\n}\r\n\r\n/**\r\n * FileDialog for loading files to the application.\r\n */\r\nexport class FileDialog {\r\n\r\n    /**\r\n     * Loads asynchronously a textual content from one file selected by the user in the file browser.\r\n     *\r\n     * @param accept comma-separated list of extensions for filter (default are all extensions)\r\n     */\r\n    public static openFile(accept: string = \"*\"): Promise<File> {\r\n        return new Promise<File>(resolve => {\r\n            let element = document.createElement('div');\r\n            element.innerHTML = `<input type=\"file\" accept=${accept}>`;\r\n            let fileInput = element.firstChild;\r\n            // @ts-ignore\r\n            fileInput.addEventListener('change', function() {\r\n                // @ts-ignore\r\n                let file = fileInput.files[0];\r\n                let reader = new FileReader();\r\n                reader.onload = function() {\r\n                    // @ts-ignore\r\n                    resolve({name: file.name, text: reader.result});\r\n                };\r\n                reader.readAsText(file);\r\n            });\r\n            // @ts-ignore\r\n            fileInput.click();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously loads textual content from multiple files selected by the user in the file browser.\r\n     *\r\n     * @param accept comma-separated list of extensions for filter (default are all extensions)\r\n     */\r\n    public static openFiles(accept: string = \"*\"): Promise<File[]> {\r\n        return new Promise<File[]>(resolve => {\r\n            FileDialog.openFilesHelper(resolve, accept);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads textual content from multiple files selected by the user in the file browser.\r\n     * Multiple file input handling inspired by xaedes on https://stackoverflow.com/a/13975217.\r\n     *\r\n     * @param resolve - function called when the loading is done, it should accept an array of file information\r\n     * {name: string, text: string | null}[] where name contains the filename and text contains the content of the file.\r\n     * @param accept comma-separated list of extensions for filter\r\n     */\r\n    private static openFilesHelper(resolve: (files: File[]) => void, accept: string): void {\r\n        let element = document.createElement('div');\r\n        element.innerHTML = `<input type=\"file\" accept=${accept} multiple>`;\r\n        // @ts-ignore\r\n        let fileInput: HTMLInputElement = element.firstChild;\r\n        const fileInfo: {name: string, text: string | null}[] = [];\r\n        fileInput.addEventListener('change', function() {\r\n            // @ts-ignore\r\n            const files: FileList = fileInput.files;\r\n            function readFile(index: number) {\r\n                if (index === files.length) {\r\n                    return resolve(fileInfo);\r\n                }\r\n                const file = files[index];\r\n                const reader = new FileReader();\r\n                reader.onload = function(e) {\r\n                    // @ts-ignore\r\n                    fileInfo.push({name: file.name, text: e.target.result});\r\n                    readFile(index+1);\r\n                    console.log('File ' + (index+1) + '/' + files.length + ' loaded');\r\n                }\r\n                reader.readAsText(file);\r\n            }\r\n            readFile(0);\r\n        });\r\n        fileInput.click();\r\n    }\r\n}\r\n","/**\r\n * Wrapper of JavaScript Map object to provide usage of object {row: number | \"name\", column: number} as a key for\r\n * string values.\r\n */\r\nexport class NNToSMap {\r\n    private map: Map<string, string> = new Map<string, string>();\r\n\r\n    public get(row: number | \"name\", column: number): string | undefined {\r\n        return this.map.get(row + \":\" + column);\r\n    }\r\n\r\n    public set(row: number | \"name\", column: number, value: string): void {\r\n        this.map.set(row + \":\" + column, value);\r\n    }\r\n\r\n    public delete(row: number | \"name\", column: number): boolean {\r\n        return this.map.delete(row + \":\" + column);\r\n    }\r\n\r\n    public clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    public size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    public forEach(f: (value: string, row: number | \"name\", column: number, index?: number) => void): void {\r\n        [...this.map.entries()]\r\n            .map((entry) => {return {value: entry[1], key: NNToSMap.parseKey(entry[0])}})\r\n            .forEach((entry, index) => f(entry.value, entry.key.row, entry.key.column, index));\r\n    }\r\n\r\n    private static parseKey(key: string): {row: number | \"name\", column: number} {\r\n        const split = key.split(':');\r\n        return {row: Number(split[0]), column: Number(split[1])};\r\n    }\r\n}","import {isSupportedColumnType, SupportedColumnType} from \"./columnType\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\nimport {NNToSMap} from \"../types/nnToSMap\";\r\nimport Relation from \"./relation\";\r\nimport Row from \"./row\";\r\nimport {isForbiddenColumnName} from \"../utils/keywords\";\r\nimport {language} from \"../language/language\";\r\n\r\n/**\r\n * Plain object representation of the stored relation.\r\n */\r\nexport interface StoredRelationData {\r\n    name: string;\r\n    columnNames: string[];\r\n    columnTypes: SupportedColumnType[];\r\n    rows: string[][];\r\n    columnCount: number;\r\n    rowCount: number;\r\n}\r\n\r\n/**\r\n * Creates a copy of the given stored relation data.\r\n */\r\nexport function copyStoredRelationData(data: StoredRelationData): StoredRelationData {\r\n    return {\r\n        name: data.name,\r\n        columnNames: [...data.columnNames],\r\n        columnTypes: [...data.columnTypes],\r\n        rows: data.rows.map(row => [...row]),\r\n        columnCount: data.columnCount,\r\n        rowCount: data.rowCount\r\n    }\r\n}\r\n\r\n/**\r\n * String representation of the relation for its storing. The relation may happen to be in inconsistent state.\r\n */\r\nexport class StoredRelation {\r\n\r\n    /**\r\n     * Creates a new stored relation with given name, one column and no rows.\r\n     */\r\n    static new(name: string, nullValuesSupport: boolean): StoredRelation {\r\n        return new StoredRelation(name, [\"Column1\"], [\"number\"], [], nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Creates a new stored relation from given plain relation object. If the object is not a valid StoredRelationData,\r\n     * throws error.\r\n     */\r\n    static fromData(data: any, nullValuesSupport: boolean): StoredRelation {\r\n        if (isStoredRelationData(data)) {\r\n            const d: StoredRelationData = data as StoredRelationData;\r\n            return new StoredRelation(d.name, d.columnNames, d.columnTypes, d.rows, nullValuesSupport);\r\n        }\r\n        throw new Error(\"Given object is not a valid relation.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new stored relation from given full relation representation.\r\n     */\r\n    static fromRelation(name: string, relation: Relation, nullValuesSupport: boolean): StoredRelation {\r\n        const columnNames: string[] = [];\r\n        const columnTypes: SupportedColumnType[] = [];\r\n        relation.getColumns().forEach((type, name) => {\r\n            columnNames.push(name);\r\n            columnTypes.push(type);\r\n        });\r\n        const rows: string[][] = relation.getRows().map(row => {\r\n            return row.getOrderedPrintValues(columnNames);\r\n        });\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Creates a new relation with the same name, columns, rows a null values support.\r\n     */\r\n    static copy(relation: StoredRelation): StoredRelation {\r\n        const name = relation.name;\r\n        const columnNames = [...relation.columnNames];\r\n        const columnTypes = [...relation.columnTypes];\r\n        const rows = relation.rows.map(row => [...row]);\r\n        const nullValuesSupport = relation.nullValuesSupport;\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Returns formatted string representation of StoredRelation or StoredRelationData.\r\n     */\r\n    static format(rel: StoredRelation | StoredRelationData): string {\r\n        // finds longest inputs in each column\r\n        const longest = rel.columnNames.map(n => n.length);\r\n        rel.columnTypes.forEach((t, i) => {\r\n            if (longest[i] < t.length) {\r\n                longest[i] = t.length;\r\n            }\r\n        });\r\n        rel.rows.forEach(r => {\r\n            r.forEach((d, i) => {\r\n                if (longest[i] < d.length) {\r\n                    longest[i] = d.length;\r\n                }\r\n            });\r\n        });\r\n        // function for end-padding strings with spaces\r\n        const pad = (ss: string[]) => ss.map((s, i) => s.padEnd(longest[i], \" \")).join(' | ');\r\n        return pad(rel.columnNames) + '\\n' +\r\n            pad(rel.columnTypes) + '\\n' +\r\n            longest.map(n => \"-\".repeat(n)).join(\"-+-\") + '\\n' +\r\n            rel.rows.map(r => pad(r)).join('\\n') + '\\n\\n';\r\n    }\r\n\r\n    private name: string;\r\n    columnNames: string[];\r\n    columnTypes: SupportedColumnType[];\r\n    rows: string[][];\r\n    private columnCount: number;\r\n    private rowCount: number;\r\n    private readonly errors: NNToSMap;\r\n    private nullValuesSupport: boolean;\r\n    private actual: boolean;\r\n    private revertState: StoredRelationData;\r\n\r\n    /**\r\n     * Creates new relation with given name, one default column and no rows.\r\n     */\r\n    constructor(name: string, columnNames: string[], columnTypes: SupportedColumnType[],\r\n                        rows: string[][], nullValuesSupport: boolean) {\r\n        this.name = name;\r\n        this.columnNames = columnNames;\r\n        this.columnTypes = columnTypes;\r\n        this.rows = rows;\r\n        this.columnCount = columnNames.length;\r\n        this.rowCount = rows.length;\r\n        this.errors = new NNToSMap();\r\n        this.nullValuesSupport = nullValuesSupport;\r\n        this.actual = false;\r\n        this.revertState = this.toDataObject();\r\n        this.recomputeErrors();\r\n    }\r\n\r\n    /**\r\n     * Checks all possible errors in the relation.\r\n     */\r\n    public recomputeErrors(): void {\r\n        this.errors.clear();\r\n        this.checkColumnNames();\r\n        for (let c = 0; c < this.columnCount; ++c) {\r\n            [...new Array(this.rowCount).keys()].forEach(r => this.checkRowInput(c, r));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the column name on given index is valid and not duplicit and updates error map.\r\n     */\r\n    private checkColumnNames(): void {\r\n        const lang = language().relationErrors;\r\n        for (let columnIndex = 0; columnIndex < this.columnCount; ++columnIndex) {\r\n            const columnName: string = this.columnNames[columnIndex].trim();\r\n            if (columnName === \"\") {\r\n                this.errors.set(\"name\", columnIndex, lang.emptyColumn);\r\n                continue;\r\n            }\r\n            const nameCount: number = this.columnNames.reduce((agg, name) => {\r\n                return (name === columnName) ? (agg + 1) : agg;\r\n            }, 0);\r\n            if (nameCount > 1) {\r\n                this.errors.set(\"name\", columnIndex, lang.duplicitColumn);\r\n                continue;\r\n            }\r\n            if (isForbiddenColumnName(columnName)) {\r\n                this.errors.set(\"name\", columnIndex, lang.keywordColumn);\r\n                continue;\r\n            }\r\n            if (!StringUtils.isName(columnName)) {\r\n                this.errors.set(\"name\", columnIndex, lang.invalidColumn);\r\n                continue;\r\n            }\r\n            this.errors.delete(\"name\", columnIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the row input on given index is valid and updates error map.\r\n     */\r\n    private checkRowInput(columnIndex: number, rowIndex: number): void {\r\n        const lang = language().relationErrors;\r\n        this.errors.delete(rowIndex, columnIndex);\r\n        const input: string = this.rows[rowIndex][columnIndex].trim();\r\n        // empty input = null\r\n        if (input === \"\" || input === \"null\") {\r\n            if (!this.nullValuesSupport) {\r\n                this.errors.set(rowIndex, columnIndex, lang.unsupportedNull);\r\n            }\r\n        }\r\n        else if (this.columnTypes[columnIndex] === \"number\") {\r\n            if (!StringUtils.isNumber(input.replace(/\\s/g, \"\"))) {\r\n                this.errors.set(rowIndex, columnIndex, lang.invalidNumber);\r\n            }\r\n        }\r\n        else if (this.columnTypes[columnIndex] === \"boolean\") {\r\n            const lower = input.toLowerCase();\r\n            if (lower !== \"true\" && lower !== \"t\" && lower !== \"false\" && lower !== \"f\") {\r\n                this.errors.set(rowIndex, columnIndex, lang.invalidBoolean);\r\n            }\r\n        }\r\n        /* STRING COLUMNS CANNOT BE INVALID */\r\n    }\r\n\r\n    /**\r\n     * Checks whether all row inputs on given column index are valid and updates error map.\r\n     */\r\n    private checkColumnTypes(columnIndex: number): void {\r\n        this.rows.forEach((_, i) => this.checkRowInput(columnIndex, i));\r\n    }\r\n\r\n    /**\r\n     * Creates a relation with full schema.\r\n     * WARNING: It expects that there are no errors in the stored relation before call.\r\n     */\r\n    public createRelation(): Relation {\r\n        const relation: Relation = new Relation(this.name);\r\n        for (let c = 0; c < this.columnCount; ++c) {\r\n            relation.addColumn(this.columnNames[c], this.columnTypes[c]);\r\n        }\r\n        this.rows.forEach(rowInput => {\r\n            const row: Row = new Row(relation.getColumns());\r\n            rowInput.forEach((input, c) => {\r\n                input = input.trim();\r\n                if (input === \"\" || input === \"null\") {\r\n                    row.addValue(this.columnNames[c], null);\r\n                }\r\n                else if (this.columnTypes[c] === \"string\") {\r\n                    // changes input representation to expected in inner relations\r\n                    // replaces all used '\\' by two '\\\\' and all used '\"' by '\\\"'\r\n                    input = input.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\r\n                    row.addValue(this.columnNames[c], input);\r\n                }\r\n                else if (this.columnTypes[c] === \"number\") {\r\n                    row.addValue(this.columnNames[c], Number(input.replace(/\\s/g, \"\")));\r\n                }\r\n                else /* this.columnTypes[c] === \"boolean\" */ {\r\n                    const lower = input.toLowerCase();\r\n                    row.addValue(this.columnNames[c], lower === \"t\" || lower === \"true\");\r\n                }\r\n            });\r\n            relation.addRow(row);\r\n        });\r\n        relation.finishSchema();\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Creates plain object representation of the stored relation.\r\n     */\r\n    public toDataObject(): StoredRelationData {\r\n        return {\r\n            name: this.name,\r\n            columnNames: [...this.columnNames],\r\n            columnTypes: [...this.columnTypes],\r\n            rows: this.rows.map(row => [...row]),\r\n            columnCount: this.columnCount,\r\n            rowCount: this.rowCount\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns map \"row/column => error\". Numeric row keys are for relation rows, row key \"name\" is for column name row.\r\n     */\r\n    public getErrors(): NNToSMap {\r\n        return this.errors;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there are no errors in the relation.\r\n     */\r\n    public isValid(): boolean {\r\n        return this.errors.size() === 0;\r\n    }\r\n\r\n    /**\r\n     * Sets null values support to check null errors in the relation.\r\n     */\r\n    public setNullValuesSupport(nullValuesSupport: boolean): void {\r\n        if (nullValuesSupport !== this.nullValuesSupport) {\r\n            this.nullValuesSupport = nullValuesSupport;\r\n            this.recomputeErrors();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new column with default name \"Column n\", default type \"number\", and empty inputs \"\" in all rows.\r\n     */\r\n    public addNewColumn(): void {\r\n        let i = (this.columnNames.length + 1);\r\n        let name = \"Column\" + i;\r\n        while (this.columnNames.indexOf(name) > -1) {\r\n            name = \"Column\" + ++i;\r\n        }\r\n        this.columnNames.push(name);\r\n        this.columnTypes.push(\"number\");\r\n        if (this.nullValuesSupport) {\r\n            this.rows.forEach(r => r.push(\"\"));\r\n        }\r\n        else {\r\n            this.rows.forEach(r => r.push(\"0\"));\r\n        }\r\n        ++this.columnCount;\r\n        this.checkColumnNames();\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row with empty inputs \"\" in all columns.\r\n     */\r\n    public addNewRow(): void {\r\n        if (this.nullValuesSupport) {\r\n            this.rows.push([...new Array(this.columnCount).keys()].map(_ => \"\"));\r\n        }\r\n        else {\r\n            this.rows.push([...new Array(this.columnCount).keys()].map(i => {\r\n                if (this.columnTypes[i] === \"number\") {\r\n                    return \"0\";\r\n                }\r\n                else if (this.columnTypes[i] === \"boolean\") {\r\n                    return \"false\";\r\n                }\r\n                return '\"\"';\r\n            }));\r\n        }\r\n        ++this.rowCount;\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Deletes a column with the given index. If the last column was deleted, removes all rows and creates\r\n     * new default column.\r\n     *\r\n     * @param columnIndex\r\n     */\r\n    public deleteColumn(columnIndex: number): void {\r\n        this.columnNames.splice(columnIndex, 1);\r\n        this.columnTypes.splice(columnIndex, 1);\r\n        this.rows.forEach(row => row.splice(columnIndex, 1));\r\n        --this.columnCount;\r\n        // if last column was deleted, removes all rows and creates new default column\r\n        if (this.columnCount === 0) {\r\n            this.rows = [];\r\n            this.addNewColumn();\r\n        }\r\n        this.errors.forEach((value, row, column) => {\r\n            // removes errors for given row\r\n            if (column === columnIndex) {\r\n                this.errors.delete(row, column);\r\n            }\r\n            // updates row index for errors in rows under deleted one\r\n            else if (column > columnIndex) {\r\n                this.errors.delete(row, column);\r\n                this.errors.set(row, column, value);\r\n            }\r\n        });\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Deletes a row with given index.\r\n     *\r\n     * @param rowIndex\r\n     */\r\n    public deleteRow(rowIndex: number): void {\r\n        this.rows.splice(rowIndex, 1);\r\n        --this.rowCount;\r\n        this.errors.forEach((value, row, column) => {\r\n            // removes errors for given row\r\n            if (row === rowIndex) {\r\n                this.errors.delete(row, column);\r\n            }\r\n            // updates row index for errors in rows under deleted one\r\n            else if (typeof row === \"number\" && row > rowIndex) {\r\n                this.errors.delete(row, column);\r\n                this.errors.set(row - 1, column, value);\r\n            }\r\n        });\r\n        this.actual = false;\r\n    }\r\n\r\n    public getRowCount(): number {\r\n        return this.rowCount;\r\n    }\r\n\r\n    public getColumnCount(): number {\r\n        return this.columnCount;\r\n    }\r\n\r\n    public setName(name: string): void {\r\n        this.name = name;\r\n        this.actual = false;\r\n    }\r\n\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public getColumnNames(): string[] {\r\n        return this.columnNames;\r\n    }\r\n\r\n    public setColumnName(columnName: string, columnIndex: number): void {\r\n        this.columnNames[columnIndex] = columnName;\r\n        this.checkColumnNames();\r\n        this.actual = false;\r\n    }\r\n\r\n    public getColumnTypes(): SupportedColumnType[] {\r\n        return this.columnTypes;\r\n    }\r\n\r\n    public setColumnType(columnType: SupportedColumnType, columnIndex: number): void {\r\n        this.columnTypes[columnIndex] = columnType;\r\n        this.checkColumnTypes(columnIndex);\r\n        this.actual = false;\r\n    }\r\n\r\n    public getRows(): string[][] {\r\n        return this.rows;\r\n    }\r\n\r\n    public setRowInput(input: string, rowIndex: number, columnIndex: number): void {\r\n        this.rows[rowIndex][columnIndex] = input;\r\n        this.checkRowInput(columnIndex, rowIndex);\r\n        this.actual = false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if no changes were made after last setActual(true) call.\r\n     * The StoredRelation is created with isActual() = false.\r\n     */\r\n    public isActual(): boolean {\r\n        return this.actual;\r\n    }\r\n\r\n    /**\r\n     * Sets current StoredRelation state as actual. Any change sets the state as not actual automatically.\r\n     * If it is set to actual, the current state is saved as the revert state.\r\n     */\r\n    public setActual(actual: boolean): void {\r\n        this.actual = actual;\r\n        if (actual) {\r\n            this.revertState = this.toDataObject();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns name of the saved relation state to revert or empty string.\r\n     */\r\n    public getRevertName(): string {\r\n        if (this.revertState !== undefined) {\r\n            return this.revertState.name;\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reverts the current relation to its last loaded state (if any exists, call canRevert() to check).\r\n     * The relation is set as not actual, null values support and saved revert state is not reverted.\r\n     */\r\n    public revert(): void {\r\n        if (this.revertState !== undefined) {\r\n            this.name = this.revertState.name;\r\n            this.columnNames = [...this.revertState.columnNames];\r\n            this.columnTypes = [...this.revertState.columnTypes];\r\n            this.rows = this.revertState.rows.map(row => [...row]);\r\n            this.columnCount = this.revertState.columnCount;\r\n            this.rowCount = this.revertState.rowCount;\r\n            this.actual = false;\r\n            this.recomputeErrors();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Returns true if the relation relation object has at least one column, and all rows has the same length.\r\n */\r\nexport function isStoredRelationData(obj: any): boolean {\r\n    if (typeof obj !== \"object\") {\r\n        return false;\r\n    }\r\n    if (!(\"name\" in obj) || typeof obj.name !== \"string\") {\r\n        return false;\r\n    }\r\n    if (!(\"columnCount\" in obj) || typeof obj.columnCount !== \"number\" || obj.columnCount < 1) {\r\n        return false;\r\n    }\r\n    if (!(\"rowCount\" in obj) || typeof obj.rowCount !== \"number\") {\r\n        return false;\r\n    }\r\n    if (!(\"columnNames\" in obj) || !Array.isArray(obj.columnNames) || obj.columnNames.length !== obj.columnCount ||\r\n        obj.columnNames.some((o: any) => typeof o !== \"string\")) {\r\n        return false;\r\n    }\r\n    if (!(\"columnTypes\" in obj) || !Array.isArray(obj.columnTypes) || obj.columnTypes.length !== obj.columnCount ||\r\n        obj.columnTypes.some((o: any) => !isSupportedColumnType(o))) {\r\n        return false;\r\n    }\r\n    return (\"rows\" in obj && Array.isArray(obj.rows) && obj.rows.every((o: any) => {\r\n        return Array.isArray(o) && o.length === obj.columnCount && o.every((d: any) => typeof d === \"string\");\r\n    }));\r\n}","/**\r\n * Specifies supported column types in the application. When changed, update the keywords.ts file.\r\n */\r\n\r\n/**\r\n * Supported string names of types of columns for a relational schema.\r\n */\r\nexport type SupportedColumnType = \"string\" | \"number\" | \"boolean\";\r\n\r\n/**\r\n * Possible types of the content of columns (null values included).\r\n */\r\nexport type ColumnContent = string | number | boolean | null;\r\n\r\n/**\r\n * Returns true if the given obj is string with value SupportedColumnType value.\r\n */\r\nexport function isSupportedColumnType(obj: any): boolean {\r\n    if (typeof obj !== \"string\") {\r\n        return false;\r\n    }\r\n    return obj === \"string\" || obj === \"number\" || obj === \"boolean\";\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport {\r\n    CsvValueSeparator,\r\n    findValueSeparator\r\n} from \"../types/csvSupport\";\r\nimport {StoredRelation} from \"./storedRelation\";\r\nimport {SupportedColumnType} from \"./columnType\";\r\nimport {saveAs} from \"file-saver\";\r\nimport JSZip from \"jszip\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\n\r\n/**\r\n * Class for loading and saving relation definitions.\r\n */\r\nexport class RelationStoreManager {\r\n\r\n    /**\r\n     * Loads textual relation representations from multiple csv files selected by the user. If the csv does not have\r\n     * valid stricture, it is skipped. Loaded csv are parsed to StoredRelations and returned in a promise.\r\n     *\r\n     * @param nullValuesSupport null values support to set in created StoredRelations\r\n     */\r\n    public static load(nullValuesSupport: boolean): Promise<{relations: StoredRelation[], skipped: number}> {\r\n        return new Promise<{relations: StoredRelation[], skipped: number}>(resolve => {\r\n            FileDialog.openFiles(\".csv\").then(files => {\r\n                let relations: StoredRelation[] = [];\r\n                let skipped: number = 0;\r\n                files.forEach(file => {\r\n                    if (file.name.match(/\\.csv$/)) {\r\n                        try {\r\n                            relations.push(this.csvToRelation(RelationStoreManager.createValidName(file.name.slice(0, -4)),\r\n                                file.text, nullValuesSupport));\r\n                        }\r\n                        catch (err) {\r\n                            console.log('File ' + file.name + ' skipped for bad format of csv');\r\n                            skipped += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log('Unsupported filetype: ' + file.name);\r\n                        skipped += 1;\r\n                    }\r\n                });\r\n                resolve({relations: relations, skipped: skipped});\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves given relations into csv files (in one csv file each relation). Uses given value separator.\r\n     *\r\n     * @param relations map of the relations to be saved\r\n     * @param filename name of the downloaded file (without .zip/.csv extension)\r\n     * @param valueSeparator the separator of values\r\n     */\r\n    public static save(relations: StoredRelation[], filename: string, valueSeparator: CsvValueSeparator): void {\r\n        if (relations.length === 0) {\r\n            return;\r\n        }\r\n        if (relations.length === 1) {\r\n            const blob = new Blob([this.relationToCsv(relations[0], valueSeparator)], {type: \"text/plain;charset=utf-8\"});\r\n            saveAs(blob, relations[0].getName() + '.csv');\r\n            return;\r\n        }\r\n        const zip: JSZip = JSZip();\r\n        relations.forEach(relation => {\r\n            zip.file(relation.getName() + '.csv', this.relationToCsv(relation, valueSeparator));\r\n        });\r\n        zip.generateAsync({type: \"blob\"}).then(content => {\r\n            saveAs(content, filename + \".zip\");\r\n        }).catch(err => {\r\n            throw err;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses a StoredRelation from given csv text. If the text is invalid, throws error.\r\n     *\r\n     * @param name name of the relation\r\n     * @param text csv content to parse a relation from\r\n     * @param nullValuesSupport null values support to set in created StoredRelation\r\n     */\r\n    private static csvToRelation(name: string, text: string | null, nullValuesSupport: boolean): StoredRelation {\r\n        if (text === null || text === \"\") {\r\n            console.log(\"null or empty string read from file \" + name);\r\n            throw Error();\r\n        }\r\n\r\n        text = text.trim().replace(/\\r\\n/g, '\\n')\r\n            .replace(/\\r/g, '\\n').replace(/\\t/g, \"    \");\r\n\r\n        const lines: string[] = text.split('\\n');\r\n\r\n        if (lines.length < 2) {\r\n            console.log(\"file \" + name + \" has only one line\");\r\n            throw Error();  // at least two lines are expected (names and types)\r\n        }\r\n\r\n        lines[0] = lines[0].replace(/\\s/g, '');\r\n        lines[1] = lines[1].replace(/\\s/g, '');\r\n\r\n        let separator = findValueSeparator(lines[1]);\r\n        // if no separator is found, only one column is expected - sets separator to not defined value to unify the\r\n        // following process\r\n        if (separator === undefined) {\r\n            separator = ';';\r\n        }\r\n\r\n        const columnNames: string[] = lines[0].split(separator);\r\n        const columnTypes: SupportedColumnType[] = lines[1].split(separator).map(str => {\r\n            const lower = str.toLowerCase();\r\n            if (lower === \"string\" || lower === \"str\" || lower === \"s\") {\r\n                return \"string\";\r\n            }\r\n            else if (lower === \"number\" || lower === \"num\" || lower === \"n\") {\r\n                return \"number\";\r\n            }\r\n            return \"boolean\";\r\n        });\r\n        const rows: string[][] = lines.slice(2).map(line => {\r\n            const row: string[] = []\r\n            line = line.trim();\r\n            while (true) {\r\n                // @ts-ignore - separator cannot be undefined now\r\n                const split = RelationStoreManager.nextRowInput(line, separator);\r\n                row.push(split.input);\r\n                if (split.rest === undefined) {\r\n                    break;\r\n                }\r\n                line = split.rest;\r\n            }\r\n            return row;\r\n        });\r\n\r\n        // all rows must have equal column count\r\n        const columnCount = columnNames.length;\r\n        if (columnTypes.length !== columnCount || rows.some(row => row.length !== columnCount)) {\r\n            console.log(\"rows in file \" + name + \" do not have the same number of columns\");\r\n            throw new Error();\r\n        }\r\n\r\n        return new StoredRelation(name, columnNames, columnTypes, rows, nullValuesSupport);\r\n    }\r\n\r\n    /**\r\n     * Removes invalid characters for name. If the filtered name is empty, returns string \"relation\".\r\n     */\r\n    private static createValidName(name: string): string {\r\n        name = name.split('').filter(char => StringUtils.isNameChar(char)).join('');\r\n        if (name === \"\") {\r\n            return \"relation\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Returns next part of the line before separator. Separators in string literals are ignored.\r\n     */\r\n    private static nextRowInput(line: string, separator: string): {input: string, rest: string | undefined} {\r\n        let inString = false;\r\n        let backslashes = 0;\r\n        let i = 0;\r\n        while (i < line.length) {\r\n            const char = line.charAt(i);\r\n            // separator found not in the string literal\r\n            if (!inString && char === separator) {\r\n                return {input: line.slice(0, i), rest: line.slice(i + 1)};\r\n            }\r\n            // next backslash found in a row\r\n            if (char === '\\\\') {\r\n                ++backslashes;\r\n            }\r\n            // resets backslashes in a row\r\n            else {\r\n                backslashes = 0;\r\n            }\r\n            // not escaped quotes found\r\n            if (char === '\"' && (backslashes % 2) === 0) {\r\n                inString = !inString;\r\n            }\r\n            ++i;\r\n        }\r\n        return {input: line, rest: undefined}\r\n    }\r\n\r\n    /**\r\n     * Creates a csv representation for the given relation.\r\n     */\r\n    private static relationToCsv(relation: StoredRelation, valueSeparator: CsvValueSeparator): string {\r\n        const names: string = relation.getColumnNames().join(valueSeparator);\r\n        const types: string = relation.getColumnTypes().join(valueSeparator);\r\n        const rows: string[] = relation.getRows().map(row => row.join(valueSeparator));\r\n        return [names, types, ...rows].join('\\n');\r\n    }\r\n}","/**\r\n * Two possible CSV value separators: comma (,) and semicolon (;).\r\n */\r\nexport type CsvValueSeparator = \",\" | \";\";\r\n\r\nexport function findValueSeparator(str: string): string | undefined {\r\n    for (let i = 0; i < str.length; ++i) {\r\n        const char: string = str.charAt(i);\r\n        if (char === \",\") {\r\n            return \",\";\r\n        }\r\n        if (char === \";\") {\r\n            return \";\";\r\n        }\r\n    }\r\n    return undefined;\r\n}","import React from \"react\";\r\n// @ts-ignore - type declaration is not needed for its short usage\r\nimport downloadSVG from \"export-svg-with-styles\";\r\nimport Relation from \"../relation/relation\";\r\nimport {ResultRelationTable} from \"./resultRelationTable\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {evalTreeSVGId, EvaluationTree} from \"./evaluationTree\";\r\nimport {depthSearch} from \"../ratree/raTreeTools\";\r\nimport {ErrorFactory} from \"../error/errorFactory\";\r\nimport {RelationStoreManager} from \"../relation/relationStoreManager\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport \"./css/resultSection.css\"\r\nimport {language, LanguageDef} from \"../language/language\";\r\n\r\ninterface ResultSectionProps {\r\n    // the root of the current evaluation tree to display\r\n    evaluationTreeRoot: RATreeNode,\r\n    // name of the evaluated expression\r\n    expressionName: string,\r\n\r\n    // handler of adding the given relation to defined relations\r\n    onAddResult: (relation: Relation) => void,\r\n\r\n    // handler of unexpected errors\r\n    onUnexpectedError: (e: Error) => void,\r\n\r\n    // current selected value separator in csv files\r\n    csvValueSeparator: CsvValueSeparator\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean,\r\n    // current application language\r\n    language: LanguageDef\r\n}\r\n\r\ninterface ResultSectionState {\r\n    selectedIndex: number\r\n}\r\n\r\n/**\r\n * Section to show the evaluation result. It contains a table with a result and text input and buttons to save it.\r\n * The component is hidden if given resultRelation is null.\r\n */\r\nexport class ResultSection extends React.Component<ResultSectionProps, ResultSectionState> {\r\n\r\n    // reference to this section element\r\n    private readonly sectionRef: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: ResultSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedIndex: 0\r\n        }\r\n        this.sectionRef = React.createRef<HTMLDivElement>();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ResultSectionProps>) {\r\n        if (prevProps.evaluationTreeRoot !== this.props.evaluationTreeRoot) {\r\n            this.setState({selectedIndex: 0});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the result relation for the current selected node.\r\n     */\r\n    private getCurrentRelation = (): Relation | null => {\r\n        let currentNode: RATreeNode | null = depthSearch(this.props.evaluationTreeRoot, this.state.selectedIndex);\r\n        if (currentNode === null) {\r\n            currentNode = depthSearch(this.props.evaluationTreeRoot, 0);\r\n            if (currentNode === null) {\r\n                this.props.onUnexpectedError(ErrorFactory.codeError(language().codeErrors.resultSection_nodeIndexNotFound));\r\n                return null;\r\n            }\r\n        }\r\n        try {\r\n            return currentNode.getResult();\r\n        }\r\n        catch (err) {\r\n            // errors should be handled in expression section\r\n            this.props.onUnexpectedError(ErrorFactory.codeError(language().codeErrors.resultSection_evalError, err.message));\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private handleSelectedNodeChange = (index: number): void => {\r\n        this.setState({selectedIndex: index});\r\n    }\r\n\r\n    /**\r\n     * Saves the displayed evaluation tree as png picture.\r\n     */\r\n    private exportEvalTreeAsPng = (): void => {\r\n        const svg = document.getElementById(evalTreeSVGId);\r\n        if (svg !== null) {\r\n            const rect = svg.getBoundingClientRect();\r\n            const options = {\r\n                width: rect.width * 3,\r\n                height: rect.height * 3,\r\n                svg: svg,\r\n                filename: this.props.expressionName + \" - evaluation tree.png\"\r\n            }\r\n            downloadSVG(options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the current selected relation to a file.\r\n     */\r\n    private exportRelation = (): void => {\r\n        if (this.getCurrentRelation() === null) {\r\n            this.props.onUnexpectedError(ErrorFactory.codeError(language().codeErrors.resultSection_nullRelationToSave));\r\n            return;\r\n        }\r\n        try {\r\n            RelationStoreManager.save(\r\n                [StoredRelation.fromRelation(\"rachel_result\", this.getCurrentRelation() as Relation, true)],\r\n                \"rachel_result\", this.props.csvValueSeparator);\r\n        }\r\n        catch (err) {\r\n            console.warn(\"Saving error: \" + err, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the current selected relation with the given name to the parent.\r\n     */\r\n    private addRelation = (): void => {\r\n        if (this.getCurrentRelation() === null) {\r\n            this.props.onUnexpectedError(\r\n                ErrorFactory.codeError(language().codeErrors.resultSection_nullRelationToAdd)\r\n            );\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        this.props.onAddResult(this.getCurrentRelation());\r\n    }\r\n\r\n    render() {\r\n        const relation = this.getCurrentRelation();\r\n        // does not show null result\r\n        if (relation === null) {\r\n            return null;\r\n        }\r\n        const lang = this.props.language.resultSection;\r\n\r\n        const relationType: string = this.state.selectedIndex === 0 ? lang.resultRelationTitle : lang.intermediateRelationTitle;\r\n        const selectedNode: RATreeNode | null = depthSearch(this.props.evaluationTreeRoot, this.state.selectedIndex);\r\n        const tableTitle: string | null = selectedNode === null ? null : selectedNode.printInLine();\r\n\r\n        return (\r\n            <section\r\n                ref={this.sectionRef}\r\n                className=\"page-section result-section\">\r\n                <header>\r\n                    <h2>{lang.resultSectionHeader}</h2>\r\n                    <TooltipButton\r\n                        text={lang.exportEvalTreeButton}\r\n                        onClick={this.exportEvalTreeAsPng}\r\n                        className={\"\"}\r\n                        tooltip={lang.exportEvalTreeButtonTooltip}\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                </header>\r\n\r\n                <p className=\"upper-p\">\r\n                    <strong>{lang.evalTreeTitle + ' ' + this.props.evaluationTreeRoot.printInLine() + ':'}</strong>\r\n                </p>\r\n\r\n                <EvaluationTree\r\n                    tree={this.props.evaluationTreeRoot}\r\n                    selected={this.state.selectedIndex}\r\n                    onClick={this.handleSelectedNodeChange}\r\n                    darkTheme={this.props.darkTheme}\r\n                />\r\n\r\n                <p className=\"lower-p\"><strong>{relationType} {tableTitle}:</strong></p>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    <TooltipButton\r\n                        text={lang.addButton}\r\n                        onClick={this.addRelation}\r\n                        className={\"\"}\r\n                        tooltip={lang.addButtonTooltip}\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                    <TooltipButton\r\n                        text={lang.exportRelationButton}\r\n                        onClick={this.exportRelation}\r\n                        className={\"\"}\r\n                        tooltip={lang.exportRelationButtonTooltip}\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                </menu>\r\n\r\n                <ResultRelationTable relation={relation} />\r\n            </section>\r\n        );\r\n    }\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport {saveAs} from \"file-saver\";\r\nimport {Expression} from \"./expression\";\r\n\r\n/**\r\n * Promised relation in ExpressionStoreManager.load() function. Contains:\r\n * - expressions: Expression[] - successfully parsed expressions\r\n * - skippedExpressions: number - number of skipped expressions (from successfully loaded files)\r\n * - loadedFiles: number - number of successfully loaded files\r\n * - skippedFiles: number - number of skipped files (not .txt, null loaded...)\r\n */\r\nexport interface ExpressionLoadData {\r\n    expressions: Expression[],\r\n    skippedExpressions: number,\r\n    loadedFiles: number,\r\n    skippedFiles: number\r\n}\r\n\r\n/**\r\n * Class for loading and saving expressions.\r\n */\r\nexport class ExpressionStoreManager {\r\n\r\n    /**\r\n     * Loads expressions from multiple textual files selected by the user. Each file can contain multiple expressions,\r\n     * split by '\\n###\\n'. When different line separator is used (\\r, \\r\\n), it is replaced by \\n before return.\r\n     * All tabulators are replaces by 4 spaces.\r\n     */\r\n    public static load(): Promise<ExpressionLoadData> {\r\n        return new Promise<ExpressionLoadData>(resolve => {\r\n            FileDialog.openFiles(\".txt\").then(files =>{\r\n                let expressions: Expression[] = [];\r\n                let skippedExpressions: number = 0;\r\n                let loadedFiles: number = 0;\r\n                let skippedFiles: number = 0;\r\n                files.forEach(file => {\r\n                    if (file.text === null) {\r\n                        console.log('Null read from file ' + file.name);\r\n                        skippedFiles += 1;\r\n                    }\r\n                    else if (file.name.match(/\\.txt$/)) {\r\n                        // replaces line separators to expected '\\n' and tabulators to four spaces\r\n                        file.text = file.text.replace(/\\r\\n/g, '\\n')\r\n                            .replace(/\\r/g, '\\n').replace(/\\t/g, \"    \");\r\n                        // prepends newline for first expected splitting of the first expression\r\n                        ('\\n'.concat(file.text)).split('\\n### ').forEach(part => {\r\n                            try {\r\n                                if (part.trim().length !== 0) {\r\n                                    expressions.push(this.splitExpressionNameAndText(part));\r\n                                }\r\n                            }\r\n                            catch (err) {\r\n                                skippedExpressions += 1;\r\n                            }\r\n                        });\r\n                        loadedFiles += 1;\r\n                    }\r\n                    else {\r\n                        console.log('Unsupported filetype: ' + file.name);\r\n                        skippedFiles += 1;\r\n                    }\r\n                });\r\n                resolve({expressions, skippedExpressions, loadedFiles, skippedFiles});\r\n            });\r\n        });\r\n    }\r\n\r\n    private static splitExpressionNameAndText(expr: string): Expression {\r\n        const firstNewLineIndex: number = expr.indexOf('\\n');\r\n        if (firstNewLineIndex === -1) {\r\n            console.log(\"Expression does not contain first name line.\");\r\n            throw Error();\r\n        }\r\n        const firstRow: string = expr.slice(0, firstNewLineIndex).trim();\r\n        if (!firstRow.endsWith(' ###')) {\r\n            console.log(\"Expression does not contain name between hashes.\");\r\n            throw Error();\r\n        }\r\n        const name: string = firstRow.slice(0, -4);\r\n        const text: string = expr.slice(firstNewLineIndex).trim();\r\n        return {name: name, text: text};\r\n    }\r\n\r\n    /**\r\n     * Saves given expressions to a textual file. Each expression starts with \"### Expression name ###\\n\" line.\r\n     *\r\n     * @param expressions array of expressions to be saved\r\n     * @param filename name of the downloaded file (without extension)\r\n     */\r\n    public static save(expressions: Expression[], filename: string): void {\r\n        const textContent: string = expressions.map(e => {\r\n            return \"### \" + e.name + \" ###\\n\\n\" + e.text;\r\n        }).join('\\n\\n');\r\n        const blob = new Blob([textContent], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, filename + '.txt');\r\n    }\r\n}","import {Project} from \"./project\";\r\n\r\nexport interface ProjectSample {\r\n    name: string,\r\n    project: Project\r\n}\r\n\r\nconst samples: ProjectSample[] = [\r\n    // english sample\r\n    {\r\n        name: \"Cars and Owners (EN)\",\r\n        project: {\r\n            relations: [\r\n                {\r\n                    name: \"Car\",\r\n                    columnNames: [\"Id\", \"Owner\", \"Color\", \"Electric\", \"Weight\"],\r\n                    columnTypes: [\"number\", \"number\", \"string\", \"boolean\", \"number\"],\r\n                    rows: [\r\n                        ['1', '1', 'Blue', 'True', '1000'],\r\n                        ['2', '1', 'Green', 'false', '1 200'],\r\n                        ['3', '2', 'Blue', 'F', '850.42'],\r\n                        ['4', '3', 'Black', 't', '1 111.111 111']\r\n                    ],\r\n                    columnCount: 5,\r\n                    rowCount: 4\r\n                },\r\n                {\r\n                    name: \"Owner\",\r\n                    columnNames: [\"Id\", \"Name\"],\r\n                    columnTypes: [\"number\", \"string\"],\r\n                    rows: [\r\n                        ['1', 'George Smith'],\r\n                        ['2', 'Adam \"Driver /\\\\\" Jackson'],\r\n                        ['3', 'Michael Trueman'],\r\n                        ['Fix errors', 'before loading'],\r\n                        ['Or delete', 'invalid rows']\r\n                    ],\r\n                    columnCount: 2,\r\n                    rowCount: 3\r\n                }\r\n            ],\r\n            expressions: [\r\n                {\r\n                    name: \"Relation only\",\r\n                    text:\r\n                        \"// You can use comments until the line end after '//'\\n\" +\r\n                        \"// You must load relations before using them in expressions\\n\" +\r\n                        \"\\n\" +\r\n                        \"Car\\n\" +\r\n                        \"\\n\" +\r\n                        \"// After evaluation, you will see the evaluation tree\\n\" +\r\n                        \"// and the result relation at the bottom of the page\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Unary operator\",\r\n                    text:\r\n                        \"// Unary operator comes after the source relation\\n\" +\r\n                        \"// If the relation is still not defined, go check its definition\\n\" +\r\n                        \"// This expression returns all owners with id 1\\n\" +\r\n                        \"\\n\" +\r\n                        \"Owner(Id = 1)\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Binary operator\",\r\n                    text:\r\n                        \"// Binary operator comes between source relations\\n\" +\r\n                        \"// This expression returns natural join of cars and owners\\n\" +\r\n                        \"\\n\" +\r\n                        \"Car*Owner\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Escapes\",\r\n                    text:\r\n                        \"// Strings in expressions are enclosed in quotes\\n\" +\r\n                        \"// To use quotes inside a string, you must escape them by a backslash '\\\\\\\"'\\n\" +\r\n                        \"// To use backslash inside a string, you must escape it with second one '\\\\\\\\'\\n\" +\r\n                        \"\\n\" +\r\n                        'Owner(Name == \"Adam \\\\\"Driver /\\\\\\\\\\\\\" Jackson\")\\n' +\r\n                        '\\n' +\r\n                        '// This does not work: Owner(Name == \"Adam \"Driver /\\\\\" Jackson\")\\n' +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Example\",\r\n                    text:\r\n                        \"// Errors are highlighted by red underline - hover mouse over it to see details\\n\" +\r\n                        \"// While typing, Rachel shows you available relations or columns\\n\" +\r\n                        \"// (if relations are loaded in the application)\\n\" +\r\n                        \"// Try to write a query for: all cars' ids and their owners' names\\n\" +\r\n                        \"\\n\" +\r\n                        \"TODO...\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Example result\",\r\n                    text:\r\n                        \"// One possible expression is like this...\\n\" +\r\n                        \"\\n\" +\r\n                        \"(\\n\" +\r\n                        \"  Car\\n\" +\r\n                        \"  *\\n\" +\r\n                        \"  Owner< Id -> Owner >\\n\" +\r\n                        \")[Id, Name]\\n\" +\r\n                        \"\\n\" +\r\n                        \"// For more detailed manual click 'About' button in the page header\\n\" +\r\n                        \"\"\r\n                }\r\n            ],\r\n            nullValuesSupport: true\r\n        }\r\n    },\r\n    // czech sample\r\n    {\r\n        name: \"Auta a Majitelé (CS)\",\r\n        project: {\r\n            relations: [\r\n                {\r\n                    name: \"Auto\",\r\n                    columnNames: [\"Id\", \"Majitel\", \"Barva\", \"Elektro\", \"Váha\"],\r\n                    columnTypes: [\"number\", \"number\", \"string\", \"boolean\", \"number\"],\r\n                    rows: [\r\n                        ['1', '1', 'Modrá', 'True', '1000'],\r\n                        ['2', '1', 'Zelená', 'false', '1 200'],\r\n                        ['3', '2', 'Modrá', 'F', '850.42'],\r\n                        ['4', '3', 'Černá', 't', '1 111.111 111']\r\n                    ],\r\n                    columnCount: 5,\r\n                    rowCount: 4\r\n                },\r\n                {\r\n                    name: \"Majitel\",\r\n                    columnNames: [\"Id\", \"Jméno\"],\r\n                    columnTypes: [\"number\", \"string\"],\r\n                    rows: [\r\n                        ['1', 'Pepa Mrázek'],\r\n                        ['2', 'Adam \"Závodník /\\\\\" Horváth'],\r\n                        ['3', 'Michael Dvořák'],\r\n                        ['Před nahráním', 'oprav chyby'],\r\n                        ['Nebo odstraň', 'chybné řádky']\r\n                    ],\r\n                    columnCount: 2,\r\n                    rowCount: 3\r\n                }\r\n            ],\r\n            expressions: [\r\n                {\r\n                    name: \"Pouze relace\",\r\n                    text:\r\n                        \"// Můžeš používat komentáře po '//'\\n\" +\r\n                        \"// Před použitím relací ve výrazech je musíš nahrát\\n\" +\r\n                        \"\\n\" +\r\n                        \"Auto\\n\" +\r\n                        \"\\n\" +\r\n                        \"// Po vyhodnocení uvidíš evaluační strom\\n\" +\r\n                        \"// a výslednou relaci dole na stránce\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Unární operátor\",\r\n                    text:\r\n                        \"// Unární operátory se píší za vstupní relaci\\n\" +\r\n                        \"// Pokud je tato relace stále nedefinovaná, zkontroluj její definici\\n\" +\r\n                        \"// Tento dotaz vrátí všechny majitele s id = 1\\n\" +\r\n                        \"\\n\" +\r\n                        \"Majitel(Id = 1)\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Binární operátor\",\r\n                    text:\r\n                        \"// Binární operátory se píší mezi vstupní relace\\n\" +\r\n                        \"// Tento výraz vrátí přirozené spojení aut a majitelů\\n\" +\r\n                        \"\\n\" +\r\n                        \"Auto*Majitel\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Escapes\",\r\n                    text:\r\n                        \"// Textové řetězce ve výrazech musí být mezi uvozovkami\\n\" +\r\n                        \"// Pro použití uvozovek v řetězci před ně musíš napsat zpětné lomítko '\\\\\\\"'\\n\" +\r\n                        \"// Pro použití zpětného lomítka před něj musíš napsat druhé '\\\\\\\\'\\n\" +\r\n                        \"\\n\" +\r\n                        'Majitel(Jméno == \"Adam \\\\\"Závodník /\\\\\\\\\\\\\" Horváth\")\\n' +\r\n                        '\\n' +\r\n                        '// Toto by nefungovalo: Majitel(Jméno == \"Adam \"Závodník /\\\\\" Horváth\")\\n' +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Příklad\",\r\n                    text:\r\n                        \"// Chyby jsou zvýrazněni červeným podtržením - přejeď na ně myší pro detaily\\n\" +\r\n                        \"// Při psaní ti Rachel nabízí dostupné relace nebo sloupce\\n\" +\r\n                        \"// (pokud jsou relace nahrané v aplikace)\\n\" +\r\n                        \"// Zkus napsat dotaz pro: id všech aut a jména jejich majitelů\\n\" +\r\n                        \"\\n\" +\r\n                        \"TODO...\\n\" +\r\n                        \"\"\r\n                },\r\n                {\r\n                    name: \"Výsledek příkladu\",\r\n                    text:\r\n                        \"// Jedno možné řešení je toto...\\n\" +\r\n                        \"\\n\" +\r\n                        \"(\\n\" +\r\n                        \"  Auto\\n\" +\r\n                        \"  *\\n\" +\r\n                        \"  Majitel< Id -> Majitel >\\n\" +\r\n                        \")[Id, Jméno]\\n\" +\r\n                        \"\\n\" +\r\n                        \"// Pro více informací navštiv manuál přes odkaz 'O aplikaci' v horním menu\\n\" +\r\n                        \"\"\r\n                }\r\n            ],\r\n            nullValuesSupport: true\r\n        }\r\n    }\r\n];\r\n\r\n/**\r\n * Returns prepared project samples.\r\n */\r\nexport function getSamples(): ProjectSample[] {\r\n    return samples;\r\n}","import React from \"react\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {allSupportedLanguages, LanguageDef, SupportedLanguage} from \"../language/language\";\r\nimport \"./css/managementSection.css\"\r\nimport {getSamples} from \"../project/samples\";\r\nimport {Project} from \"../project/project\";\r\n\r\ninterface ManagementSectionProps {\r\n    // handler of batch processing\r\n    onBatch: () => void,\r\n\r\n    // handler of project loading\r\n    onLoadProject: () => void,\r\n    // handler of project saving\r\n    onSaveProject: () => void,\r\n\r\n    // handler of loading the selected sample project\r\n    onLoadSample: (sample: Project) => void,\r\n\r\n    // current selected value separator in csv files\r\n    csvValueSeparator: CsvValueSeparator,\r\n    // current selected language of the application\r\n    language: LanguageDef,\r\n    // current selected null values support\r\n    nullValuesSupport: boolean,\r\n    // true if dark theme should be applied\r\n    darkTheme: boolean,\r\n\r\n    // handler of change of the current selected value separator in csv files\r\n    onCsvValueSeparatorChange: (csvValueSeparator: CsvValueSeparator) => void,\r\n    // handler of change of the current selected language of the application\r\n    onLanguageChange: (language: SupportedLanguage) => void,\r\n    // handler of change of the current selected null values support\r\n    onNullValuesSupportChange: (nullValuesSupport: boolean) => void,\r\n    // handler of change of the current selected theme\r\n    onDarkModeChange: (darkTheme: boolean) => void\r\n}\r\n\r\ninterface ManagementSectionState {\r\n    sectionClicked: boolean\r\n}\r\n\r\n/**\r\n * Section to manage batch processing, importing/exporting the project, and settings.\r\n */\r\nexport class ManagementSection extends React.Component<ManagementSectionProps, ManagementSectionState> {\r\n\r\n    constructor(props: ManagementSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const lang = this.props.language.managementSection;\r\n\r\n        const createBatchButton = () => {\r\n            return (<button onClick={this.props.onBatch}>{lang.batchButton}</button>);\r\n        }\r\n        const createLoadProjectButton = () => {\r\n            return (<button onClick={this.props.onLoadProject} >{lang.loadButton}</button>);\r\n        }\r\n        const createSaveProjectButton = () => {\r\n            return (<button onClick={this.props.onSaveProject} >{lang.saveButton}</button>);\r\n        }\r\n        const createSettingsButton = () => {\r\n            const settingsMenu = (\r\n                <ul className=\"list-menu\">\r\n                    <li>\r\n                        <span>{lang.settingsNullValues}:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"null_values_support\"\r\n                            value=\"allowed\"\r\n                            id=\"null_values_support_allowed\"\r\n                            checked={this.props.nullValuesSupport}\r\n                            onChange={() => this.props.onNullValuesSupportChange(true)} />\r\n                        <label htmlFor=\"null_values_support_allowed\">{lang.settingsNullValuesAllowed}</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"null_values_support\"\r\n                            value=\"forbidden\"\r\n                            id=\"null_values_support_forbid\"\r\n                            checked={!this.props.nullValuesSupport}\r\n                            onChange={() => this.props.onNullValuesSupportChange(false)} />\r\n                        <label htmlFor=\"null_values_support_forbid\">{lang.settingsNullValuesForbidden}</label>\r\n                    </li>\r\n                    <li>\r\n                        <span>{lang.settingsCSVSeparator}:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"value_separator\"\r\n                            value=\"semicolon\"\r\n                            id=\"value_separator_semi\"\r\n                            checked={this.props.csvValueSeparator === \";\"}\r\n                            onChange={() => this.props.onCsvValueSeparatorChange(\";\")}/>\r\n                        <label htmlFor=\"value_separator_semi\">{lang.settingsCSVSeparatorSemicolon}</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"value_separator\"\r\n                            value=\"comma\"\r\n                            id=\"value_separator_comma\"\r\n                            checked={this.props.csvValueSeparator === \",\"}\r\n                            onChange={() => this.props.onCsvValueSeparatorChange(\",\")}/>\r\n                        <label htmlFor=\"value_separator_comma\">{lang.settingsCSVSeparatorComma}</label>\r\n                    </li>\r\n                    <li>\r\n                        <span>{lang.settingsTheme}:</span>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"dark_mode\"\r\n                            value=\"on\"\r\n                            id=\"dark_mode_on\"\r\n                            checked={!this.props.darkTheme}\r\n                            onChange={() => this.props.onDarkModeChange(false)} />\r\n                        <label htmlFor=\"dark_mode_on\">{lang.settingsThemeLight}</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"dark_mode\"\r\n                            value=\"off\"\r\n                            id=\"dark_mode_off\"\r\n                            checked={this.props.darkTheme}\r\n                            onChange={() => this.props.onDarkModeChange(true)} />\r\n                        <label htmlFor=\"dark_mode_off\">{lang.settingsThemeDark}</label>\r\n                    </li>\r\n                    <li>\r\n                        <span>{lang.settingsLanguage}:</span>\r\n                        {allSupportedLanguages.map(lang => {\r\n                            return (<>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name=\"language\"\r\n                                    value={lang}\r\n                                    id={\"language_\" + lang}\r\n                                    checked={this.props.language.abbr === lang}\r\n                                    onChange={() => this.props.onLanguageChange(lang)} />\r\n                                <label htmlFor={\"language_\" + lang}>{lang}</label>\r\n                            </>)\r\n                        })}\r\n                    </li>\r\n                </ul>\r\n            );\r\n            return (<div className={\"button-like\"}>{lang.settingsButton}{settingsMenu}</div>);\r\n        }\r\n        const createSamplesButton = () => {\r\n            const samplesMenu = (\r\n            <ul className=\"list-menu\">\r\n                {lang.samplesMenuTitle}\r\n                {getSamples().map((sample, i) => {\r\n                    return (\r\n                        <li key={i}>\r\n                            <button onClick={() => this.props.onLoadSample(sample.project)}>{sample.name}</button>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n            );\r\n            return (<div className={\"button-like\"} >{lang.samplesButton}{samplesMenu}</div>);\r\n        }\r\n        const createAboutButton = () => {\r\n            return (\r\n                <a  href=\"https://github.com/kotliluk/rachel\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                    className={\"button-like\"}\r\n                >{lang.aboutButton}</a>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <header className=\"management-section\">\r\n                <h1>RACHEL</h1>\r\n                {createBatchButton()}\r\n                {createLoadProjectButton()}\r\n                {createSaveProjectButton()}\r\n                {createSamplesButton()}\r\n                {createSettingsButton()}\r\n                {createAboutButton()}\r\n            </header>\r\n        );\r\n    }\r\n}","import {copyExpression, Expression, isExpression} from \"../expression/expression\";\r\nimport {copyStoredRelationData, isStoredRelationData, StoredRelationData} from \"../relation/storedRelation\";\r\n\r\n/**\r\n * Project interface to store information about project relations and expressions relation.\r\n * Does not store custom settings about saving file types etc.\r\n */\r\nexport interface Project {\r\n    relations: StoredRelationData[],\r\n    expressions: Expression[],\r\n    nullValuesSupport: boolean\r\n}\r\n\r\n/**\r\n * Checks whether the given value is Project (i.e., has all required fields of required types).\r\n *\r\n * @param obj value to be checked\r\n * @return \"OK\" string if the given obj is Project or string description of found error in the structure\r\n */\r\nexport function isProjectObject(obj: any): string {\r\n    if (typeof obj !== \"object\") {\r\n        return 'The file cannot be parsed to an object.';\r\n    }\r\n    if (!(\"relations\" in obj) || !Array.isArray(obj.relations) || obj.relations.length === 0 ||\r\n        obj.relations.some((o: any) => !isStoredRelationData(o))) {\r\n        return 'The file must contain the field \"relations: StoredRelationData[]\" of length at least one';\r\n    }\r\n    if (!(\"expressions\" in obj) || !Array.isArray(obj.expressions) || obj.expressions.length === 0 ||\r\n        obj.expressions.some((o: any) => !isExpression(o))) {\r\n        return 'The file must contain the field \"expressions: Expression[]\" of length at least one';\r\n    }\r\n    if (!(\"nullValuesSupport\" in obj) || typeof obj.nullValuesSupport !== \"boolean\") {\r\n        return 'The file must contain the field \"nullValuesSupport: boolean\"';\r\n    }\r\n    return 'OK';\r\n}\r\n\r\n/**\r\n * Creates a copy of the given project.\r\n */\r\nexport function copyProject(proj: Project): Project {\r\n    return {\r\n        relations: proj.relations.map(rel => copyStoredRelationData(rel)),\r\n        expressions: proj.expressions.map(expr => copyExpression(expr)),\r\n        nullValuesSupport: proj.nullValuesSupport\r\n    }\r\n}","/**\r\n * Representation of named RA expression.\r\n */\r\nexport interface Expression {\r\n    name: string,\r\n    text: string\r\n}\r\n\r\n/**\r\n * Checks whether the given obj is an Expression.\r\n *\r\n * @param obj\r\n */\r\nexport function isExpression(obj: any): boolean {\r\n    if (typeof obj !== \"object\") {\r\n        return false;\r\n    }\r\n    return (\"name\" in obj) && (typeof obj.name === \"string\") && (\"text\" in obj) && (typeof obj.text === \"string\");\r\n}\r\n\r\n/**\r\n * Creates a copy of the given expression.\r\n */\r\nexport function copyExpression(exp: Expression): Expression {\r\n    return {name: exp.name, text: exp.text};\r\n}","import {isProjectObject, Project} from \"./project\";\r\nimport {FileDialog} from \"../utils/fileDialog\";\r\nimport {saveAs} from \"file-saver\";\r\n\r\n/**\r\n * Class for loading and saving project relations and expressions relation.\r\n */\r\nexport class ProjectStoreManager {\r\n\r\n    /**\r\n     * Loads asynchronously the project from a .rachel (JSON) file selected by the user.\r\n     * The file must contain the representation of the project object: {\r\n     * relations: StoredRelationData[],\r\n     * expressionTexts: string[],\r\n     * nullValuesSupport: boolean\r\n     * }.\r\n     * Returned string values always use '\\n' as line separator.\r\n     */\r\n    public static load(): Promise<Project> {\r\n        return new Promise<Project>((resolve, reject) => {\r\n            FileDialog.openFile(\".rachel\").then(file => {\r\n                if (file.text === null) {\r\n                    reject(\"Reading of the content of the file \" + file.name + \" failed.\");\r\n                }\r\n                else if (file.name.match(/\\.rachel$/)) {\r\n                    // replaces line separators to expected '\\n'\r\n                    file.text = file.text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n')\r\n                        .replace(/\\t/g, \"    \");\r\n                    let obj = JSON.parse(file.text);\r\n                    const result: string = isProjectObject(obj);\r\n                    if (result === \"OK\") {\r\n                        const project: Project = obj;\r\n                        resolve(project);\r\n                    }\r\n                    else {\r\n                        reject(\"Invalid structure of the JSON file. \" + result)\r\n                    }\r\n                }\r\n                else {\r\n                    reject(\"Please select a JSON file to load a project relation from.\");\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Saves the given Project into the .rachel (JSON) file.\r\n     *\r\n     * @param project the Project object with all project relation\r\n     * @param filename name of the downloaded file (without extension)\r\n     */\r\n    public static save(project: Project, filename: string): void {\r\n        const blob = new Blob([JSON.stringify(project)], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, filename + '.rachel');\r\n    }\r\n}","import {FileDialog} from \"../utils/fileDialog\";\r\nimport JSZip from \"jszip\";\r\nimport {saveAs} from \"file-saver\";\r\nimport Relation from \"../relation/relation\";\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport UnaryNode from \"../ratree/unaryNode\";\r\nimport ProjectionNode from \"../ratree/projectionNode\";\r\nimport RenameNode from \"../ratree/renameNode\";\r\nimport SelectionNode from \"../ratree/selectionNode\";\r\nimport BinaryNode from \"../ratree/binaryNode\";\r\nimport AntijoinNode from \"../ratree/antijoinNode\";\r\nimport CartesianProductNode from \"../ratree/cartesianProductNode\";\r\nimport DivisionNode from \"../ratree/divisionNode\";\r\nimport OuterJoinNode from \"../ratree/outerJoinNode\";\r\nimport NaturalJoinNode, {NaturalJoinType} from \"../ratree/naturalJoinNode\";\r\nimport SetOperationNode from \"../ratree/setOperationNode\";\r\nimport {formatDate} from \"../utils/dateUtils\";\r\nimport ThetaJoinNode, {ThetaJoinType} from \"../ratree/thetaJoinNode\";\r\nimport {isProjectObject, Project} from \"../project/project\";\r\nimport {ExprParser} from \"../expression/exprParser\";\r\nimport {StoredRelation, StoredRelationData} from \"../relation/storedRelation\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {MessageBox} from \"../components/messageBox\";\r\n\r\n/**\r\n * Class for processing multiple input .txt files with expressions.\r\n */\r\nexport class BatchProcessor {\r\n\r\n    /**\r\n     * Opens file dialog and processes files selected by the user. For each .rachel file creates a textual evaluation\r\n     * report. Files are expected to contain valid project data. Returns promise with string message about process.\r\n     */\r\n    public static process(filename: string): void {\r\n        FileDialog.openFiles(\".rachel\").then(files => {\r\n            console.log(files.length + ' files loaded to BatchProcessor');\r\n            console.time(\"Batch duration\");\r\n\r\n            let reports: {name: string, text: string}[] = [];\r\n            let processed: number = 0;\r\n            let skipped: number = 0;\r\n\r\n            /**\r\n             * Processes a file on the given index and calls the processing of the next file.\r\n             * If all files were processed, calls downloadReports().\r\n             */\r\n            const processNext = (i: number) => {\r\n                if (i >= files.length) {\r\n                    return downloadReports();\r\n                }\r\n                const file = files[i];\r\n                if (file.text === null) {\r\n                    reports.push({\r\n                        name: file.name + '-eval-report.txt',\r\n                        text: \"ERROR: Source file cannot be loaded.\"\r\n                    });\r\n                    skipped += 1;\r\n                    console.warn('Null read from ' + file.name);\r\n                }\r\n                else if (file.name.match(/\\.rachel$/)) {\r\n                    // @ts-ignore - file.text cannot be null now\r\n                    reports.push(BatchProcessor.processFile(file));\r\n                    processed += 1;\r\n                }\r\n                else {\r\n                    reports.push({\r\n                        name: file.name + '-eval-report.txt',\r\n                        text: \"ERROR: Source file is not a .rachel file, but: \" + file.name\r\n                    });\r\n                    skipped += 1;\r\n                    console.warn('Unsupported filetype: ' + file.name);\r\n                }\r\n                MessageBox.message(\"Batch in progress... \" + (processed + skipped) + \"/\" + files.length);\r\n                setTimeout(() => processNext(i + 1), 0);\r\n            }\r\n\r\n            /**\r\n             * Downloads created reports.\r\n             */\r\n            const downloadReports = () => {\r\n                const zip: JSZip = JSZip();\r\n                reports.forEach(report => {\r\n                    zip.file(report.name, report.text);\r\n                })\r\n                zip.generateAsync({type: \"blob\"}).then(content => {\r\n                    saveAs(content, filename + \".zip\");\r\n                    console.log(\"Batch finished: \" + processed + \" files processed, \" + skipped + \" skipped.\");\r\n                    MessageBox.message(\"Batch finished: \" + processed + \" files processed, \" + skipped + \" skipped.\");\r\n                }).catch(err => {\r\n                    MessageBox.error(\"Batch results saving error: \" + err.message);\r\n                });\r\n                console.timeEnd(\"Batch duration\");\r\n            }\r\n\r\n            processNext(0);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Tries to parse Project object from given file.text. If successful, parses relations in the project, evaluates\r\n     * expressions in the project and generates textual report: header (see reportHeader()),\r\n     * formatted relations (see formatRelations()) and formatted expressions (see processExpression()).\r\n     */\r\n    private static processFile = (file: {name: string, text: string}): {name: string, text: string} => {\r\n        const project: Project = JSON.parse(file.text);\r\n        const status = isProjectObject(project);\r\n        if (status !== \"OK\") {\r\n            return {name: file.name.slice(0, -4) + '-eval-report.txt', text: \"Invalid JSON file: \" + status};\r\n        }\r\n        const relations: Map<string, Relation> = BatchProcessor.parseRelations(project.relations, project.nullValuesSupport);\r\n        const exprParser: ExprParser = new ExprParser(relations, project.nullValuesSupport);\r\n\r\n        const exprCount: number = project.expressions.length;\r\n        const reports = project.expressions.map(e => BatchProcessor.processExpression(e, exprParser));\r\n        const ops: OperationsCount = addOperations(...reports.map(r => r.counts));\r\n        const errors: number = reports.reduce((agg, report) => agg + report.error, 0);\r\n\r\n        return {\r\n            name: file.name.slice(0, -7) + '-eval-report.txt',\r\n            text: BatchProcessor.reportHeader(exprCount, errors, ops, project.nullValuesSupport) +\r\n                  BatchProcessor.formatRelations(project.relations) +\r\n                  sectionLine + \"\\n\\nQUERIES (\" + exprCount + \")\\n\\n\" +\r\n                  reports.map(r => r.text).join('')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates full Relation representation for given StoredRelationData array.\r\n     */\r\n    private static parseRelations(storedData: StoredRelationData[], nullValuesSupport: boolean): Map<string, Relation> {\r\n        const map: Map<string, Relation> = new Map();\r\n        storedData.forEach(data => {\r\n            try {\r\n                const storedRelation: StoredRelation = StoredRelation.fromData(data, nullValuesSupport);\r\n                if (storedRelation.isValid()) {\r\n                    map.set(storedRelation.getName(), storedRelation.createRelation());\r\n                }\r\n            }\r\n            catch (ignored) { }\r\n        })\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * Processes given expression in context of given parser. Returns formatted expression and its result (or error),\r\n     * count of used RA operations and 0/1 error indicator.\r\n     */\r\n    private static processExpression = (expr: Expression, parser: ExprParser): {text: string, counts: OperationsCount, error: number} => {\r\n        try {\r\n            const evaluationTree = parser.parse(expr.text);\r\n            const counts: OperationsCount = operationsOfTree(evaluationTree);\r\n            const relation: Relation = evaluationTree.getResult();\r\n            return {\r\n                text: contentLine + '\\n' + expr.name + '\\n\\n' + expr.text + '\\n\\n' + relation.contentString() + '\\n\\n\\n',\r\n                counts: counts,\r\n                error: 0\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                text: contentLine + '\\n' + expr.name + '\\n\\n' + expr.text + '\\n\\nERROR: ' + err.message + '\\n\\n\\n',\r\n                counts: zeroOperations(),\r\n                error: 1\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the header of the report. The header contains the time of the report, count of expressions and errors,\r\n     * count of used operations and null values support info.\r\n     *\r\n     * @param expressions count of expressions\r\n     * @param errors count of errors\r\n     * @param operations count of operations\r\n     * @param nullValuesSupport\r\n     */\r\n    private static reportHeader = (expressions: number, errors: number, operations: OperationsCount, nullValuesSupport: boolean): string => {\r\n        const total: number = totalOperations(operations);\r\n        const binary: number = binaryOperations(operations);\r\n        const unary: number = unaryOperations(operations);\r\n        return sectionLine + '\\n\\nRachel project report from ' + formatDate(new Date()) + '\\n\\n' + sectionLine + '\\n\\n' +\r\n            'Expressions: ' + expressions + '    Errors: ' + errors + '\\n\\n' +\r\n            'Used operations (' + total + ' in total: ' + binary + ' binary, ' + unary + ' unary):\\n' +\r\n            '    Selection: ' + operations.selection + '\\n' +\r\n            '    Projection: ' + operations.projection + '\\n' +\r\n            '    Rename: ' + operations.rename + '\\n\\n' +\r\n            '    Set Operations: ' + operations.setOperation + '\\n\\n' +\r\n            '    Natural join: ' + operations.natural + '\\n' +\r\n            '    Cartesian product: ' + operations.cartesian + '\\n' +\r\n            '    Semijoin: ' + operations.semijoin + '\\n' +\r\n            '    Antijoin: ' + operations.antijoin + '\\n' +\r\n            '    Theta Join: ' + operations.thetaJoin + '\\n' +\r\n            '    Theta Semijoin: ' + operations.thetaSemijoin + '\\n\\n' +\r\n            '    Outer Join: ' + operations.outerJoin + '\\n\\n' +\r\n            '    Division: ' + operations.division + '\\n\\n' +\r\n            (nullValuesSupport ? 'Null values ALLOWED.\\n\\n' : 'Null values FORBIDDEN.\\n\\n');\r\n    }\r\n\r\n    /**\r\n     * Returns formatted string for given StoredRelationsData array.\r\n     */\r\n    private static formatRelations = (storedData: StoredRelationData[]): string => {\r\n        const inlines = storedData.map(data => {\r\n            return data.name + \"(\" + data.columnNames.join(\", \") + \")\\n\"\r\n        }).join('');\r\n        return sectionLine + \"\\n\\nTABLES (\" + storedData.length + \")\\n\\n\" + inlines + \"\\n\" +\r\n            storedData.map(data => contentLine + \"\\n\" + data.name + '\\n\\n' + StoredRelation.format(data)).join('');\r\n    }\r\n}\r\n\r\nconst sectionLine: string = \"################################################################################\";\r\nconst contentLine: string = \"--------------------------------------------------------------------------------\";\r\n\r\n/**\r\n * Counts of all supported relational algebra operations.\r\n */\r\ninterface OperationsCount {\r\n    antijoin: number,\r\n    cartesian: number,\r\n    division: number,\r\n    natural: number,\r\n    outerJoin: number,\r\n    projection: number,\r\n    rename: number,\r\n    selection: number,\r\n    semijoin: number,\r\n    setOperation: number,\r\n    thetaJoin: number,\r\n    thetaSemijoin: number,\r\n}\r\n\r\n/**\r\n * @return zero count of all operations\r\n */\r\nfunction zeroOperations(): OperationsCount {\r\n    return addOperations();\r\n}\r\n\r\n/**\r\n * @return adds given OperationsCounts together\r\n */\r\nfunction addOperations(...counts: OperationsCount[]): OperationsCount {\r\n    return {\r\n        antijoin: counts.reduce((agg, count) => agg + count.antijoin, 0),\r\n        cartesian: counts.reduce((agg, count) => agg + count.cartesian, 0),\r\n        division: counts.reduce((agg, count) => agg + count.division, 0),\r\n        natural: counts.reduce((agg, count) => agg + count.natural, 0),\r\n        outerJoin: counts.reduce((agg, count) => agg + count.outerJoin, 0),\r\n        projection: counts.reduce((agg, count) => agg + count.projection, 0),\r\n        rename: counts.reduce((agg, count) => agg + count.rename, 0),\r\n        selection: counts.reduce((agg, count) => agg + count.selection, 0),\r\n        semijoin: counts.reduce((agg, count) => agg + count.semijoin, 0),\r\n        setOperation: counts.reduce((agg, count) => agg + count.setOperation, 0),\r\n        thetaJoin: counts.reduce((agg, count) => agg + count.thetaJoin, 0),\r\n        thetaSemijoin: counts.reduce((agg, count) => agg + count.thetaSemijoin, 0),\r\n    }\r\n}\r\n\r\n/**\r\n * @return sum of all operation counts\r\n */\r\nfunction totalOperations(o: OperationsCount): number {\r\n    return binaryOperations(o) + unaryOperations(o);\r\n}\r\n\r\n/**\r\n * @return sum of all binary operation counts\r\n */\r\nfunction binaryOperations(o: OperationsCount): number {\r\n    return o.antijoin + o.cartesian + o.division + o.natural + o.outerJoin + o.semijoin + o.setOperation + o.thetaJoin + o.thetaSemijoin;\r\n}\r\n\r\n/**\r\n * @return sum of all unary operation counts\r\n */\r\nfunction unaryOperations(o: OperationsCount): number {\r\n    return o.projection + o.rename + o.selection;\r\n}\r\n\r\n/**\r\n * @return counts all operations used in the given tree.\r\n */\r\nfunction operationsOfTree(tree: RATreeNode): OperationsCount {\r\n    if (tree instanceof UnaryNode) {\r\n        return addOperations(operationOfUnaryNode(tree), operationsOfTree(tree.getSubtree()));\r\n    }\r\n    if (tree instanceof BinaryNode) {\r\n        return addOperations(operationOfBinaryNode(tree), operationsOfTree(tree.getLeftSubtree()), operationsOfTree(tree.getRightSubtree()));\r\n    }\r\n    // no subtree - relation node\r\n    return zeroOperations();\r\n}\r\n\r\n/**\r\n * @return OperationsCount with one given unary operation count set to 1, other 0\r\n */\r\nfunction operationOfUnaryNode(node: UnaryNode): OperationsCount {\r\n    let ret: OperationsCount = zeroOperations();\r\n    if (node instanceof ProjectionNode) {\r\n        ret.projection = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof RenameNode) {\r\n        ret.rename = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof SelectionNode) {\r\n        ret.selection = 1;\r\n        return ret;\r\n    }\r\n    return ret;\r\n}\r\n\r\n/**\r\n * @return OperationsCount with one given binary operation count set to 1, other 0\r\n */\r\nfunction operationOfBinaryNode(node: BinaryNode): OperationsCount {\r\n    let ret: OperationsCount = zeroOperations();\r\n    if (node instanceof AntijoinNode) {\r\n        ret.antijoin = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof CartesianProductNode) {\r\n        ret.cartesian = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof DivisionNode) {\r\n        ret.division = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof OuterJoinNode) {\r\n        ret.outerJoin = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof NaturalJoinNode) {\r\n        if (node.getType() === NaturalJoinType.natural) {\r\n            ret.natural = 1;\r\n        }\r\n        else {\r\n            ret.semijoin = 1;\r\n        }\r\n        return ret;\r\n    }\r\n    if (node instanceof SetOperationNode) {\r\n        ret.setOperation = 1;\r\n        return ret;\r\n    }\r\n    if (node instanceof ThetaJoinNode) {\r\n        if (node.getType() === ThetaJoinType.full) {\r\n            ret.thetaJoin = 1;\r\n        }\r\n        else {\r\n            ret.thetaSemijoin = 1;\r\n        }\r\n        return ret;\r\n    }\r\n    return ret;\r\n}","/**\r\n * Formats given date to: dd.mm.yyyy hh:mm.\r\n *\r\n * @param date date to format\r\n */\r\nexport function formatDate(date: Date): string {\r\n    return String(date.getDate()).padStart(2, '0') + '.' + String(date.getMonth() + 1).padStart(2, '0') + '.' +\r\n        String(date.getFullYear()) + ' ' +\r\n        String(date.getHours()).padStart(2, '0') + ':' + String(date.getMinutes()).padStart(2, '0');\r\n}","import React from \"react\";\r\nimport './css/editRelationTable.css';\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {NNToSMap} from \"../types/nnToSMap\";\r\n\r\ninterface EditRelationTableProps {\r\n    // storing representation of the relation to be edited\r\n    relation: StoredRelation,\r\n\r\n    // handler of column name change\r\n    onColumnNameChange: (columnName: string, columnIndex: number) => void,\r\n    // handler of column type change\r\n    onColumnTypeChange: (columnType: SupportedColumnType, columnIndex: number) => void,\r\n    // handler of row input change\r\n    onRowInputChange: (input: string, columnIndex: number, rowIndex: number) => void,\r\n    // handler of adding new row\r\n    onNewRow: (onDone: () => void) => void,\r\n    // handler of adding new column\r\n    onNewColumn: (onDone: () => void) => void,\r\n    // handler of deleting the row of given index\r\n    onDeleteRow: (rowIndex: number) => void,\r\n    // handler of deleting the column of given index\r\n    onDeleteColumn: (columnIndex: number) => void,\r\n\r\n    // handler of input with Ctrl key\r\n    onCtrlInput: (ev: React.KeyboardEvent) => void\r\n}\r\n\r\ninterface EditRelationTableState {\r\n    selectedColumn: number | undefined,\r\n    selectedRow: \"names\" | \"types\" | number | undefined\r\n}\r\n\r\n// @ts-ignore\r\nconst cssConstants: CSSStyleDeclaration = getComputedStyle(document.querySelector(':root'));\r\nconst cellPaddingSides: number = Number(cssConstants.getPropertyValue('--cell-padding-sides-num'));\r\nconst inputMarginSides: number = Number(cssConstants.getPropertyValue('--input-margin-sides-num'));\r\n\r\n/**\r\n * Table for editing a relation relation. It supports adding new columns and rows and editing all relation (column names,\r\n * column types and row inputs).\r\n */\r\nexport default class EditRelationTable extends React.Component<EditRelationTableProps, EditRelationTableState> {\r\n\r\n    private readonly containerRef: React.RefObject<HTMLDivElement>;\r\n    // reference to the head row with columns names\r\n    private readonly tableHeadRowRef: React.RefObject<HTMLTableRowElement>;\r\n    // width of cells in head (with deducted padding) to set proper inputs width to not resize the table\r\n    private columnWidths: number[] = [];\r\n\r\n    constructor(props: EditRelationTableProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedColumn: undefined,\r\n            selectedRow: undefined\r\n        }\r\n        this.containerRef = React.createRef<HTMLDivElement>();\r\n        this.tableHeadRowRef = React.createRef<HTMLTableRowElement>();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // clicking in the window blurs the selected input (if clicked into a cell, event propagation is stopped to not blur\r\n        window.addEventListener('click', () => {\r\n            this.setSelectedInput(undefined, undefined);\r\n        });\r\n        this.componentDidUpdate();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const headRow = this.tableHeadRowRef.current;\r\n        if (headRow !== null) {\r\n            // cells without the first (line number) and last (add column button)\r\n            const cells = [...headRow.cells].slice(1, -1);\r\n            this.columnWidths = cells.map(cell => cell.clientWidth - 2 * (cellPaddingSides + inputMarginSides));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes column width if the resized input element does not fit in it anymore.\r\n     */\r\n    private handleInputResize = (inputElement: EventTarget & HTMLInputElement, column: number) => {\r\n        // handles larger width\r\n        if (inputElement.scrollWidth > this.columnWidths[column]) {\r\n            this.columnWidths[column] = inputElement.scrollWidth;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns error of the relation to edit.\r\n     */\r\n    private getErrors = (): NNToSMap => {\r\n        return this.props.relation.getErrors();\r\n    }\r\n\r\n    /**\r\n     * Sets selected input column and row to given values.\r\n     */\r\n    private setSelectedInput = (column: number | undefined, row: \"names\" | \"types\" | number | undefined): void => {\r\n        this.setState({\r\n            selectedColumn: column,\r\n            selectedRow: row\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Moves selected input to right if it is defined and not in the last column.\r\n     */\r\n    private moveSelectedInputRight = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not last column was selected\r\n            if (selectedColumn < this.props.relation.getColumnCount() - 1) {\r\n                this.setState({selectedColumn: selectedColumn + 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input to left if it is defined and not in the first column.\r\n     */\r\n    private moveSelectedInputLeft = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not first column was selected\r\n            if (selectedColumn > 0) {\r\n                this.setState({selectedColumn: selectedColumn - 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input up if it is defined and not in the first row.\r\n     */\r\n    private moveSelectedInputUp = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            // if not first row was selected\r\n            if (typeof selectedRow === \"number\") {\r\n                if (selectedRow === 0) {\r\n                    this.setState({selectedRow: \"names\"});\r\n                }\r\n                else {\r\n                    this.setState({selectedRow: selectedRow - 1});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves selected input down if it is defined and not in the last row.\r\n     */\r\n    private moveSelectedInputDown = (): void => {\r\n        const selectedColumn = this.state.selectedColumn;\r\n        const selectedRow = this.state.selectedRow;\r\n        if (selectedColumn !== undefined && selectedRow !== undefined) {\r\n            if (selectedRow === \"names\" && this.props.relation.getRowCount() > 0) {\r\n                this.setState({selectedRow: 0});\r\n            }\r\n            // if not last row was selected\r\n            if (typeof selectedRow === \"number\" && selectedRow < this.props.relation.getRowCount() - 1) {\r\n                this.setState({selectedRow: selectedRow + 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Catches key inputs with special effects in tht table.\r\n     */\r\n    private handleKeyDown = (event: React.KeyboardEvent): void => {\r\n        if (event.key === \"Enter\" || event.key === \"Esc\" || event.key === \"Escape\") {\r\n            this.setSelectedInput(undefined, undefined);\r\n        }\r\n        else if (event.key === \"Tab\" || (event.ctrlKey && event.key === \"ArrowRight\")) {\r\n            this.moveSelectedInputRight();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowLeft\") {\r\n            this.moveSelectedInputLeft();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowUp\") {\r\n            this.moveSelectedInputUp();\r\n            event.preventDefault();\r\n        }\r\n        else if (event.ctrlKey && event.key === \"ArrowDown\") {\r\n            this.moveSelectedInputDown();\r\n            event.preventDefault();\r\n        }\r\n        if (event.ctrlKey) {\r\n            this.props.onCtrlInput(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the change of the column name, column type or row input to the parent element.\r\n     * When row = \"types\", it is expected that value is of SupportedColumnType type.\r\n     * Tabulators are replaced by 4 spaces.\r\n     */\r\n    private handleChange = (value: string, column: number, row: \"names\" | \"types\" | number): void => {\r\n        value = value.replace(/\\t/g, \"    \");\r\n        if (row === \"names\") {\r\n            this.props.onColumnNameChange(value, column);\r\n        }\r\n        else if (row === \"types\") {\r\n            // @ts-ignore - should be ensured before method call\r\n            this.props.onColumnTypeChange(value, column);\r\n        }\r\n        else {\r\n            this.props.onRowInputChange(value, column, row);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the relation and scrolls to it.\r\n     */\r\n    private handleNewColumn = (): void => {\r\n        this.props.onNewColumn(() => {\r\n            // @ts-ignore\r\n            this.containerRef.current.scrollTo(this.containerRef.current.clientWidth, this.containerRef.current.scrollTop)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the relation and scrolls to it.\r\n     */\r\n    private handleNewRow = (): void => {\r\n        this.props.onNewRow(() => {\r\n            // @ts-ignore\r\n            this.containerRef.current.scrollTo(this.containerRef.current.scrollLeft, this.containerRef.current.clientHeight)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the column at given index.\r\n     */\r\n    private handleDeleteColumn = (column: number): void => {\r\n        this.props.onDeleteColumn(column);\r\n    }\r\n\r\n    /**\r\n     * Deletes the row at given index.\r\n     */\r\n    private handleDeleteRow = (row: number): void => {\r\n        this.props.onDeleteRow(row);\r\n    }\r\n\r\n    /**\r\n     * Creates a text input bind to handling change of given column and row.\r\n     */\r\n    private createInput = (value: string, column: number, row: \"names\" | \"types\" | number) => {\r\n        return (\r\n            <input\r\n                type='text'\r\n                className={'text-input'}\r\n                spellCheck={false}\r\n                value={value}\r\n                onChange={(e) => {\r\n                    this.handleChange(e.target.value, column, row);\r\n                    this.handleInputResize(e.target, column);\r\n                }}\r\n                autoFocus={true}\r\n                style={{width: this.columnWidths[column] + \"px\"}}\r\n            />\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a tooltip with given text.\r\n     */\r\n    private createTooltip(text: string, style?: React.CSSProperties) {\r\n        return (<span className={\"tooltip\"} style={style}>{text}</span>)\r\n    }\r\n\r\n    /**\r\n     * Creates a button for deleting rows or columns.\r\n     */\r\n    private createDeleteButton = (callback: () => void) => {\r\n        return (<button className=\"delete-row-or-column-button\" onClick={callback}>&#10006;</button>);\r\n    }\r\n\r\n    /**\r\n     * Creates content of the first row of the table with column names.\r\n     * If the table is editable, additional blank column is added for \"add column\" button in next rows.\r\n     */\r\n    private createNamesRow() {\r\n        const rowData = this.props.relation.getColumnNames().map((columnName, columnIndex) => {\r\n            let content: string | JSX.Element = columnName;\r\n            if (this.state.selectedColumn === columnIndex && this.state.selectedRow === \"names\") {\r\n                content = this.createInput(columnName, columnIndex, \"names\");\r\n            }\r\n            let span: null | JSX.Element = null;\r\n            let className: string = \"name-th\";\r\n            const error = this.getErrors().get(\"name\", columnIndex);\r\n            if (error !== undefined) {\r\n                span = this.createTooltip(error, {top: \"90%\", bottom: \"auto\"});\r\n                className += \" error-input\";\r\n            }\r\n            return (\r\n                <th key={columnIndex}\r\n                    className={className}\r\n                    onClick={ev => {\r\n                        this.setSelectedInput(columnIndex, \"names\");\r\n                        ev.stopPropagation();\r\n                    }}\r\n                >{content}{span}</th>\r\n            )});\r\n        // pushes \"add column\" button in last column\r\n        rowData.push(\r\n            <td key='add-column'\r\n                rowSpan={2}\r\n                style={{width: \"24px\", border: \"none\", padding: \"1px\"}}>\r\n                <button onClick={this.handleNewColumn}\r\n                    style={{width: \"100%\", height: \"100%\"}}><strong>+</strong></button>\r\n            </td>);\r\n        return (\r\n            <><td className=\"row-number-td\"/>{rowData}</>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates content of the second row of the table with column types.\r\n     * If the table is editable, \"add column\" button is added in the last column with row span to the end of the table.\r\n     */\r\n    private createTypesRow() {\r\n        const rowData = this.props.relation.getColumnTypes().map((columnType, columnIndex) => {\r\n            const content = (\r\n                <select value={columnType}\r\n                    onChange={(e) => this.handleChange(e.target.value, columnIndex, \"types\")}>\r\n                    <option>number</option>\r\n                    <option>string</option>\r\n                    <option>boolean</option>\r\n                </select>\r\n            );\r\n            return (\r\n                <th key={columnIndex}\r\n                    className=\"type-th\"\r\n                >{content}{this.createDeleteButton(() => this.handleDeleteColumn(columnIndex))}</th>\r\n            )});\r\n        return (\r\n            <><td className=\"row-number-td\"/>{rowData}</>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a data rows of the table.\r\n     */\r\n    private createRows() {\r\n        // creates default row if no exists\r\n        if (this.props.relation.getRows().length === 0) {\r\n            return null;\r\n        }\r\n        const rows: string[][] = this.props.relation.getRows();\r\n        // creates all rows if any\r\n        return rows.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n                <td className=\"row-number-td\">\r\n                    {rowIndex + 1}\r\n                    {this.createDeleteButton(() => this.handleDeleteRow(rowIndex))}\r\n                </td>\r\n                {row.map((value, columnIndex) => {\r\n                    let content: string | JSX.Element = value;\r\n                    if (this.state.selectedColumn === columnIndex && this.state.selectedRow === rowIndex) {\r\n                        content = this.createInput(value, columnIndex, rowIndex);\r\n                    }\r\n                    let span: null | JSX.Element = null;\r\n                    let className: string = \"\";\r\n                    const error = this.getErrors().get(rowIndex, columnIndex);\r\n                    if (error !== undefined) {\r\n                        span = this.createTooltip(error);\r\n                        className = \"error-input\";\r\n                    }\r\n                    return (\r\n                        <td key={columnIndex}\r\n                            className={className}\r\n                            onClick={ev => {\r\n                                this.setSelectedInput(columnIndex, rowIndex);\r\n                                ev.stopPropagation();\r\n                            }}\r\n                        >{content}{span}</td>\r\n                    )})}\r\n            </tr>\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Creates the last row of the table with button for adding rows.\r\n     */\r\n    private createAddRow() {\r\n        return (\r\n            <tr key='add-row'>\r\n                <td key='add-row-column'\r\n                    className=\"add-row-td\">\r\n                    <button onClick={this.handleNewRow}><strong>+</strong></button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        let divClassName: string = \"edit-table-container scrollbar-container\";\r\n        let tableClassName: string = \"edit-table\";\r\n\r\n        return (\r\n            <div\r\n                className={divClassName}\r\n                ref={this.containerRef}\r\n                onKeyDown={this.handleKeyDown}>\r\n                <table className={tableClassName}>\r\n                    <thead>\r\n                        <tr ref={this.tableHeadRowRef}>{this.createNamesRow()}</tr>\r\n                        <tr>{this.createTypesRow()}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.createRows()}\r\n                        {this.createAddRow()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Relation from \"../relation/relation\";\r\nimport {TooltipButton} from \"./tooltipButton\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport EditRelationTable from \"./editRelationTable\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {TextInput} from \"./textInput\";\r\nimport {isForbiddenRelationName} from \"../utils/keywords\";\r\nimport StringUtils from \"../utils/stringUtils\";\r\nimport {MessageBox} from \"./messageBox\";\r\nimport {LanguageDef} from \"../language/language\";\r\n\r\ninterface RelationsSectionProps {\r\n    // all stored relations\r\n    storedRelations: StoredRelation[],\r\n    // index of the current selected relation\r\n    storedRelationIndex: number,\r\n\r\n    // all currently loaded relations in the application\r\n    loadedRelations: Relation[],\r\n\r\n    // handler of change of the name of the current selected relation\r\n    onRelationNameChange: (newName: string) => void,\r\n    // handler of change of the name of the column at given index in the current selected relation\r\n    onColumnNameChange: (columnName: string, columnIndex: number) => void,\r\n    // handler of change of the type of the column at given index in the current selected relation\r\n    onColumnTypeChange: (columnType: SupportedColumnType, columnIndex: number) => void,\r\n    // handler of change of the row input at given column/row index in the current selected relation\r\n    onRowInputChange: (input: string, columnIndex: number, rowIndex: number) => void,\r\n    // handler of adding a new row in the current selected relation\r\n    onNewRow: (onDone: () => void) => void,\r\n    // handler of adding a new column in the current selected relation\r\n    onNewColumn: (onDone: () => void) => void,\r\n    // handler of deleting the row on given index\r\n    onDeleteRow: (rowIndex: number) => void,\r\n    // handler of deleting the column on given index\r\n    onDeleteColumn: (columnIndex: number) => void,\r\n\r\n    // handler of selecting a different relation as current\r\n    onSelectDifferentRelation: (newIndex: number) => void,\r\n    // handler of creating a new relation\r\n    onNewRelation: () => void,\r\n    // handler of loading the current selected relation into the application\r\n    onLoadRelation: (onDone: (msg: string) => void) => void,\r\n    // handler of deleting the current stored relation\r\n    onDeleteStoredRelation: () => void,\r\n\r\n    onRevertRelation: () => void,\r\n\r\n    // handler of loading all valid relations into the application\r\n    onLoadAllRelations: (onDone: (msg: string) => void) => void,\r\n    // handler of deleting the loaded relations\r\n    onDeleteLoadedRelations: (onDone: (msg: string) => void) => void,\r\n    // handler of saving the stored relations into the files\r\n    onExportRelations: (onDone: (msg: string) => void) => void,\r\n    // handler of loading new relations from files\r\n    onImportRelations: (onDone: (msg: string) => void) => void,\r\n\r\n    // whether to support null values\r\n    nullValuesSupport: boolean,\r\n    // current application language\r\n    language: LanguageDef\r\n}\r\n\r\ninterface RelationsSectionState {\r\n    sectionClicked: boolean\r\n}\r\n\r\n/**\r\n * Section to type the RA expression. It contains textarea for relations definition and control buttons.\r\n */\r\nexport class RelationsSection extends React.Component<RelationsSectionProps, RelationsSectionState> {\r\n\r\n    constructor(props: RelationsSectionProps) {\r\n        super(props);\r\n        this.state = {\r\n            sectionClicked: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns selected stored relation.\r\n     */\r\n    private getCurRel = (): StoredRelation => {\r\n        return this.props.storedRelations[this.props.storedRelationIndex];\r\n    }\r\n\r\n    /**\r\n     * Passes change to the parent element if isShowingStored = true. Otherwise, changes the state.loadedRelationIndex.\r\n     */\r\n    private handleSelectDifferentRelation(index: number): void {\r\n        this.props.onSelectDifferentRelation(index);\r\n    }\r\n\r\n    /**\r\n     * Passes change of the relation name to the parent element.\r\n     */\r\n    private handleRelationNameChange = (name: string) => {\r\n        this.props.onRelationNameChange(name);\r\n    }\r\n\r\n    /**\r\n     * Loads the selected relation to the application if there are no errors in it. Otherwise, displays a message to user.\r\n     */\r\n    private loadRelation = () => {\r\n        if (this.getCurRel().isValid()) {\r\n            this.props.onLoadRelation(MessageBox.message);\r\n        }\r\n        else {\r\n            MessageBox.error(\"Cannot use the invalid relation. Check errors and try again.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes the load all relations call to the parent.\r\n     */\r\n    private loadAllRelations = () => {\r\n        this.props.onLoadAllRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the export stored relations call to the parent.\r\n     */\r\n    private exportRelations = () => {\r\n        this.props.onExportRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the import stored relations call to the parent.\r\n     */\r\n    private importRelations = () => {\r\n        this.props.onImportRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Passes the call to delete current selected stored relation.\r\n     */\r\n    private deleteRelation = () => {\r\n        this.props.onDeleteStoredRelation();\r\n    }\r\n\r\n    private revertRelation = () => {\r\n        this.props.onRevertRelation();\r\n    }\r\n\r\n    /**\r\n     * Passes the import create new stored relation to the parent.\r\n     */\r\n    private newRelation = () => {\r\n        this.props.onNewRelation();\r\n    }\r\n\r\n    /**\r\n     * Passes the delete all loaded relations call to the parent.\r\n     */\r\n    private deleteAllLoadedRelations = () => {\r\n        this.props.onDeleteLoadedRelations(MessageBox.message);\r\n    }\r\n\r\n    /**\r\n     * Handles input with Ctrl key pressed from relation table.\r\n     */\r\n    private handleCtrlInput = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            this.loadRelation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates menu buttons. Buttons for relations with errors are highlighted.\r\n     */\r\n    private createRelationMenuButtons = () => {\r\n        return this.props.storedRelations.map((rel, i) => {\r\n            const className: string = (this.props.storedRelationIndex === i ? \"button-clicked\" : \"\");\r\n            const actuality: string = rel.isActual() ? \"\" : \"*\";\r\n            const style = rel.isValid() ? {} : {border: \"2px solid #fd3030\"};\r\n            return (\r\n                <button\r\n                    key={i}\r\n                    onClick={() => this.handleSelectDifferentRelation(i)}\r\n                    className={className}\r\n                    style={style}\r\n                >{actuality + rel.getName()}</button>\r\n            );\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const lang = this.props.language.relationSection;\r\n\r\n        const createButton = (text: string, onClick: () => void, tooltip: string, style?: React.CSSProperties) => {\r\n            return (<TooltipButton\r\n                key={text}\r\n                text={text}\r\n                onClick={onClick}\r\n                className={\"\"}\r\n                style={style}\r\n                tooltip={tooltip}\r\n                tooltipClassName={\"tooltip\"}\r\n            />);\r\n        }\r\n\r\n        // the relation cannot be renamed to forbidden relation names and other currently used relation names\r\n        const forbiddenRelationNames: string[] = this.props.storedRelations\r\n            .filter((sr, i) => i !== this.props.storedRelationIndex)\r\n            .map(sr => sr.getName());\r\n        const forbiddenNamesFunction = (text: string): boolean => {\r\n            if (forbiddenRelationNames.indexOf(text) > -1) {\r\n                return true;\r\n            }\r\n            return !StringUtils.isName(text) || isForbiddenRelationName(text);\r\n        }\r\n\r\n        return (\r\n            <section className=\"page-section\">\r\n                <header>\r\n                    <h2>{lang.relationSectionHeader}</h2>\r\n                    {createButton(lang.loadAllButton, this.loadAllRelations, lang.loadAllButtonTooltip)}\r\n                    {createButton(lang.removeLoadedButton, this.deleteAllLoadedRelations, lang.removeLoadedButtonTooltip)}\r\n                    {createButton(lang.importButton, this.importRelations, lang.importButtonTooltip)}\r\n                    {createButton(lang.exportButton, this.exportRelations, lang.exportButtonTooltip)}\r\n                </header>\r\n\r\n                <menu className=\"page-section-tab-menu\">\r\n                    {this.createRelationMenuButtons()}\r\n                    <button onClick={this.newRelation}\r\n                        style={{minWidth: \"0\", marginLeft: \"10px\", padding: \"2px 6px 1px 6px\"}}>\r\n                        <strong>+</strong>\r\n                    </button>\r\n                </menu>\r\n\r\n                <EditRelationTable\r\n                    relation={this.getCurRel()}\r\n\r\n                    onColumnNameChange={this.props.onColumnNameChange}\r\n                    onColumnTypeChange={this.props.onColumnTypeChange}\r\n                    onRowInputChange={this.props.onRowInputChange}\r\n                    onNewRow={this.props.onNewRow}\r\n                    onNewColumn={this.props.onNewColumn}\r\n                    onDeleteRow={this.props.onDeleteRow}\r\n                    onDeleteColumn={this.props.onDeleteColumn}\r\n\r\n                    onCtrlInput={this.handleCtrlInput}\r\n                />\r\n\r\n                <menu className=\"page-section-management-menu\">\r\n                    <TooltipButton\r\n                        text={lang.loadButton}\r\n                        onClick={this.loadRelation}\r\n                        className={\"action-button\"}\r\n                        style={{marginRight: \"40px\"}}\r\n                        tooltip={lang.loadButtonTooltip}\r\n                        tooltipClassName={\"tooltip\"}\r\n                    />\r\n                    <TextInput\r\n                        value={this.getCurRel().getName()}\r\n                        buttonText={lang.renameButton}\r\n                        onSubmit={this.handleRelationNameChange}\r\n                        forbidden={forbiddenNamesFunction}\r\n                        id=\"relation-name-input\"\r\n                    />\r\n                    {createButton(lang.deleteButton, this.deleteRelation, lang.deleteButtonTooltip)}\r\n                    {createButton(lang.revertButton, this.revertRelation,\r\n                        lang.revertButtonTooltip + \" (\" + this.getCurRel().getRevertName() + \")\")}\r\n                </menu>\r\n            </section>\r\n        );\r\n    }\r\n}","interface SendData {\r\n    access_token: string,\r\n    subject: string,\r\n    text: string\r\n}\r\n\r\n/**\r\n * Class for sending emails. Powered by https://postmail.invotes.com/.\r\n * TypeScript version of JavaScript Copy & Paste Example from PostMail webpage.\r\n */\r\nexport class Mail {\r\n\r\n    /**\r\n     * Creates a mailer with given Mail access token.\r\n     *\r\n     * @param accessToken token which specifies Mail receiver of mails\r\n     */\r\n    constructor(readonly accessToken: string) {}\r\n\r\n    /**\r\n     * Sends given subject and body of the email to the Mail receiver.\r\n     *\r\n     * @param subject subject of the mail\r\n     * @param body body of the mail\r\n     */\r\n    public send(subject: string, body: string): void {\r\n        const data_js: SendData = {\r\n            access_token: this.accessToken,\r\n            subject: subject,\r\n            text: body\r\n        };\r\n\r\n        const request = new XMLHttpRequest();\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState === 4 && request.status === 200) {\r\n            } else if(request.readyState === 4) {\r\n                console.log(\"failed creating XMLHttpRequest in Mail.send: \" + request.response);\r\n            }\r\n        };\r\n\r\n        let params = Mail.toParams(data_js);\r\n        request.open(\"POST\", \"https://postmail.invotes.com/send\", true);\r\n        request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n        request.send(params);\r\n    }\r\n\r\n    private static toParams(data: SendData): string {\r\n        return encodeURIComponent(\"access_token\") + \"=\" + encodeURIComponent(data.access_token) + \"&\" +\r\n            encodeURIComponent(\"subject\") + \"=\" + encodeURIComponent(data.subject) + \"&\" +\r\n                encodeURIComponent(\"text\") + \"=\" + encodeURIComponent(data.text);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Relation from '../relation/relation';\r\nimport RATreeNode from \"../ratree/raTreeNode\";\r\nimport {ExpressionSection} from \"./expressionSection\";\r\nimport {ResultSection} from \"./resultSection\";\r\nimport {ExpressionStoreManager} from \"../expression/expressionStoreManager\";\r\nimport {ManagementSection} from \"./managementSection\";\r\nimport {CsvValueSeparator} from \"../types/csvSupport\";\r\nimport {ProjectStoreManager} from \"../project/projectStoreManager\";\r\nimport {language, LanguageDef, SupportedLanguage} from \"../language/language\";\r\nimport {LocalStorage} from \"../utils/localStorage\";\r\nimport {BatchProcessor} from \"../batch/batchProcessor\";\r\nimport {Expression} from \"../expression/expression\";\r\nimport {RelationsSection} from \"./relationsSection\";\r\nimport {StoredRelation} from \"../relation/storedRelation\";\r\nimport {SupportedColumnType} from \"../relation/columnType\";\r\nimport {RelationStoreManager} from \"../relation/relationStoreManager\";\r\nimport {Mail} from \"../utils/mail\";\r\nimport {copyProject, Project} from \"../project/project\";\r\nimport {getSamples} from \"../project/samples\";\r\n\r\ninterface MainScreenProps {}\r\n\r\ninterface MainScreenState {\r\n    samples: { name: string, project: Project }[],\r\n\r\n    loadedRelations: Map<string, Relation>,\r\n    storedRelations: StoredRelation[],\r\n    selectedRelation: number,\r\n\r\n    expressions: Expression[],\r\n    selectedExpression: number,\r\n\r\n    evaluationTreeRoot: RATreeNode | null,\r\n    evaluatedExpressionName: string,\r\n\r\n    nullValuesSupport: boolean,\r\n    csvValueSeparator: CsvValueSeparator,\r\n    language: LanguageDef,\r\n    darkTheme: boolean\r\n}\r\n\r\n/**\r\n * Main component of Rachel web page. It wraps all page sections and passes messages between them.\r\n */\r\nexport default class MainScreen extends Component<MainScreenProps, MainScreenState> {\r\n\r\n    private readonly expressionSectionRef: React.RefObject<ExpressionSection>;\r\n\r\n    constructor(props: MainScreenProps) {\r\n        super(props);\r\n\r\n        // sets body template by settings from local storage\r\n        document.body.classList.toggle('body-dark', LocalStorage.getDarkMode());\r\n        document.body.classList.toggle('body-light', !LocalStorage.getDarkMode());\r\n\r\n        const initRelationData = {\r\n            name: \"Relation\",\r\n            columnNames: [\"Column1\", \"Column2\", \"Column3\"],\r\n            columnTypes: [\"number\", \"string\", \"boolean\"],\r\n            rows: [\r\n                ['', '', '']\r\n            ],\r\n            columnCount: 3,\r\n            rowCount: 1\r\n        };\r\n\r\n        this.state = {\r\n            samples: getSamples(),\r\n\r\n            loadedRelations: new Map<string, Relation>(),\r\n            storedRelations: [ StoredRelation.fromData(initRelationData, true) ],\r\n            selectedRelation: 0,\r\n\r\n            expressions: [ {name: \"Expression 1\", text: \"\"} ],\r\n            selectedExpression: 0,\r\n\r\n            evaluationTreeRoot: null,\r\n            evaluatedExpressionName: \"\",\r\n\r\n            nullValuesSupport: true,\r\n            csvValueSeparator: LocalStorage.getCsvValueSeparator(),\r\n            language: language(),\r\n            darkTheme: LocalStorage.getDarkMode()\r\n        }\r\n        this.expressionSectionRef = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * Reports an error to the author of the application via email.\r\n     *\r\n     * @param err unexpected error\r\n     */\r\n    private reportUnexpectedError = (err: Error): void => {\r\n        const postMail: Mail = new Mail(\"5uog26ex8q9qu7sqib8ea0qd\");\r\n        let body: string = \"Unexpected error \" + err.name + \" in Rachel application.\" +\r\n            \"\\n\\nMessage:\\n\" + err.message +\r\n            \"\\n\\nDate:\\n\" + new Date().toString() +\r\n            \"\\n\\nStack trace:\\n\" + err.stack +\r\n\r\n            \"\\n\\nLoaded relations: ----------------------------\\n\" +\r\n            [...this.state.loadedRelations.values()].map(relation => {\r\n                return relation.getName() + \"\\n\" + relation.contentString();\r\n            }).join(\"\\n\\n\") +\r\n\r\n            \"\\n\\nStored relations: ----------------------------\" +\r\n            \"\\nSelected relation (1-index): \" + (this.state.selectedRelation + 1) + \"\\n\\n\" +\r\n            this.state.storedRelations.map(rel => StoredRelation.format(rel)).join(\"\\n\\n\") +\r\n\r\n            \"\\n\\nExpressions: ----------------------------\" +\r\n            \"\\nSelected expression (1-index): \" + (this.state.selectedExpression + 1) + \"\\n\\n\" +\r\n            this.state.expressions.map(expr => expr.text).join(\"\\n\\n###\\n\\n\") +\r\n\r\n            \"\\n\\nEvaluation tree:\\n\" + this.state.evaluationTreeRoot?.printInLine() +\r\n\r\n            \"\\n\\nOther state: ----------------------------\" +\r\n            \"\\ncsvValueSeparator: \" + this.state.csvValueSeparator +\r\n            \"\\nlanguage:          \" + this.state.language +\r\n            \"\\nnullValuesSupport: \" + this.state.nullValuesSupport +\r\n            \"\\ndarkTheme:         \" + this.state.darkTheme;\r\n\r\n        postMail.send(\"Rachel application unexpected error\", body);\r\n        console.error('Unexpected error: ' + err.stack);\r\n    }\r\n\r\n    /**\r\n     * Overwrites the current project data with the given one.\r\n     *\r\n     * @param project\r\n     */\r\n    private loadProject = (project: Project): void => {\r\n        this.setState({\r\n            loadedRelations: new Map<string, Relation>(),\r\n            storedRelations: project.relations.map(r => StoredRelation.fromData(r, project.nullValuesSupport)),\r\n            selectedRelation: 0,\r\n            expressions: project.expressions,\r\n            nullValuesSupport: project.nullValuesSupport,\r\n            selectedExpression: 0,\r\n            evaluationTreeRoot: null,\r\n            evaluatedExpressionName: \"\"\r\n        }, () => {\r\n            console.log(\"Project loaded.\");\r\n            this.updateExpressionsErrors();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds number after the given name if it already exists in stored relation.\r\n     */\r\n    private ensureUniqueRelationName = (name: string): string => {\r\n        if (this.state.storedRelations.map(sr => sr.getName()).indexOf(name) > -1) {\r\n            for (let i = 2; true; ++i) {\r\n                if (this.state.storedRelations.map(sr => sr.getName()).indexOf(name + i) === -1) {\r\n                    name += i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return name;\r\n    }\r\n\r\n    /****************************************** MANAGEMENT SECTION HANDLERS ******************************************/\r\n\r\n    /**\r\n     * Processes multiple selected files with expressions by the user and saves the reports of the evaluation in textual\r\n     * files.\r\n     */\r\n    private handleBatch = () => {\r\n        BatchProcessor.process('rachel-eval-results');\r\n    }\r\n\r\n    /**\r\n     * Opens a file dialog and lets the user choose a .rachel (JSON) file with project to load.\r\n     */\r\n    private handleLoadProject = (): void => {\r\n        ProjectStoreManager.load().then(this.loadProject).catch(console.warn);\r\n    }\r\n\r\n    /**\r\n     * Saves the project relation to the .rachel (JSON) file.\r\n     */\r\n    private handleSaveProject = (): void => {\r\n        try {\r\n            ProjectStoreManager.save({\r\n                relations: this.state.storedRelations.map(sr => sr.toDataObject()),\r\n                expressions: this.state.expressions,\r\n                nullValuesSupport: this.state.nullValuesSupport\r\n                }, \"project\");\r\n            console.log(\"Project saved.\");\r\n        }\r\n        catch (err) {\r\n            console.warn(\"Project saving failed: \" + err.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles loading a sample project.\r\n     */\r\n    private handleLoadSampleProject = (sample: Project): void => {\r\n        this.loadProject(copyProject(sample));\r\n    }\r\n\r\n    /**\r\n     * Changes the support of the null values in relations.\r\n     *\r\n     * @param nullValuesSupport new support of the null values in relations\r\n     */\r\n    private handleNullValuesSupportChange = (nullValuesSupport: boolean): void => {\r\n        this.state.storedRelations.forEach(sr => sr.setNullValuesSupport(nullValuesSupport));\r\n        // null values change can change validity of the relations, therefore set as not actual\r\n        this.setState({nullValuesSupport: nullValuesSupport}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Changes the value separator used in generated CSV files.\r\n     *\r\n     * @param csvValueSeparator new value separator used in generated CSV files\r\n     */\r\n    private handleCsvValueSeparatorChange = (csvValueSeparator: CsvValueSeparator): void => {\r\n        LocalStorage.setCsvValueSeparator(csvValueSeparator);\r\n        this.setState({csvValueSeparator: csvValueSeparator});\r\n    }\r\n\r\n    /**\r\n     * Changes the language of the application.\r\n     *\r\n     * @param lang new language of the application\r\n     */\r\n    private handleLanguageChange = (lang: SupportedLanguage): void => {\r\n        LocalStorage.setLanguage(lang);\r\n        // updates language of errors in stored relations\r\n        this.state.storedRelations.forEach(r => r.recomputeErrors());\r\n        this.setState({language: language()});\r\n    }\r\n\r\n    /**\r\n     * Changes the dark/light mode of the application.\r\n     *\r\n     * @param darkTheme true if dark theme is on\r\n     */\r\n    private handleDarkModeChange = (darkTheme: boolean) => {\r\n        LocalStorage.setDarkMode(darkTheme);\r\n        this.setState({darkTheme: darkTheme});\r\n        document.body.classList.toggle( 'body-dark', darkTheme);\r\n        document.body.classList.toggle( 'body-light', !darkTheme);\r\n    }\r\n\r\n    /******************************************* RELATION SECTION HANDLERS *******************************************/\r\n\r\n    private handleRelationNameChange = (name: string): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setName(name);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationColumnNameChange = (columnName: string, columnIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setColumnName(columnName, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationColumnTypeChange = (columnType: SupportedColumnType, columnIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setColumnType(columnType, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationRowInputChange = (input: string, columnIndex: number, rowIndex: number): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].setRowInput(input, rowIndex, columnIndex);\r\n            return {storedRelations: storedRelations};\r\n        });\r\n    }\r\n\r\n    private handleRelationNewRow = (onDone: () => void): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].addNewRow();\r\n        // forces update\r\n        this.setState({}, onDone);\r\n    }\r\n\r\n    private handleRelationNewColumn = (onDone: () => void): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].addNewColumn();\r\n        // forces update\r\n        this.setState({}, onDone);\r\n    }\r\n\r\n    private handleRelationDeleteRow = (rowIndex: number): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].deleteRow(rowIndex);\r\n        // forces update\r\n        this.setState({});\r\n    }\r\n\r\n    private handleRelationDeleteColumn = (columnIndex: number): void => {\r\n        this.state.storedRelations[this.state.selectedRelation].deleteColumn(columnIndex);\r\n        // forces update\r\n        this.setState({});\r\n    }\r\n\r\n    /**\r\n     * Selects a new relation from the relations list as the current one.\r\n     */\r\n    private handleSelectDifferentRelation = (newIndex: number): void => {\r\n        this.setState({selectedRelation: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Creates a new empty relation and adds it in the relation list.\r\n     */\r\n    private handleCreateNewRelation = (): void => {\r\n        // inserts a new empty relation in the array\r\n        const newIndex: number = this.state.selectedRelation + 1;\r\n        let name: string = this.ensureUniqueRelationName(\"NewRelation\");\r\n        this.state.storedRelations.splice(newIndex, 0, StoredRelation.new(name, this.state.nullValuesSupport));\r\n        this.setState({selectedRelation: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Deletes the current relation from the relations list (or clears it if it is the last relation in the list).\r\n     */\r\n    private handleDeleteRelation = (): void => {\r\n        // if there is the last relation, only clears it\r\n        if (this.state.storedRelations.length === 1) {\r\n            this.setState({storedRelations: [StoredRelation.new(\"Relation\", this.state.nullValuesSupport)]});\r\n            return;\r\n        }\r\n        const selected: number = this.state.selectedRelation;\r\n        this.state.storedRelations.splice(selected, 1);\r\n        if (selected === this.state.storedRelations.length) {\r\n            this.setState({selectedRelation: selected - 1}, this.updateExpressionsErrors);\r\n        }\r\n        else {\r\n            // forces update\r\n            this.setState({}, this.updateExpressionsErrors);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reverts the current selected stored relation to its last loaded state.\r\n     */\r\n    private handleRevertRelation = (): void => {\r\n        this.setState(state => {\r\n            const storedRelations = state.storedRelations;\r\n            storedRelations[this.state.selectedRelation].revert();\r\n            return {storedRelations};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes all relations loaded in the application.\r\n     */\r\n    private handleDeleteLoadedRelations = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        const previous = this.state.loadedRelations.size;\r\n        this.state.loadedRelations.clear();\r\n        this.state.storedRelations.forEach(sr => sr.setActual(false));\r\n        onDone(previous + lang.deleteLoadedRelations);\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Saves the relations list in a textual file.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleExportRelations = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        try {\r\n            RelationStoreManager.save(this.state.storedRelations, \"relations\", this.state.csvValueSeparator);\r\n            onDone(this.state.storedRelations.length + lang.relationsExportOK);\r\n        }\r\n        catch (err) {\r\n            onDone(lang.relationsExportErr + err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the relations list from the textual file selected by the user.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleImportRelations = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        RelationStoreManager.load(this.state.nullValuesSupport).then(info => {\r\n            const countBefore: number = this.state.storedRelations.length;\r\n            // loads relations to application\r\n            info.relations.forEach(relation => {\r\n                const name = this.ensureUniqueRelationName(relation.getName());\r\n                relation.setName(name);\r\n                this.state.storedRelations.push(relation);\r\n            });\r\n            if (info.relations.length > 0) {\r\n                // shows first loaded relation\r\n                this.setState({selectedRelation: countBefore});\r\n            }\r\n            onDone(info.relations.length + lang.relationsImport[0] + info.skipped + lang.relationsImport[1])\r\n        });\r\n    }\r\n\r\n    private handleLoadRelation = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        const currRelation: StoredRelation = this.state.storedRelations[this.state.selectedRelation];\r\n        currRelation.setActual(true);\r\n        this.state.loadedRelations.set(currRelation.getName(), currRelation.createRelation());\r\n        const msgPart2: string = this.state.loadedRelations.size === 0 ? lang.loadedRelationsTotalNo :\r\n            this.state.loadedRelations.size + lang.loadedRelationsTotalSome + [...this.state.loadedRelations.keys()].join(', ') + \".\";\r\n        onDone(lang.loadRelationNew + \"\\n\" + msgPart2);\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    private handleLoadAllRelations = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        let loaded: number = 0;\r\n        let skipped: number = 0;\r\n        this.state.storedRelations.forEach(sr => {\r\n            if (sr.isValid()) {\r\n                sr.setActual(true);\r\n                this.state.loadedRelations.set(sr.getName(), sr.createRelation());\r\n                ++loaded;\r\n            }\r\n            else {\r\n                ++skipped;\r\n            }\r\n        });\r\n        const msgPart2: string = this.state.loadedRelations.size === 0 ? lang.loadedRelationsTotalNo :\r\n            this.state.loadedRelations.size + lang.loadedRelationsTotalSome + [...this.state.loadedRelations.keys()].join(', ') + \".\";\r\n        onDone(loaded + lang.loadAllRelationsNew[0] + skipped + lang.loadAllRelationsNew[1] + \"\\n\" + msgPart2);\r\n        // forces update\r\n        this.setState({}, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /****************************************** EXPRESSION SECTION HANDLERS ******************************************/\r\n\r\n    private updateExpressionsErrors = (): void => {\r\n        const expressionSection = this.expressionSectionRef.current;\r\n        if (expressionSection !== null) {\r\n            expressionSection.updateErrors();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves evaluation tree for the evaluated RA expression.\r\n     */\r\n    private handleExprEval = (tree: RATreeNode): void => {\r\n        this.setState({\r\n            evaluationTreeRoot: tree,\r\n            evaluatedExpressionName: this.state.expressions[this.state.selectedExpression].name\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the text of the current expression and sets it as not actual.\r\n     */\r\n    private handleExprTextChange = (name: string, text: string): void => {\r\n        this.setState(state => {\r\n            let expressions: Expression[] = state.expressions;\r\n            expressions[state.selectedExpression] = {name: name, text: text};\r\n            return { expressions: expressions }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Selects a new expression from the expression list as the current one.\r\n     */\r\n    private handleSelectDifferentExpression = (newIndex: number): void => {\r\n        this.setState({ selectedExpression: newIndex }, this.updateExpressionsErrors);\r\n    }\r\n\r\n    /**\r\n     * Creates a new empty expression and adds it in the expression list.\r\n     */\r\n    private handleCreateNewExpression = (): void => {\r\n        // inserts a new empty expression in the array\r\n        const newIndex: number = this.state.selectedExpression + 1;\r\n        this.state.expressions.splice(newIndex, 0, {name: \"New expression\", text: \"\"});\r\n        this.setState({selectedExpression: newIndex});\r\n    }\r\n\r\n    /**\r\n     * Deletes the current expression from the expression list (or clears it if it is the last expression in the list).\r\n     */\r\n    private handleDeleteExpression = (onDone: () => void): void => {\r\n        // if there is the last expression, only clears it\r\n        if (this.state.expressions.length === 1) {\r\n            return this.handleExprTextChange(\"Expression 1\", \"\");\r\n        }\r\n        const selected: number = this.state.selectedExpression;\r\n        this.state.expressions.splice(selected, 1);\r\n        if (selected === this.state.expressions.length) {\r\n            this.setState({selectedExpression: selected - 1}, onDone);\r\n        }\r\n        else {\r\n            // forces update\r\n            this.setState({}, onDone);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the expression list in a textual file.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleExportExpressions = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        try {\r\n            ExpressionStoreManager.save(this.state.expressions, 'expressions');\r\n            onDone(lang.expressionsExportOK);\r\n        }\r\n        catch (err) {\r\n            onDone(lang.expressionsExportErr + err.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads the expression list from the textual file selected by the user.\r\n     *\r\n     * @param onDone\r\n     */\r\n    private handleImportExpressions = (onDone: (msg: string) => void): void => {\r\n        const lang = this.state.language.userMessages;\r\n        ExpressionStoreManager.load().then(info => {\r\n            this.state.expressions.push(...info.expressions);\r\n            this.setState({});\r\n            onDone(info.expressions.length + lang.expressionsImport[0] + info.loadedFiles + lang.expressionsImport[1] +\r\n                + info.skippedExpressions + lang.expressionsImport[2] + info.skippedFiles + lang.expressionsImport[3]);\r\n        });\r\n    }\r\n\r\n    /******************************************** RESULT SECTION HANDLERS ********************************************/\r\n\r\n    /**\r\n     * Adds the given relation to defined relations.\r\n     *\r\n     * @return message and its color (red for errors, black for information)\r\n     */\r\n    private addResultRelation = (relation: Relation): void => {\r\n        const name = this.ensureUniqueRelationName(\"Evaluated\");\r\n        const storedRelation = StoredRelation.fromRelation(name, relation, this.state.nullValuesSupport);\r\n        this.state.storedRelations.push(storedRelation);\r\n        this.setState({selectedRelation: this.state.storedRelations.length - 1});\r\n    }\r\n\r\n    /***************************************************** RENDER *****************************************************/\r\n\r\n    public render() {\r\n        let resultSection = null;\r\n        if (this.state.evaluationTreeRoot !== null) {\r\n            resultSection = (\r\n                <ResultSection\r\n                    evaluationTreeRoot={this.state.evaluationTreeRoot}\r\n                    expressionName={this.state.evaluatedExpressionName}\r\n\r\n                    onAddResult={this.addResultRelation}\r\n                    onUnexpectedError={this.reportUnexpectedError}\r\n\r\n                    csvValueSeparator={this.state.csvValueSeparator}\r\n                    darkTheme={this.state.darkTheme}\r\n                    language={this.state.language}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <main>\r\n                <ManagementSection\r\n                    onBatch={this.handleBatch}\r\n                    onLoadProject={this.handleLoadProject}\r\n                    onSaveProject={this.handleSaveProject}\r\n                    onLoadSample={this.handleLoadSampleProject}\r\n\r\n                    csvValueSeparator={this.state.csvValueSeparator}\r\n                    language={this.state.language}\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                    darkTheme={this.state.darkTheme}\r\n\r\n                    onCsvValueSeparatorChange={this.handleCsvValueSeparatorChange}\r\n                    onLanguageChange={this.handleLanguageChange}\r\n                    onNullValuesSupportChange={this.handleNullValuesSupportChange}\r\n                    onDarkModeChange={this.handleDarkModeChange}\r\n                />\r\n\r\n                <RelationsSection\r\n                    storedRelations={this.state.storedRelations}\r\n                    storedRelationIndex={this.state.selectedRelation}\r\n\r\n                    loadedRelations={[...this.state.loadedRelations.values()]}\r\n\r\n                    onRelationNameChange={this.handleRelationNameChange}\r\n                    onColumnNameChange={this.handleRelationColumnNameChange}\r\n                    onColumnTypeChange={this.handleRelationColumnTypeChange}\r\n                    onRowInputChange={this.handleRelationRowInputChange}\r\n                    onNewRow={this.handleRelationNewRow}\r\n                    onNewColumn={this.handleRelationNewColumn}\r\n                    onDeleteRow={this.handleRelationDeleteRow}\r\n                    onDeleteColumn={this.handleRelationDeleteColumn}\r\n\r\n                    onSelectDifferentRelation={this.handleSelectDifferentRelation}\r\n                    onNewRelation={this.handleCreateNewRelation}\r\n                    onLoadRelation={this.handleLoadRelation}\r\n                    onDeleteStoredRelation={this.handleDeleteRelation}\r\n                    onRevertRelation={this.handleRevertRelation}\r\n\r\n                    onLoadAllRelations={this.handleLoadAllRelations}\r\n                    onDeleteLoadedRelations={this.handleDeleteLoadedRelations}\r\n                    onExportRelations={this.handleExportRelations}\r\n                    onImportRelations={this.handleImportRelations}\r\n\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                    language={this.state.language}\r\n                />\r\n\r\n                <ExpressionSection\r\n                    ref={this.expressionSectionRef}\r\n\r\n                    expressions={this.state.expressions}\r\n                    currentExpressionIndex={this.state.selectedExpression}\r\n                    relations={this.state.loadedRelations}\r\n\r\n                    onChange={this.handleExprTextChange}\r\n                    onEval={this.handleExprEval}\r\n\r\n                    onSelectDifferentExpression={this.handleSelectDifferentExpression}\r\n                    onNewExpression={this.handleCreateNewExpression}\r\n                    onDeleteExpression={this.handleDeleteExpression}\r\n                    onExportExpressions={this.handleExportExpressions}\r\n                    onImportExpressions={this.handleImportExpressions}\r\n\r\n                    onUnexpectedError={this.reportUnexpectedError}\r\n                    nullValuesSupport={this.state.nullValuesSupport}\r\n                    darkTheme={this.state.darkTheme}\r\n                    language={this.state.language}\r\n                />\r\n\r\n                {resultSection}\r\n            </main>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport MainScreen from \"./components/mainScreen\";\r\n\r\n/**\r\n * @license The software is Licensed under the MIT License\r\n *\r\n * Copyright (c) Lukáš Kotlík\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\r\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\r\n * to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions\r\n * of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\r\n * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n * DEALINGS IN THE SOFTWARE.\r\n *\r\n * ********* Used, Licensed third party code: *********\r\n *\r\n * JSZIP - Create, read and edit .zip files with Javascript\r\n * Version: 3.5.0\r\n * https://github.com/Stuk/jszip\r\n * MIT License - Copyright (c) 2009-2016 Stuart Knightley, David Duponchel, Franz Buchinger, António Afonso\r\n *\r\n * visx - visualization components\r\n * visx/group - version: 1.0.0\r\n * visx/hierarchy - version: 1.0.0\r\n * visx/shape - version: 1.4.0\r\n * visx/responsive - version: 1.3.0\r\n * visx/tooltip - version: 1.3.0\r\n * https://github.com/airbnb/visx\r\n * MIT License - Copyright (c) 2017-2018 Harrison Shoff\r\n *\r\n * export-svg-with-styles - Turn your SVGs to PNGs\r\n * Version: 0.0.4\r\n * https://www.npmjs.com/package/export-svg-with-styles\r\n * MIT License - Copyright (c) 2019 Mathew Leland\r\n *\r\n * FileSaver.js - An HTML5 saveAs() FileSaver implementation\r\n * Version: 2.0.5\r\n * https://github.com/eligrey/FileSaver.js\r\n * MIT License - Copyright (c) 2016 Eli Grey\r\n *\r\n * Lodash - A modern JavaScript utility library delivering modularity, performance, & extras.\r\n * Version: 4.17.20\r\n * https://github.com/lodash/lodash\r\n * MIT License - Copyright JS Foundation and other contributors <https://js.foundation/>\r\n * Based on Underscore.js, copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors <http://underscorejs.org/>\r\n * This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/lodash/lodash\r\n *\r\n * React - A declarative, efficient, and flexible JavaScript library for building user interfaces.\r\n * Version: 16.13.1\r\n * https://github.com/facebook/react\r\n * MIT License - Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * Jest - Delightful JavaScript Testing.\r\n * Version: 26.6.0\r\n * https://github.com/facebook/jest\r\n * MIT License - Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * create-react-app - Set up a modern web app by running one command.\r\n * Version: 3.4.1\r\n * https://github.com/facebook/create-react-app\r\n * MIT License - Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * TypeScript - TypeScript is a superset of JavaScript that compiles to clean JavaScript output.\r\n * Version: 3.7.5\r\n * https://github.com/microsoft/TypeScript\r\n * Apache License 2.0\r\n *\r\n * ********* Used, not Licensed, free to use code and services: *********\r\n *\r\n * PostMail - Send email from JavaScript or static HTML without backend code\r\n * https://postmail.invotes.com/\r\n */\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <MainScreen/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}